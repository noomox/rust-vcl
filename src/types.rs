/*
    The code is automatically generated by the genBind tool.
    Author: ying32
    https://github.com/ying32
*/

#![allow(non_snake_case)]
#![allow(improper_ctypes)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]
#![allow(non_upper_case_globals)]


use std::os::raw::c_char;


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TPoint {
    pub x: i32,
    pub y: i32,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TRect {
    pub left: i32,
    pub top: i32,
    pub right: i32,
    pub bottom: i32,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TSize {
    pub cx: i32,
    pub cy: i32,
}

pub type HWND = usize;
pub type HBITMAP = usize;
pub type HMENU = usize;
pub type HICON = usize;
pub type HDC = usize;
pub type HFONT = usize;
pub type HBRUSH = usize;
pub type HPEN = usize;
pub type HKEY = usize;
pub type HMONITOR = usize;
pub type HGDIOBJ = usize;
pub type HMODULE = usize;
pub type COLORREF = u32;
pub type DWORD = u32;
pub type HCURSOR = HICON;
pub type HINST = usize;
pub type LPCWSTR = usize;
pub type HRGN = usize;
pub type UINT = u32;
pub type LPARAM = usize;
pub type WPARAM = usize;
pub type LRESULT = usize;
pub type HResult = usize;
pub type HPALETTE = usize;
pub type HRSRC = usize;
pub type HGLOBAL = usize;
pub type TFNWndEnumProc = usize;
pub type TXID = u64;
pub type ATOM = u16;
pub type TAtom = u16;
pub type SIZE_T = usize;
pub type TSet = u32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TMsg {
    pub hwnd: HWND,
    pub message: u32,
    pub wParam: usize,
    pub lParam: usize,
    pub time: u32,
    pub pt: TPoint,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TCursorInfo {
    pub cbSize: u32,
    pub flags: u32,
    pub hCursor: HCURSOR,
    pub ptScreenPos: TPoint,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TWndClass {
    pub style: u32,
    pub lpfnWndProc: usize,
    pub cbClsExtra: i32,
    pub cbWndExtra: i32,
    pub hInstance: usize,
    pub hIcon: HICON,
    pub hCursor: HCURSOR,
    pub hbrBackground: HBRUSH,
    pub lpszMenuName: LPCWSTR,
    pub lpszClassName: LPCWSTR,
}

pub type TModalResult = i32;
pub type TColor = u32;
pub type THelpEventData = usize;
pub type TTabOrder = i16;
pub type PFNLVCOMPARE = usize;
pub type PFNTVCOMPARE = usize;
pub type Integer = i32;
pub type Cardinal = u32;
pub type Single = f32;
pub type Word = u16;
pub type Byte = u8;
pub type TFontCharset = u8;
pub type TSpacingSize = i32;
pub type Char = u16;
pub type TClass = usize;
pub type TThreadID = usize;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TGridCoord {
    pub x: i32,
    pub y: i32,
}

pub type TCustomData = usize;
pub type TGridRect = TRect;
pub type IObjectArray = usize;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TSysLocale {
    pub defaultLCID: i32,
    pub priLangID: i32,
    pub subLangID: i32,
    pub farEast: bool,
    pub middleEast: bool,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TSmallPoint {
    pub x: i16,
    pub y: i16,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TGUID {
    pub d1: u32,
    pub d2: u16,
    pub d3: u16,
    pub d4: [u8;8],
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TLibResource {
    pub name: *const c_char,
    pub ptr: usize,
}


#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TResItem {
    pub name: usize,
    pub value: usize,
}

pub type TConstraintSize = i32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TAlignInfo {
    pub alignList: usize,
    pub controlIndex: i32,
    pub align: TAlign,
    pub scratch: i32,
}



#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAlign {
    alNone,
    alTop,
    alBottom,
    alLeft,
    alRight,
    alClient,
    alCustom,
}

// set of TAlign
pub type TAlignSet = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBorderStyle {
    bsNone,
    bsSingle,
    bsSizeable,
    bsDialog,
    bsToolWindow,
    bsSizeToolWin,
}

pub type TFormBorderStyle = TBorderStyle;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFormStyle {
    fsNormal,
    fsMDIChild,
    fsMDIForm,
    fsStayOnTop,
    fsSplash,
    fsSystemStayOnTop,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPosition {
    poDesigned, // use bounds from the designer (read from stream)
    poDefault, // LCL decision (normally window manager decides)
    poDefaultPosOnly, // designed size and LCL position
    poDefaultSizeOnly, // designed position and LCL size
    poScreenCenter, // center form on screen (depends on DefaultMonitor)
    poDesktopCenter, // center form on desktop (total of all screens)
    poMainFormCenter, // center form on main form (depends on DefaultMonitor)
    poOwnerFormCenter, // center form on owner form (depends on DefaultMonitor)
    poWorkAreaCenter, // center form on working area (depends on DefaultMonitor)
}

pub type TCursor = i16;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSeekOrigin {
    soBeginning,
    soCurrent,
    soEnd,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPixelFormat {
    pfDevice,
    pf1bit,
    pf4bit,
    pf8bit,
    pf15bit,
    pf16bit,
    pf24bit,
    pf32bit,
    pfCustom,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAlignment {
    taLeftJustify,
    taRightJustify,
    taCenter,
}

pub type TLeftRight = i32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBiDiMode {
    bdLeftToRight,
    bdRightToLeft,
    bdRightToLeftNoAlign,
    bdRightToLeftReadingOnly,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TVerticalAlignment {
    taAlignTop,
    taAlignBottom,
    taVerticalCenter,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TComboBoxStyle {
    csDropDown, // like an TEdit plus a button to drop down the list, default
    csSimple, // like an TEdit plus a TListBox
    csDropDownList, // like TLabel plus a button to drop down the list
    csOwnerDrawFixed, // like csDropDownList, but custom drawn
    csOwnerDrawVariable, // like csDropDownList, but custom drawn and with each item can have another height
    csOwnerDrawEditableFixed, // like csOwnerDrawFixed, but with TEdit
    csOwnerDrawEditableVariable, // like csOwnerDrawVariable, but with TEdit
}

pub type TColorBoxStyle = TComboBoxStyle;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TWindowState {
    wsNormal,
    wsMinimized,
    wsMaximized,
    wsFullScreen,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTextLayout {
    tlTop,
    tlCenter,
    tlBottom,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TEllipsisPosition {
    epNone,
    epPathEllipsis,
    epEndEllipsis,
    epWordEllipsis,
}

pub type TLinkAlignment = TAlignment;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TListBoxStyle {
    lbStandard,
    lbOwnerDrawFixed,
    lbOwnerDrawVariable,
    lbVirtual,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPopupAlignment {
    paLeft,
    paRight,
    paCenter,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTrackButton {
    tbRightButton,
    tbLeftButton,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TProgressBarOrientation {
    pbHorizontal,
    pbVertical,
    pbRightToLeft,
    pbTopDown,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TProgressBarStyle {
    pbstNormal,
    pbstMarquee,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TProgressBarState {
    pbsNormal,
    pbsError,
    pbsPaused,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TButtonLayout {
    blGlyphLeft,
    blGlyphRight,
    blGlyphTop,
    blGlyphBottom,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TButtonState {
    bsUp, // button is up
    bsDisabled, // button disabled (grayed)
    bsDown, // button is down
    bsExclusive, // button is the only down in his group
    bsHot, // button is under mouse
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TButtonStyle {
    bsAutoDetect,
    bsWin31,
    bsNew,
}

pub type TNumGlyphs = i32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TStaticBorderStyle {
    sbsNone,
    sbsSingle,
    sbsSunken,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFontStyle {
    fsBold,
    fsItalic,
    fsUnderline,
    fsStrikeOut,
}

// set of TFontStyle
pub type TFontStyles = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TScrollStyle {
    ssNone,
    ssHorizontal,
    ssVertical,
    ssBoth,
    ssAutoHorizontal,
    ssAutoVertical,
    ssAutoBoth,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSortType {
    stNone,
    stData,
    stText,
    stBoth,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TListArrangement {
    arAlignBottom,
    arAlignLeft,
    arAlignRight,
    arAlignTop,
    arDefault,
    arSnapToGrid,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TViewStyle {
    vsIcon,
    vsSmallIcon,
    vsList,
    vsReport,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TItemState {
    isNone,
    isCut,
    isDropHilited,
    isFocused,
    isSelected,
    isActivating,
}

// set of TItemState
pub type TItemStates = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TItemChange {
    ctText,
    ctImage,
    ctState,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TItemFind {
    ifData,
    ifPartialString,
    ifExactString,
    ifNearest,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSearchDirection {
    sdLeft,
    sdRight,
    sdAbove,
    sdBelow,
    sdAll,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TListHotTrackStyle {
    htHandPoint,
    htUnderlineCold,
    htUnderlineHot,
}

// set of TListHotTrackStyle
pub type TListHotTrackStyles = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TItemRequests {
    irText,
    irImage,
    irParam,
    irState,
    irIndent,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBrushStyle {
    bsSolid,
    bsClear,
    bsHorizontal,
    bsVertical,
    bsFDiagonal,
    bsBDiagonal,
    bsCross,
    bsDiagCross,
    bsImage,
    bsPattern,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPenStyle {
    psSolid,
    psDash,
    psDot,
    psDashDot,
    psDashDotDot,
    psinsideFrame,
    psPattern,
    psClear,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TUDBtnType {
    btNext,
    btPrev,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTabPosition {
    tpTop,
    tpBottom,
    tpLeft,
    tpRight,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTabStyle {
    tsTabs,
    tsButtons,
    tsFlatButtons,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFontPitch {
    fpDefault,
    fpVariable,
    fpFixed,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPenMode {
    pmBlack,
    pmWhite,
    pmNop,
    pmNot,
    pmCopy,
    pmNotCopy,
    pmMergePenNot,
    pmMaskPenNot,
    pmMergeNotPen,
    pmMaskNotPen,
    pmMerge,
    pmNotMerge,
    pmMask,
    pmNotMask,
    pmXor,
    pmNotXor,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTrackBarOrientation {
    trHorizontal,
    trVertical,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TUDOrientation {
    udHorizontal,
    udVertical,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFontQuality {
    fqDefault,
    fqDraft,
    fqProof,
    fqNonAntialiased,
    fqAntialiased,
    fqClearType,
    fqClearTypeNatural,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCloseAction {
    caNone,
    caHide,
    caFree,
    caMinimize,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBalloonFlags {
    bfNone,
    bfInfo,
    bfWarning,
    bfError,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMsgDlgType {
    mtWarning,
    mtError,
    mtInformation,
    mtConfirmation,
    mtCustom,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMsgDlgBtn {
    mbYes,
    mbNo,
    mbOK,
    mbCancel,
    mbAbort,
    mbRetry,
    mbIgnore,
    mbAll,
    mbNoToAll,
    mbYesToAll,
    mbHelp,
    mbClose,
}

// set of TMsgDlgBtn
pub type TMsgDlgButtons = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSysLinkType {
    sltURL,
    sltID,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TStatusPanelStyle {
    psText,
    psOwnerDraw,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TJPEGPerformance {
    jpBestQuality,
    jpBestSpeed,
}

pub type TJPEGPixelFormat = TPixelFormat;

pub type TShortCut = u16;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TNodeState {
    nsCut,
    nsDropHilite, // = Node.DropTarget
    nsFocused, // = Node.Focused
    nsSelected, // = Node.Selected
    nsMultiSelected, // = Node.MultiSelected
    nsExpanded, // = Node.Expanded
    nsHasChildren, // = Node.HasChildren
    nsDeleting, // = Node.Deleting, set on Destroy
    nsVisible, // = Node.Visible
    nsBound, // bound to a tree, e.g. has Parent or is top lvl node
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TNodeAttachMode {
    naAdd, // add as last sibling of Destination
    naAddFirst, // add as first sibling of Destination
    naAddChild, // add as last child of Destination
    naAddChildFirst, // add as first child of Destination
    naInsert, // insert in front of Destination
    naInsertBehind, // insert behind Destination
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAddMode {
    taAddFirst,
    taAdd,
    taInsert,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMultiSelectStyles {
    msControlSelect,
    msShiftSelect,
    msVisibleOnly,
    msSiblingOnly,
}

// set of TMultiSelectStyles
pub type TMultiSelectStyle = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TActionListState {
    asNormal,
    asSuspended,
    asSuspendedEnabled,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGradientDirection {
    gdHorizontal,
    gdVertical,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDrawingStyle {
    dSFocus,
    dSSelected,
    dSNormal,
    dSTransparent,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TImageType {
    itImage,
    itMask,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TResType {
    rtBitmap,
    rtCursor,
    rtIcon,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TLoadResource {
    lrDefaultColor,
    lrDefaultSize,
    lrFromFile,
    lrMap3DColors,
    lrTransparent,
    lrMonoChrome,
}

// set of TLoadResource
pub type TLoadResources = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TColorDepth {
    cdDefault,
    cdDeviceDependent,
    cd4Bit,
    cd8Bit,
    cd16Bit,
    cd24Bit,
    cd32Bit,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCheckBoxState {
    cbUnchecked,
    cbChecked,
    cbGrayed,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TToolButtonStyle {
    tbsButton, // button (can be clicked)
    tbsCheck, // check item (click to toggle state, can be grouped)
    tbsDropDown, // button with dropdown button to show a popup menu
    tbsSeparator, // space holder
    tbsDivider, // space holder with line
    tbsButtonDrop, // button with arrow (not separated from each other)
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTBGradientDrawingOption {
    gdoHotTrack,
    gdoGradient,
}

// set of TTBGradientDrawingOption
pub type TTBGradientDrawingOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TColorDialogOption {
    cdFullOpen,
    cdPreventFullOpen,
    cdShowHelp,
    cdSolidColor,
    cdAnyColor,
}

// set of TColorDialogOption
pub type TColorDialogOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBorderIcon {
    biSystemMenu,
    biMinimize,
    biMaximize,
    biHelp,
}

// set of TBorderIcon
pub type TBorderIcons = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFontDialogOption {
    fdAnsiOnly,
    fdTrueTypeOnly,
    fdEffects,
    fdFixedPitchOnly,
    fdForceFontExist,
    fdNoFaceSel,
    fdNoOEMFonts,
    fdNoSimulations,
    fdNoSizeSel,
    fdNoStyleSel,
    fdNoVectorFonts,
    fdShowHelp,
    fdWysiwyg,
    fdLimitSize,
    fdScalableOnly,
    fdApplyButton,
}

// set of TFontDialogOption
pub type TFontDialogOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TOpenOption {
    ofReadOnly,
    ofOverwritePrompt, // if selected file exists shows a message, that file
    ofHideReadOnly, // hide read only file
    ofNoChangeDir, // do not change current directory
    ofShowHelp, // show a help button
    ofNoValidate,
    ofAllowMultiSelect, // allow multiselection
    ofExtensionDifferent,
    ofPathMustExist, // shows an error message if selected path does not exist
    ofFileMustExist, // shows an error message if selected file does not exist
    ofCreatePrompt,
    ofShareAware,
    ofNoReadOnlyReturn, // do not return filenames that are readonly
    ofNoTestFileCreate,
    ofNoNetworkButton,
    ofNoLongNames,
    ofOldStyleDialog,
    ofNoDereferenceLinks, // do not resolve links while dialog is shown (only on Windows, see OFN_NODEREFERENCELINKS)
    ofNoResolveLinks, // do not resolve links after Execute
    ofEnableIncludeNotify,
    ofEnableSizing, // dialog can be resized, e.g. via the mouse
    ofDontAddToRecent, // do not add the path to the history list
    ofForceShowHidden, // show hidden files
    ofViewDetail, // details are OS and interface dependent
    ofAutoPreview, // details are OS and interface dependent
}

// set of TOpenOption
pub type TOpenOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TOpenOptionEx {
    ofExNoPlacesBar,
}

// set of TOpenOptionEx
pub type TOpenOptionsEx = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrintRange {
    prAllPages,
    prSelection,
    prPageNums,
    prCurrentPage,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrintDialogOption {
    poPrintToFile,
    poPageNums,
    poSelection,
    poWarning,
    poHelp,
    poDisablePrintToFile,
    poBeforeBeginDoc,
}

// set of TPrintDialogOption
pub type TPrintDialogOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPageSetupDialogOption {
    psoDefaultMinMargins,
    psoDisableMargins,
    psoDisableOrientation,
    psoDisablePagePainting,
    psoDisablePaper,
    psoDisablePrinter,
    psoMargins,
    psoMinMargins,
    psoShowHelp,
    psoWarning,
    psoNoNetworkButton,
}

// set of TPageSetupDialogOption
pub type TPageSetupDialogOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrinterKind {
    pkDotMatrix,
    pkHPPCL,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPageType {
    ptEnvelope,
    ptPaper,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPageMeasureUnits {
    pmDefault,
    pmMillimeters,
    pmInches,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TStringsOption {
    soStrictDelimiter,
    soWriteBOM,
    soTrailingLineBreak,
    soUseLocale,
}

// set of TStringsOption
pub type TStringsOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TShiftStateEnum {
    ssShift,
    ssAlt,
    ssCtrl,
    ssLeft,
    ssRight,
    ssMiddle,
    ssDouble,
    ssMeta,
    ssSuper,
    ssHyper,
    ssAltGr,
    ssCaps,
    ssNum,
    ssScroll,
    ssTriple,
    ssQuad,
    ssExtra1,
    ssExtra2,
}

// set of TShiftStateEnum
pub type TShiftState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMouseButton {
    mbLeft,
    mbRight,
    mbMiddle,
    mbExtra1,
    mbExtra2,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFillStyle {
    fsSurface,
    fsBorder,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFillMode {
    fmAlternate,
    fmWinding,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCanvasStates {
    csHandleValid,
    csFontValid,
    csPenValid,
    csBrushValid,
    csRegionValid,
}

// set of TCanvasStates
pub type TCanvasState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCanvasOrientation {
    coLeftToRight,
    coRightToLeft,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTextFormats {
    tfBottom,
    tfCalcRect,
    tfCenter,
    tfEditControl,
    tfEndEllipsis,
    tfPathEllipsis,
    tfExpandTabs,
    tfExternalLeading,
    tfLeft,
    tfModifyString,
    tfNoClip,
    tfNoPrefix,
    tfRight,
    tfRtlReading,
    tfSingleLine,
    tfTop,
    tfVerticalCenter,
    tfWordBreak,
    tfHidePrefix,
    tfNoFullWidthCharBreak,
    tfPrefixOnly,
    tfTabStop,
    tfWordEllipsis,
    tfComposited,
}

// set of TTextFormats
pub type TTextFormat = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBevelCut {
    bvNone,
    bvLowered,
    bvRaised,
    bvSpace,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBevelEdge {
    beLeft,
    beTop,
    beRight,
    beBottom,
}

// set of TBevelEdge
pub type TBevelEdges = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBevelKind {
    bkNone,
    bkTile,
    bkSoft,
    bkFlat,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTickMark {
    tmBottomRight,
    tmTopLeft,
    tmBoth,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTickStyle {
    tsNone,
    tsAuto,
    tsManual,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPositionToolTip {
    ptNone,
    ptTop,
    ptLeft,
    ptBottom,
    ptRight,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDateTimeKind {
    dtkDate,
    dtkTime,
    dtkDateTime,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDTDateMode {
    dmComboBox,
    dmUpDown,
    dmNone,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDTDateFormat {
    dfShort,
    dfLong,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDTCalAlignment {
    dtaLeft,
    dtaRight,
    dtaDefault,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCalDayOfWeek {
    dowMonday,
    dowTuesday,
    dowWednesday,
    dowThursday,
    dowFriday,
    dowSaturday,
    dowSunday,
    dowLocaleDefault,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSearchType {
    stWholeWord,
    stMatchCase,
}

// set of TSearchType
pub type TSearchTypes = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TNumberingStyle {
    nsNone,
    nsBullte,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAttributeType {
    atSelected,
    atDefaultText,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TConsistentAttribute {
    caBold,
    caColor,
    caFace,
    caItalic,
    caSize,
    caStrikeOut,
    caUnderline,
    caProtected,
}

// set of TConsistentAttribute
pub type TConsistentAttributes = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TIconArrangement {
    iaTop,
    iaLeft,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum THeaderStyle {
    hsGradient,
    hsImage,
    hsThemed,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TImageAlignment {
    iiaLeft,
    iiaRight,
    iiaTop,
    iiaBottom,
    iiaCenter,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAnchorKind {
    akTop,
    akLeft,
    akRight,
    akBottom,
}

// set of TAnchorKind
pub type TAnchors = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TOwnerDrawStateType {
    odSelected,
    odGrayed,
    odDisabled,
    odChecked,
    odFocused,
    odDefault,
    odHotLight,
    odInactive,
    odNoAccel,
    odNoFocusRect,
    odReserved1,
    odReserved2,
    odComboBoxEdit,
    odBackgroundPainted, // item background already painted
}

// set of TOwnerDrawStateType
pub type TOwnerDrawState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBitBtnKind {
    bkCustom,
    bkOK,
    bkCancel,
    bkHelp,
    bkYes,
    bkNo,
    bkClose,
    bkAbort,
    bkRetry,
    bkIgnore,
    bkAll,
    bkNoToAll,
    bkYesToAll,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TScrollBarKind {
    sbHorizontal,
    sbVertical,
}

pub type TScrollBarInc = i16;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TScrollBarStyle {
    ssRegular,
    ssFlat,
    ssHotTrack,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TShapeType {
    stRectangle,
    stSquare,
    stRoundRect,
    stRoundSquare,
    stEllipse,
    stCircle,
    stSquaredDiamond,
    stDiamond,
    stTriangle,
    stTriangleLeft,
    stTriangleRight,
    stTriangleDown,
    stStar,
    stStarDown,
}

pub type TBevelStyle = i32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBevelShape {
    bsBox,
    bsFrame,
    bsTopLine,
    bsBottomLine,
    bsLeftLine,
    bsRightLine,
    bsSpacer,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGaugeKind {
    gkText,
    gkHorizontalBar,
    gkVerticalBar,
    gkPie,
    gkNeedle,
    gkHalfPie,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCustomDrawTarget {
    dtControl,
    dtItem,
    dtSubItem,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCustomDrawStage {
    cdPrePaint,
    cdPostPaint,
    cdPreErase,
    cdPostErase,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCustomDrawStateFlag {
    cdsSelected,
    cdsGrayed,
    cdsDisabled,
    cdsChecked,
    cdsFocused,
    cdsDefault,
    cdsHot,
    cdsMarked,
    cdsIndeterminate,
}

// set of TCustomDrawStateFlag
pub type TCustomDrawState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDisplayCode {
    drBounds,
    drIcon,
    drLabel,
    drSelectBounds,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSelectDirOpt {
    sdAllowCreate,
    sdPerformCreate,
    sdPrompt,
}

// set of TSelectDirOpt
pub type TSelectDirOpts = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFindOption {
    frDown,
    frFindNext,
    frHideMatchCase,
    frHideWholeWord,
    frHideUpDown,
    frMatchCase,
    frDisableMatchCase,
    frDisableUpDown,
    frDisableWholeWord,
    frReplace,
    frReplaceAll,
    frWholeWord,
    frShowHelp,
    frEntireScope,
    frHideEntireScope,
    frPromptOnReplace,
    frHidePromptOnReplace,
    frButtonsAtBottom,
}

// set of TFindOption
pub type TFindOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDragMode {
    dmManual,
    dmAutomatic,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDragState {
    dsDragEnter,
    dsDragLeave,
    dsDragMove,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDragKind {
    dkDrag,
    dkDock,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TEditCharCase {
    ecNormal,
    ecUpperCase,
    ecLowerCase,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TEdgeBorder {
    ebLeft,
    ebTop,
    ebRight,
    ebBottom,
}

// set of TEdgeBorder
pub type TEdgeBorders = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TEdgeStyle {
    esNone,
    esRaised,
    esLowered,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGridDrawingStyle {
    gdsClassic,
    gdsThemed,
    gdsGradient,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGridOption {
    goFixedVertLine,
    goFixedHorzLine,
    goVertLine,
    goHorzLine,
    goRangeSelect,
    goDrawFocusSelected,
    goRowSizing,
    goColSizing,
    goRowMoving,
    goColMoving,
    goEditing,
    goAutoAddRows,
    goTabs,
    goRowSelect,
    goAlwaysShowEditor,
    goThumbTracking,
    goColSpanning, // Enable cellextent calcs
    goRelaxedRowSelect, // User can see focused cell on goRowSelect
    goDblClickAutoSize, // dblclicking columns borders (on hdrs) resize col.
    goSmoothScroll, // Switch scrolling mode (pixel scroll is by default)
    goFixedRowNumbering, // Ya
    goScrollKeepVisible, // keeps focused cell visible while scrolling
    goHeaderHotTracking, // Header cells change look when mouse is over them
    goHeaderPushedLook, // Header cells looks pushed when clicked
    goSelectionActive, // Setting grid.Selection moves also cell cursor
    goFixedColSizing, // Allow to resize fixed columns
    goDontScrollPartCell, // clicking partially visible cells will not scroll
    goCellHints, // show individual cell hints
    goTruncCellHints, // show cell hints if cell text is too long
    goCellEllipsis, // show "..." if cell text is too long
    goAutoAddRowsSkipContentCheck, // BB Also add a row (if AutoAddRows in Options) if last row is empty
    goRowHighlight, // Highlight the current Row
}

// set of TGridOption
pub type TGridOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGridDrawStates {
    gdSelected,
    gdFocused,
    gdFixed,
    gdHot,
    gdPushed,
    gdRowHighlight,
}

// set of TGridDrawStates
pub type TGridDrawState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum THeaderSectionStyle {
    hsText,
    hsOwnerDraw,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TLabelPosition {
    lpAbove,
    lpBelow,
    lpLeft,
    lpRight,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TFlowStyle {
    fsLeftRightTopBottom,
    fsRightLeftTopBottom,
    fsLeftRightBottomTop,
    fsRightLeftBottomTop,
    fsTopBottomLeftRight,
    fsBottomTopLeftRight,
    fsTopBottomRightLeft,
    fsBottomTopRightLeft,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCoolBandMaximize {
    bmNone,
    bmClick,
    bmDblClick,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMenuBreak {
    mbNone,
    mbBreak,
    mbBarBreak,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSectionTrackState {
    tsTrackBegin,
    tsTrackMove,
    tsTrackEnd,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TControlStateType {
    csLButtonDown,
    csClicked,
    csPalette,
    csReadingState,
    csFocusing,
    csCreating, // not used, exists for Delphi compatibility
    csPaintCopy,
    csCustomPaint,
    csDestroyingHandle,
    csDocking,
    csVisibleSetInLoading,
}

// set of TControlStateType
pub type TControlState = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TControlStyleType {
    csAcceptsControls, // can have children in the designer
    csCaptureMouse, // auto capture mouse when clicked
    csDesignInteractive, // wants mouse events in design mode
    csClickEvents, // handles mouse events
    csFramed, // not implemented, has 3d frame
    csSetCaption, // if Name=Caption, changing the Name changes the Caption
    csOpaque, // the control paints its area completely
    csDoubleClicks, // understands mouse double clicks
    csTripleClicks, // understands mouse triple clicks
    csQuadClicks, // understands mouse quad clicks
    csFixedWidth, // cannot change its width
    csFixedHeight, // cannot change its height (for example combobox)
    csNoDesignVisible, // is invisible in the designer
    csReplicatable, // PaintTo works
    csNoStdEvents, // standard events such as mouse, key, and click events are ignored.
    csDisplayDragImage, // display images from dragimagelist during drag operation over control
    csReflector, // not implemented, the controls respond to size, focus and dlg messages - it can be used as ActiveX control under Windows
    csActionClient, // Action is set
    csMenuEvents, // not implemented
    csNoFocus, // control will not take focus when clicked with mouse.
    csNeedsBorderPaint, // not implemented
    csParentBackground, // tells WinXP to paint the theme background of parent on controls background
    csDesignNoSmoothResize, // when resizing control in the designer do not SetBounds while dragging
    csDesignFixedBounds, // can not be moved nor resized in designer
    csHasDefaultAction, // implements useful ExecuteDefaultAction
    csHasCancelAction, // implements useful ExecuteCancelAction
    csNoDesignSelectable, // can not be selected at design time
    csOwnedChildrenNotSelectable, // child controls owned by this control are NOT selectable in the designer
    csAutoSize0x0, // if the preferred size is 0x0 then control is shrinked ot 0x0
    csAutoSizeKeepChildLeft, // when AutoSize=true do not move children horizontally
    csAutoSizeKeepChildTop, // when AutoSize=true do not move children vertically
    csRequiresKeyboardInput, // If the device has no physical keyboard then show the virtual keyboard when this control gets focus (therefore available only to TWinControl descendents)
}

// set of TControlStyleType
pub type TControlStyle = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMouseActivate {
    maDefault,
    maActivate,
    maActivateAndEat,
    maNoActivate,
    maNoActivateAndEat,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTaskBarProgressState {
    none,
    indeterminate,
    normal,
    error,
    paused,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TBitmapHandleType {
    bmDIB,
    bmDDB,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrinterState {
    psNoDefine,
    psReady,
    psPrinting,
    psStopped,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrinterOrientation {
    poPortrait,
    poLandscape,
    poReverseLandscape,
    poReversePortrait,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrinterCapability {
    pcCopies,
    pcOrientation,
    pcCollation,
}

// set of TPrinterCapability
pub type TPrinterCapabilities = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrinterType {
    ptLocal,
    ptNetWork,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TReadyState {
    rsUninitialized,
    rsLoading,
    rsLoaded,
    rsInterActive,
    rsComplete,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TStringEncoding {
    seUnknown,
    seANSI,
    seUnicode,
    seUTF8,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TShowInTaskbar {
    stDefault, // use default rules for showing taskbar item
    stAlways, // always show taskbar item for the form
    stNever, // never show taskbar item for the form
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTaskDialogCommonButton {
    tcbOk,
    tcbYes,
    tcbNo,
    tcbCancel,
    tcbRetry,
    tcbClose,
}

// set of TTaskDialogCommonButton
pub type TTaskDialogCommonButtons = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTaskDialogFlag {
    tfEnableHyperlinks,
    tfUseHiconMain,
    tfUseHiconFooter,
    tfAllowDialogCancellation,
    tfUseCommandLinks,
    tfUseCommandLinksNoIcon,
    tfExpandFooterArea,
    tfExpandedByDefault,
    tfVerificationFlagChecked,
    tfShowProgressBar,
    tfShowMarqueeProgressBar,
    tfCallbackTimer,
    tfPositionRelativeToWindow,
    tfRtlLayout,
    tfNoDefaultRadioButton,
    tfCanBeMinimized,
}

// set of TTaskDialogFlag
pub type TTaskDialogFlags = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTaskDialogIcon {
    tdiNone,
    tdiWarning,
    tdiError,
    tdiInformation,
    tdiShield,
    tdiQuestion,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TComboBoxExStyle {
    csExDropDown,
    csExSimple,
    csExDropDownList,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TComboBoxExStyleEx {
    csExCaseSensitive,
    csExNoEditImage,
    csExNoEditImageIndent,
    csExNoSizeLimit,
    csExPathWordBreak,
}

// set of TComboBoxExStyleEx
pub type TComboBoxExStyles = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAutoCompleteOption {
    acoAutoSuggest,
    acoAutoAppend,
    acoSearch,
    acoFilterPrefixes,
    acoUseTab,
    acoUpDownKeyDropsList,
    acoRtlReading,
}

// set of TAutoCompleteOption
pub type TAutoCompleteOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDefaultMonitor {
    dmDesktop,
    dmPrimary,
    dmMainForm,
    dmActiveForm,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTransparentMode {
    tmAuto,
    tmFixed,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDrawImageMode {
    dimNormal,
    dimCenter,
    dimStretch,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TListBoxOption {
    lboDrawFocusRect, // draw focus rect in case of owner drawing
}

// set of TListBoxOption
pub type TListBoxOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAntialiasingMode {
    amDontCare, // default antialiasing
    amOn, // enabled
    amOff, // disabled
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSortDirection {
    sdAscending,
    sdDescending,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTreeViewExpandSignType {
    tvestTheme, // use themed sign
    tvestPlusMinus, // use +/- sign
    tvestArrow, // use blank arrow
    tvestArrowFill, // use filled arrow
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTreeViewOption {
    tvoAllowMultiselect,
    tvoAutoExpand,
    tvoAutoInsertMark,
    tvoAutoItemHeight,
    tvoHideSelection,
    tvoHotTrack,
    tvoKeepCollapsedNodes,
    tvoReadOnly,
    tvoRightClickSelect,
    tvoRowSelect,
    tvoShowButtons,
    tvoShowLines,
    tvoShowRoot,
    tvoShowSeparators,
    tvoToolTips,
    tvoNoDoubleClickExpand,
    tvoThemedDraw,
}

// set of TTreeViewOption
pub type TTreeViewOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGlyphShowMode {
    gsmAlways, // always show
    gsmNever, // never show
    gsmApplication, // depends on application settings
    gsmSystem, // depends on system settings
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCTabControlOption {
    nboShowCloseButtons,
    nboMultiLine,
    nboHidePageListPopup,
    nboKeyboardTabSwitch,
    nboShowAddTabButton,
    nboDoChangeOnSetIndex,
}

// set of TCTabControlOption
pub type TCTabControlOptions = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAnchorSideReference {
    asrTop,
    asrBottom,
    asrCenter,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TControlCellAlign {
    ccaFill,
    ccaLeftTop,
    ccaRightBottom,
    ccaCenter,
}

// set of TControlCellAlign
pub type TControlCellAligns = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TChildControlResizeStyle {
    crsAnchorAligning, // (like Delphi)
    crsScaleChilds, // scale children equally, keep space between children fixed
    crsHomogenousChildResize, // enlarge children equally (i.e. by the same amount of pixel)
    crsHomogenousSpaceResize, // enlarge space between children equally
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TControlChildrenLayout {
    cclNone,
    cclLeftToRightThenTopToBottom, // if BiDiMode <> bdLeftToRight then it becomes RightToLeft
    cclTopToBottomThenLeftToRight,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TColumnLayout {
    clHorizontalThenVertical,
    clVerticalThenHorizontal,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSortIndicator {
    siNone,
    siAscending,
    siDescending,
}

pub type TLibType = i32;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TColumnButtonStyle {
    cbsAuto,
    cbsEllipsis,
    cbsNone,
    cbsPickList,
    cbsCheckboxColumn,
    cbsButton,
    cbsButtonColumn,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGridZone {
    gzNormal,
    gzFixedCols,
    gzFixedRows,
    gzFixedCells,
    gzInvalid,
}

// set of TGridZone
pub type TGridZoneSet = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TSortOrder {
    soAscending,
    soDescending,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TAutoAdvance {
    aaNone,
    aaDown,
    aaRight,
    aaLeft,
    aaRightDown,
    aaLeftDown,
    aaRightUp,
    aaLeftUp,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TCellHintPriority {
    chpAll,
    chpAllNoDefault,
    chpTruncOnly,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TMouseWheelOption {
    mwCursor,
    mwGrid,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TGridOption2 {
    goScrollToLastCol, // allow scrolling to last column (so that last column can be leftcol)
    goScrollToLastRow, // allow scrolling to last row (so that last row can be toprow)
}

// set of TGridOption2
pub type TGridOptions2 = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TRangeSelectMode {
    rsmSingle,
    rsmMulti,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTitleStyle {
    tsLazarus,
    tsStandard,
    tsNative,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TPrefixOption {
    poNone,
    poHeaderClick,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDisplaySetting {
    dsShowHeadings,
    dsShowDayNames,
    dsNoMonthChange,
    dsShowWeekNumbers,
    dsStartMonday,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTimeFormat {
    tf12, // 12 hours format, with am/pm string
    tf24, // 24 hours format
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TTimeDisplay {
    tdHM, // hour and minute
    tdHMS, // hour Minute and second
    tdHMSMs, // hour Minute Second and milisecond
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TArrowShape {
    asClassicSmaller,
    asClassicLarger,
    asModernSmaller,
    asModernLarger,
    asYetAnotherShape,
    asTheme,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDateDisplayOrder {
    ddoDMY,
    ddoMDY,
    ddoYMD,
    ddoTryDefault,
}

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDateTimePart {
    dtpDay,
    dtpMonth,
    dtpYear,
    dtpHour,
    dtpMinute,
    dtpSecond,
    dtpMiliSec,
    dtpAMPM,
}

// set of TDateTimePart
pub type TDateTimeParts = TSet;

#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub enum TDateTimePickerOption {
    dtpoDoChangeOnSetDateTime,
    dtpoEnabledIfUnchecked,
    dtpoAutoCheck,
    dtpoFlatButton,
}

// set of TDateTimePickerOption
pub type TDateTimePickerOptions = TSet;


#[cfg(not(target_arch = "x86"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
struct TDWordFiller {
}


#[cfg(not(target_arch = "x86"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TWMKey {
      pub msg: u32,
      msgFiller: TDWordFiller,
      pub charCode: [u16;2],
      charCodeUnusedFiller: TDWordFiller,
      pub keyData: u32,
      keyDataFiller: TDWordFiller,
      pub result: usize,
}


#[cfg(not(target_arch = "x86_64"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
struct TDWordFiller {
      pub filler: [u8;4],
}


#[cfg(not(target_arch = "x86_64"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TWMKey {
      pub msg: u32,
      msgFiller: TDWordFiller,
      pub charCode: [u16;2],
      charCodeUnusedFiller: TDWordFiller,
      pub keyData: u32,
      keyDataFiller: TDWordFiller,
      pub result: usize,
}


#[cfg(not(target_arch = "x86"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TMessage {
      pub msg: u32,
      pub wParam: WPARAM,
      pub lParam: LPARAM,
      pub result: LRESULT,
}


#[cfg(not(target_arch = "x86_64"))]
#[repr(C)]
#[derive(PartialEq, Debug, Clone)]
pub struct TMessage {
      pub msg: u32,
      _UnusedMsg: u32,
      pub wParam: WPARAM,
      pub lParam: LPARAM,
      pub result: LRESULT,
}

#[cfg(target_os = "linux")]
pub type PGdkWindow = usize;
//#[cfg(target_os = "linux")]
//pub type TXId = usize;
#[cfg(target_os = "linux")]
pub type PGtkFixed = usize;


#[cfg(target_os = "macos")]
pub type MyNSWindow = usize;




// fn (&self, sender: usize)
pub type TNotifyEvent<T> = fn(T, usize);

// fn (&self, sender: usize, button: TUDBtnType)
pub type TUDClickEvent<T> = fn(T, usize, TUDBtnType);

// fn (&self, sender: usize, action: *mut TCloseAction)
pub type TCloseEvent<T> = fn(T, usize, *mut TCloseAction);

// fn (&self, sender: usize, canClose: *mut bool)
pub type TCloseQueryEvent<T> = fn(T, usize, *mut bool);

// fn (&self, sender: usize, source: usize, rebuild: bool)
pub type TMenuChangeEvent<T> = fn(T, usize, usize, bool);

// fn (&self, sender: usize, link: *const c_char, linkType: TSysLinkType)
pub type TSysLinkEvent<T> = fn(T, usize, *const c_char, TSysLinkType);

// fn (&self, sender: usize, e: usize)
pub type TExceptionEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, key: *mut Char, shift: TShiftState)
pub type TKeyEvent<T> = fn(T, usize, *mut Char, TShiftState);

// fn (&self, sender: usize, key: *mut Char)
pub type TKeyPressEvent<T> = fn(T, usize, *mut Char);

// fn (&self, sender: usize, button: TMouseButton, shift: TShiftState, x: i32, y: i32)
pub type TMouseEvent<T> = fn(T, usize, TMouseButton, TShiftState, i32, i32);

// fn (&self, sender: usize, shift: TShiftState, x: i32, y: i32)
pub type TMouseMoveEvent<T> = fn(T, usize, TShiftState, i32, i32);

// fn (&self, sender: usize, shift: TShiftState, wheelDelta: i32, x: i32, y: i32, handled: *mut bool)
pub type TMouseWheelEvent<T> = fn(T, usize, TShiftState, i32, i32, i32, *mut bool);

// fn (&self, control: usize, index: i32, aRect: *mut TRect, state: TOwnerDrawState)
pub type TDrawItemEvent<T> = fn(T, usize, i32, *mut TRect, TOwnerDrawState);

// fn (&self, sender: usize, aCanvas: usize, aRect: *mut TRect, selected: bool)
pub type TMenuDrawItemEvent<T> = fn(T, usize, usize, *mut TRect, bool);

// fn (&self, sender: usize, column: usize)
pub type TLVColumnClickEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, column: usize, point: *mut TPoint)
pub type TLVColumnRClickEvent<T> = fn(T, usize, usize, *mut TPoint);

// fn (&self, sender: usize, item: usize, selected: bool)
pub type TLVSelectItemEvent<T> = fn(T, usize, usize, bool);

// fn (&self, sender: usize, item: usize)
pub type TLVCheckedItemEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, item1: usize, item2: usize, data: i32, compare: *mut i32)
pub type TLVCompareEvent<T> = fn(T, usize, usize, usize, i32, *mut i32);

// fn (&self, sender: usize, item: usize, change: TItemChange)
pub type TLVChangeEvent<T> = fn(T, usize, usize, TItemChange);

// fn (&self, sender: usize, item: usize)
pub type TLVNotifyEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, aRect: *mut TRect, stage: TCustomDrawStage, defaultDraw: *mut bool)
pub type TLVAdvancedCustomDrawEvent<T> = fn(T, usize, *mut TRect, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, item: usize, state: TCustomDrawState, Stage: TCustomDrawStage, defaultDraw: *mut bool)
pub type TLVAdvancedCustomDrawItemEvent<T> = fn(T, usize, usize, TCustomDrawState, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, item: usize, subItem: i32, state: TCustomDrawState, stage: TCustomDrawStage, defaultDraw: *mut bool)
pub type TLVAdvancedCustomDrawSubItemEvent<T> = fn(T, usize, usize, i32, TCustomDrawState, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, node1: usize, node2: usize, data: i32, compare: *mut i32)
pub type TTVCompareEvent<T> = fn(T, usize, usize, usize, i32, *mut i32);

// fn (&self, sender: usize, node: usize)
pub type TTVExpandedEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, node: usize)
pub type TTVChangedEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, aRect: *mut TRect, stage: TCustomDrawStage, defaultDraw: *mut bool)
pub type TTVAdvancedCustomDrawEvent<T> = fn(T, usize, *mut TRect, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, node: usize, state: TCustomDrawState, stage: TCustomDrawStage, paintImages: *mut bool, defaultDraw: *mut bool)
pub type TTVAdvancedCustomDrawItemEvent<T> = fn(T, usize, usize, TCustomDrawState, TCustomDrawStage, *mut bool, *mut bool);

// fn (&self, sender: usize, tabIndex: i32, imageIndex: *mut i32)
pub type TTabGetImageEvent<T> = fn(T, usize, i32, *mut i32);

// fn (&self, sender: usize, aRect: *mut TRect, stage: TCustomDrawStage, defaultDraw: *mut bool)
pub type TTBAdvancedCustomDrawEvent<T> = fn(T, usize, *mut TRect, TCustomDrawStage, *mut bool);

// fn ()
pub type TThreadProc = fn();

// fn (&self, sender: usize, aFileNames: usize, len: isize)
pub type TDropFilesEvent<T> = fn(T, usize, usize, isize);

// fn (&self, sender: usize, minWidth: *mut i32, minHeight: *mut i32, maxWidth: *mut i32, maxHeight: *mut i32)
pub type TConstrainedResizeEvent<T> = fn(T, usize, *mut i32, *mut i32, *mut i32, *mut i32);

// fn (&self, command: u16, data: THelpEventData, callhelp: *mut bool, result: *mut bool)
pub type THelpEvent<T> = fn(T, u16, THelpEventData, *mut bool, *mut bool);

// fn (&self, msg: *mut TWMKey, handled: *mut bool)
pub type TShortCutEvent<T> = fn(T, *mut TWMKey, *mut bool);

// fn (&self, sender: usize, mousePos: *mut TPoint, handled: *mut bool)
pub type TContextPopupEvent<T> = fn(T, usize, *mut TPoint, *mut bool);

// fn (&self, sender: usize, source: usize, x: i32, y: i32, state: TDragState, accept: *mut bool)
pub type TDragOverEvent<T> = fn(T, usize, usize, i32, i32, TDragState, *mut bool);

// fn (&self, sender: usize, source: usize, x: i32, y: i32)
pub type TDragDropEvent<T> = fn(T, usize, usize, i32, i32);

// fn (&self, sender: usize, target: usize, x: i32, y: i32)
pub type TEndDragEvent<T> = fn(T, usize, usize, i32, i32);

// fn (&self, sender: usize, source: usize, x: i32, y: i32)
pub type TDockDropEvent<T> = fn(T, usize, usize, i32, i32);

// fn (&self, sender: usize, source: usize, x: i32, y: i32, state: TDragState, accept: *mut bool)
pub type TDockOverEvent<T> = fn(T, usize, usize, i32, i32, TDragState, *mut bool);

// fn (&self, sender: usize, client: usize, newTarget: usize, allow: *mut bool)
pub type TUnDockEvent<T> = fn(T, usize, usize, usize, *mut bool);

// fn (&self, sender: usize, dragObject: *mut usize)
pub type TStartDockEvent<T> = fn(T, usize, *mut usize);

// fn (&self, sender: usize, dockClient: usize, influenceRect: *mut TRect, mousePos: *mut TPoint, canDock: *mut bool)
pub type TGetSiteInfoEvent<T> = fn(T, usize, usize, *mut TRect, *mut TPoint, *mut bool);

// fn (&self, sender: usize, shift: TShiftState, mousePos: *mut TPoint, handled: *mut bool)
pub type TMouseWheelUpDownEvent<T> = fn(T, usize, TShiftState, *mut TPoint, *mut bool);

// fn (&self, sender: usize, isColumn: bool, sIndex: i32, tIndex: i32)
pub type TGridOperationEvent<T> = fn(T, usize, bool, i32, i32);

// fn (&self, sender: usize, aCol: i32, aRow: i32, aRect: *mut TRect, state: TGridDrawState)
pub type TDrawCellEvent<T> = fn(T, usize, i32, i32, *mut TRect, TGridDrawState);

// fn (&self, sender: usize, aCol: i32, aRow: i32)
pub type TFixedCellClickEvent<T> = fn(T, usize, i32, i32);

// fn (&self, sender: usize, aCol: i32, aRow: i32, value: *mut *const c_char)
pub type TGetEditEvent<T> = fn(T, usize, i32, i32, *mut *const c_char);

// fn (&self, sender: usize, aCol: i32, aRow: i32, canSelect: *mut bool)
pub type TSelectCellEvent<T> = fn(T, usize, i32, i32, *mut bool);

// fn (&self, sender: usize, aCol: i32, aRow: i32, value: *const c_char)
pub type TSetEditEvent<T> = fn(T, usize, i32, i32, *const c_char);

// fn (&self, headerControl: usize, section: usize, aRect: *mut TRect, pressed: bool)
pub type TDrawSectionEvent<T> = fn(T, usize, usize, *mut TRect, bool);

// fn (&self, headerControl: usize, section: usize)
pub type TSectionNotifyEvent<T> = fn(T, usize, usize);

// fn (&self, headerControl: usize, section: usize, width: i32, state: TSectionTrackState)
pub type TSectionTrackEvent<T> = fn(T, usize, usize, i32, TSectionTrackState);

// fn (&self, sender: usize, fromSection: usize, toSection: usize, allowDrag: *mut bool)
pub type TSectionDragEvent<T> = fn(T, usize, usize, usize, *mut bool);

// fn (&self, headerControl: usize, section: usize)
pub type TCustomSectionNotifyEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, button: TMouseButton, shift: TShiftState, x: i32, y: i32, hitTest: i32, mouseActivate: *mut TMouseActivate)
pub type TMouseActivateEvent<T> = fn(T, usize, TMouseButton, TShiftState, i32, i32, i32, *mut TMouseActivate);

// fn (&self, control: usize, index: i32, data: *mut *const c_char)
pub type TLBGetDataEvent<T> = fn(T, usize, i32, *mut *const c_char);

// fn (&self, control: usize, index: i32, dataObject: usize)
pub type TLBGetDataObjectEvent<T> = fn(T, usize, i32, usize);

// fn (&self, control: usize, findString: *const c_char, result: i32)
pub type TLBFindDataEvent<T> = fn(T, usize, *const c_char, i32);

// fn (&self, control: usize, index: i32, height: *mut i32)
pub type TMeasureItemEvent<T> = fn(T, usize, i32, *mut i32);

// fn (&self, sender: usize, item: usize, change: TItemChange, allowChange: *mut bool)
pub type TLVChangingEvent<T> = fn(T, usize, usize, TItemChange, *mut bool);

// fn (&self, sender: usize, item: usize)
pub type TLVOwnerDataEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, find: TItemFind, findString: *const c_char, findPosition: *mut TPoint, findData: TCustomData, startIndex: i32, direction: TSearchDirection, warp: bool, index: *mut i32)
pub type TLVOwnerDataFindEvent<T> = fn(T, usize, TItemFind, *const c_char, *mut TPoint, TCustomData, i32, TSearchDirection, bool, *mut i32);

// fn (&self, sender: usize, item: usize)
pub type TLVDeletedEvent<T> = fn(T, usize, usize);

// fn (&self, sender: usize, item: usize, allowEdit: *mut bool)
pub type TLVEditingEvent<T> = fn(T, usize, usize, *mut bool);

// fn (&self, sender: usize, item: usize, s: *mut *const c_char)
pub type TLVEditedEvent<T> = fn(T, usize, usize, *mut *const c_char);

// fn (&self, sender: usize, aCanvas: usize, width: *mut i32, height: *mut i32)
pub type TMenuMeasureItemEvent<T> = fn(T, usize, usize, *mut i32, *mut i32);

// fn (&self, sender: usize, allowChange: *mut bool)
pub type TTabChangingEvent<T> = fn(T, usize, *mut bool);

// fn (&self, sender: usize, node: usize, allowChange: *mut bool)
pub type TTVChangingEvent<T> = fn(T, usize, usize, *mut bool);

// fn (&self, sender: usize, node: usize, allowCollapse: *mut bool)
pub type TTVCollapsingEvent<T> = fn(T, usize, usize, *mut bool);

// fn (&self, sender: usize, node: usize, s: *mut *const c_char)
pub type TTVEditedEvent<T> = fn(T, usize, usize, *mut *const c_char);

// fn (&self, sender: usize, node: usize, allowEdit: *mut bool)
pub type TTVEditingEvent<T> = fn(T, usize, usize, *mut bool);

// fn (&self, sender: usize, node: usize, allowExpansion: *mut bool)
pub type TTVExpandingEvent<T> = fn(T, usize, usize, *mut bool);

// fn (&self, sender: usize, node: usize, hint: *mut *const c_char)
pub type TTVHintEvent<T> = fn(T, usize, usize, *mut *const c_char);

// fn (&self, sender: usize, allowChange: *mut bool)
pub type TUDChangingEvent<T> = fn(T, usize, *mut bool);

// fn (&self, sender: usize, winErrorCode: u32, errorDescription: *const c_char, handled: *mut bool)
pub type TCreatingListErrorEvent<T> = fn(T, usize, u32, *const c_char, *mut bool);

// fn (&self, sender: usize, aRect: *mut TRect, defaultDraw: *mut bool)
pub type TLVCustomDrawEvent<T> = fn(T, usize, *mut TRect, *mut bool);

// fn (&self, sender: usize, item: usize, state: TCustomDrawStage, defaultDraw: *mut bool)
pub type TLVCustomDrawItemEvent<T> = fn(T, usize, usize, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, item: usize, subItem: i32, state: TCustomDrawStage, defaultDraw: *mut bool)
pub type TLVCustomDrawSubItemEvent<T> = fn(T, usize, usize, i32, TCustomDrawStage, *mut bool);

// fn (&self, sender: usize, item: usize, rect: *mut TRect, state: TOwnerDrawState)
pub type TLVDrawItemEvent<T> = fn(T, usize, usize, *mut TRect, TOwnerDrawState);

// fn (&self, sender: usize, startIndex: i32, endIndex: i32)
pub type TLVDataHintEvent<T> = fn(T, usize, i32, i32);

pub type TLVOwnerDataHintEvent<T> = TLVDataHintEvent<T>;

// fn (&self, sender: usize, aRect: *mut TRect, defaultDraw: *mut bool)
pub type TTVCustomDrawEvent<T> = fn(T, usize, *mut TRect, *mut bool);

// fn (&self, sender: usize, node: usize, state: TCustomDrawStage, defaultDraw: *mut bool)
pub type TTVCustomDrawItemEvent<T> = fn(T, usize, usize, TCustomDrawStage, *mut bool);

// fn (&self, msg: *mut TMessage)
pub type TWndProcEvent<T> = fn(T, *mut TMessage);

// fn (&self, sender: usize, text: *const c_char)
pub type TWebTitleChangeEvent<T> = fn(T, usize, *const c_char);

// fn (&self, sender: usize, funcName: *const c_char, args: *const c_char, retVal: *mut *const c_char)
pub type TWebJSExternalEvent<T> = fn(T, usize, *const c_char, *const c_char, *mut *const c_char);

// fn (&self, sender: usize, modalResult: TModalResult, canClose: *mut bool)
pub type TTaskDlgClickEvent<T> = fn(T, usize, TModalResult, *mut bool);

// fn (&self, sender: usize, tickCount: u32, reset: *mut bool)
pub type TTaskDlgTimerEvent<T> = fn(T, usize, u32, *mut bool);

// fn (&self, sender: usize, control: usize, newLeft: *mut i32, newTop: *mut i32, newWidth: *mut i32, newHeight: *mut i32, alignRect: *mut TRect, alignInfo: TAlignInfo)
pub type TAlignPositionEvent<T> = fn(T, usize, usize, *mut i32, *mut i32, *mut i32, *mut i32, *mut TRect, TAlignInfo);

// fn (&self, sender: usize, index: i32)
pub type TCheckGroupClicked<T> = fn(T, usize, i32);

// fn (&self, sender: usize, aCol: i32, aRow: i32)
pub type TOnSelectEvent<T> = fn(T, usize, i32, i32);

// fn (&self, sender: usize, aCol: i32, aRow: i32, aState: TCheckBoxState)
pub type TToggledCheckboxEvent<T> = fn(T, usize, i32, i32, TCheckBoxState);

// fn (&self, sender: usize, ACol: i32, ARow: i32, BCol: i32, BRow: i32, result: *mut i32)
pub type TOnCompareCells<T> = fn(T, usize, i32, i32, i32, i32, *mut i32);

// fn (&self, sender: usize, ACol: i32, ARow: i32, hintText: *mut *const c_char)
pub type TGetCellHintEvent<T> = fn(T, usize, i32, i32, *mut *const c_char);

// fn (&self, sender: usize, ACol: i32, ARow: i32, value: *mut TCheckBoxState)
pub type TGetCheckboxStateEvent<T> = fn(T, usize, i32, i32, *mut TCheckBoxState);

// fn (&self, sender: usize, ACol: i32, ARow: i32, Value: TCheckBoxState)
pub type TSetCheckboxStateEvent<T> = fn(T, usize, i32, i32, TCheckBoxState);

// fn (&self, sender: usize, isColumn: bool, index: i32)
pub type THdrEvent<T> = fn(T, usize, bool, i32);

// fn (&self, sender: usize, isColumn: bool, aIndex: i32, aSize: i32)
pub type THeaderSizingEvent<T> = fn(T, usize, bool, i32, i32);

// fn (&self, sender: usize, aCol: i32, aRow: i32, editor: *mut usize)
pub type TSelectEditorEvent<T> = fn(T, usize, i32, i32, *mut usize);

// fn (&self, sender: usize, aCol: i32, aRow: i32, CheckedState: TCheckBoxState, aBitmap: *mut usize)
pub type TUserCheckBoxBitmapEvent<T> = fn(T, usize, i32, i32, TCheckBoxState, *mut usize);

// fn (&self, sender: usize, aCol: i32, aRow: i32, oldValue: *const c_char, newValue: *mut *const c_char)
pub type TValidateEntryEvent<T> = fn(T, usize, i32, i32, *const c_char, *mut *const c_char);

// Delphi中的颜色表，Delphi中的TColor与一般HTML的RGB有点不一样，反过来的以BGR表示.
pub const clClSysNone: TColor = 0x1FFFFFFF;
pub const clSysDefault: TColor = 0x20000000;

// Actual colors
pub const clAliceblue: TColor = 0xFFF8F0;
pub const clAntiquewhite: TColor = 0xD7EBFA;
pub const clAqua: TColor = 0xFFFF00;
pub const clAquamarine: TColor = 0xD4FF7F;
pub const clAzure: TColor = 0xFFFFF0;
pub const clBeige: TColor = 0xDCF5F5;
pub const clBisque: TColor = 0xC4E4FF;
pub const clBlack: TColor = 0x000000;
pub const clBlanchedalmond: TColor = 0xCDEBFF;
pub const clBlue: TColor = 0xFF0000;
pub const clBlueviolet: TColor = 0xE22B8A;
pub const clBrown: TColor = 0x2A2AA5;
pub const clBurlywood: TColor = 0x87B8DE;
pub const clCadetblue: TColor = 0xA09E5F;
pub const clChartreuse: TColor = 0x00FF7F;
pub const clChocolate: TColor = 0x1E69D2;
pub const clCoral: TColor = 0x507FFF;
pub const clCornflowerblue: TColor = 0xED9564;
pub const clCornsilk: TColor = 0xDCF8FF;
pub const clCrimson: TColor = 0x3C14DC;
pub const clCyan: TColor = 0xFFFF00;
pub const clDarkblue: TColor = 0x8B0000;
pub const clDarkcyan: TColor = 0x8B8B00;
pub const clDarkgoldenrod: TColor = 0x0B86B8;
pub const clDarkgray: TColor = 0xA9A9A9;
pub const clDarkgreen: TColor = 0x006400;
pub const clDarkgrey: TColor = 0xA9A9A9;
pub const clDarkkhaki: TColor = 0x6BB7BD;
pub const clDarkmagenta: TColor = 0x8B008B;
pub const clDarkolivegreen: TColor = 0x2F6B55;
pub const clDarkorange: TColor = 0x008CFF;
pub const clDarkorchid: TColor = 0xCC3299;
pub const clDarkred: TColor = 0x00008B;
pub const clDarksalmon: TColor = 0x7A96E9;
pub const clDarkseagreen: TColor = 0x8FBC8F;
pub const clDarkslateblue: TColor = 0x8B3D48;
pub const clDarkslategray: TColor = 0x4F4F2F;
pub const clDarkslategrey: TColor = 0x4F4F2F;
pub const clDarkturquoise: TColor = 0xD1CE00;
pub const clDarkviolet: TColor = 0xD30094;
pub const clDeeppink: TColor = 0x9314FF;
pub const clDeepskyblue: TColor = 0xFFBF00;
pub const clDimgray: TColor = 0x696969;
pub const clDimgrey: TColor = 0x696969;
pub const clDodgerblue: TColor = 0xFF901E;
pub const clFirebrick: TColor = 0x2222B2;
pub const clFloralwhite: TColor = 0xF0FAFF;
pub const clForestgreen: TColor = 0x228B22;
pub const clFuchsia: TColor = 0xFF00FF;
pub const clGainsboro: TColor = 0xDCDCDC;
pub const clGhostwhite: TColor = 0xFFF8F8;
pub const clGold: TColor = 0x00D7FF;
pub const clGoldenrod: TColor = 0x20A5DA;
pub const clGray: TColor = 0x808080;
pub const clGreen: TColor = 0x008000;
pub const clGreenyellow: TColor = 0x2FFFAD;
pub const clGrey: TColor = 0x808080;
pub const clHoneydew: TColor = 0xF0FFF0;
pub const clHotpink: TColor = 0xB469FF;
pub const clIndianred: TColor = 0x5C5CCD;
pub const clIndigo: TColor = 0x82004B;
pub const clIvory: TColor = 0xF0FFFF;
pub const clKhaki: TColor = 0x8CE6F0;
pub const clLavender: TColor = 0xFAE6E6;
pub const clLavenderblush: TColor = 0xF5F0FF;
pub const clLawngreen: TColor = 0x00FC7C;
pub const clLemonchiffon: TColor = 0xCDFAFF;
pub const clLightblue: TColor = 0xE6D8AD;
pub const clLightcoral: TColor = 0x8080F0;
pub const clLightcyan: TColor = 0xFFFFE0;
pub const clLightgoldenrodyellow: TColor = 0xD2FAFA;
pub const clLightgray: TColor = 0xD3D3D3;
pub const clLightgreen: TColor = 0x90EE90;
pub const clLightgrey: TColor = 0xD3D3D3;
pub const clLightpink: TColor = 0xC1B6FF;
pub const clLightsalmon: TColor = 0x7AA0FF;
pub const clLightseagreen: TColor = 0xAAB220;
pub const clLightskyblue: TColor = 0xFACE87;
pub const clLightslategray: TColor = 0x998877;
pub const clLightslategrey: TColor = 0x998877;
pub const clLightsteelblue: TColor = 0xDEC4B0;
pub const clLightyellow: TColor = 0xE0FFFF;
pub const clLtGray: TColor = 0xC0C0C0;
pub const clMedGray: TColor = 0xA4A0A0;
pub const clDkGray: TColor = 0x808080;
pub const clMoneyGreen: TColor = 0xC0DCC0;
pub const clLegacySkyBlue: TColor = 0xF0CAA6;
pub const clCream: TColor = 0xF0FBFF;
pub const clLime: TColor = 0x00FF00;
pub const clLimegreen: TColor = 0x32CD32;
pub const clLinen: TColor = 0xE6F0FA;
pub const clMagenta: TColor = 0xFF00FF;
pub const clMaroon: TColor = 0x000080;
pub const clMediumaquamarine: TColor = 0xAACD66;
pub const clMediumblue: TColor = 0xCD0000;
pub const clMediumorchid: TColor = 0xD355BA;
pub const clMediumpurple: TColor = 0xDB7093;
pub const clMediumseagreen: TColor = 0x71B33C;
pub const clMediumslateblue: TColor = 0xEE687B;
pub const clMediumspringgreen: TColor = 0x9AFA00;
pub const clMediumturquoise: TColor = 0xCCD148;
pub const clMediumvioletred: TColor = 0x8515C7;
pub const clMidnightblue: TColor = 0x701919;
pub const clMintcream: TColor = 0xFAFFF5;
pub const clMistyrose: TColor = 0xE1E4FF;
pub const clMoccasin: TColor = 0xB5E4FF;
pub const clNavajowhite: TColor = 0xADDEFF;
pub const clNavy: TColor = 0x800000;
pub const clOldlace: TColor = 0xE6F5FD;
pub const clOlive: TColor = 0x008080;
pub const clOlivedrab: TColor = 0x238E6B;
pub const clOrange: TColor = 0x00A5FF;
pub const clOrangered: TColor = 0x0045FF;
pub const clOrchid: TColor = 0xD670DA;
pub const clPalegoldenrod: TColor = 0xAAE8EE;
pub const clPalegreen: TColor = 0x98FB98;
pub const clPaleturquoise: TColor = 0xEEEEAF;
pub const clPalevioletred: TColor = 0x9370DB;
pub const clPapayawhip: TColor = 0xD5EFFF;
pub const clPeachpuff: TColor = 0xB9DAFF;
pub const clPeru: TColor = 0x3F85CD;
pub const clPink: TColor = 0xCBC0FF;
pub const clPlum: TColor = 0xDDA0DD;
pub const clPowderblue: TColor = 0xE6E0B0;
pub const clPurple: TColor = 0x800080;
pub const clRed: TColor = 0x0000FF;
pub const clRosybrown: TColor = 0x8F8FBC;
pub const clRoyalblue: TColor = 0xE16941;
pub const clSaddlebrown: TColor = 0x13458B;
pub const clSalmon: TColor = 0x7280FA;
pub const clSandybrown: TColor = 0x60A4F4;
pub const clSeagreen: TColor = 0x578B2E;
pub const clSeashell: TColor = 0xEEF5FF;
pub const clSienna: TColor = 0x2D52A0;
pub const clSilver: TColor = 0xC0C0C0;
pub const clSkyblue: TColor = 0xEBCE87;
pub const clSlateblue: TColor = 0xCD5A6A;
pub const clSlategray: TColor = 0x908070;
pub const clSlategrey: TColor = 0x908070;
pub const clSnow: TColor = 0xFAFAFF;
pub const clSpringgreen: TColor = 0x7FFF00;
pub const clSteelblue: TColor = 0xB48246;
pub const clTan: TColor = 0x8CB4D2;
pub const clTeal: TColor = 0x808000;
pub const clThistle: TColor = 0xD8BFD8;
pub const clTomato: TColor = 0x4763FF;
pub const clTurquoise: TColor = 0xD0E040;
pub const clViolet: TColor = 0xEE82EE;
pub const clWheat: TColor = 0xB3DEF5;
pub const clWhite: TColor = 0xFFFFFF;
pub const clWhitesmoke: TColor = 0xF5F5F5;
pub const clYellow: TColor = 0x00FFFF;
pub const clYellowgreen: TColor = 0x32CD9A;
pub const clBtnFace: TColor = 0xFF00000F;
pub const clNull: TColor = 0x00000000;

// Virtual Keys, Standard Set
pub const vkLButton: Char = 0x01; // 1
pub const vkRButton: Char = 0x02; // 2
pub const vkCancel: Char = 0x03; // 3
pub const vkMButton: Char = 0x04; // 4
pub const vkXButton1: Char = 0x05; // 5
pub const vkXButton2: Char = 0x06; // 6
pub const vkBack: Char = 0x08; // 8
pub const vkTab: Char = 0x09; // 9
pub const vkLineFeed: Char = 0x0A; // 10
pub const vkClear: Char = 0x0C; // 12
pub const vkReturn: Char = 0x0D; // 13
pub const vkShift: Char = 0x10; // 16
pub const vkControl: Char = 0x11; // 17
pub const vkMenu: Char = 0x12; // 18
pub const vkPause: Char = 0x13; // 19
pub const vkCapital: Char = 0x14; // 20
pub const vkKana: Char = 0x15; // 21
pub const vkHangul: Char = 0x15; // 21
pub const vkJunja: Char = 0x17; // 23
pub const vkFinal: Char = 0x18; // 24
pub const vkHanja: Char = 0x19; // 25
pub const vkKanji: Char = 0x19; // 25
pub const vkConvert: Char = 0x1C; // 28
pub const vkNonConvert: Char = 0x1D; // 29
pub const vkAccept: Char = 0x1E; // 30
pub const vkModeChange: Char = 0x1F; // 31
pub const vkEscape: Char = 0x1B; // 27
pub const vkSpace: Char = 0x20; // 32
pub const vkPrior: Char = 0x21; // 33
pub const vkNext: Char = 0x22; // 34
pub const vkEnd: Char = 0x23; // 35
pub const vkHome: Char = 0x24; // 36
pub const vkLeft: Char = 0x25; // 37
pub const vkUp: Char = 0x26; // 38
pub const vkRight: Char = 0x27; // 39
pub const vkDown: Char = 0x28; // 40
pub const vkSelect: Char = 0x29; // 41
pub const vkPrint: Char = 0x2A; // 42
pub const vkExecute: Char = 0x2B; // 43
pub const vkSnapshot: Char = 0x2C; // 44
pub const vkInsert: Char = 0x2D; // 45
pub const vkDelete: Char = 0x2E; // 46
pub const vkHelp: Char = 0x2F; // 47

// vk0 thru vk9 are the same as ASCII '0' thru '9' (0x30 - 0x39)
pub const vk0: Char = 0x30; // 48
pub const vk1: Char = 0x31; // 49
pub const vk2: Char = 0x32; // 50
pub const vk3: Char = 0x33; // 51
pub const vk4: Char = 0x34; // 52
pub const vk5: Char = 0x35; // 53
pub const vk6: Char = 0x36; // 54
pub const vk7: Char = 0x37; // 55
pub const vk8: Char = 0x38; // 56
pub const vk9: Char = 0x39; // 57

// vkA thru vkZ are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)
pub const vkA: Char = 0x41; // 65
pub const vkB: Char = 0x42; // 66
pub const vkC: Char = 0x43; // 67
pub const vkD: Char = 0x44; // 68
pub const vkE: Char = 0x45; // 69
pub const vkF: Char = 0x46; // 70
pub const vkG: Char = 0x47; // 71
pub const vkH: Char = 0x48; // 72
pub const vkI: Char = 0x49; // 73
pub const vkJ: Char = 0x4A; // 74
pub const vkK: Char = 0x4B; // 75
pub const vkL: Char = 0x4C; // 76
pub const vkM: Char = 0x4D; // 77
pub const vkN: Char = 0x4E; // 78
pub const vkO: Char = 0x4F; // 79
pub const vkP: Char = 0x50; // 80
pub const vkQ: Char = 0x51; // 81
pub const vkR: Char = 0x52; // 82
pub const vkS: Char = 0x53; // 83
pub const vkT: Char = 0x54; // 84
pub const vkU: Char = 0x55; // 85
pub const vkV: Char = 0x56; // 86
pub const vkW: Char = 0x57; // 87
pub const vkX: Char = 0x58; // 88
pub const vkY: Char = 0x59; // 89
pub const vkZ: Char = 0x5A; // 90
pub const vkLWin: Char = 0x5B; // 91
pub const vkRWin: Char = 0x5C; // 92
pub const vkApps: Char = 0x5D; // 93
pub const vkSleep: Char = 0x5F; // 95
pub const vkNumpad0: Char = 0x60; // 96
pub const vkNumpad1: Char = 0x61; // 97
pub const vkNumpad2: Char = 0x62; // 98
pub const vkNumpad3: Char = 0x63; // 99
pub const vkNumpad4: Char = 0x64; // 100
pub const vkNumpad5: Char = 0x65; // 101
pub const vkNumpad6: Char = 0x66; // 102
pub const vkNumpad7: Char = 0x67; // 103
pub const vkNumpad8: Char = 0x68; // 104
pub const vkNumpad9: Char = 0x69; // 105
pub const vkMultiply: Char = 0x6A; // 106
pub const vkAdd: Char = 0x6B; // 107
pub const vkSeparator: Char = 0x6C; // 108
pub const vkSubtract: Char = 0x6D; // 109
pub const vkDecimal: Char = 0x6E; // 110
pub const vkDivide: Char = 0x6F; // 111
pub const vkF1: Char = 0x70; // 112
pub const vkF2: Char = 0x71; // 113
pub const vkF3: Char = 0x72; // 114
pub const vkF4: Char = 0x73; // 115
pub const vkF5: Char = 0x74; // 116
pub const vkF6: Char = 0x75; // 117
pub const vkF7: Char = 0x76; // 118
pub const vkF8: Char = 0x77; // 119
pub const vkF9: Char = 0x78; // 120
pub const vkF10: Char = 0x79; // 121
pub const vkF11: Char = 0x7A; // 122
pub const vkF12: Char = 0x7B; // 123
pub const vkF13: Char = 0x7C; // 124
pub const vkF14: Char = 0x7D; // 125
pub const vkF15: Char = 0x7E; // 126
pub const vkF16: Char = 0x7F; // 127
pub const vkF17: Char = 0x80; // 128
pub const vkF18: Char = 0x81; // 129
pub const vkF19: Char = 0x82; // 130
pub const vkF20: Char = 0x83; // 131
pub const vkF21: Char = 0x84; // 132
pub const vkF22: Char = 0x85; // 133
pub const vkF23: Char = 0x86; // 134
pub const vkF24: Char = 0x87; // 135
pub const vkCamera: Char = 0x88; // 136
pub const vkHardwareBack: Char = 0x89; // 137
pub const vkNumLock: Char = 0x90; // 144
pub const vkScroll: Char = 0x91; // 145
pub const vkLShift: Char = 0xA0; // 160
pub const vkRShift: Char = 0xA1; // 161
pub const vkLControl: Char = 0xA2; // 162
pub const vkRControl: Char = 0xA3; // 163
pub const vkLMenu: Char = 0xA4; // 164
pub const vkRMenu: Char = 0xA5; // 165
pub const vkBrowserBack: Char = 0xA6; // 166
pub const vkBrowserForward: Char = 0xA7; // 167
pub const vkBrowserRefresh: Char = 0xA8; // 168
pub const vkBrowserStop: Char = 0xA9; // 169
pub const vkBrowserSearch: Char = 0xAA; // 170
pub const vkBrowserFavorites: Char = 0xAB; // 171
pub const vkBrowserHome: Char = 0xAC; // 172
pub const vkVolumeMute: Char = 0xAD; // 173
pub const vkVolumeDown: Char = 0xAE; // 174
pub const vkVolumeUp: Char = 0xAF; // 175
pub const vkMediaNextTrack: Char = 0xB0; // 176
pub const vkMediaPrevTrack: Char = 0xB1; // 177
pub const vkMediaStop: Char = 0xB2; // 178
pub const vkMediaPlayPause: Char = 0xB3; // 179
pub const vkLaunchMail: Char = 0xB4; // 180
pub const vkLaunchMediaSelect: Char = 0xB5; // 181
pub const vkLaunchApp1: Char = 0xB6; // 182
pub const vkLaunchApp2: Char = 0xB7; // 183
pub const vkSemicolon: Char = 0xBA; // 186
pub const vkEqual: Char = 0xBB; // 187
pub const vkComma: Char = 0xBC; // 188
pub const vkMinus: Char = 0xBD; // 189
pub const vkPeriod: Char = 0xBE; // 190
pub const vkSlash: Char = 0xBF; // 191
pub const vkTilde: Char = 0xC0; // 192
pub const vkLeftBracket: Char = 0xDB; // 219
pub const vkBackslash: Char = 0xDC; // 220
pub const vkRightBracket: Char = 0xDD; // 221
pub const vkQuote: Char = 0xDE; // 222
pub const vkPara: Char = 0xDF; // 223
pub const vkOem102: Char = 0xE2; // 226
pub const vkIcoHelp: Char = 0xE3; // 227
pub const vkIco00: Char = 0xE4; // 228
pub const vkProcessKey: Char = 0xE5; // 229
pub const vkIcoClear: Char = 0xE6; // 230
pub const vkPacket: Char = 0xE7; // 231
pub const vkAttn: Char = 0xF6; // 246
pub const vkCrsel: Char = 0xF7; // 247
pub const vkExsel: Char = 0xF8; // 248
pub const vkErEof: Char = 0xF9; // 249
pub const vkPlay: Char = 0xFA; // 250
pub const vkZoom: Char = 0xFB; // 251
pub const vkNoname: Char = 0xFC; // 252
pub const vkPA1: Char = 0xFD; // 253
pub const vkOemClear: Char = 0xFE; // 254
pub const vkNone: Char = 0xFF; // 255

// MessageBox or MessageDlg 返回值
pub const idOK: i32 = 1;
pub const idCancel: i32 = 2;
pub const idAbort: i32 = 3;
pub const idRetry: i32 = 4;
pub const idIgnore: i32 = 5;
pub const idYes: i32 = 6;
pub const idNo: i32 = 7;
pub const idClose: i32 = 8;
pub const idHelp: i32 = 9;
pub const idTryAgain: i32 = 10;
pub const idContinue: i32 = 11;
pub const mrNone: i32 = 0;
pub const mrOk: i32 = idOK;
pub const mrCancel: i32 = idCancel;
pub const mrAbort: i32 = idAbort;
pub const mrRetry: i32 = idRetry;
pub const mrIgnore: i32 = idIgnore;
pub const mrYes: i32 = idYes;
pub const mrNo: i32 = idNo;
pub const mrClose: i32 = idClose;
pub const mrHelp: i32 = idHelp;
pub const mrTryAgain: i32 = idTryAgain;
pub const mrContinue: i32 = idContinue;
pub const mrAll: i32 = mrContinue + 1;
pub const mrNoToAll: i32 = mrAll + 1;
pub const mrYesToAll: i32 = mrNoToAll + 1;

// Predefined Clipboard Formats
pub const CF_TEXT: u8 = 1;
pub const CF_BITMAP: u8 = 2;
pub const CF_METAFILEPICT: u8 = 3;
pub const CF_SYLK: u8 = 4;
pub const CF_DIF: u8 = 5;
pub const CF_TIFF: u8 = 6;
pub const CF_OEMTEXT: u8 = 7;
pub const CF_DIB: u8 = 8;
pub const CF_PALETTE: u8 = 9;
pub const CF_PENDATA: u8 = 10;
pub const CF_RIFF: u8 = 11;
pub const CF_WAVE: u8 = 12;
pub const CF_UNICODETEXT: u8 = 13;
pub const CF_ENHMETAFILE: u8 = 14;
pub const CF_HDROP: u8 = 15;
pub const CF_LOCALE: u8 = 0x10;

// 光标定义
pub const crHigh: TCursor = 0;
pub const crDefault: TCursor = 0;
pub const crNone: TCursor = -1;
pub const crArrow: TCursor = -2;
pub const crCross: TCursor = -3;
pub const crIBeam: TCursor = -4;
pub const crSize: TCursor = -22;
pub const crSizeNESW: TCursor = -6; // diagonal north east - south west
pub const crSizeNS: TCursor = -7;
pub const crSizeNWSE: TCursor = -8;
pub const crSizeWE: TCursor = -9;
pub const crSizeNW: TCursor = -23;
pub const crSizeN: TCursor = -24;
pub const crSizeNE: TCursor = -25;
pub const crSizeW: TCursor = -26;
pub const crSizeE: TCursor = -27;
pub const crSizeSW: TCursor = -28;
pub const crSizeS: TCursor = -29;
pub const crSizeSE: TCursor = -30;
pub const crUpArrow: TCursor = -10;
pub const crHourGlass: TCursor = -11;
pub const crDrag: TCursor = -12;
pub const crNoDrop: TCursor = -13;
pub const crHSplit: TCursor = -14;
pub const crVSplit: TCursor = -15;
pub const crMultiDrag: TCursor = -16;
pub const crSQLWait: TCursor = -17;
pub const crNo: TCursor = -18;
pub const crAppStart: TCursor = -19;
pub const crHelp: TCursor = -20;
pub const crHandPoint: TCursor = -21;
pub const crSizeAll: TCursor = -22;
pub const crLow: TCursor = -30;



//--------------------------- Types impl ---------------------------------

impl TGUID {
    pub fn Empty() -> Self {
        TGUID {
            d1: 0,
            d2: 0,
            d3: 0,
            d4: [0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
    pub fn From(guid: &TGUID) -> Self {
        TGUID {
            d1: guid.d1,
            d2: guid.d2,
            d3: guid.d3,
            d4: guid.d4,
        }
    }
}
impl TResItem {
    pub fn Empty() -> Self {
        TResItem { name: 0, value: 0 }
    }
}
impl TPoint {
    pub fn Empty() -> Self {
        TPoint { x: 0, y: 0 }
    }
    pub fn From(p: &TPoint) -> Self {
        TPoint { x: p.x, y: p.y }
    }
}
impl TRect {
    pub fn Empty() -> Self {
        TRect {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
        }
    }
    pub fn From(r: &TRect) -> Self {
        TRect {
            left: r.left,
            top: r.top,
            right: r.right,
            bottom: r.bottom,
        }
    }
}
impl TSize {
    pub fn Empty() -> Self {
        TSize { cx: 0, cy: 0 }
    }
    pub fn From(s: &TSize) -> Self {
        TSize { cx: s.cx, cy: s.cy }
    }
}
impl TGridCoord {
    pub fn Empty() -> Self {
        TGridCoord { x: 0, y: 0 }
    }
    pub fn From(p: &TGridCoord) -> Self {
        TGridCoord { x: p.x, y: p.y }
    }
}
