/*
    The code is automatically generated by the genBind tool.
    Author: ying32
    https://github.com/ying32
*/

#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

use crate::imports::*;
use crate::types::*;

use std::borrow::Cow;
use std::ffi::{CStr, CString};

// IObject IComponent IControl IWinControl只是用来让编译器知道这几个的关系的
pub trait IObject {
    fn Instance(&self) -> usize;
}
pub trait IComponent: IObject {}
pub trait IControl: IComponent {}
pub trait IWinControl: IControl {}


/* 先定义所有的类 */
pub struct TObject(usize,bool);
pub struct TComponent(usize,bool);
pub struct TControl(usize,bool);
pub struct TWinControl(usize,bool);
pub struct TMainMenu(usize,bool);
pub struct TPopupMenu(usize,bool);
pub struct TMemo(usize,bool);
pub struct TCheckBox(usize,bool);
pub struct TRadioButton(usize,bool);
pub struct TGroupBox(usize,bool);
pub struct TLabel(usize,bool);
pub struct TListBox(usize,bool);
pub struct TComboBox(usize,bool);
pub struct TPanel(usize,bool);
pub struct TImage(usize,bool);
pub struct TLinkLabel(usize,bool);
pub struct TSpeedButton(usize,bool);
pub struct TSplitter(usize,bool);
pub struct TRadioGroup(usize,bool);
pub struct TStaticText(usize,bool);
pub struct TColorBox(usize,bool);
pub struct TColorListBox(usize,bool);
pub struct TTrayIcon(usize,bool);
pub struct TOpenDialog(usize,bool);
pub struct TSaveDialog(usize,bool);
pub struct TColorDialog(usize,bool);
pub struct TFontDialog(usize,bool);
pub struct TPrintDialog(usize,bool);
pub struct TOpenPictureDialog(usize,bool);
pub struct TSavePictureDialog(usize,bool);
pub struct TSelectDirectoryDialog(usize,bool);
pub struct TRichEdit(usize,bool);
pub struct TTrackBar(usize,bool);
pub struct TImageList(usize,bool);
pub struct TUpDown(usize,bool);
pub struct TProgressBar(usize,bool);
pub struct TDateTimePicker(usize,bool);
pub struct TMonthCalendar(usize,bool);
pub struct TListView(usize,bool);
pub struct TTreeView(usize,bool);
pub struct TStatusBar(usize,bool);
pub struct TToolBar(usize,bool);
pub struct TBitBtn(usize,bool);
pub struct TIcon(usize,bool);
pub struct TBitmap(usize,bool);
pub struct TMemoryStream(usize,bool);
pub struct TFont(usize,bool);
pub struct TStrings(usize,bool);
pub struct TStringList(usize,bool);
pub struct TBrush(usize,bool);
pub struct TPen(usize,bool);
pub struct TMenuItem(usize,bool);
pub struct TPicture(usize,bool);
pub struct TListColumns(usize,bool);
pub struct TListItems(usize,bool);
pub struct TTreeNodes(usize,bool);
pub struct TListItem(usize,bool);
pub struct TTreeNode(usize,bool);
pub struct TPageControl(usize,bool);
pub struct TTabSheet(usize,bool);
pub struct TButton(usize,bool);
pub struct TEdit(usize,bool);
pub struct TScreen(usize,bool);
pub struct TMouse(usize,bool);
pub struct TListColumn(usize,bool);
pub struct TCollectionItem(usize,bool);
pub struct TStatusPanels(usize,bool);
pub struct TStatusPanel(usize,bool);
pub struct TSpinEdit(usize,bool);
pub struct TMiniWebview(usize,bool);
pub struct TCanvas(usize,bool);
pub struct TApplication(usize,bool);
pub struct TGraphic(usize,bool);
pub struct TPngImage(usize,bool);
pub struct TJPEGImage(usize,bool);
pub struct TGIFImage(usize,bool);
pub struct TActionList(usize,bool);
pub struct TAction(usize,bool);
pub struct TToolButton(usize,bool);
pub struct TIniFile(usize,bool);
pub struct TRegistry(usize,bool);
pub struct TClipboard(usize,bool);
pub struct TMonitor(usize,bool);
pub struct TPaintBox(usize,bool);
pub struct TTimer(usize,bool);
pub struct TList(usize,bool);
pub struct TForm(usize,bool);
pub struct TParaAttributes(usize,bool);
pub struct TTextAttributes(usize,bool);
pub struct TIconOptions(usize,bool);
pub struct Exception(usize,bool);
pub struct TScrollBar(usize,bool);
pub struct TMaskEdit(usize,bool);
pub struct TShape(usize,bool);
pub struct TBevel(usize,bool);
pub struct TScrollBox(usize,bool);
pub struct TCheckListBox(usize,bool);
pub struct TGauge(usize,bool);
pub struct TImageButton(usize,bool);
pub struct TFindDialog(usize,bool);
pub struct TReplaceDialog(usize,bool);
pub struct TPrinterSetupDialog(usize,bool);
pub struct TPageSetupDialog(usize,bool);
pub struct TDragObject(usize,bool);
pub struct TDragDockObject(usize,bool);
pub struct TStringGrid(usize,bool);
pub struct TDrawGrid(usize,bool);
pub struct TValueListEditor(usize,bool);
pub struct THeaderControl(usize,bool);
pub struct THeaderSection(usize,bool);
pub struct THeaderSections(usize,bool);
pub struct TLabeledEdit(usize,bool);
pub struct TBoundLabel(usize,bool);
pub struct TFlowPanel(usize,bool);
pub struct TCoolBar(usize,bool);
pub struct TCoolBands(usize,bool);
pub struct TCoolBand(usize,bool);
pub struct TCollection(usize,bool);
pub struct TPrinter(usize,bool);
pub struct TTaskDialog(usize,bool);
pub struct TTaskDialogButtons(usize,bool);
pub struct TTaskDialogButtonItem(usize,bool);
pub struct TTaskDialogRadioButtonItem(usize,bool);
pub struct TTaskDialogBaseButtonItem(usize,bool);
pub struct TComboBoxEx(usize,bool);
pub struct TComboExItems(usize,bool);
pub struct TComboExItem(usize,bool);
pub struct TFrame(usize,bool);
pub struct TControlScrollBar(usize,bool);
pub struct TSizeConstraints(usize,bool);
pub struct TXButton(usize,bool);
pub struct TAnchorSide(usize,bool);
pub struct TControlBorderSpacing(usize,bool);
pub struct TControlChildSizing(usize,bool);
pub struct TCheckGroup(usize,bool);
pub struct TToggleBox(usize,bool);
pub struct TGridColumnTitle(usize,bool);
pub struct TGridColumn(usize,bool);
pub struct TGridColumns(usize,bool);
/* 开始实现接口 */

impl TObject {
      pub fn new() -> Self {
          TObject {
              0: unsafe { Object_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TObject { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Object_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ClassType(&self) -> TClass  {
          unsafe { Object_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Object_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32  {
          unsafe { Object_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool  {
          unsafe { Object_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool  {
          unsafe { Object_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32  {
          unsafe { Object_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Object_ToString(self.0)).to_string_lossy()  }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Object_StaticClassType() }
      }
}

impl IObject for TObject {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TObject {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TComponent {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TComponent {
              0: unsafe { Component_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TComponent { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Component_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent  {
          TComponent {
              0: unsafe { Component_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Component_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool  {
          unsafe { Component_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Component_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Component_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Component_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Component_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Component_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Component_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Component_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Component_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Component_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Component_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Component_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Component_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Component_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Component_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Component_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Component_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Component_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Component_StaticClassType() }
      }
}

impl IObject for TComponent {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TComponent {}
impl Drop for TComponent {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TControl {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TControl {
              0: unsafe { Control_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TControl { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Control_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self)  {
          unsafe { Control_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint)  {
          unsafe { Control_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint)  {
          unsafe { Control_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool  {
          unsafe { Control_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Control_HasParent(self.0) }
      }

      pub fn Hide(&self)  {
          unsafe { Control_Hide(self.0) }
      }

      pub fn Invalidate(&self)  {
          unsafe { Control_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize  {
          unsafe { Control_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self)  {
          unsafe { Control_Refresh(self.0) }
      }

      pub fn Repaint(&self)  {
          unsafe { Control_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint)  {
          unsafe { Control_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint)  {
          unsafe { Control_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self)  {
          unsafe { Control_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32)  {
          unsafe { Control_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self)  {
          unsafe { Control_Show(self.0) }
      }

      pub fn Update(&self)  {
          unsafe { Control_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32  {
          unsafe { Control_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32  {
          unsafe { Control_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str)  {
          unsafe { Control_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Control_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Control_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Control_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Control_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Control_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Control_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Control_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Control_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Control_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Control_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl)  {
          unsafe { Control_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl)  {
          unsafe { Control_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl)  {
          unsafe { Control_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl)  {
          unsafe { Control_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32)  {
          unsafe { Control_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32)  {
          unsafe { Control_AnchorClient(self.0, aSpace) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Control_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Control_SetEnabled(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Control_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Control_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Control_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Control_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Control_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Control_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Control_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Control_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Control_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Control_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Control_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Control_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Control_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Control_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Control_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Control_SetClientWidth(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Control_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Control_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Control_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Control_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Control_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Control_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Control_GetFloating(self.0) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Control_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Control_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Control_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Control_SetVisible(self.0, aValue) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Control_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Control_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Control_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Control_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Control_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Control_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Control_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Control_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Control_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Control_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Control_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Control_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Control_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Control_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Control_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Control_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Control_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Control_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Control_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Control_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Control_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Control_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Control_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Control_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Control_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Control_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Control_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Control_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Control_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Control_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Control_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Control_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Control_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Control_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Control_StaticClassType() }
      }
}

impl IObject for TControl {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TControl {}
impl IControl for TControl {}

impl TWinControl {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TWinControl {
              0: unsafe { WinControl_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TWinControl { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  WinControl_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool  {
          unsafe { WinControl_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool  {
          unsafe { WinControl_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl  {
          TControl {
              0: unsafe { WinControl_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self)  {
          unsafe { WinControl_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self)  {
          unsafe { WinControl_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl  {
          TControl {
              0: unsafe { WinControl_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool)  {
          unsafe { WinControl_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool  {
          unsafe { WinControl_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool  {
          unsafe { WinControl_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl)  {
          unsafe { WinControl_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { WinControl_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl)  {
          unsafe { WinControl_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self)  {
          unsafe { WinControl_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { WinControl_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32)  {
          unsafe { WinControl_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32)  {
          unsafe { WinControl_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { WinControl_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self)  {
          unsafe { WinControl_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { WinControl_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { WinControl_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { WinControl_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { WinControl_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { WinControl_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { WinControl_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { WinControl_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { WinControl_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { WinControl_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { WinControl_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { WinControl_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { WinControl_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { WinControl_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { WinControl_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { WinControl_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { WinControl_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { WinControl_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(WinControl_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { WinControl_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { WinControl_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(WinControl_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { WinControl_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { WinControl_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { WinControl_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { WinControl_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(WinControl_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { WinControl_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { WinControl_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { WinControl_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { WinControl_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { WinControl_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { WinControl_AnchorClient(self.0, aSpace) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { WinControl_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { WinControl_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { WinControl_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { WinControl_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { WinControl_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { WinControl_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { WinControl_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { WinControl_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { WinControl_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { WinControl_GetHandle(self.0) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { WinControl_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { WinControl_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { WinControl_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { WinControl_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { WinControl_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { WinControl_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { WinControl_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { WinControl_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { WinControl_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { WinControl_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { WinControl_SetUseDockManager(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { WinControl_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { WinControl_SetEnabled(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { WinControl_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { WinControl_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { WinControl_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { WinControl_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { WinControl_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { WinControl_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { WinControl_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { WinControl_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { WinControl_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { WinControl_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { WinControl_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { WinControl_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { WinControl_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { WinControl_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { WinControl_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { WinControl_SetClientWidth(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { WinControl_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { WinControl_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { WinControl_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { WinControl_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { WinControl_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { WinControl_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { WinControl_GetFloating(self.0) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { WinControl_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { WinControl_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { WinControl_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { WinControl_SetVisible(self.0, aValue) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { WinControl_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { WinControl_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { WinControl_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { WinControl_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { WinControl_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { WinControl_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { WinControl_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { WinControl_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { WinControl_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { WinControl_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { WinControl_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { WinControl_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(WinControl_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { WinControl_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { WinControl_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { WinControl_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { WinControl_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { WinControl_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(WinControl_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { WinControl_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { WinControl_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { WinControl_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { WinControl_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { WinControl_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { WinControl_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { WinControl_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { WinControl_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { WinControl_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { WinControl_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { WinControl_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { WinControl_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { WinControl_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { WinControl_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { WinControl_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { WinControl_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { WinControl_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { WinControl_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { WinControl_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { WinControl_StaticClassType() }
      }
}

impl IObject for TWinControl {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TWinControl {}
impl IControl for TWinControl {}
impl IWinControl for TWinControl {}

impl TMainMenu {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMainMenu {
              0: unsafe { MainMenu_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMainMenu { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MainMenu_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { MainMenu_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MainMenu_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { MainMenu_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { MainMenu_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MainMenu_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MainMenu_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MainMenu_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MainMenu_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MainMenu_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MainMenu_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MainMenu_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ImagesWidth(&self) -> i32  {
          unsafe { MainMenu_GetImagesWidth(self.0) }
      }

      pub fn SetImagesWidth(&self, aValue: i32)  {
          unsafe { MainMenu_SetImagesWidth(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { MainMenu_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { MainMenu_SetBiDiMode(self.0, aValue) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { MainMenu_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { MainMenu_SetImages(self.0, aValue.Instance()) }
      }

      pub fn OwnerDraw(&self) -> bool  {
          unsafe { MainMenu_GetOwnerDraw(self.0) }
      }

      pub fn SetOwnerDraw(&self, aValue: bool)  {
          unsafe { MainMenu_SetOwnerDraw(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TMenuChangeEvent)  {
          unsafe { MainMenu_SetOnChange(self.0, aEventId) }
      }

      pub fn Handle(&self) -> HMENU  {
          unsafe { MainMenu_GetHandle(self.0) }
      }

      pub fn Items(&self) -> TMenuItem  {
          TMenuItem {
              0: unsafe { MainMenu_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { MainMenu_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { MainMenu_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { MainMenu_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { MainMenu_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MainMenu_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { MainMenu_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { MainMenu_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { MainMenu_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { MainMenu_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MainMenu_StaticClassType() }
      }
}

impl IObject for TMainMenu {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMainMenu {}

impl TPopupMenu {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPopupMenu {
              0: unsafe { PopupMenu_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPopupMenu { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PopupMenu_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CloseMenu(&self)  {
          unsafe { PopupMenu_CloseMenu(self.0) }
      }

      pub fn Popup(&self, x: i32, y: i32)  {
          unsafe { PopupMenu_Popup(self.0, x, y) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PopupMenu_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PopupMenu_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PopupMenu_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PopupMenu_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PopupMenu_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PopupMenu_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PopupMenu_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PopupMenu_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PopupMenu_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PopupMenu_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PopupMenu_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ImagesWidth(&self) -> i32  {
          unsafe { PopupMenu_GetImagesWidth(self.0) }
      }

      pub fn SetImagesWidth(&self, aValue: i32)  {
          unsafe { PopupMenu_SetImagesWidth(self.0, aValue) }
      }

      pub fn PopupComponent(&self) -> TComponent  {
          TComponent {
              0: unsafe { PopupMenu_GetPopupComponent(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupComponent(&self, aValue: &dyn IComponent)  {
          unsafe { PopupMenu_SetPopupComponent(self.0, aValue.Instance()) }
      }

      pub fn PopupPoint(&self, result: *mut TPoint)  {
          unsafe { PopupMenu_GetPopupPoint(self.0, result) }
      }

      pub fn Alignment(&self) -> TPopupAlignment  {
          unsafe { PopupMenu_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TPopupAlignment)  {
          unsafe { PopupMenu_SetAlignment(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { PopupMenu_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { PopupMenu_SetBiDiMode(self.0, aValue) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { PopupMenu_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { PopupMenu_SetImages(self.0, aValue.Instance()) }
      }

      pub fn OwnerDraw(&self) -> bool  {
          unsafe { PopupMenu_GetOwnerDraw(self.0) }
      }

      pub fn SetOwnerDraw(&self, aValue: bool)  {
          unsafe { PopupMenu_SetOwnerDraw(self.0, aValue) }
      }

      pub fn SetOnPopup(&self, aEventId: TNotifyEvent)  {
          unsafe { PopupMenu_SetOnPopup(self.0, aEventId) }
      }

      pub fn Handle(&self) -> HMENU  {
          unsafe { PopupMenu_GetHandle(self.0) }
      }

      pub fn Items(&self) -> TMenuItem  {
          TMenuItem {
              0: unsafe { PopupMenu_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PopupMenu_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PopupMenu_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PopupMenu_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PopupMenu_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PopupMenu_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PopupMenu_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PopupMenu_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PopupMenu_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PopupMenu_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PopupMenu_StaticClassType() }
      }
}

impl IObject for TPopupMenu {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPopupMenu {}

impl TMemo {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMemo {
              0: unsafe { Memo_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMemo { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Memo_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Append(&self, value: &str)  {
          unsafe { Memo_Append(self.0, CString::new(value).unwrap().as_ptr()) }
      }

      pub fn Clear(&self)  {
          unsafe { Memo_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { Memo_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { Memo_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { Memo_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { Memo_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { Memo_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { Memo_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Memo_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Memo_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Memo_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Memo_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Memo_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Memo_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Memo_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Memo_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Memo_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Memo_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Memo_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Memo_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Memo_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Memo_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Memo_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Memo_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Memo_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { Memo_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Memo_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Memo_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Memo_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Memo_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Memo_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Memo_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Memo_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Memo_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Memo_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Memo_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Memo_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Memo_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Memo_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Memo_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Memo_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Memo_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Memo_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Memo_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Memo_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Memo_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Memo_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Memo_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Memo_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Memo_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Memo_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Memo_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Memo_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Memo_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Memo_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Memo_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Memo_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Memo_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Memo_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Memo_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { Memo_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { Memo_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Memo_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Memo_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Memo_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Memo_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { Memo_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { Memo_SetBorderStyle(self.0, aValue) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { Memo_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { Memo_SetCharCase(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Memo_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Memo_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Memo_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Memo_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Memo_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Memo_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Memo_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Memo_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Memo_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Memo_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Memo_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Memo_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Memo_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Memo_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Memo_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Memo_SetFont(self.0, aValue.Instance()) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { Memo_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { Memo_SetHideSelection(self.0, aValue) }
      }

      pub fn Lines(&self) -> TStrings  {
          TStrings {
              0: unsafe { Memo_GetLines(self.0) }
              , 1: false,
          }
      }

      pub fn SetLines(&self, aValue: &TStrings)  {
          unsafe { Memo_SetLines(self.0, aValue.Instance()) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { Memo_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { Memo_SetMaxLength(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Memo_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Memo_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Memo_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Memo_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Memo_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Memo_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Memo_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Memo_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Memo_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Memo_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { Memo_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { Memo_SetReadOnly(self.0, aValue) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { Memo_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { Memo_SetScrollBars(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Memo_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Memo_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Memo_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Memo_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Memo_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Memo_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Memo_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Memo_SetVisible(self.0, aValue) }
      }

      pub fn WantReturns(&self) -> bool  {
          unsafe { Memo_GetWantReturns(self.0) }
      }

      pub fn SetWantReturns(&self, aValue: bool)  {
          unsafe { Memo_SetWantReturns(self.0, aValue) }
      }

      pub fn WantTabs(&self) -> bool  {
          unsafe { Memo_GetWantTabs(self.0) }
      }

      pub fn SetWantTabs(&self, aValue: bool)  {
          unsafe { Memo_SetWantTabs(self.0, aValue) }
      }

      pub fn WordWrap(&self) -> bool  {
          unsafe { Memo_GetWordWrap(self.0) }
      }

      pub fn SetWordWrap(&self, aValue: bool)  {
          unsafe { Memo_SetWordWrap(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Memo_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Memo_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Memo_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Memo_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { Memo_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { Memo_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { Memo_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Memo_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Memo_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Memo_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Memo_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn CaretPos(&self, result: *mut TPoint)  {
          unsafe { Memo_GetCaretPos(self.0, result) }
      }

      pub fn SetCaretPos(&self, aValue: *mut TPoint)  {
          unsafe { Memo_SetCaretPos(self.0, aValue) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { Memo_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { Memo_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { Memo_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { Memo_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { Memo_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { Memo_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { Memo_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Memo_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { Memo_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Memo_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { Memo_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Memo_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { Memo_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Memo_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Memo_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Memo_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Memo_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Memo_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Memo_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Memo_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Memo_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Memo_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Memo_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Memo_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Memo_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Memo_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Memo_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Memo_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Memo_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Memo_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Memo_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Memo_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Memo_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Memo_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Memo_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Memo_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Memo_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Memo_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Memo_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Memo_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Memo_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Memo_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Memo_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Memo_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Memo_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Memo_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Memo_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Memo_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Memo_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Memo_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Memo_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Memo_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Memo_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Memo_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Memo_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Memo_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Memo_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Memo_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Memo_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Memo_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Memo_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Memo_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Memo_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Memo_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Memo_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Memo_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Memo_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Memo_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Memo_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Memo_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Memo_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Memo_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Memo_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Memo_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Memo_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Memo_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Memo_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Memo_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Memo_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Memo_StaticClassType() }
      }
}

impl IObject for TMemo {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMemo {}
impl IControl for TMemo {}
impl IWinControl for TMemo {}

impl TCheckBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TCheckBox {
              0: unsafe { CheckBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCheckBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CheckBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { CheckBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { CheckBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { CheckBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { CheckBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { CheckBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { CheckBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { CheckBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { CheckBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { CheckBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { CheckBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { CheckBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { CheckBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { CheckBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { CheckBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { CheckBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { CheckBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { CheckBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { CheckBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { CheckBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { CheckBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { CheckBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { CheckBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { CheckBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { CheckBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { CheckBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { CheckBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { CheckBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { CheckBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { CheckBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { CheckBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { CheckBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { CheckBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CheckBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CheckBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CheckBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CheckBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CheckBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { CheckBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { CheckBox_AnchorClient(self.0, aSpace) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnChange(self.0, aEventId) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { CheckBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { CheckBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { CheckBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { CheckBox_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TLeftRight  {
          unsafe { CheckBox_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TLeftRight)  {
          unsafe { CheckBox_SetAlignment(self.0, aValue) }
      }

      pub fn AllowGrayed(&self) -> bool  {
          unsafe { CheckBox_GetAllowGrayed(self.0) }
      }

      pub fn SetAllowGrayed(&self, aValue: bool)  {
          unsafe { CheckBox_SetAllowGrayed(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { CheckBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { CheckBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { CheckBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { CheckBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckBox_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { CheckBox_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { CheckBox_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { CheckBox_SetChecked(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { CheckBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { CheckBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { CheckBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { CheckBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { CheckBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { CheckBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { CheckBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { CheckBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { CheckBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { CheckBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { CheckBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { CheckBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { CheckBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { CheckBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { CheckBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { CheckBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { CheckBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { CheckBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { CheckBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { CheckBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { CheckBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { CheckBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { CheckBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { CheckBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { CheckBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { CheckBox_SetShowHint(self.0, aValue) }
      }

      pub fn State(&self) -> TCheckBoxState  {
          unsafe { CheckBox_GetState(self.0) }
      }

      pub fn SetState(&self, aValue: TCheckBoxState)  {
          unsafe { CheckBox_SetState(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { CheckBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { CheckBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { CheckBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { CheckBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { CheckBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { CheckBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { CheckBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { CheckBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { CheckBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { CheckBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { CheckBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { CheckBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { CheckBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { CheckBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { CheckBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { CheckBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { CheckBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { CheckBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { CheckBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { CheckBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { CheckBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { CheckBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { CheckBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { CheckBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { CheckBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { CheckBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { CheckBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { CheckBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { CheckBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { CheckBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { CheckBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { CheckBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { CheckBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { CheckBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { CheckBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { CheckBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { CheckBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { CheckBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { CheckBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { CheckBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { CheckBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { CheckBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { CheckBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { CheckBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { CheckBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { CheckBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { CheckBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { CheckBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { CheckBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { CheckBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { CheckBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { CheckBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { CheckBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { CheckBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { CheckBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { CheckBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { CheckBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { CheckBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { CheckBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { CheckBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { CheckBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { CheckBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { CheckBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { CheckBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { CheckBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { CheckBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { CheckBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { CheckBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { CheckBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { CheckBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { CheckBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CheckBox_StaticClassType() }
      }
}

impl IObject for TCheckBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TCheckBox {}
impl IControl for TCheckBox {}
impl IWinControl for TCheckBox {}

impl TRadioButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TRadioButton {
              0: unsafe { RadioButton_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TRadioButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  RadioButton_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { RadioButton_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { RadioButton_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { RadioButton_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { RadioButton_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { RadioButton_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { RadioButton_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { RadioButton_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { RadioButton_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { RadioButton_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { RadioButton_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { RadioButton_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { RadioButton_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { RadioButton_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { RadioButton_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { RadioButton_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { RadioButton_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { RadioButton_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { RadioButton_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { RadioButton_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { RadioButton_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RadioButton_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RadioButton_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { RadioButton_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { RadioButton_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { RadioButton_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { RadioButton_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { RadioButton_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RadioButton_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RadioButton_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { RadioButton_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { RadioButton_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { RadioButton_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { RadioButton_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { RadioButton_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { RadioButton_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioButton_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { RadioButton_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { RadioButton_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioButton_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { RadioButton_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { RadioButton_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { RadioButton_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { RadioButton_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioButton_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RadioButton_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RadioButton_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RadioButton_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RadioButton_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { RadioButton_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { RadioButton_AnchorClient(self.0, aSpace) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnChange(self.0, aEventId) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { RadioButton_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { RadioButton_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { RadioButton_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { RadioButton_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TLeftRight  {
          unsafe { RadioButton_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TLeftRight)  {
          unsafe { RadioButton_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { RadioButton_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { RadioButton_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { RadioButton_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { RadioButton_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioButton_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { RadioButton_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { RadioButton_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { RadioButton_SetChecked(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { RadioButton_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { RadioButton_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { RadioButton_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { RadioButton_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { RadioButton_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { RadioButton_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { RadioButton_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { RadioButton_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { RadioButton_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { RadioButton_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { RadioButton_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { RadioButton_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { RadioButton_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { RadioButton_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { RadioButton_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { RadioButton_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { RadioButton_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { RadioButton_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { RadioButton_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { RadioButton_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { RadioButton_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { RadioButton_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { RadioButton_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { RadioButton_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { RadioButton_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { RadioButton_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { RadioButton_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { RadioButton_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { RadioButton_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { RadioButton_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { RadioButton_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { RadioButton_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { RadioButton_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { RadioButton_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { RadioButton_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { RadioButton_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { RadioButton_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { RadioButton_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { RadioButton_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { RadioButton_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { RadioButton_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { RadioButton_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioButton_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { RadioButton_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { RadioButton_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { RadioButton_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { RadioButton_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { RadioButton_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { RadioButton_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { RadioButton_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { RadioButton_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { RadioButton_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { RadioButton_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { RadioButton_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { RadioButton_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { RadioButton_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { RadioButton_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { RadioButton_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { RadioButton_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { RadioButton_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { RadioButton_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { RadioButton_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { RadioButton_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { RadioButton_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { RadioButton_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { RadioButton_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { RadioButton_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { RadioButton_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { RadioButton_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { RadioButton_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { RadioButton_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { RadioButton_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { RadioButton_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { RadioButton_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { RadioButton_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { RadioButton_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { RadioButton_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { RadioButton_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { RadioButton_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { RadioButton_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { RadioButton_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { RadioButton_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { RadioButton_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioButton_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { RadioButton_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { RadioButton_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { RadioButton_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { RadioButton_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { RadioButton_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioButton_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { RadioButton_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { RadioButton_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { RadioButton_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioButton_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { RadioButton_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioButton_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { RadioButton_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioButton_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { RadioButton_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioButton_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { RadioButton_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { RadioButton_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { RadioButton_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { RadioButton_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { RadioButton_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RadioButton_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RadioButton_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { RadioButton_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioButton_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { RadioButton_StaticClassType() }
      }
}

impl IObject for TRadioButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TRadioButton {}
impl IControl for TRadioButton {}
impl IWinControl for TRadioButton {}

impl TGroupBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TGroupBox {
              0: unsafe { GroupBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TGroupBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  GroupBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { GroupBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { GroupBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { GroupBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { GroupBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { GroupBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { GroupBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { GroupBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { GroupBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { GroupBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { GroupBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { GroupBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { GroupBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { GroupBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { GroupBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { GroupBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { GroupBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { GroupBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { GroupBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { GroupBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { GroupBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { GroupBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { GroupBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { GroupBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { GroupBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { GroupBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { GroupBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { GroupBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { GroupBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { GroupBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { GroupBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { GroupBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { GroupBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { GroupBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { GroupBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { GroupBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GroupBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { GroupBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { GroupBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GroupBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { GroupBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { GroupBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { GroupBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { GroupBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GroupBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { GroupBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { GroupBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { GroupBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { GroupBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { GroupBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { GroupBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { GroupBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { GroupBox_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { GroupBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { GroupBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { GroupBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { GroupBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GroupBox_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { GroupBox_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { GroupBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { GroupBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { GroupBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { GroupBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { GroupBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { GroupBox_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { GroupBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { GroupBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { GroupBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { GroupBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { GroupBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { GroupBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { GroupBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { GroupBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { GroupBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { GroupBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { GroupBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { GroupBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { GroupBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { GroupBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { GroupBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { GroupBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { GroupBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { GroupBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { GroupBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { GroupBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { GroupBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { GroupBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { GroupBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { GroupBox_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { GroupBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { GroupBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { GroupBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { GroupBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { GroupBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { GroupBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { GroupBox_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { GroupBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { GroupBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { GroupBox_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { GroupBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { GroupBox_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { GroupBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { GroupBox_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { GroupBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { GroupBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { GroupBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { GroupBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { GroupBox_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { GroupBox_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { GroupBox_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { GroupBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { GroupBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { GroupBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { GroupBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { GroupBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { GroupBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { GroupBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { GroupBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { GroupBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { GroupBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { GroupBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { GroupBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { GroupBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { GroupBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { GroupBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { GroupBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { GroupBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { GroupBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { GroupBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { GroupBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { GroupBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { GroupBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { GroupBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { GroupBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { GroupBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { GroupBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { GroupBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { GroupBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { GroupBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { GroupBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { GroupBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { GroupBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { GroupBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { GroupBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { GroupBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { GroupBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { GroupBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GroupBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { GroupBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { GroupBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { GroupBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { GroupBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { GroupBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GroupBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { GroupBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { GroupBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { GroupBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { GroupBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { GroupBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { GroupBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { GroupBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { GroupBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { GroupBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { GroupBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { GroupBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { GroupBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { GroupBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { GroupBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { GroupBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { GroupBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { GroupBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { GroupBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { GroupBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { GroupBox_StaticClassType() }
      }
}

impl IObject for TGroupBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TGroupBox {}
impl IControl for TGroupBox {}
impl IWinControl for TGroupBox {}

impl TLabel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TLabel {
              0: unsafe { Label_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TLabel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Label_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { Label_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Label_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Label_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Label_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Label_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Label_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Label_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Label_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Label_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Label_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Label_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Label_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Label_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Label_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Label_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Label_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Label_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Label_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Label_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Label_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Label_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Label_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Label_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Label_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Label_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Label_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Label_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Label_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Label_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Label_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Label_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Label_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Label_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Label_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Label_AnchorClient(self.0, aSpace) }
      }

      pub fn OptimalFill(&self) -> bool  {
          unsafe { Label_GetOptimalFill(self.0) }
      }

      pub fn SetOptimalFill(&self, aValue: bool)  {
          unsafe { Label_SetOptimalFill(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Label_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Label_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { Label_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { Label_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Label_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Label_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Label_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Label_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Label_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Label_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Label_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { Label_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Label_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Label_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Label_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Label_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Label_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Label_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Label_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Label_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Label_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Label_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Label_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Label_SetEnabled(self.0, aValue) }
      }

      pub fn FocusControl(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Label_GetFocusControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetFocusControl(&self, aValue: &dyn IWinControl)  {
          unsafe { Label_SetFocusControl(self.0, aValue.Instance()) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Label_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Label_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Label_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Label_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Label_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Label_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Label_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Label_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Label_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Label_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowAccelChar(&self) -> bool  {
          unsafe { Label_GetShowAccelChar(self.0) }
      }

      pub fn SetShowAccelChar(&self, aValue: bool)  {
          unsafe { Label_SetShowAccelChar(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Label_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Label_SetShowHint(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { Label_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { Label_SetTransparent(self.0, aValue) }
      }

      pub fn Layout(&self) -> TTextLayout  {
          unsafe { Label_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TTextLayout)  {
          unsafe { Label_SetLayout(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Label_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Label_SetVisible(self.0, aValue) }
      }

      pub fn WordWrap(&self) -> bool  {
          unsafe { Label_GetWordWrap(self.0) }
      }

      pub fn SetWordWrap(&self, aValue: bool)  {
          unsafe { Label_SetWordWrap(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Label_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Label_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Label_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Label_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Label_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Label_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Label_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Label_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Label_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Label_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Label_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Label_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Label_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Label_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Label_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Label_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Label_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Label_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Label_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Label_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Label_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Label_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Label_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Label_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Label_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Label_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Label_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Label_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Label_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Label_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Label_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Label_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Label_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Label_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Label_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Label_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Label_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Label_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Label_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Label_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Label_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Label_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Label_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Label_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Label_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Label_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Label_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Label_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Label_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Label_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Label_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Label_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Label_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Label_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Label_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Label_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Label_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Label_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Label_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Label_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Label_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Label_StaticClassType() }
      }
}

impl IObject for TLabel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TLabel {}
impl IControl for TLabel {}

impl TListBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TListBox {
              0: unsafe { ListBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ListBox_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { ListBox_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ListBox_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ListBox_DeleteSelected(self.0) }
      }

      pub fn ItemAtPos(&self, pos: *mut TPoint, existing: bool) -> i32  {
          unsafe { ListBox_ItemAtPos(self.0, pos, existing) }
      }

      pub fn ItemRect(&self, index: i32, result: *mut TRect)  {
          unsafe { ListBox_ItemRect(self.0, index, result) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ListBox_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ListBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ListBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ListBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ListBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ListBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ListBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ListBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ListBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ListBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ListBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ListBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ListBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ListBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ListBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ListBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ListBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ListBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ListBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ListBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ListBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ListBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ListBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ListBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ListBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ListBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ListBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ListBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ListBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ListBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ListBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ListBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ListBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ListBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ListBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ListBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ListBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ListBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ListBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ListBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ListBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ListBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ListBox_AnchorClient(self.0, aSpace) }
      }

      pub fn ClickOnSelChange(&self) -> bool  {
          unsafe { ListBox_GetClickOnSelChange(self.0) }
      }

      pub fn SetClickOnSelChange(&self, aValue: bool)  {
          unsafe { ListBox_SetClickOnSelChange(self.0, aValue) }
      }

      pub fn Options(&self) -> TListBoxOptions  {
          unsafe { ListBox_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TListBoxOptions)  {
          unsafe { ListBox_SetOptions(self.0, aValue) }
      }

      pub fn TopIndex(&self) -> i32  {
          unsafe { ListBox_GetTopIndex(self.0) }
      }

      pub fn SetTopIndex(&self, aValue: i32)  {
          unsafe { ListBox_SetTopIndex(self.0, aValue) }
      }

      pub fn Style(&self) -> TListBoxStyle  {
          unsafe { ListBox_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TListBoxStyle)  {
          unsafe { ListBox_SetStyle(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ListBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ListBox_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ListBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ListBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ListBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ListBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { ListBox_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { ListBox_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ListBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ListBox_SetColor(self.0, aValue) }
      }

      pub fn Columns(&self) -> i32  {
          unsafe { ListBox_GetColumns(self.0) }
      }

      pub fn SetColumns(&self, aValue: i32)  {
          unsafe { ListBox_SetColumns(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ListBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ListBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ListBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ListBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ListBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ListBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ListBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ListBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ListBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ListBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ListBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ListBox_SetEnabled(self.0, aValue) }
      }

      pub fn ExtendedSelect(&self) -> bool  {
          unsafe { ListBox_GetExtendedSelect(self.0) }
      }

      pub fn SetExtendedSelect(&self, aValue: bool)  {
          unsafe { ListBox_SetExtendedSelect(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ListBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ListBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { ListBox_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { ListBox_SetItemHeight(self.0, aValue) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { ListBox_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { ListBox_SetItems(self.0, aValue.Instance()) }
      }

      pub fn MultiSelect(&self) -> bool  {
          unsafe { ListBox_GetMultiSelect(self.0) }
      }

      pub fn SetMultiSelect(&self, aValue: bool)  {
          unsafe { ListBox_SetMultiSelect(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ListBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ListBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ListBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ListBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ListBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ListBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ListBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ListBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ListBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ListBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ListBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ListBox_SetShowHint(self.0, aValue) }
      }

      pub fn Sorted(&self) -> bool  {
          unsafe { ListBox_GetSorted(self.0) }
      }

      pub fn SetSorted(&self, aValue: bool)  {
          unsafe { ListBox_SetSorted(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ListBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ListBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ListBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ListBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ListBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ListBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ListBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ListBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ListBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnDrawItem(&self, aEventId: TDrawItemEvent)  {
          unsafe { ListBox_SetOnDrawItem(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ListBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ListBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ListBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ListBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMeasureItem(&self, aEventId: TMeasureItemEvent)  {
          unsafe { ListBox_SetOnMeasureItem(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ListBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ListBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ListBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ListBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ListBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ListBox_GetCount(self.0) }
      }

      pub fn SelCount(&self) -> i32  {
          unsafe { ListBox_GetSelCount(self.0) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ListBox_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ListBox_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ListBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ListBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ListBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ListBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ListBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ListBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ListBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ListBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ListBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ListBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ListBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ListBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ListBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ListBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ListBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ListBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ListBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ListBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ListBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ListBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ListBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ListBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ListBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ListBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ListBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ListBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ListBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ListBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ListBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ListBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ListBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ListBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ListBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ListBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ListBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ListBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ListBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ListBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ListBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ListBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ListBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ListBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ListBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ListBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ListBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ListBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ListBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ListBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ListBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ListBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ListBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ListBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ListBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ListBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ListBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ListBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Selected(&self, index: i32) -> bool  {
          unsafe { ListBox_GetSelected(self.0, index) }
      }

      pub fn SetSelected(&self, index: i32, aValue: bool)  {
          unsafe { ListBox_SetSelected(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ListBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ListBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ListBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListBox_StaticClassType() }
      }
}

impl IObject for TListBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TListBox {}
impl IControl for TListBox {}
impl IWinControl for TListBox {}

impl TComboBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TComboBox {
              0: unsafe { ComboBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TComboBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ComboBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ComboBox_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { ComboBox_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ComboBox_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ComboBox_DeleteSelected(self.0) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ComboBox_Focused(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ComboBox_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ComboBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ComboBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ComboBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ComboBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ComboBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ComboBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ComboBox_FlipChildren(self.0, allLevels) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ComboBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ComboBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ComboBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ComboBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ComboBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ComboBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ComboBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ComboBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ComboBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ComboBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ComboBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ComboBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ComboBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ComboBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ComboBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ComboBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ComboBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ComboBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ComboBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ComboBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ComboBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ComboBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ComboBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ComboBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ComboBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ComboBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ComboBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ComboBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ComboBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ComboBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ComboBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ComboBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ComboBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ComboBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ComboBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ComboBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ComboBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ComboBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ComboBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ComboBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ComboBox_SetAlign(self.0, aValue) }
      }

      pub fn AutoComplete(&self) -> bool  {
          unsafe { ComboBox_GetAutoComplete(self.0) }
      }

      pub fn SetAutoComplete(&self, aValue: bool)  {
          unsafe { ComboBox_SetAutoComplete(self.0, aValue) }
      }

      pub fn AutoDropDown(&self) -> bool  {
          unsafe { ComboBox_GetAutoDropDown(self.0) }
      }

      pub fn SetAutoDropDown(&self, aValue: bool)  {
          unsafe { ComboBox_SetAutoDropDown(self.0, aValue) }
      }

      pub fn Style(&self) -> TComboBoxStyle  {
          unsafe { ComboBox_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TComboBoxStyle)  {
          unsafe { ComboBox_SetStyle(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ComboBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ComboBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ComboBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ComboBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { ComboBox_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { ComboBox_SetCharCase(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ComboBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ComboBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ComboBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ComboBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ComboBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ComboBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ComboBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ComboBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ComboBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ComboBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ComboBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ComboBox_SetDragMode(self.0, aValue) }
      }

      pub fn DropDownCount(&self) -> i32  {
          unsafe { ComboBox_GetDropDownCount(self.0) }
      }

      pub fn SetDropDownCount(&self, aValue: i32)  {
          unsafe { ComboBox_SetDropDownCount(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ComboBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ComboBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ComboBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ComboBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { ComboBox_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { ComboBox_SetItemHeight(self.0, aValue) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ComboBox_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ComboBox_SetItemIndex(self.0, aValue) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { ComboBox_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { ComboBox_SetMaxLength(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ComboBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ComboBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ComboBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ComboBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ComboBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ComboBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ComboBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ComboBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ComboBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ComboBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ComboBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ComboBox_SetShowHint(self.0, aValue) }
      }

      pub fn Sorted(&self) -> bool  {
          unsafe { ComboBox_GetSorted(self.0) }
      }

      pub fn SetSorted(&self, aValue: bool)  {
          unsafe { ComboBox_SetSorted(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ComboBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ComboBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ComboBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ComboBox_SetTabStop(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBox_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { ComboBox_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ComboBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ComboBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ComboBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ComboBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ComboBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnDrawItem(&self, aEventId: TDrawItemEvent)  {
          unsafe { ComboBox_SetOnDrawItem(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ComboBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ComboBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ComboBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ComboBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMeasureItem(&self, aEventId: TMeasureItemEvent)  {
          unsafe { ComboBox_SetOnMeasureItem(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnSelect(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBox_SetOnSelect(self.0, aEventId) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { ComboBox_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { ComboBox_SetItems(self.0, aValue.Instance()) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBox_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { ComboBox_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ComboBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DroppedDown(&self) -> bool  {
          unsafe { ComboBox_GetDroppedDown(self.0) }
      }

      pub fn SetDroppedDown(&self, aValue: bool)  {
          unsafe { ComboBox_SetDroppedDown(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { ComboBox_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { ComboBox_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { ComboBox_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { ComboBox_SetSelStart(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ComboBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ComboBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ComboBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ComboBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ComboBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ComboBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ComboBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ComboBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ComboBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ComboBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ComboBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ComboBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ComboBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ComboBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ComboBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ComboBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ComboBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ComboBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ComboBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ComboBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ComboBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ComboBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ComboBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ComboBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ComboBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ComboBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ComboBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ComboBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ComboBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ComboBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ComboBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ComboBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ComboBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ComboBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ComboBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ComboBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ComboBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ComboBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ComboBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ComboBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ComboBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ComboBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ComboBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ComboBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ComboBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ComboBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ComboBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ComboBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ComboBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ComboBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ComboBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ComboBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ComboBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ComboBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ComboBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ComboBox_StaticClassType() }
      }
}

impl IObject for TComboBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TComboBox {}
impl IControl for TComboBox {}
impl IWinControl for TComboBox {}

impl TPanel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPanel {
              0: unsafe { Panel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPanel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Panel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Panel_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Panel_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Panel_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Panel_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Panel_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Panel_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Panel_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Panel_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Panel_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Panel_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Panel_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Panel_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Panel_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Panel_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Panel_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Panel_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Panel_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { Panel_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Panel_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Panel_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Panel_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Panel_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Panel_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Panel_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Panel_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Panel_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Panel_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Panel_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Panel_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Panel_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Panel_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Panel_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Panel_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Panel_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Panel_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Panel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Panel_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Panel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Panel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Panel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Panel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Panel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Panel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Panel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Panel_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Panel_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Panel_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Panel_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Panel_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Panel_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Panel_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Panel_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { Panel_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { Panel_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Panel_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Panel_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Panel_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Panel_SetAutoSize(self.0, aValue) }
      }

      pub fn BevelInner(&self) -> TBevelCut  {
          unsafe { Panel_GetBevelInner(self.0) }
      }

      pub fn SetBevelInner(&self, aValue: TBevelCut)  {
          unsafe { Panel_SetBevelInner(self.0, aValue) }
      }

      pub fn BevelOuter(&self) -> TBevelCut  {
          unsafe { Panel_GetBevelOuter(self.0) }
      }

      pub fn SetBevelOuter(&self, aValue: TBevelCut)  {
          unsafe { Panel_SetBevelOuter(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Panel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Panel_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { Panel_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { Panel_SetBorderWidth(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { Panel_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { Panel_SetBorderStyle(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Panel_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { Panel_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Panel_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Panel_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Panel_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Panel_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Panel_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Panel_SetUseDockManager(self.0, aValue) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Panel_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Panel_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Panel_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Panel_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Panel_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Panel_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Panel_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Panel_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Panel_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Panel_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Panel_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Panel_SetEnabled(self.0, aValue) }
      }

      pub fn FullRepaint(&self) -> bool  {
          unsafe { Panel_GetFullRepaint(self.0) }
      }

      pub fn SetFullRepaint(&self, aValue: bool)  {
          unsafe { Panel_SetFullRepaint(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Panel_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Panel_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentBackground(&self) -> bool  {
          unsafe { Panel_GetParentBackground(self.0) }
      }

      pub fn SetParentBackground(&self, aValue: bool)  {
          unsafe { Panel_SetParentBackground(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Panel_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Panel_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Panel_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Panel_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Panel_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Panel_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Panel_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Panel_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Panel_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Panel_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Panel_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Panel_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Panel_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Panel_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Panel_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Panel_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Panel_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Panel_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { Panel_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Panel_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { Panel_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Panel_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Panel_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { Panel_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Panel_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { Panel_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Panel_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Panel_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Panel_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { Panel_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { Panel_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { Panel_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Panel_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Panel_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Panel_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Panel_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Panel_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Panel_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Panel_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Panel_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Panel_GetShowing(self.0) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Panel_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Panel_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Panel_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Panel_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Panel_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Panel_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Panel_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Panel_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Panel_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Panel_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Panel_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Panel_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Panel_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Panel_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Panel_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Panel_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Panel_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Panel_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Panel_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Panel_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Panel_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Panel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Panel_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Panel_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Panel_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Panel_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Panel_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Panel_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Panel_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Panel_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Panel_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Panel_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Panel_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Panel_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Panel_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Panel_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Panel_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Panel_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Panel_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Panel_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Panel_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Panel_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Panel_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Panel_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Panel_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Panel_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Panel_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Panel_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Panel_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Panel_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Panel_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Panel_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Panel_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Panel_StaticClassType() }
      }
}

impl IObject for TPanel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPanel {}
impl IControl for TPanel {}
impl IWinControl for TPanel {}

impl TImage {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TImage {
              0: unsafe { Image_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TImage { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Image_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { Image_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Image_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Image_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Image_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Image_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Image_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Image_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Image_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Image_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Image_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Image_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Image_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Image_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Image_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Image_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Image_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Image_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Image_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Image_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Image_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Image_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Image_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Image_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Image_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Image_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Image_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Image_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Image_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Image_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Image_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Image_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Image_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Image_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Image_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Image_AnchorClient(self.0, aSpace) }
      }

      pub fn AntialiasingMode(&self) -> TAntialiasingMode  {
          unsafe { Image_GetAntialiasingMode(self.0) }
      }

      pub fn SetAntialiasingMode(&self, aValue: TAntialiasingMode)  {
          unsafe { Image_SetAntialiasingMode(self.0, aValue) }
      }

      pub fn KeepOriginXWhenClipped(&self) -> bool  {
          unsafe { Image_GetKeepOriginXWhenClipped(self.0) }
      }

      pub fn SetKeepOriginXWhenClipped(&self, aValue: bool)  {
          unsafe { Image_SetKeepOriginXWhenClipped(self.0, aValue) }
      }

      pub fn KeepOriginYWhenClipped(&self) -> bool  {
          unsafe { Image_GetKeepOriginYWhenClipped(self.0) }
      }

      pub fn SetKeepOriginYWhenClipped(&self, aValue: bool)  {
          unsafe { Image_SetKeepOriginYWhenClipped(self.0, aValue) }
      }

      pub fn StretchInEnabled(&self) -> bool  {
          unsafe { Image_GetStretchInEnabled(self.0) }
      }

      pub fn SetStretchInEnabled(&self, aValue: bool)  {
          unsafe { Image_SetStretchInEnabled(self.0, aValue) }
      }

      pub fn StretchOutEnabled(&self) -> bool  {
          unsafe { Image_GetStretchOutEnabled(self.0) }
      }

      pub fn SetStretchOutEnabled(&self, aValue: bool)  {
          unsafe { Image_SetStretchOutEnabled(self.0, aValue) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Image_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Image_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Image_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Image_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Image_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Image_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Image_SetAutoSize(self.0, aValue) }
      }

      pub fn Center(&self) -> bool  {
          unsafe { Image_GetCenter(self.0) }
      }

      pub fn SetCenter(&self, aValue: bool)  {
          unsafe { Image_SetCenter(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Image_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Image_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Image_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Image_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Image_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Image_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Image_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Image_SetEnabled(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Image_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Image_SetParentShowHint(self.0, aValue) }
      }

      pub fn Picture(&self) -> TPicture  {
          TPicture {
              0: unsafe { Image_GetPicture(self.0) }
              , 1: false,
          }
      }

      pub fn SetPicture(&self, aValue: &TPicture)  {
          unsafe { Image_SetPicture(self.0, aValue.Instance()) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Image_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Image_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Proportional(&self) -> bool  {
          unsafe { Image_GetProportional(self.0) }
      }

      pub fn SetProportional(&self, aValue: bool)  {
          unsafe { Image_SetProportional(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Image_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Image_SetShowHint(self.0, aValue) }
      }

      pub fn Stretch(&self) -> bool  {
          unsafe { Image_GetStretch(self.0) }
      }

      pub fn SetStretch(&self, aValue: bool)  {
          unsafe { Image_SetStretch(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { Image_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { Image_SetTransparent(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Image_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Image_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Image_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Image_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Image_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Image_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Image_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Image_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Image_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Image_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Image_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Image_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Image_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Image_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Image_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Image_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Image_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Image_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Image_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Image_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Image_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Image_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Image_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Image_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Image_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Image_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Image_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Image_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Image_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Image_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Image_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Image_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Image_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Image_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Image_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Image_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Image_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Image_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Image_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Image_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Image_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Image_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Image_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Image_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Image_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Image_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Image_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Image_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Image_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Image_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Image_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Image_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Image_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Image_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Image_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Image_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Image_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Image_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Image_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Image_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Image_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Image_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Image_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Image_StaticClassType() }
      }
}

impl IObject for TImage {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TImage {}
impl IControl for TImage {}

impl TLinkLabel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TLinkLabel {
              0: unsafe { LinkLabel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TLinkLabel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  LinkLabel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Invalidate(&self) {
          unsafe { LinkLabel_Invalidate(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { LinkLabel_Repaint(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { LinkLabel_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Update(&self) {
          unsafe { LinkLabel_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { LinkLabel_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { LinkLabel_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { LinkLabel_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { LinkLabel_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { LinkLabel_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { LinkLabel_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { LinkLabel_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { LinkLabel_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { LinkLabel_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { LinkLabel_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { LinkLabel_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { LinkLabel_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { LinkLabel_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { LinkLabel_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { LinkLabel_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { LinkLabel_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LinkLabel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { LinkLabel_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { LinkLabel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LinkLabel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { LinkLabel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { LinkLabel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { LinkLabel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { LinkLabel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LinkLabel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { LinkLabel_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { LinkLabel_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { LinkLabel_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { LinkLabel_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { LinkLabel_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { LinkLabel_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { LinkLabel_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { LinkLabel_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { LinkLabel_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { LinkLabel_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { LinkLabel_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { LinkLabel_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { LinkLabel_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { LinkLabel_SetAutoSize(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LinkLabel_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { LinkLabel_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { LinkLabel_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { LinkLabel_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { LinkLabel_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { LinkLabel_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { LinkLabel_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { LinkLabel_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { LinkLabel_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { LinkLabel_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { LinkLabel_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { LinkLabel_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { LinkLabel_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { LinkLabel_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { LinkLabel_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { LinkLabel_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { LinkLabel_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { LinkLabel_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { LinkLabel_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { LinkLabel_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { LinkLabel_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { LinkLabel_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { LinkLabel_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { LinkLabel_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { LinkLabel_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { LinkLabel_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { LinkLabel_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { LinkLabel_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { LinkLabel_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { LinkLabel_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { LinkLabel_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { LinkLabel_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { LinkLabel_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { LinkLabel_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { LinkLabel_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { LinkLabel_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { LinkLabel_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { LinkLabel_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { LinkLabel_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnLinkClick(&self, aEventId: TSysLinkEvent)  {
          unsafe { LinkLabel_SetOnLinkClick(self.0, aEventId) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { LinkLabel_GetMouseInClient(self.0) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { LinkLabel_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { LinkLabel_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { LinkLabel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { LinkLabel_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { LinkLabel_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { LinkLabel_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { LinkLabel_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { LinkLabel_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { LinkLabel_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { LinkLabel_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { LinkLabel_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { LinkLabel_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { LinkLabel_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { LinkLabel_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { LinkLabel_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { LinkLabel_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { LinkLabel_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { LinkLabel_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { LinkLabel_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { LinkLabel_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { LinkLabel_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { LinkLabel_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { LinkLabel_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { LinkLabel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { LinkLabel_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { LinkLabel_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { LinkLabel_SetHeight(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LinkLabel_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { LinkLabel_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { LinkLabel_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { LinkLabel_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { LinkLabel_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { LinkLabel_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LinkLabel_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { LinkLabel_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { LinkLabel_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { LinkLabel_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LinkLabel_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { LinkLabel_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LinkLabel_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { LinkLabel_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LinkLabel_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { LinkLabel_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LinkLabel_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { LinkLabel_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { LinkLabel_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { LinkLabel_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { LinkLabel_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LinkLabel_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { LinkLabel_StaticClassType() }
      }
}

impl IObject for TLinkLabel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TLinkLabel {}
impl IControl for TLinkLabel {}
impl IWinControl for TLinkLabel {}

impl TSpeedButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSpeedButton {
              0: unsafe { SpeedButton_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSpeedButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  SpeedButton_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Click(&self)  {
          unsafe { SpeedButton_Click(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { SpeedButton_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { SpeedButton_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { SpeedButton_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { SpeedButton_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { SpeedButton_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { SpeedButton_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { SpeedButton_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { SpeedButton_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { SpeedButton_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { SpeedButton_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { SpeedButton_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { SpeedButton_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { SpeedButton_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { SpeedButton_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { SpeedButton_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { SpeedButton_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { SpeedButton_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { SpeedButton_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { SpeedButton_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { SpeedButton_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpeedButton_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { SpeedButton_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SpeedButton_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpeedButton_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SpeedButton_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SpeedButton_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SpeedButton_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SpeedButton_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpeedButton_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { SpeedButton_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { SpeedButton_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { SpeedButton_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { SpeedButton_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { SpeedButton_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { SpeedButton_AnchorClient(self.0, aSpace) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { SpeedButton_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { SpeedButton_SetImageIndex(self.0, aValue) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { SpeedButton_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { SpeedButton_SetImages(self.0, aValue.Instance()) }
      }

      pub fn ImageWidth(&self) -> i32  {
          unsafe { SpeedButton_GetImageWidth(self.0) }
      }

      pub fn SetImageWidth(&self, aValue: i32)  {
          unsafe { SpeedButton_SetImageWidth(self.0, aValue) }
      }

      pub fn ShowCaption(&self) -> bool  {
          unsafe { SpeedButton_GetShowCaption(self.0) }
      }

      pub fn SetShowCaption(&self, aValue: bool)  {
          unsafe { SpeedButton_SetShowCaption(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { SpeedButton_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { SpeedButton_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { SpeedButton_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { SpeedButton_SetAlign(self.0, aValue) }
      }

      pub fn AllowAllUp(&self) -> bool  {
          unsafe { SpeedButton_GetAllowAllUp(self.0) }
      }

      pub fn SetAllowAllUp(&self, aValue: bool)  {
          unsafe { SpeedButton_SetAllowAllUp(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { SpeedButton_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { SpeedButton_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { SpeedButton_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { SpeedButton_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { SpeedButton_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { SpeedButton_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn GroupIndex(&self) -> i32  {
          unsafe { SpeedButton_GetGroupIndex(self.0) }
      }

      pub fn SetGroupIndex(&self, aValue: i32)  {
          unsafe { SpeedButton_SetGroupIndex(self.0, aValue) }
      }

      pub fn Down(&self) -> bool  {
          unsafe { SpeedButton_GetDown(self.0) }
      }

      pub fn SetDown(&self, aValue: bool)  {
          unsafe { SpeedButton_SetDown(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpeedButton_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { SpeedButton_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { SpeedButton_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { SpeedButton_SetEnabled(self.0, aValue) }
      }

      pub fn Flat(&self) -> bool  {
          unsafe { SpeedButton_GetFlat(self.0) }
      }

      pub fn SetFlat(&self, aValue: bool)  {
          unsafe { SpeedButton_SetFlat(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { SpeedButton_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { SpeedButton_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Glyph(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { SpeedButton_GetGlyph(self.0) }
              , 1: false,
          }
      }

      pub fn SetGlyph(&self, aValue: &TBitmap)  {
          unsafe { SpeedButton_SetGlyph(self.0, aValue.Instance()) }
      }

      pub fn Layout(&self) -> TButtonLayout  {
          unsafe { SpeedButton_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TButtonLayout)  {
          unsafe { SpeedButton_SetLayout(self.0, aValue) }
      }

      pub fn NumGlyphs(&self) -> TNumGlyphs  {
          unsafe { SpeedButton_GetNumGlyphs(self.0) }
      }

      pub fn SetNumGlyphs(&self, aValue: TNumGlyphs)  {
          unsafe { SpeedButton_SetNumGlyphs(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { SpeedButton_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { SpeedButton_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { SpeedButton_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { SpeedButton_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { SpeedButton_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { SpeedButton_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { SpeedButton_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { SpeedButton_SetShowHint(self.0, aValue) }
      }

      pub fn Spacing(&self) -> i32  {
          unsafe { SpeedButton_GetSpacing(self.0) }
      }

      pub fn SetSpacing(&self, aValue: i32)  {
          unsafe { SpeedButton_SetSpacing(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { SpeedButton_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { SpeedButton_SetTransparent(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { SpeedButton_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { SpeedButton_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { SpeedButton_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { SpeedButton_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { SpeedButton_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { SpeedButton_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { SpeedButton_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { SpeedButton_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { SpeedButton_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { SpeedButton_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { SpeedButton_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { SpeedButton_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { SpeedButton_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { SpeedButton_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { SpeedButton_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { SpeedButton_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { SpeedButton_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { SpeedButton_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { SpeedButton_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { SpeedButton_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { SpeedButton_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { SpeedButton_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { SpeedButton_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { SpeedButton_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { SpeedButton_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { SpeedButton_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { SpeedButton_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { SpeedButton_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { SpeedButton_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { SpeedButton_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { SpeedButton_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { SpeedButton_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { SpeedButton_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { SpeedButton_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpeedButton_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { SpeedButton_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { SpeedButton_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { SpeedButton_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { SpeedButton_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { SpeedButton_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpeedButton_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { SpeedButton_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { SpeedButton_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { SpeedButton_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpeedButton_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { SpeedButton_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpeedButton_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { SpeedButton_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpeedButton_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { SpeedButton_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpeedButton_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { SpeedButton_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { SpeedButton_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { SpeedButton_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { SpeedButton_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpeedButton_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SpeedButton_StaticClassType() }
      }
}

impl IObject for TSpeedButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSpeedButton {}
impl IControl for TSpeedButton {}

impl TSplitter {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSplitter {
              0: unsafe { Splitter_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSplitter { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Splitter_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { Splitter_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Splitter_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Splitter_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Splitter_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Splitter_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Splitter_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Splitter_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Splitter_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Splitter_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Splitter_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Splitter_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Splitter_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Splitter_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Splitter_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Splitter_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Splitter_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Splitter_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Splitter_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Splitter_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Splitter_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Splitter_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Splitter_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Splitter_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Splitter_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Splitter_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Splitter_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Splitter_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Splitter_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Splitter_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Splitter_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Splitter_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Splitter_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Splitter_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Splitter_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Splitter_AnchorClient(self.0, aSpace) }
      }

      pub fn ResizeAnchor(&self) -> TAnchorKind  {
          unsafe { Splitter_GetResizeAnchor(self.0) }
      }

      pub fn SetResizeAnchor(&self, aValue: TAnchorKind)  {
          unsafe { Splitter_SetResizeAnchor(self.0, aValue) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Splitter_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Splitter_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Splitter_SetAlign(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Splitter_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Splitter_SetColor(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Splitter_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Splitter_SetCursor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Splitter_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Splitter_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn MinSize(&self) -> i32  {
          unsafe { Splitter_GetMinSize(self.0) }
      }

      pub fn SetMinSize(&self, aValue: i32)  {
          unsafe { Splitter_SetMinSize(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Splitter_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Splitter_SetParentColor(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Splitter_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Splitter_SetVisible(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Splitter_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Splitter_SetWidth(self.0, aValue) }
      }

      pub fn SetOnPaint(&self, aEventId: TNotifyEvent)  {
          unsafe { Splitter_SetOnPaint(self.0, aEventId) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Splitter_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Splitter_SetEnabled(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Splitter_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Splitter_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Splitter_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Splitter_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Splitter_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Splitter_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Splitter_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Splitter_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Splitter_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Splitter_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Splitter_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Splitter_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Splitter_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Splitter_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Splitter_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Splitter_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Splitter_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Splitter_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Splitter_GetFloating(self.0) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Splitter_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Splitter_SetShowHint(self.0, aValue) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Splitter_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Splitter_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Splitter_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Splitter_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Splitter_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Splitter_SetTop(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Splitter_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Splitter_SetHeight(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Splitter_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Splitter_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Splitter_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Splitter_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Splitter_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Splitter_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Splitter_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Splitter_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Splitter_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Splitter_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Splitter_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Splitter_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Splitter_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Splitter_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Splitter_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Splitter_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Splitter_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Splitter_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Splitter_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Splitter_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Splitter_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Splitter_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Splitter_StaticClassType() }
      }
}

impl IObject for TSplitter {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSplitter {}
impl IControl for TSplitter {}

impl TRadioGroup {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TRadioGroup {
              0: unsafe { RadioGroup_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TRadioGroup { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  RadioGroup_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { RadioGroup_FlipChildren(self.0, allLevels) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { RadioGroup_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { RadioGroup_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { RadioGroup_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { RadioGroup_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { RadioGroup_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { RadioGroup_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { RadioGroup_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { RadioGroup_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { RadioGroup_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { RadioGroup_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { RadioGroup_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { RadioGroup_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { RadioGroup_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { RadioGroup_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { RadioGroup_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { RadioGroup_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { RadioGroup_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { RadioGroup_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { RadioGroup_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RadioGroup_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RadioGroup_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { RadioGroup_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { RadioGroup_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { RadioGroup_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { RadioGroup_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { RadioGroup_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RadioGroup_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RadioGroup_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { RadioGroup_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { RadioGroup_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { RadioGroup_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { RadioGroup_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { RadioGroup_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { RadioGroup_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioGroup_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { RadioGroup_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { RadioGroup_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioGroup_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { RadioGroup_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { RadioGroup_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { RadioGroup_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { RadioGroup_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RadioGroup_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RadioGroup_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RadioGroup_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RadioGroup_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RadioGroup_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { RadioGroup_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { RadioGroup_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { RadioGroup_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { RadioGroup_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { RadioGroup_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { RadioGroup_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { RadioGroup_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { RadioGroup_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioGroup_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { RadioGroup_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { RadioGroup_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { RadioGroup_SetColor(self.0, aValue) }
      }

      pub fn Columns(&self) -> i32  {
          unsafe { RadioGroup_GetColumns(self.0) }
      }

      pub fn SetColumns(&self, aValue: i32)  {
          unsafe { RadioGroup_SetColumns(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { RadioGroup_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { RadioGroup_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { RadioGroup_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { RadioGroup_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { RadioGroup_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { RadioGroup_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { RadioGroup_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { RadioGroup_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { RadioGroup_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { RadioGroup_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { RadioGroup_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { RadioGroup_SetItemIndex(self.0, aValue) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { RadioGroup_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { RadioGroup_SetItems(self.0, aValue.Instance()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { RadioGroup_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { RadioGroup_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { RadioGroup_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { RadioGroup_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { RadioGroup_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { RadioGroup_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { RadioGroup_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { RadioGroup_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { RadioGroup_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { RadioGroup_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { RadioGroup_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { RadioGroup_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { RadioGroup_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { RadioGroup_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { RadioGroup_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { RadioGroup_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { RadioGroup_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { RadioGroup_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { RadioGroup_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { RadioGroup_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioGroup_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { RadioGroup_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { RadioGroup_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { RadioGroup_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioGroup_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { RadioGroup_SetOnExit(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { RadioGroup_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { RadioGroup_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { RadioGroup_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { RadioGroup_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { RadioGroup_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { RadioGroup_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { RadioGroup_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { RadioGroup_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { RadioGroup_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { RadioGroup_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { RadioGroup_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { RadioGroup_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { RadioGroup_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { RadioGroup_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { RadioGroup_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { RadioGroup_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { RadioGroup_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { RadioGroup_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { RadioGroup_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { RadioGroup_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { RadioGroup_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { RadioGroup_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { RadioGroup_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { RadioGroup_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { RadioGroup_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { RadioGroup_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { RadioGroup_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { RadioGroup_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { RadioGroup_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { RadioGroup_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { RadioGroup_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { RadioGroup_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { RadioGroup_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { RadioGroup_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { RadioGroup_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { RadioGroup_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { RadioGroup_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { RadioGroup_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { RadioGroup_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { RadioGroup_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioGroup_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { RadioGroup_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { RadioGroup_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { RadioGroup_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { RadioGroup_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { RadioGroup_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RadioGroup_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { RadioGroup_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { RadioGroup_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { RadioGroup_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioGroup_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { RadioGroup_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioGroup_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { RadioGroup_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioGroup_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { RadioGroup_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioGroup_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { RadioGroup_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { RadioGroup_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { RadioGroup_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { RadioGroup_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { RadioGroup_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RadioGroup_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RadioGroup_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { RadioGroup_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RadioGroup_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { RadioGroup_StaticClassType() }
      }
}

impl IObject for TRadioGroup {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TRadioGroup {}
impl IControl for TRadioGroup {}
impl IWinControl for TRadioGroup {}

impl TStaticText {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TStaticText {
              0: unsafe { StaticText_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStaticText { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StaticText_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { StaticText_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { StaticText_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { StaticText_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { StaticText_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { StaticText_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { StaticText_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { StaticText_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { StaticText_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { StaticText_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { StaticText_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { StaticText_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { StaticText_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { StaticText_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { StaticText_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { StaticText_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { StaticText_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { StaticText_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { StaticText_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { StaticText_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { StaticText_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StaticText_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StaticText_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { StaticText_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { StaticText_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { StaticText_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { StaticText_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { StaticText_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StaticText_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StaticText_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { StaticText_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { StaticText_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { StaticText_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { StaticText_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { StaticText_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { StaticText_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StaticText_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { StaticText_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StaticText_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StaticText_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StaticText_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StaticText_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { StaticText_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StaticText_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StaticText_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StaticText_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StaticText_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StaticText_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StaticText_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { StaticText_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { StaticText_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { StaticText_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { StaticText_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { StaticText_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { StaticText_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { StaticText_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { StaticText_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { StaticText_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { StaticText_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { StaticText_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { StaticText_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TStaticBorderStyle  {
          unsafe { StaticText_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TStaticBorderStyle)  {
          unsafe { StaticText_SetBorderStyle(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StaticText_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { StaticText_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { StaticText_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { StaticText_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { StaticText_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { StaticText_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { StaticText_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { StaticText_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { StaticText_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { StaticText_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { StaticText_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { StaticText_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { StaticText_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { StaticText_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { StaticText_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { StaticText_SetEnabled(self.0, aValue) }
      }

      pub fn FocusControl(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { StaticText_GetFocusControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetFocusControl(&self, aValue: &dyn IWinControl)  {
          unsafe { StaticText_SetFocusControl(self.0, aValue.Instance()) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { StaticText_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { StaticText_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { StaticText_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { StaticText_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { StaticText_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { StaticText_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { StaticText_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { StaticText_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { StaticText_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { StaticText_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { StaticText_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { StaticText_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowAccelChar(&self) -> bool  {
          unsafe { StaticText_GetShowAccelChar(self.0) }
      }

      pub fn SetShowAccelChar(&self, aValue: bool)  {
          unsafe { StaticText_SetShowAccelChar(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { StaticText_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { StaticText_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { StaticText_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { StaticText_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { StaticText_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { StaticText_SetTabStop(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { StaticText_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { StaticText_SetTransparent(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { StaticText_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { StaticText_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StaticText_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { StaticText_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StaticText_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { StaticText_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { StaticText_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { StaticText_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { StaticText_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { StaticText_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { StaticText_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { StaticText_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { StaticText_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { StaticText_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { StaticText_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { StaticText_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { StaticText_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { StaticText_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { StaticText_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { StaticText_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { StaticText_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { StaticText_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { StaticText_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { StaticText_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { StaticText_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { StaticText_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { StaticText_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { StaticText_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { StaticText_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { StaticText_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { StaticText_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { StaticText_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { StaticText_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { StaticText_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { StaticText_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { StaticText_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { StaticText_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { StaticText_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { StaticText_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { StaticText_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { StaticText_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { StaticText_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { StaticText_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { StaticText_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { StaticText_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { StaticText_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { StaticText_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { StaticText_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { StaticText_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { StaticText_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { StaticText_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { StaticText_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { StaticText_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StaticText_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { StaticText_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { StaticText_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { StaticText_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { StaticText_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { StaticText_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StaticText_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { StaticText_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { StaticText_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { StaticText_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StaticText_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { StaticText_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StaticText_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { StaticText_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StaticText_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { StaticText_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StaticText_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { StaticText_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { StaticText_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { StaticText_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { StaticText_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { StaticText_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StaticText_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StaticText_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { StaticText_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StaticText_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StaticText_StaticClassType() }
      }
}

impl IObject for TStaticText {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TStaticText {}
impl IControl for TStaticText {}
impl IWinControl for TStaticText {}

impl TColorBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TColorBox {
              0: unsafe { ColorBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TColorBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ColorBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ColorBox_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { ColorBox_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ColorBox_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ColorBox_DeleteSelected(self.0) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ColorBox_Focused(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ColorBox_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ColorBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ColorBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ColorBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ColorBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ColorBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ColorBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ColorBox_FlipChildren(self.0, allLevels) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ColorBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ColorBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ColorBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ColorBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ColorBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ColorBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ColorBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ColorBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ColorBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ColorBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ColorBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ColorBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ColorBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ColorBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ColorBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ColorBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ColorBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ColorBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ColorBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ColorBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ColorBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ColorBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ColorBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ColorBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ColorBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ColorBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ColorBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ColorBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ColorBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ColorBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ColorBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ColorBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ColorBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ColorBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ColorBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ColorBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ColorBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ColorBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ColorBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ColorBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ColorBox_SetAlign(self.0, aValue) }
      }

      pub fn AutoComplete(&self) -> bool  {
          unsafe { ColorBox_GetAutoComplete(self.0) }
      }

      pub fn SetAutoComplete(&self, aValue: bool)  {
          unsafe { ColorBox_SetAutoComplete(self.0, aValue) }
      }

      pub fn AutoDropDown(&self) -> bool  {
          unsafe { ColorBox_GetAutoDropDown(self.0) }
      }

      pub fn SetAutoDropDown(&self, aValue: bool)  {
          unsafe { ColorBox_SetAutoDropDown(self.0, aValue) }
      }

      pub fn DefaultColorColor(&self) -> TColor  {
          unsafe { ColorBox_GetDefaultColorColor(self.0) }
      }

      pub fn SetDefaultColorColor(&self, aValue: TColor)  {
          unsafe { ColorBox_SetDefaultColorColor(self.0, aValue) }
      }

      pub fn NoneColorColor(&self) -> TColor  {
          unsafe { ColorBox_GetNoneColorColor(self.0) }
      }

      pub fn SetNoneColorColor(&self, aValue: TColor)  {
          unsafe { ColorBox_SetNoneColorColor(self.0, aValue) }
      }

      pub fn Selected(&self) -> TColor  {
          unsafe { ColorBox_GetSelected(self.0) }
      }

      pub fn SetSelected(&self, aValue: TColor)  {
          unsafe { ColorBox_SetSelected(self.0, aValue) }
      }

      pub fn Style(&self) -> TColorBoxStyle  {
          unsafe { ColorBox_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TColorBoxStyle)  {
          unsafe { ColorBox_SetStyle(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ColorBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ColorBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ColorBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ColorBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ColorBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ColorBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ColorBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ColorBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ColorBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ColorBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DropDownCount(&self) -> i32  {
          unsafe { ColorBox_GetDropDownCount(self.0) }
      }

      pub fn SetDropDownCount(&self, aValue: i32)  {
          unsafe { ColorBox_SetDropDownCount(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ColorBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ColorBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ColorBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ColorBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { ColorBox_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { ColorBox_SetItemHeight(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ColorBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ColorBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ColorBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ColorBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ColorBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ColorBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ColorBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ColorBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ColorBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ColorBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ColorBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ColorBox_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ColorBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ColorBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ColorBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ColorBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ColorBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ColorBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ColorBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ColorBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ColorBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ColorBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ColorBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ColorBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ColorBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnSelect(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorBox_SetOnSelect(self.0, aEventId) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { ColorBox_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { ColorBox_SetCharCase(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorBox_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { ColorBox_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ColorBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DroppedDown(&self) -> bool  {
          unsafe { ColorBox_GetDroppedDown(self.0) }
      }

      pub fn SetDroppedDown(&self, aValue: bool)  {
          unsafe { ColorBox_SetDroppedDown(self.0, aValue) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { ColorBox_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { ColorBox_SetItems(self.0, aValue.Instance()) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { ColorBox_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { ColorBox_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { ColorBox_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { ColorBox_SetSelStart(self.0, aValue) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ColorBox_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ColorBox_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ColorBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ColorBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ColorBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ColorBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ColorBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ColorBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ColorBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ColorBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ColorBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ColorBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ColorBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ColorBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ColorBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ColorBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ColorBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ColorBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ColorBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ColorBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ColorBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ColorBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ColorBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ColorBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ColorBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ColorBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ColorBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ColorBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ColorBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ColorBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ColorBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ColorBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ColorBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ColorBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ColorBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ColorBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ColorBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ColorBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ColorBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ColorBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ColorBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ColorBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ColorBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ColorBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ColorBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ColorBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ColorBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ColorBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ColorBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ColorBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ColorBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ColorBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ColorBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ColorBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ColorBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ColorBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ColorBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ColorBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Colors(&self, index: i32) -> TColor  {
          unsafe { ColorBox_GetColors(self.0, index) }
      }

      pub fn ColorNames<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorBox_GetColorNames(self.0, index)).to_string_lossy()  }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ColorBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ColorBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ColorBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ColorBox_StaticClassType() }
      }
}

impl IObject for TColorBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TColorBox {}
impl IControl for TColorBox {}
impl IWinControl for TColorBox {}

impl TColorListBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TColorListBox {
              0: unsafe { ColorListBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TColorListBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ColorListBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ColorListBox_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { ColorListBox_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ColorListBox_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ColorListBox_DeleteSelected(self.0) }
      }

      pub fn ItemAtPos(&self, pos: *mut TPoint, existing: bool) -> i32  {
          unsafe { ColorListBox_ItemAtPos(self.0, pos, existing) }
      }

      pub fn ItemRect(&self, index: i32, result: *mut TRect)  {
          unsafe { ColorListBox_ItemRect(self.0, index, result) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ColorListBox_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ColorListBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ColorListBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ColorListBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ColorListBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ColorListBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ColorListBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ColorListBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ColorListBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ColorListBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ColorListBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ColorListBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ColorListBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ColorListBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ColorListBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ColorListBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ColorListBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ColorListBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ColorListBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ColorListBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ColorListBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ColorListBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ColorListBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ColorListBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ColorListBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ColorListBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ColorListBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ColorListBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ColorListBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ColorListBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ColorListBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ColorListBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ColorListBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ColorListBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ColorListBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ColorListBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorListBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ColorListBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ColorListBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorListBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ColorListBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ColorListBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ColorListBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ColorListBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorListBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ColorListBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ColorListBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ColorListBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ColorListBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ColorListBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ColorListBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ColorListBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ColorListBox_SetAlign(self.0, aValue) }
      }

      pub fn DefaultColorColor(&self) -> TColor  {
          unsafe { ColorListBox_GetDefaultColorColor(self.0) }
      }

      pub fn SetDefaultColorColor(&self, aValue: TColor)  {
          unsafe { ColorListBox_SetDefaultColorColor(self.0, aValue) }
      }

      pub fn NoneColorColor(&self) -> TColor  {
          unsafe { ColorListBox_GetNoneColorColor(self.0) }
      }

      pub fn SetNoneColorColor(&self, aValue: TColor)  {
          unsafe { ColorListBox_SetNoneColorColor(self.0, aValue) }
      }

      pub fn Selected(&self) -> TColor  {
          unsafe { ColorListBox_GetSelected(self.0) }
      }

      pub fn SetSelected(&self, aValue: TColor)  {
          unsafe { ColorListBox_SetSelected(self.0, aValue) }
      }

      pub fn Style(&self) -> TColorBoxStyle  {
          unsafe { ColorListBox_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TColorBoxStyle)  {
          unsafe { ColorListBox_SetStyle(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ColorListBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ColorListBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ColorListBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ColorListBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ColorListBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ColorListBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ColorListBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ColorListBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ColorListBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ColorListBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ColorListBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ColorListBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ColorListBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ColorListBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { ColorListBox_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { ColorListBox_SetItemHeight(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ColorListBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ColorListBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ColorListBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ColorListBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ColorListBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ColorListBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ColorListBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ColorListBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ColorListBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ColorListBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ColorListBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ColorListBox_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ColorListBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ColorListBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ColorListBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ColorListBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ColorListBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ColorListBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ColorListBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ColorListBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ColorListBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ColorListBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ColorListBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ColorListBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ColorListBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ColorListBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorListBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ColorListBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ColorListBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ColorListBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ColorListBox_GetCount(self.0) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { ColorListBox_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { ColorListBox_SetItems(self.0, aValue.Instance()) }
      }

      pub fn TopIndex(&self) -> i32  {
          unsafe { ColorListBox_GetTopIndex(self.0) }
      }

      pub fn SetTopIndex(&self, aValue: i32)  {
          unsafe { ColorListBox_SetTopIndex(self.0, aValue) }
      }

      pub fn MultiSelect(&self) -> bool  {
          unsafe { ColorListBox_GetMultiSelect(self.0) }
      }

      pub fn SetMultiSelect(&self, aValue: bool)  {
          unsafe { ColorListBox_SetMultiSelect(self.0, aValue) }
      }

      pub fn SelCount(&self) -> i32  {
          unsafe { ColorListBox_GetSelCount(self.0) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ColorListBox_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ColorListBox_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ColorListBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ColorListBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ColorListBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ColorListBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ColorListBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ColorListBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ColorListBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ColorListBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ColorListBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ColorListBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ColorListBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ColorListBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ColorListBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ColorListBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ColorListBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ColorListBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ColorListBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ColorListBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ColorListBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ColorListBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ColorListBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ColorListBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ColorListBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ColorListBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ColorListBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ColorListBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ColorListBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ColorListBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ColorListBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ColorListBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ColorListBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ColorListBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ColorListBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ColorListBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ColorListBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ColorListBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ColorListBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ColorListBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ColorListBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ColorListBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorListBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ColorListBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ColorListBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ColorListBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ColorListBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ColorListBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorListBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ColorListBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ColorListBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ColorListBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorListBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ColorListBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorListBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ColorListBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorListBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ColorListBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorListBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ColorListBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ColorListBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ColorListBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ColorListBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ColorListBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Colors(&self, index: i32) -> TColor  {
          unsafe { ColorListBox_GetColors(self.0, index) }
      }

      pub fn ColorNames<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorListBox_GetColorNames(self.0, index)).to_string_lossy()  }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ColorListBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ColorListBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ColorListBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ColorListBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ColorListBox_StaticClassType() }
      }
}

impl IObject for TColorListBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TColorListBox {}
impl IControl for TColorListBox {}
impl IWinControl for TColorListBox {}

impl TTrayIcon {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTrayIcon {
              0: unsafe { TrayIcon_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTrayIcon { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TrayIcon_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ShowBalloonHint(&self)  {
          unsafe { TrayIcon_ShowBalloonHint(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { TrayIcon_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrayIcon_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { TrayIcon_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { TrayIcon_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TrayIcon_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrayIcon_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TrayIcon_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TrayIcon_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TrayIcon_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TrayIcon_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrayIcon_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnimateInterval(&self) -> u32  {
          unsafe { TrayIcon_GetAnimateInterval(self.0) }
      }

      pub fn SetAnimateInterval(&self, aValue: u32)  {
          unsafe { TrayIcon_SetAnimateInterval(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrayIcon_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { TrayIcon_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn BalloonHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrayIcon_GetBalloonHint(self.0)).to_string_lossy()  }
      }

      pub fn SetBalloonHint(&self, aValue: &str)  {
          unsafe { TrayIcon_SetBalloonHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn BalloonTitle<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrayIcon_GetBalloonTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetBalloonTitle(&self, aValue: &str)  {
          unsafe { TrayIcon_SetBalloonTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn BalloonTimeout(&self) -> i32  {
          unsafe { TrayIcon_GetBalloonTimeout(self.0) }
      }

      pub fn SetBalloonTimeout(&self, aValue: i32)  {
          unsafe { TrayIcon_SetBalloonTimeout(self.0, aValue) }
      }

      pub fn BalloonFlags(&self) -> TBalloonFlags  {
          unsafe { TrayIcon_GetBalloonFlags(self.0) }
      }

      pub fn SetBalloonFlags(&self, aValue: TBalloonFlags)  {
          unsafe { TrayIcon_SetBalloonFlags(self.0, aValue) }
      }

      pub fn Icon(&self) -> TIcon  {
          TIcon {
              0: unsafe { TrayIcon_GetIcon(self.0) }
              , 1: false,
          }
      }

      pub fn SetIcon(&self, aValue: &TIcon)  {
          unsafe { TrayIcon_SetIcon(self.0, aValue.Instance()) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { TrayIcon_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { TrayIcon_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { TrayIcon_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { TrayIcon_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { TrayIcon_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { TrayIcon_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { TrayIcon_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { TrayIcon_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { TrayIcon_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { TrayIcon_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { TrayIcon_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { TrayIcon_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { TrayIcon_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrayIcon_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TrayIcon_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { TrayIcon_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { TrayIcon_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { TrayIcon_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TrayIcon_StaticClassType() }
      }
}

impl IObject for TTrayIcon {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTrayIcon {}

impl TOpenDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TOpenDialog {
              0: unsafe { OpenDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TOpenDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  OpenDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { OpenDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { OpenDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { OpenDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { OpenDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { OpenDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { OpenDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { OpenDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { OpenDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { OpenDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Files(&self) -> TStrings  {
          TStrings {
              0: unsafe { OpenDialog_GetFiles(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultExt<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetDefaultExt(self.0)).to_string_lossy()  }
      }

      pub fn SetDefaultExt(&self, aValue: &str)  {
          unsafe { OpenDialog_SetDefaultExt(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetFileName(self.0)).to_string_lossy()  }
      }

      pub fn SetFileName(&self, aValue: &str)  {
          unsafe { OpenDialog_SetFileName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Filter<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetFilter(self.0)).to_string_lossy()  }
      }

      pub fn SetFilter(&self, aValue: &str)  {
          unsafe { OpenDialog_SetFilter(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FilterIndex(&self) -> i32  {
          unsafe { OpenDialog_GetFilterIndex(self.0) }
      }

      pub fn SetFilterIndex(&self, aValue: i32)  {
          unsafe { OpenDialog_SetFilterIndex(self.0, aValue) }
      }

      pub fn InitialDir<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetInitialDir(self.0)).to_string_lossy()  }
      }

      pub fn SetInitialDir(&self, aValue: &str)  {
          unsafe { OpenDialog_SetInitialDir(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TOpenOptions  {
          unsafe { OpenDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TOpenOptions)  {
          unsafe { OpenDialog_SetOptions(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { OpenDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { OpenDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { OpenDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { OpenDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { OpenDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { OpenDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { OpenDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { OpenDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { OpenDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { OpenDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { OpenDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { OpenDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { OpenDialog_StaticClassType() }
      }
}

impl IObject for TOpenDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TOpenDialog {}

impl TSaveDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSaveDialog {
              0: unsafe { SaveDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSaveDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  SaveDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { SaveDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { SaveDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SaveDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { SaveDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { SaveDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SaveDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SaveDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SaveDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SaveDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SaveDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SaveDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SaveDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Files(&self) -> TStrings  {
          TStrings {
              0: unsafe { SaveDialog_GetFiles(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultExt<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetDefaultExt(self.0)).to_string_lossy()  }
      }

      pub fn SetDefaultExt(&self, aValue: &str)  {
          unsafe { SaveDialog_SetDefaultExt(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetFileName(self.0)).to_string_lossy()  }
      }

      pub fn SetFileName(&self, aValue: &str)  {
          unsafe { SaveDialog_SetFileName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Filter<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetFilter(self.0)).to_string_lossy()  }
      }

      pub fn SetFilter(&self, aValue: &str)  {
          unsafe { SaveDialog_SetFilter(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FilterIndex(&self) -> i32  {
          unsafe { SaveDialog_GetFilterIndex(self.0) }
      }

      pub fn SetFilterIndex(&self, aValue: i32)  {
          unsafe { SaveDialog_SetFilterIndex(self.0, aValue) }
      }

      pub fn InitialDir<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetInitialDir(self.0)).to_string_lossy()  }
      }

      pub fn SetInitialDir(&self, aValue: &str)  {
          unsafe { SaveDialog_SetInitialDir(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TOpenOptions  {
          unsafe { SaveDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TOpenOptions)  {
          unsafe { SaveDialog_SetOptions(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { SaveDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { SaveDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { SaveDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { SaveDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { SaveDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { SaveDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { SaveDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { SaveDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SaveDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { SaveDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { SaveDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { SaveDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { SaveDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SaveDialog_StaticClassType() }
      }
}

impl IObject for TSaveDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSaveDialog {}

impl TColorDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TColorDialog {
              0: unsafe { ColorDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TColorDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ColorDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { ColorDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ColorDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ColorDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ColorDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ColorDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ColorDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ColorDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ColorDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ColorDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ColorDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ColorDialog_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ColorDialog_SetColor(self.0, aValue) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ColorDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { ColorDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ColorDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ColorDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ColorDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ColorDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ColorDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ColorDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ColorDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ColorDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ColorDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ColorDialog_StaticClassType() }
      }
}

impl IObject for TColorDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TColorDialog {}

impl TFontDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TFontDialog {
              0: unsafe { FontDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TFontDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  FontDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { FontDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { FontDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FontDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { FontDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { FontDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { FontDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FontDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { FontDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { FontDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { FontDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { FontDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FontDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { FontDialog_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { FontDialog_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Options(&self) -> TFontDialogOptions  {
          unsafe { FontDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TFontDialogOptions)  {
          unsafe { FontDialog_SetOptions(self.0, aValue) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { FontDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { FontDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { FontDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { FontDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { FontDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { FontDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { FontDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FontDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { FontDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { FontDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { FontDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { FontDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { FontDialog_StaticClassType() }
      }
}

impl IObject for TFontDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TFontDialog {}

impl TPrintDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPrintDialog {
              0: unsafe { PrintDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPrintDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PrintDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { PrintDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PrintDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrintDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PrintDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PrintDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PrintDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrintDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PrintDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PrintDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PrintDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PrintDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrintDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Collate(&self) -> bool  {
          unsafe { PrintDialog_GetCollate(self.0) }
      }

      pub fn SetCollate(&self, aValue: bool)  {
          unsafe { PrintDialog_SetCollate(self.0, aValue) }
      }

      pub fn Copies(&self) -> i32  {
          unsafe { PrintDialog_GetCopies(self.0) }
      }

      pub fn SetCopies(&self, aValue: i32)  {
          unsafe { PrintDialog_SetCopies(self.0, aValue) }
      }

      pub fn FromPage(&self) -> i32  {
          unsafe { PrintDialog_GetFromPage(self.0) }
      }

      pub fn SetFromPage(&self, aValue: i32)  {
          unsafe { PrintDialog_SetFromPage(self.0, aValue) }
      }

      pub fn MinPage(&self) -> i32  {
          unsafe { PrintDialog_GetMinPage(self.0) }
      }

      pub fn SetMinPage(&self, aValue: i32)  {
          unsafe { PrintDialog_SetMinPage(self.0, aValue) }
      }

      pub fn MaxPage(&self) -> i32  {
          unsafe { PrintDialog_GetMaxPage(self.0) }
      }

      pub fn SetMaxPage(&self, aValue: i32)  {
          unsafe { PrintDialog_SetMaxPage(self.0, aValue) }
      }

      pub fn Options(&self) -> TPrintDialogOptions  {
          unsafe { PrintDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TPrintDialogOptions)  {
          unsafe { PrintDialog_SetOptions(self.0, aValue) }
      }

      pub fn PrintToFile(&self) -> bool  {
          unsafe { PrintDialog_GetPrintToFile(self.0) }
      }

      pub fn SetPrintToFile(&self, aValue: bool)  {
          unsafe { PrintDialog_SetPrintToFile(self.0, aValue) }
      }

      pub fn PrintRange(&self) -> TPrintRange  {
          unsafe { PrintDialog_GetPrintRange(self.0) }
      }

      pub fn SetPrintRange(&self, aValue: TPrintRange)  {
          unsafe { PrintDialog_SetPrintRange(self.0, aValue) }
      }

      pub fn ToPage(&self) -> i32  {
          unsafe { PrintDialog_GetToPage(self.0) }
      }

      pub fn SetToPage(&self, aValue: i32)  {
          unsafe { PrintDialog_SetToPage(self.0, aValue) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { PrintDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { PrintDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { PrintDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PrintDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PrintDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PrintDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PrintDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PrintDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PrintDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PrintDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PrintDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PrintDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PrintDialog_StaticClassType() }
      }
}

impl IObject for TPrintDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPrintDialog {}

impl TOpenPictureDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TOpenPictureDialog {
              0: unsafe { OpenPictureDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TOpenPictureDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  OpenPictureDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { OpenPictureDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { OpenPictureDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { OpenPictureDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { OpenPictureDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { OpenPictureDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenPictureDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { OpenPictureDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { OpenPictureDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { OpenPictureDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { OpenPictureDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(OpenPictureDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Filter<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetFilter(self.0)).to_string_lossy()  }
      }

      pub fn SetFilter(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetFilter(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Files(&self) -> TStrings  {
          TStrings {
              0: unsafe { OpenPictureDialog_GetFiles(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultExt<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetDefaultExt(self.0)).to_string_lossy()  }
      }

      pub fn SetDefaultExt(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetDefaultExt(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetFileName(self.0)).to_string_lossy()  }
      }

      pub fn SetFileName(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetFileName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FilterIndex(&self) -> i32  {
          unsafe { OpenPictureDialog_GetFilterIndex(self.0) }
      }

      pub fn SetFilterIndex(&self, aValue: i32)  {
          unsafe { OpenPictureDialog_SetFilterIndex(self.0, aValue) }
      }

      pub fn InitialDir<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetInitialDir(self.0)).to_string_lossy()  }
      }

      pub fn SetInitialDir(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetInitialDir(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TOpenOptions  {
          unsafe { OpenPictureDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TOpenOptions)  {
          unsafe { OpenPictureDialog_SetOptions(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { OpenPictureDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { OpenPictureDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { OpenPictureDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { OpenPictureDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { OpenPictureDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { OpenPictureDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { OpenPictureDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(OpenPictureDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { OpenPictureDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { OpenPictureDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { OpenPictureDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { OpenPictureDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { OpenPictureDialog_StaticClassType() }
      }
}

impl IObject for TOpenPictureDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TOpenPictureDialog {}

impl TSavePictureDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSavePictureDialog {
              0: unsafe { SavePictureDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSavePictureDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  SavePictureDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { SavePictureDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { SavePictureDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SavePictureDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { SavePictureDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { SavePictureDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SavePictureDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SavePictureDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SavePictureDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SavePictureDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SavePictureDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SavePictureDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SavePictureDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Filter<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetFilter(self.0)).to_string_lossy()  }
      }

      pub fn SetFilter(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetFilter(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Files(&self) -> TStrings  {
          TStrings {
              0: unsafe { SavePictureDialog_GetFiles(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultExt<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetDefaultExt(self.0)).to_string_lossy()  }
      }

      pub fn SetDefaultExt(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetDefaultExt(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetFileName(self.0)).to_string_lossy()  }
      }

      pub fn SetFileName(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetFileName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FilterIndex(&self) -> i32  {
          unsafe { SavePictureDialog_GetFilterIndex(self.0) }
      }

      pub fn SetFilterIndex(&self, aValue: i32)  {
          unsafe { SavePictureDialog_SetFilterIndex(self.0, aValue) }
      }

      pub fn InitialDir<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetInitialDir(self.0)).to_string_lossy()  }
      }

      pub fn SetInitialDir(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetInitialDir(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TOpenOptions  {
          unsafe { SavePictureDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TOpenOptions)  {
          unsafe { SavePictureDialog_SetOptions(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { SavePictureDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { SavePictureDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { SavePictureDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { SavePictureDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { SavePictureDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { SavePictureDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { SavePictureDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SavePictureDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { SavePictureDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { SavePictureDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { SavePictureDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { SavePictureDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SavePictureDialog_StaticClassType() }
      }
}

impl IObject for TSavePictureDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSavePictureDialog {}

impl TSelectDirectoryDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSelectDirectoryDialog {
              0: unsafe { SelectDirectoryDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSelectDirectoryDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  SelectDirectoryDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { SelectDirectoryDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { SelectDirectoryDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { SelectDirectoryDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { SelectDirectoryDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SelectDirectoryDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SelectDirectoryDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SelectDirectoryDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SelectDirectoryDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SelectDirectoryDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Files(&self) -> TStrings  {
          TStrings {
              0: unsafe { SelectDirectoryDialog_GetFiles(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultExt<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetDefaultExt(self.0)).to_string_lossy()  }
      }

      pub fn SetDefaultExt(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetDefaultExt(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetFileName(self.0)).to_string_lossy()  }
      }

      pub fn SetFileName(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetFileName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Filter<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetFilter(self.0)).to_string_lossy()  }
      }

      pub fn SetFilter(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetFilter(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FilterIndex(&self) -> i32  {
          unsafe { SelectDirectoryDialog_GetFilterIndex(self.0) }
      }

      pub fn SetFilterIndex(&self, aValue: i32)  {
          unsafe { SelectDirectoryDialog_SetFilterIndex(self.0, aValue) }
      }

      pub fn InitialDir<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetInitialDir(self.0)).to_string_lossy()  }
      }

      pub fn SetInitialDir(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetInitialDir(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TOpenOptions  {
          unsafe { SelectDirectoryDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TOpenOptions)  {
          unsafe { SelectDirectoryDialog_SetOptions(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { SelectDirectoryDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { SelectDirectoryDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { SelectDirectoryDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { SelectDirectoryDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { SelectDirectoryDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { SelectDirectoryDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { SelectDirectoryDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SelectDirectoryDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { SelectDirectoryDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { SelectDirectoryDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { SelectDirectoryDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { SelectDirectoryDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SelectDirectoryDialog_StaticClassType() }
      }
}

impl IObject for TSelectDirectoryDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSelectDirectoryDialog {}

impl TRichEdit {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TRichEdit {
              0: unsafe { RichEdit_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TRichEdit { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  RichEdit_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Clear(&self)  {
          unsafe { RichEdit_Clear(self.0) }
      }

      pub fn FindText(&self, searchStr: &str, startPos: i32, length: i32, options: TSearchTypes) -> i32  {
          unsafe { RichEdit_FindText(self.0, CString::new(searchStr).unwrap().as_ptr(), startPos, length, options) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { RichEdit_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { RichEdit_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { RichEdit_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { RichEdit_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { RichEdit_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { RichEdit_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { RichEdit_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { RichEdit_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { RichEdit_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { RichEdit_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { RichEdit_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { RichEdit_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { RichEdit_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { RichEdit_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { RichEdit_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { RichEdit_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { RichEdit_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { RichEdit_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { RichEdit_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { RichEdit_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { RichEdit_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { RichEdit_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { RichEdit_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { RichEdit_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { RichEdit_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { RichEdit_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RichEdit_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RichEdit_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { RichEdit_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { RichEdit_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { RichEdit_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { RichEdit_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { RichEdit_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { RichEdit_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { RichEdit_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { RichEdit_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { RichEdit_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { RichEdit_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { RichEdit_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { RichEdit_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { RichEdit_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RichEdit_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { RichEdit_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { RichEdit_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RichEdit_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { RichEdit_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { RichEdit_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { RichEdit_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { RichEdit_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(RichEdit_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RichEdit_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { RichEdit_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RichEdit_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { RichEdit_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { RichEdit_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { RichEdit_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { RichEdit_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { RichEdit_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { RichEdit_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { RichEdit_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { RichEdit_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { RichEdit_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { RichEdit_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { RichEdit_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { RichEdit_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { RichEdit_SetBorderStyle(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { RichEdit_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { RichEdit_SetBorderWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { RichEdit_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { RichEdit_SetColor(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { RichEdit_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { RichEdit_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { RichEdit_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { RichEdit_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { RichEdit_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { RichEdit_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { RichEdit_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { RichEdit_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { RichEdit_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { RichEdit_SetFont(self.0, aValue.Instance()) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { RichEdit_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { RichEdit_SetHideSelection(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { RichEdit_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { RichEdit_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Lines(&self) -> TStrings  {
          TStrings {
              0: unsafe { RichEdit_GetLines(self.0) }
              , 1: false,
          }
      }

      pub fn SetLines(&self, aValue: &TStrings)  {
          unsafe { RichEdit_SetLines(self.0, aValue.Instance()) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { RichEdit_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { RichEdit_SetMaxLength(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { RichEdit_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { RichEdit_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { RichEdit_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { RichEdit_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { RichEdit_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { RichEdit_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { RichEdit_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { RichEdit_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { RichEdit_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { RichEdit_SetReadOnly(self.0, aValue) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { RichEdit_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { RichEdit_SetScrollBars(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { RichEdit_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { RichEdit_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { RichEdit_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { RichEdit_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { RichEdit_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { RichEdit_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { RichEdit_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { RichEdit_SetVisible(self.0, aValue) }
      }

      pub fn WantTabs(&self) -> bool  {
          unsafe { RichEdit_GetWantTabs(self.0) }
      }

      pub fn SetWantTabs(&self, aValue: bool)  {
          unsafe { RichEdit_SetWantTabs(self.0, aValue) }
      }

      pub fn WantReturns(&self) -> bool  {
          unsafe { RichEdit_GetWantReturns(self.0) }
      }

      pub fn SetWantReturns(&self, aValue: bool)  {
          unsafe { RichEdit_SetWantReturns(self.0, aValue) }
      }

      pub fn WordWrap(&self) -> bool  {
          unsafe { RichEdit_GetWordWrap(self.0) }
      }

      pub fn SetWordWrap(&self, aValue: bool)  {
          unsafe { RichEdit_SetWordWrap(self.0, aValue) }
      }

      pub fn Zoom(&self) -> i32  {
          unsafe { RichEdit_GetZoom(self.0) }
      }

      pub fn SetZoom(&self, aValue: i32)  {
          unsafe { RichEdit_SetZoom(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { RichEdit_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { RichEdit_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { RichEdit_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { RichEdit_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { RichEdit_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { RichEdit_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { RichEdit_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { RichEdit_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { RichEdit_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { RichEdit_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { RichEdit_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { RichEdit_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { RichEdit_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { RichEdit_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn DefAttributes(&self) -> TTextAttributes  {
          TTextAttributes {
              0: unsafe { RichEdit_GetDefAttributes(self.0) }
              , 1: false,
          }
      }

      pub fn SetDefAttributes(&self, aValue: &TTextAttributes)  {
          unsafe { RichEdit_SetDefAttributes(self.0, aValue.Instance()) }
      }

      pub fn SelAttributes(&self) -> TTextAttributes  {
          TTextAttributes {
              0: unsafe { RichEdit_GetSelAttributes(self.0) }
              , 1: false,
          }
      }

      pub fn SetSelAttributes(&self, aValue: &TTextAttributes)  {
          unsafe { RichEdit_SetSelAttributes(self.0, aValue.Instance()) }
      }

      pub fn Paragraph(&self) -> TParaAttributes  {
          TParaAttributes {
              0: unsafe { RichEdit_GetParagraph(self.0) }
              , 1: false,
          }
      }

      pub fn CaretPos(&self, result: *mut TPoint)  {
          unsafe { RichEdit_GetCaretPos(self.0, result) }
      }

      pub fn SetCaretPos(&self, aValue: *mut TPoint)  {
          unsafe { RichEdit_SetCaretPos(self.0, aValue) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { RichEdit_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { RichEdit_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { RichEdit_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { RichEdit_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { RichEdit_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { RichEdit_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { RichEdit_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RichEdit_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { RichEdit_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RichEdit_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { RichEdit_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RichEdit_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { RichEdit_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { RichEdit_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { RichEdit_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { RichEdit_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { RichEdit_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { RichEdit_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { RichEdit_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { RichEdit_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { RichEdit_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { RichEdit_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { RichEdit_GetHandle(self.0) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { RichEdit_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { RichEdit_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { RichEdit_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { RichEdit_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { RichEdit_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { RichEdit_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { RichEdit_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { RichEdit_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { RichEdit_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { RichEdit_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { RichEdit_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { RichEdit_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { RichEdit_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { RichEdit_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { RichEdit_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { RichEdit_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { RichEdit_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { RichEdit_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { RichEdit_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { RichEdit_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { RichEdit_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { RichEdit_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { RichEdit_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { RichEdit_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { RichEdit_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { RichEdit_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { RichEdit_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { RichEdit_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { RichEdit_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { RichEdit_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { RichEdit_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { RichEdit_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { RichEdit_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { RichEdit_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RichEdit_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { RichEdit_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { RichEdit_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { RichEdit_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { RichEdit_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { RichEdit_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(RichEdit_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { RichEdit_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { RichEdit_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { RichEdit_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RichEdit_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { RichEdit_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RichEdit_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { RichEdit_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RichEdit_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { RichEdit_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RichEdit_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { RichEdit_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { RichEdit_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { RichEdit_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { RichEdit_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { RichEdit_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RichEdit_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { RichEdit_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { RichEdit_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { RichEdit_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { RichEdit_StaticClassType() }
      }
}

impl IObject for TRichEdit {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TRichEdit {}
impl IControl for TRichEdit {}
impl IWinControl for TRichEdit {}

impl TTrackBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTrackBar {
              0: unsafe { TrackBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTrackBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TrackBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn SetTick(&self, value: i32)  {
          unsafe { TrackBar_SetTick(self.0, value) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { TrackBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { TrackBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { TrackBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { TrackBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { TrackBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { TrackBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { TrackBar_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { TrackBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { TrackBar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { TrackBar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { TrackBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { TrackBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { TrackBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { TrackBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { TrackBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { TrackBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { TrackBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { TrackBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { TrackBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { TrackBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TrackBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TrackBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { TrackBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { TrackBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { TrackBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { TrackBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { TrackBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TrackBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TrackBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { TrackBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { TrackBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { TrackBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { TrackBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { TrackBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { TrackBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrackBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { TrackBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TrackBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrackBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TrackBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TrackBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TrackBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TrackBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TrackBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TrackBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TrackBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TrackBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TrackBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { TrackBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { TrackBar_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { TrackBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { TrackBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { TrackBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { TrackBar_SetAnchors(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { TrackBar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { TrackBar_SetBorderWidth(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { TrackBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { TrackBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { TrackBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { TrackBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { TrackBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { TrackBar_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { TrackBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { TrackBar_SetEnabled(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { TrackBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { TrackBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn LineSize(&self) -> i32  {
          unsafe { TrackBar_GetLineSize(self.0) }
      }

      pub fn SetLineSize(&self, aValue: i32)  {
          unsafe { TrackBar_SetLineSize(self.0, aValue) }
      }

      pub fn Max(&self) -> i32  {
          unsafe { TrackBar_GetMax(self.0) }
      }

      pub fn SetMax(&self, aValue: i32)  {
          unsafe { TrackBar_SetMax(self.0, aValue) }
      }

      pub fn Min(&self) -> i32  {
          unsafe { TrackBar_GetMin(self.0) }
      }

      pub fn SetMin(&self, aValue: i32)  {
          unsafe { TrackBar_SetMin(self.0, aValue) }
      }

      pub fn Orientation(&self) -> TTrackBarOrientation  {
          unsafe { TrackBar_GetOrientation(self.0) }
      }

      pub fn SetOrientation(&self, aValue: TTrackBarOrientation)  {
          unsafe { TrackBar_SetOrientation(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { TrackBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { TrackBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { TrackBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { TrackBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn PageSize(&self) -> i32  {
          unsafe { TrackBar_GetPageSize(self.0) }
      }

      pub fn SetPageSize(&self, aValue: i32)  {
          unsafe { TrackBar_SetPageSize(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { TrackBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { TrackBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Frequency(&self) -> i32  {
          unsafe { TrackBar_GetFrequency(self.0) }
      }

      pub fn SetFrequency(&self, aValue: i32)  {
          unsafe { TrackBar_SetFrequency(self.0, aValue) }
      }

      pub fn Position(&self) -> i32  {
          unsafe { TrackBar_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: i32)  {
          unsafe { TrackBar_SetPosition(self.0, aValue) }
      }

      pub fn SelEnd(&self) -> i32  {
          unsafe { TrackBar_GetSelEnd(self.0) }
      }

      pub fn SetSelEnd(&self, aValue: i32)  {
          unsafe { TrackBar_SetSelEnd(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { TrackBar_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { TrackBar_SetSelStart(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { TrackBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { TrackBar_SetShowHint(self.0, aValue) }
      }

      pub fn ShowSelRange(&self) -> bool  {
          unsafe { TrackBar_GetShowSelRange(self.0) }
      }

      pub fn SetShowSelRange(&self, aValue: bool)  {
          unsafe { TrackBar_SetShowSelRange(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { TrackBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { TrackBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { TrackBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { TrackBar_SetTabStop(self.0, aValue) }
      }

      pub fn TickMarks(&self) -> TTickMark  {
          unsafe { TrackBar_GetTickMarks(self.0) }
      }

      pub fn SetTickMarks(&self, aValue: TTickMark)  {
          unsafe { TrackBar_SetTickMarks(self.0, aValue) }
      }

      pub fn TickStyle(&self) -> TTickStyle  {
          unsafe { TrackBar_GetTickStyle(self.0) }
      }

      pub fn SetTickStyle(&self, aValue: TTickStyle)  {
          unsafe { TrackBar_SetTickStyle(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { TrackBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { TrackBar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { TrackBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { TrackBar_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { TrackBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { TrackBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { TrackBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { TrackBar_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { TrackBar_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { TrackBar_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { TrackBar_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { TrackBar_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { TrackBar_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { TrackBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { TrackBar_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { TrackBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { TrackBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { TrackBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { TrackBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { TrackBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { TrackBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { TrackBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { TrackBar_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { TrackBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { TrackBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { TrackBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { TrackBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { TrackBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { TrackBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { TrackBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { TrackBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { TrackBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { TrackBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { TrackBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { TrackBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { TrackBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { TrackBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { TrackBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { TrackBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { TrackBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { TrackBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { TrackBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { TrackBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { TrackBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { TrackBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { TrackBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { TrackBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { TrackBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { TrackBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { TrackBar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { TrackBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { TrackBar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { TrackBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { TrackBar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrackBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { TrackBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { TrackBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { TrackBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { TrackBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { TrackBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TrackBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TrackBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { TrackBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { TrackBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TrackBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { TrackBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TrackBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { TrackBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TrackBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { TrackBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TrackBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { TrackBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { TrackBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { TrackBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { TrackBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { TrackBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TrackBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TrackBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { TrackBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TrackBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TrackBar_StaticClassType() }
      }
}

impl IObject for TTrackBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTrackBar {}
impl IControl for TTrackBar {}
impl IWinControl for TTrackBar {}

impl TImageList {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TImageList {
              0: unsafe { ImageList_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TImageList { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ImageList_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetHotSpot(&self, result: *mut TPoint)  {
          unsafe { ImageList_GetHotSpot(self.0, result) }
      }

      pub fn HideDragImage(&self)  {
          unsafe { ImageList_HideDragImage(self.0) }
      }

      pub fn ShowDragImage(&self)  {
          unsafe { ImageList_ShowDragImage(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ImageList_Assign(self.0, source.Instance()) }
      }

      pub fn Add(&self, image: &TBitmap, mask: &TBitmap) -> i32  {
          unsafe { ImageList_Add(self.0, image.Instance(), mask.Instance()) }
      }

      pub fn AddIcon(&self, image: &TIcon) -> i32  {
          unsafe { ImageList_AddIcon(self.0, image.Instance()) }
      }

      pub fn AddImages(&self, value: &TImageList)  {
          unsafe { ImageList_AddImages(self.0, value.Instance()) }
      }

      pub fn AddMasked(&self, image: &TBitmap, maskColor: TColor) -> i32  {
          unsafe { ImageList_AddMasked(self.0, image.Instance(), maskColor) }
      }

      pub fn Clear(&self)  {
          unsafe { ImageList_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { ImageList_Delete(self.0, index) }
      }

      pub fn Insert(&self, index: i32, image: &TBitmap, mask: &TBitmap)  {
          unsafe { ImageList_Insert(self.0, index, image.Instance(), mask.Instance()) }
      }

      pub fn InsertIcon(&self, index: i32, image: &TIcon)  {
          unsafe { ImageList_InsertIcon(self.0, index, image.Instance()) }
      }

      pub fn InsertMasked(&self, index: i32, image: &TBitmap, maskColor: TColor)  {
          unsafe { ImageList_InsertMasked(self.0, index, image.Instance(), maskColor) }
      }

      pub fn Move(&self, curIndex: i32, newIndex: i32)  {
          unsafe { ImageList_Move(self.0, curIndex, newIndex) }
      }

      pub fn Replace(&self, index: i32, image: &TBitmap, mask: &TBitmap)  {
          unsafe { ImageList_Replace(self.0, index, image.Instance(), mask.Instance()) }
      }

      pub fn ReplaceMasked(&self, index: i32, newImage: &TBitmap, maskColor: TColor)  {
          unsafe { ImageList_ReplaceMasked(self.0, index, newImage.Instance(), maskColor) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { ImageList_BeginUpdate(self.0) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { ImageList_EndUpdate(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ImageList_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageList_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ImageList_HasParent(self.0) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ImageList_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageList_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ImageList_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ImageList_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ImageList_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ImageList_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageList_ToString(self.0)).to_string_lossy()  }
      }

      pub fn BlendColor(&self) -> TColor  {
          unsafe { ImageList_GetBlendColor(self.0) }
      }

      pub fn SetBlendColor(&self, aValue: TColor)  {
          unsafe { ImageList_SetBlendColor(self.0, aValue) }
      }

      pub fn BkColor(&self) -> TColor  {
          unsafe { ImageList_GetBkColor(self.0) }
      }

      pub fn SetBkColor(&self, aValue: TColor)  {
          unsafe { ImageList_SetBkColor(self.0, aValue) }
      }

      pub fn AllocBy(&self) -> i32  {
          unsafe { ImageList_GetAllocBy(self.0) }
      }

      pub fn SetAllocBy(&self, aValue: i32)  {
          unsafe { ImageList_SetAllocBy(self.0, aValue) }
      }

      pub fn DrawingStyle(&self) -> TDrawingStyle  {
          unsafe { ImageList_GetDrawingStyle(self.0) }
      }

      pub fn SetDrawingStyle(&self, aValue: TDrawingStyle)  {
          unsafe { ImageList_SetDrawingStyle(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ImageList_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ImageList_SetHeight(self.0, aValue) }
      }

      pub fn ImageType(&self) -> TImageType  {
          unsafe { ImageList_GetImageType(self.0) }
      }

      pub fn SetImageType(&self, aValue: TImageType)  {
          unsafe { ImageList_SetImageType(self.0, aValue) }
      }

      pub fn Masked(&self) -> bool  {
          unsafe { ImageList_GetMasked(self.0) }
      }

      pub fn SetMasked(&self, aValue: bool)  {
          unsafe { ImageList_SetMasked(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ImageList_SetOnChange(self.0, aEventId) }
      }

      pub fn ShareImages(&self) -> bool  {
          unsafe { ImageList_GetShareImages(self.0) }
      }

      pub fn SetShareImages(&self, aValue: bool)  {
          unsafe { ImageList_SetShareImages(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ImageList_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ImageList_SetWidth(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ImageList_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ImageList_SetDragCursor(self.0, aValue) }
      }

      pub fn Dragging(&self) -> bool  {
          unsafe { ImageList_GetDragging(self.0) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ImageList_GetCount(self.0) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ImageList_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ImageList_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ImageList_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ImageList_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ImageList_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ImageList_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ImageList_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ImageList_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ImageList_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ImageList_StaticClassType() }
      }
      pub fn Draw1(&self, canvas: &TCanvas, x: i32, y: i32, index: i32, enabled: bool)  {
          unsafe { ImageList_Draw1(self.0, canvas.Instance(), x, y, index, enabled) }
      }

      pub fn DrawOverlay1(&self, canvas: &TCanvas, x: i32, y: i32, imageIndex: i32, overlay: u8, enabled: bool)  {
          unsafe { ImageList_DrawOverlay1(self.0, canvas.Instance(), x, y, imageIndex, overlay, enabled) }
      }

      pub fn GetIcon1(&self, index: i32, image: &TIcon)  {
          unsafe { ImageList_GetIcon1(self.0, index, image.Instance()) }
      }

}

impl IObject for TImageList {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TImageList {}

impl TUpDown {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TUpDown {
              0: unsafe { UpDown_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TUpDown { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  UpDown_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { UpDown_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { UpDown_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { UpDown_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { UpDown_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { UpDown_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { UpDown_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { UpDown_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { UpDown_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { UpDown_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { UpDown_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { UpDown_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { UpDown_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { UpDown_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { UpDown_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { UpDown_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { UpDown_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { UpDown_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { UpDown_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { UpDown_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { UpDown_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { UpDown_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { UpDown_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { UpDown_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { UpDown_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { UpDown_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { UpDown_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { UpDown_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { UpDown_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { UpDown_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { UpDown_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { UpDown_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { UpDown_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { UpDown_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { UpDown_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { UpDown_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(UpDown_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { UpDown_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { UpDown_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(UpDown_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { UpDown_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { UpDown_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { UpDown_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { UpDown_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(UpDown_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { UpDown_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { UpDown_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { UpDown_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { UpDown_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { UpDown_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { UpDown_AnchorClient(self.0, aSpace) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { UpDown_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { UpDown_SetAnchors(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { UpDown_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { UpDown_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { UpDown_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { UpDown_SetEnabled(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(UpDown_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { UpDown_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Min(&self) -> i32  {
          unsafe { UpDown_GetMin(self.0) }
      }

      pub fn SetMin(&self, aValue: i32)  {
          unsafe { UpDown_SetMin(self.0, aValue) }
      }

      pub fn Max(&self) -> i32  {
          unsafe { UpDown_GetMax(self.0) }
      }

      pub fn SetMax(&self, aValue: i32)  {
          unsafe { UpDown_SetMax(self.0, aValue) }
      }

      pub fn Increment(&self) -> i32  {
          unsafe { UpDown_GetIncrement(self.0) }
      }

      pub fn SetIncrement(&self, aValue: i32)  {
          unsafe { UpDown_SetIncrement(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { UpDown_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { UpDown_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Orientation(&self) -> TUDOrientation  {
          unsafe { UpDown_GetOrientation(self.0) }
      }

      pub fn SetOrientation(&self, aValue: TUDOrientation)  {
          unsafe { UpDown_SetOrientation(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { UpDown_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { UpDown_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { UpDown_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { UpDown_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { UpDown_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { UpDown_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Position(&self) -> i32  {
          unsafe { UpDown_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: i32)  {
          unsafe { UpDown_SetPosition(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { UpDown_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { UpDown_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { UpDown_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { UpDown_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { UpDown_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { UpDown_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { UpDown_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { UpDown_SetVisible(self.0, aValue) }
      }

      pub fn Wrap(&self) -> bool  {
          unsafe { UpDown_GetWrap(self.0) }
      }

      pub fn SetWrap(&self, aValue: bool)  {
          unsafe { UpDown_SetWrap(self.0, aValue) }
      }

      pub fn SetOnChanging(&self, aEventId: TUDChangingEvent)  {
          unsafe { UpDown_SetOnChanging(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { UpDown_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TUDClickEvent)  {
          unsafe { UpDown_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { UpDown_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { UpDown_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { UpDown_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { UpDown_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { UpDown_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { UpDown_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { UpDown_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { UpDown_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { UpDown_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { UpDown_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { UpDown_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { UpDown_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { UpDown_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { UpDown_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { UpDown_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { UpDown_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { UpDown_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { UpDown_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { UpDown_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { UpDown_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { UpDown_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { UpDown_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { UpDown_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { UpDown_SetAlign(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { UpDown_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { UpDown_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { UpDown_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { UpDown_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { UpDown_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { UpDown_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { UpDown_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { UpDown_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { UpDown_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { UpDown_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { UpDown_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { UpDown_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { UpDown_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { UpDown_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { UpDown_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { UpDown_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { UpDown_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { UpDown_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { UpDown_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { UpDown_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { UpDown_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { UpDown_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { UpDown_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { UpDown_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { UpDown_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { UpDown_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { UpDown_SetCursor(self.0, aValue) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { UpDown_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { UpDown_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { UpDown_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { UpDown_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(UpDown_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { UpDown_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { UpDown_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { UpDown_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { UpDown_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { UpDown_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { UpDown_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { UpDown_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { UpDown_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { UpDown_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { UpDown_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { UpDown_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { UpDown_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { UpDown_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { UpDown_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { UpDown_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { UpDown_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { UpDown_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { UpDown_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { UpDown_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { UpDown_StaticClassType() }
      }
}

impl IObject for TUpDown {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TUpDown {}
impl IControl for TUpDown {}
impl IWinControl for TUpDown {}

impl TProgressBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TProgressBar {
              0: unsafe { ProgressBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TProgressBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ProgressBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn StepIt(&self)  {
          unsafe { ProgressBar_StepIt(self.0) }
      }

      pub fn StepBy(&self, delta: i32)  {
          unsafe { ProgressBar_StepBy(self.0, delta) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ProgressBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ProgressBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ProgressBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ProgressBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ProgressBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ProgressBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ProgressBar_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ProgressBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ProgressBar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ProgressBar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ProgressBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ProgressBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ProgressBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ProgressBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ProgressBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ProgressBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ProgressBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ProgressBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ProgressBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ProgressBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ProgressBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ProgressBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ProgressBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ProgressBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ProgressBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ProgressBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ProgressBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ProgressBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ProgressBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ProgressBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ProgressBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ProgressBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ProgressBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ProgressBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ProgressBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ProgressBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ProgressBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ProgressBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ProgressBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ProgressBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ProgressBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ProgressBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ProgressBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ProgressBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ProgressBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ProgressBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ProgressBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ProgressBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ProgressBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ProgressBar_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ProgressBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ProgressBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ProgressBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ProgressBar_SetAnchors(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { ProgressBar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { ProgressBar_SetBorderWidth(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ProgressBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ProgressBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ProgressBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ProgressBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ProgressBar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ProgressBar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ProgressBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ProgressBar_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ProgressBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ProgressBar_SetEnabled(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ProgressBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ProgressBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ProgressBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ProgressBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Min(&self) -> i32  {
          unsafe { ProgressBar_GetMin(self.0) }
      }

      pub fn SetMin(&self, aValue: i32)  {
          unsafe { ProgressBar_SetMin(self.0, aValue) }
      }

      pub fn Max(&self) -> i32  {
          unsafe { ProgressBar_GetMax(self.0) }
      }

      pub fn SetMax(&self, aValue: i32)  {
          unsafe { ProgressBar_SetMax(self.0, aValue) }
      }

      pub fn Orientation(&self) -> TProgressBarOrientation  {
          unsafe { ProgressBar_GetOrientation(self.0) }
      }

      pub fn SetOrientation(&self, aValue: TProgressBarOrientation)  {
          unsafe { ProgressBar_SetOrientation(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ProgressBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ProgressBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ProgressBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ProgressBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ProgressBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ProgressBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Position(&self) -> i32  {
          unsafe { ProgressBar_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: i32)  {
          unsafe { ProgressBar_SetPosition(self.0, aValue) }
      }

      pub fn Smooth(&self) -> bool  {
          unsafe { ProgressBar_GetSmooth(self.0) }
      }

      pub fn SetSmooth(&self, aValue: bool)  {
          unsafe { ProgressBar_SetSmooth(self.0, aValue) }
      }

      pub fn Style(&self) -> TProgressBarStyle  {
          unsafe { ProgressBar_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TProgressBarStyle)  {
          unsafe { ProgressBar_SetStyle(self.0, aValue) }
      }

      pub fn Step(&self) -> i32  {
          unsafe { ProgressBar_GetStep(self.0) }
      }

      pub fn SetStep(&self, aValue: i32)  {
          unsafe { ProgressBar_SetStep(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ProgressBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ProgressBar_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ProgressBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ProgressBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ProgressBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ProgressBar_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ProgressBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ProgressBar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ProgressBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ProgressBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ProgressBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ProgressBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ProgressBar_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ProgressBar_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ProgressBar_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ProgressBar_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ProgressBar_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ProgressBar_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ProgressBar_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ProgressBar_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ProgressBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ProgressBar_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ProgressBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ProgressBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ProgressBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ProgressBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ProgressBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ProgressBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ProgressBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ProgressBar_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ProgressBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ProgressBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ProgressBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ProgressBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ProgressBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ProgressBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ProgressBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ProgressBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ProgressBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ProgressBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ProgressBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ProgressBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ProgressBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ProgressBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ProgressBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ProgressBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ProgressBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ProgressBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ProgressBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ProgressBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ProgressBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ProgressBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ProgressBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ProgressBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ProgressBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ProgressBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ProgressBar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ProgressBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ProgressBar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ProgressBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ProgressBar_SetCursor(self.0, aValue) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ProgressBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ProgressBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ProgressBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ProgressBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ProgressBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ProgressBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ProgressBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ProgressBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ProgressBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ProgressBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ProgressBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ProgressBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ProgressBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ProgressBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ProgressBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ProgressBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ProgressBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ProgressBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ProgressBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ProgressBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ProgressBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ProgressBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ProgressBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ProgressBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ProgressBar_StaticClassType() }
      }
}

impl IObject for TProgressBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TProgressBar {}
impl IControl for TProgressBar {}
impl IWinControl for TProgressBar {}

impl TDateTimePicker {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TDateTimePicker {
              0: unsafe { DateTimePicker_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TDateTimePicker { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  DateTimePicker_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { DateTimePicker_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { DateTimePicker_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { DateTimePicker_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { DateTimePicker_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { DateTimePicker_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { DateTimePicker_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { DateTimePicker_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { DateTimePicker_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { DateTimePicker_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { DateTimePicker_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { DateTimePicker_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { DateTimePicker_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { DateTimePicker_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { DateTimePicker_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { DateTimePicker_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { DateTimePicker_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { DateTimePicker_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { DateTimePicker_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { DateTimePicker_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { DateTimePicker_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { DateTimePicker_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { DateTimePicker_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { DateTimePicker_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { DateTimePicker_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { DateTimePicker_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { DateTimePicker_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { DateTimePicker_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { DateTimePicker_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { DateTimePicker_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { DateTimePicker_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { DateTimePicker_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { DateTimePicker_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { DateTimePicker_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { DateTimePicker_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { DateTimePicker_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DateTimePicker_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { DateTimePicker_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { DateTimePicker_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DateTimePicker_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { DateTimePicker_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { DateTimePicker_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { DateTimePicker_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { DateTimePicker_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DateTimePicker_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { DateTimePicker_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { DateTimePicker_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { DateTimePicker_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { DateTimePicker_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { DateTimePicker_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { DateTimePicker_AnchorClient(self.0, aSpace) }
      }

      pub fn DateTime(&self) -> u32  {
          unsafe { DateTimePicker_GetDateTime(self.0) }
      }

      pub fn SetDateTime(&self, aValue: u32)  {
          unsafe { DateTimePicker_SetDateTime(self.0, aValue) }
      }

      pub fn DroppedDown(&self) -> bool  {
          unsafe { DateTimePicker_GetDroppedDown(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { DateTimePicker_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { DateTimePicker_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { DateTimePicker_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { DateTimePicker_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { DateTimePicker_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { DateTimePicker_SetBiDiMode(self.0, aValue) }
      }

      pub fn CalAlignment(&self) -> TDTCalAlignment  {
          unsafe { DateTimePicker_GetCalAlignment(self.0) }
      }

      pub fn SetCalAlignment(&self, aValue: TDTCalAlignment)  {
          unsafe { DateTimePicker_SetCalAlignment(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { DateTimePicker_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { DateTimePicker_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Date(&self) -> u32  {
          unsafe { DateTimePicker_GetDate(self.0) }
      }

      pub fn SetDate(&self, aValue: u32)  {
          unsafe { DateTimePicker_SetDate(self.0, aValue) }
      }

      pub fn Time(&self) -> u32  {
          unsafe { DateTimePicker_GetTime(self.0) }
      }

      pub fn SetTime(&self, aValue: u32)  {
          unsafe { DateTimePicker_SetTime(self.0, aValue) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { DateTimePicker_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetChecked(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { DateTimePicker_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { DateTimePicker_SetColor(self.0, aValue) }
      }

      pub fn DateMode(&self) -> TDTDateMode  {
          unsafe { DateTimePicker_GetDateMode(self.0) }
      }

      pub fn SetDateMode(&self, aValue: TDTDateMode)  {
          unsafe { DateTimePicker_SetDateMode(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { DateTimePicker_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { DateTimePicker_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { DateTimePicker_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { DateTimePicker_SetFont(self.0, aValue.Instance()) }
      }

      pub fn MaxDate(&self) -> u32  {
          unsafe { DateTimePicker_GetMaxDate(self.0) }
      }

      pub fn SetMaxDate(&self, aValue: u32)  {
          unsafe { DateTimePicker_SetMaxDate(self.0, aValue) }
      }

      pub fn MinDate(&self) -> u32  {
          unsafe { DateTimePicker_GetMinDate(self.0) }
      }

      pub fn SetMinDate(&self, aValue: u32)  {
          unsafe { DateTimePicker_SetMinDate(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { DateTimePicker_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { DateTimePicker_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { DateTimePicker_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { DateTimePicker_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { DateTimePicker_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { DateTimePicker_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { DateTimePicker_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { DateTimePicker_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { DateTimePicker_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { DateTimePicker_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { DateTimePicker_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { DateTimePicker_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { DateTimePicker_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { DateTimePicker_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { DateTimePicker_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { DateTimePicker_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { DateTimePicker_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { DateTimePicker_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { DateTimePicker_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { DateTimePicker_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { DateTimePicker_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { DateTimePicker_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { DateTimePicker_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { DateTimePicker_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { DateTimePicker_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { DateTimePicker_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { DateTimePicker_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { DateTimePicker_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { DateTimePicker_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { DateTimePicker_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { DateTimePicker_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { DateTimePicker_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { DateTimePicker_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { DateTimePicker_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { DateTimePicker_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { DateTimePicker_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { DateTimePicker_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { DateTimePicker_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { DateTimePicker_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { DateTimePicker_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { DateTimePicker_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { DateTimePicker_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { DateTimePicker_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { DateTimePicker_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { DateTimePicker_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { DateTimePicker_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { DateTimePicker_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { DateTimePicker_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { DateTimePicker_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(DateTimePicker_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { DateTimePicker_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { DateTimePicker_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { DateTimePicker_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { DateTimePicker_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { DateTimePicker_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(DateTimePicker_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { DateTimePicker_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { DateTimePicker_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { DateTimePicker_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DateTimePicker_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { DateTimePicker_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DateTimePicker_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { DateTimePicker_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DateTimePicker_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { DateTimePicker_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DateTimePicker_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { DateTimePicker_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { DateTimePicker_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { DateTimePicker_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { DateTimePicker_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { DateTimePicker_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { DateTimePicker_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { DateTimePicker_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { DateTimePicker_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DateTimePicker_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { DateTimePicker_StaticClassType() }
      }
}

impl IObject for TDateTimePicker {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TDateTimePicker {}
impl IControl for TDateTimePicker {}
impl IWinControl for TDateTimePicker {}

impl TMonthCalendar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMonthCalendar {
              0: unsafe { MonthCalendar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMonthCalendar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MonthCalendar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { MonthCalendar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { MonthCalendar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { MonthCalendar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { MonthCalendar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { MonthCalendar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { MonthCalendar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { MonthCalendar_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { MonthCalendar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { MonthCalendar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { MonthCalendar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { MonthCalendar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { MonthCalendar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { MonthCalendar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { MonthCalendar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { MonthCalendar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { MonthCalendar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { MonthCalendar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { MonthCalendar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { MonthCalendar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { MonthCalendar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MonthCalendar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MonthCalendar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { MonthCalendar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { MonthCalendar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { MonthCalendar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { MonthCalendar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { MonthCalendar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MonthCalendar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MonthCalendar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { MonthCalendar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { MonthCalendar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { MonthCalendar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { MonthCalendar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { MonthCalendar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { MonthCalendar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MonthCalendar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { MonthCalendar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MonthCalendar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MonthCalendar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MonthCalendar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MonthCalendar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MonthCalendar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MonthCalendar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MonthCalendar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MonthCalendar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MonthCalendar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MonthCalendar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MonthCalendar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { MonthCalendar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { MonthCalendar_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { MonthCalendar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { MonthCalendar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { MonthCalendar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { MonthCalendar_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { MonthCalendar_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetAutoSize(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { MonthCalendar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetBorderWidth(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { MonthCalendar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { MonthCalendar_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { MonthCalendar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { MonthCalendar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Date(&self) -> u32  {
          unsafe { MonthCalendar_GetDate(self.0) }
      }

      pub fn SetDate(&self, aValue: u32)  {
          unsafe { MonthCalendar_SetDate(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { MonthCalendar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { MonthCalendar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { MonthCalendar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { MonthCalendar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { MonthCalendar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { MonthCalendar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { MonthCalendar_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { MonthCalendar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { MonthCalendar_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { MonthCalendar_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { MonthCalendar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { MonthCalendar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { MonthCalendar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { MonthCalendar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { MonthCalendar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { MonthCalendar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { MonthCalendar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { MonthCalendar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { MonthCalendar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { MonthCalendar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { MonthCalendar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { MonthCalendar_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { MonthCalendar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { MonthCalendar_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { MonthCalendar_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { MonthCalendar_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { MonthCalendar_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { MonthCalendar_SetOnStartDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { MonthCalendar_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { MonthCalendar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { MonthCalendar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { MonthCalendar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { MonthCalendar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { MonthCalendar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { MonthCalendar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { MonthCalendar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { MonthCalendar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { MonthCalendar_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { MonthCalendar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { MonthCalendar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { MonthCalendar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { MonthCalendar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { MonthCalendar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { MonthCalendar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { MonthCalendar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { MonthCalendar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { MonthCalendar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { MonthCalendar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { MonthCalendar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { MonthCalendar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { MonthCalendar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { MonthCalendar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { MonthCalendar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { MonthCalendar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { MonthCalendar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { MonthCalendar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { MonthCalendar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { MonthCalendar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { MonthCalendar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { MonthCalendar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { MonthCalendar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MonthCalendar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { MonthCalendar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { MonthCalendar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { MonthCalendar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { MonthCalendar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { MonthCalendar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MonthCalendar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { MonthCalendar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { MonthCalendar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { MonthCalendar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MonthCalendar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { MonthCalendar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MonthCalendar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { MonthCalendar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MonthCalendar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { MonthCalendar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MonthCalendar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { MonthCalendar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { MonthCalendar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { MonthCalendar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { MonthCalendar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { MonthCalendar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MonthCalendar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MonthCalendar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { MonthCalendar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MonthCalendar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MonthCalendar_StaticClassType() }
      }
}

impl IObject for TMonthCalendar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMonthCalendar {}
impl IControl for TMonthCalendar {}
impl IWinControl for TMonthCalendar {}

impl TListView {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TListView {
              0: unsafe { ListView_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListView { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListView_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ListView_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn AlphaSort(&self) -> bool  {
          unsafe { ListView_AlphaSort(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { ListView_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ListView_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ListView_DeleteSelected(self.0) }
      }

      pub fn IsEditing(&self) -> bool  {
          unsafe { ListView_IsEditing(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ListView_SelectAll(self.0) }
      }

      pub fn CustomSort(&self, sortProc: PFNLVCOMPARE, lParam: isize) -> bool  {
          unsafe { ListView_CustomSort(self.0, sortProc, lParam) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ListView_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ListView_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ListView_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ListView_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ListView_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ListView_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ListView_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ListView_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ListView_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ListView_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ListView_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ListView_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ListView_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ListView_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ListView_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ListView_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ListView_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ListView_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ListView_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ListView_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ListView_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ListView_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ListView_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ListView_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ListView_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ListView_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ListView_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ListView_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ListView_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ListView_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ListView_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ListView_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ListView_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ListView_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ListView_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListView_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ListView_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListView_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListView_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListView_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListView_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListView_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListView_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListView_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ListView_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ListView_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ListView_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ListView_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ListView_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ListView_AnchorClient(self.0, aSpace) }
      }

      pub fn AutoSort(&self) -> bool  {
          unsafe { ListView_GetAutoSort(self.0) }
      }

      pub fn SetAutoSort(&self, aValue: bool)  {
          unsafe { ListView_SetAutoSort(self.0, aValue) }
      }

      pub fn AutoSortIndicator(&self) -> bool  {
          unsafe { ListView_GetAutoSortIndicator(self.0) }
      }

      pub fn SetAutoSortIndicator(&self, aValue: bool)  {
          unsafe { ListView_SetAutoSortIndicator(self.0, aValue) }
      }

      pub fn AutoWidthLastColumn(&self) -> bool  {
          unsafe { ListView_GetAutoWidthLastColumn(self.0) }
      }

      pub fn SetAutoWidthLastColumn(&self, aValue: bool)  {
          unsafe { ListView_SetAutoWidthLastColumn(self.0, aValue) }
      }

      pub fn SmallImagesWidth(&self) -> i32  {
          unsafe { ListView_GetSmallImagesWidth(self.0) }
      }

      pub fn SetSmallImagesWidth(&self, aValue: i32)  {
          unsafe { ListView_SetSmallImagesWidth(self.0, aValue) }
      }

      pub fn SortColumn(&self) -> i32  {
          unsafe { ListView_GetSortColumn(self.0) }
      }

      pub fn SetSortColumn(&self, aValue: i32)  {
          unsafe { ListView_SetSortColumn(self.0, aValue) }
      }

      pub fn SortDirection(&self) -> TSortDirection  {
          unsafe { ListView_GetSortDirection(self.0) }
      }

      pub fn SetSortDirection(&self, aValue: TSortDirection)  {
          unsafe { ListView_SetSortDirection(self.0, aValue) }
      }

      pub fn LargeImagesWidth(&self) -> i32  {
          unsafe { ListView_GetLargeImagesWidth(self.0) }
      }

      pub fn SetLargeImagesWidth(&self, aValue: i32)  {
          unsafe { ListView_SetLargeImagesWidth(self.0, aValue) }
      }

      pub fn StateImagesWidth(&self) -> i32  {
          unsafe { ListView_GetStateImagesWidth(self.0) }
      }

      pub fn SetStateImagesWidth(&self, aValue: i32)  {
          unsafe { ListView_SetStateImagesWidth(self.0, aValue) }
      }

      pub fn ToolTips(&self) -> bool  {
          unsafe { ListView_GetToolTips(self.0) }
      }

      pub fn SetToolTips(&self, aValue: bool)  {
          unsafe { ListView_SetToolTips(self.0, aValue) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { ListView_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { ListView_SetScrollBars(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ListView_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ListView_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ListView_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ListView_SetAlign(self.0, aValue) }
      }

      pub fn AllocBy(&self) -> i32  {
          unsafe { ListView_GetAllocBy(self.0) }
      }

      pub fn SetAllocBy(&self, aValue: i32)  {
          unsafe { ListView_SetAllocBy(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ListView_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ListView_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ListView_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ListView_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { ListView_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { ListView_SetBorderStyle(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { ListView_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { ListView_SetBorderWidth(self.0, aValue) }
      }

      pub fn Checkboxes(&self) -> bool  {
          unsafe { ListView_GetCheckboxes(self.0) }
      }

      pub fn SetCheckboxes(&self, aValue: bool)  {
          unsafe { ListView_SetCheckboxes(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ListView_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ListView_SetColor(self.0, aValue) }
      }

      pub fn Columns(&self) -> TListColumns  {
          TListColumns {
              0: unsafe { ListView_GetColumns(self.0) }
              , 1: false,
          }
      }

      pub fn SetColumns(&self, aValue: &TListColumns)  {
          unsafe { ListView_SetColumns(self.0, aValue.Instance()) }
      }

      pub fn ColumnClick(&self) -> bool  {
          unsafe { ListView_GetColumnClick(self.0) }
      }

      pub fn SetColumnClick(&self, aValue: bool)  {
          unsafe { ListView_SetColumnClick(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ListView_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ListView_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ListView_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ListView_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ListView_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ListView_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ListView_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ListView_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ListView_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ListView_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ListView_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ListView_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ListView_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ListView_SetFont(self.0, aValue.Instance()) }
      }

      pub fn FlatScrollBars(&self) -> bool  {
          unsafe { ListView_GetFlatScrollBars(self.0) }
      }

      pub fn SetFlatScrollBars(&self, aValue: bool)  {
          unsafe { ListView_SetFlatScrollBars(self.0, aValue) }
      }

      pub fn FullDrag(&self) -> bool  {
          unsafe { ListView_GetFullDrag(self.0) }
      }

      pub fn SetFullDrag(&self, aValue: bool)  {
          unsafe { ListView_SetFullDrag(self.0, aValue) }
      }

      pub fn GridLines(&self) -> bool  {
          unsafe { ListView_GetGridLines(self.0) }
      }

      pub fn SetGridLines(&self, aValue: bool)  {
          unsafe { ListView_SetGridLines(self.0, aValue) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { ListView_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { ListView_SetHideSelection(self.0, aValue) }
      }

      pub fn HotTrack(&self) -> bool  {
          unsafe { ListView_GetHotTrack(self.0) }
      }

      pub fn SetHotTrack(&self, aValue: bool)  {
          unsafe { ListView_SetHotTrack(self.0, aValue) }
      }

      pub fn IconOptions(&self) -> TIconOptions  {
          TIconOptions {
              0: unsafe { ListView_GetIconOptions(self.0) }
              , 1: false,
          }
      }

      pub fn SetIconOptions(&self, aValue: &TIconOptions)  {
          unsafe { ListView_SetIconOptions(self.0, aValue.Instance()) }
      }

      pub fn Items(&self) -> TListItems  {
          TListItems {
              0: unsafe { ListView_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TListItems)  {
          unsafe { ListView_SetItems(self.0, aValue.Instance()) }
      }

      pub fn LargeImages(&self) -> TImageList  {
          TImageList {
              0: unsafe { ListView_GetLargeImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetLargeImages(&self, aValue: &TImageList)  {
          unsafe { ListView_SetLargeImages(self.0, aValue.Instance()) }
      }

      pub fn MultiSelect(&self) -> bool  {
          unsafe { ListView_GetMultiSelect(self.0) }
      }

      pub fn SetMultiSelect(&self, aValue: bool)  {
          unsafe { ListView_SetMultiSelect(self.0, aValue) }
      }

      pub fn OwnerData(&self) -> bool  {
          unsafe { ListView_GetOwnerData(self.0) }
      }

      pub fn SetOwnerData(&self, aValue: bool)  {
          unsafe { ListView_SetOwnerData(self.0, aValue) }
      }

      pub fn OwnerDraw(&self) -> bool  {
          unsafe { ListView_GetOwnerDraw(self.0) }
      }

      pub fn SetOwnerDraw(&self, aValue: bool)  {
          unsafe { ListView_SetOwnerDraw(self.0, aValue) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { ListView_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { ListView_SetReadOnly(self.0, aValue) }
      }

      pub fn RowSelect(&self) -> bool  {
          unsafe { ListView_GetRowSelect(self.0) }
      }

      pub fn SetRowSelect(&self, aValue: bool)  {
          unsafe { ListView_SetRowSelect(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ListView_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ListView_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ListView_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ListView_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ListView_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ListView_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ListView_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ListView_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ListView_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ListView_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowColumnHeaders(&self) -> bool  {
          unsafe { ListView_GetShowColumnHeaders(self.0) }
      }

      pub fn SetShowColumnHeaders(&self, aValue: bool)  {
          unsafe { ListView_SetShowColumnHeaders(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ListView_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ListView_SetShowHint(self.0, aValue) }
      }

      pub fn SmallImages(&self) -> TImageList  {
          TImageList {
              0: unsafe { ListView_GetSmallImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetSmallImages(&self, aValue: &TImageList)  {
          unsafe { ListView_SetSmallImages(self.0, aValue.Instance()) }
      }

      pub fn SortType(&self) -> TSortType  {
          unsafe { ListView_GetSortType(self.0) }
      }

      pub fn SetSortType(&self, aValue: TSortType)  {
          unsafe { ListView_SetSortType(self.0, aValue) }
      }

      pub fn StateImages(&self) -> TImageList  {
          TImageList {
              0: unsafe { ListView_GetStateImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetStateImages(&self, aValue: &TImageList)  {
          unsafe { ListView_SetStateImages(self.0, aValue.Instance()) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ListView_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ListView_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ListView_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ListView_SetTabStop(self.0, aValue) }
      }

      pub fn ViewStyle(&self) -> TViewStyle  {
          unsafe { ListView_GetViewStyle(self.0) }
      }

      pub fn SetViewStyle(&self, aValue: TViewStyle)  {
          unsafe { ListView_SetViewStyle(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ListView_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ListView_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAdvancedCustomDraw(&self, aEventId: TLVAdvancedCustomDrawEvent)  {
          unsafe { ListView_SetOnAdvancedCustomDraw(self.0, aEventId) }
      }

      pub fn SetOnAdvancedCustomDrawItem(&self, aEventId: TLVAdvancedCustomDrawItemEvent)  {
          unsafe { ListView_SetOnAdvancedCustomDrawItem(self.0, aEventId) }
      }

      pub fn SetOnAdvancedCustomDrawSubItem(&self, aEventId: TLVAdvancedCustomDrawSubItemEvent)  {
          unsafe { ListView_SetOnAdvancedCustomDrawSubItem(self.0, aEventId) }
      }

      pub fn SetOnChange(&self, aEventId: TLVChangeEvent)  {
          unsafe { ListView_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnColumnClick(&self, aEventId: TLVColumnClickEvent)  {
          unsafe { ListView_SetOnColumnClick(self.0, aEventId) }
      }

      pub fn SetOnCompare(&self, aEventId: TLVCompareEvent)  {
          unsafe { ListView_SetOnCompare(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ListView_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnCustomDraw(&self, aEventId: TLVCustomDrawEvent)  {
          unsafe { ListView_SetOnCustomDraw(self.0, aEventId) }
      }

      pub fn SetOnCustomDrawItem(&self, aEventId: TLVCustomDrawItemEvent)  {
          unsafe { ListView_SetOnCustomDrawItem(self.0, aEventId) }
      }

      pub fn SetOnCustomDrawSubItem(&self, aEventId: TLVCustomDrawSubItemEvent)  {
          unsafe { ListView_SetOnCustomDrawSubItem(self.0, aEventId) }
      }

      pub fn SetOnData(&self, aEventId: TLVOwnerDataEvent)  {
          unsafe { ListView_SetOnData(self.0, aEventId) }
      }

      pub fn SetOnDataFind(&self, aEventId: TLVOwnerDataFindEvent)  {
          unsafe { ListView_SetOnDataFind(self.0, aEventId) }
      }

      pub fn SetOnDataHint(&self, aEventId: TLVOwnerDataHintEvent)  {
          unsafe { ListView_SetOnDataHint(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDeletion(&self, aEventId: TLVDeletedEvent)  {
          unsafe { ListView_SetOnDeletion(self.0, aEventId) }
      }

      pub fn SetOnEdited(&self, aEventId: TLVEditedEvent)  {
          unsafe { ListView_SetOnEdited(self.0, aEventId) }
      }

      pub fn SetOnEditing(&self, aEventId: TLVEditingEvent)  {
          unsafe { ListView_SetOnEditing(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { ListView_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ListView_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ListView_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ListView_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnInsert(&self, aEventId: TLVDeletedEvent)  {
          unsafe { ListView_SetOnInsert(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ListView_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ListView_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ListView_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ListView_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ListView_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ListView_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { ListView_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnSelectItem(&self, aEventId: TLVSelectItemEvent)  {
          unsafe { ListView_SetOnSelectItem(self.0, aEventId) }
      }

      pub fn SetOnItemChecked(&self, aEventId: TLVCheckedItemEvent)  {
          unsafe { ListView_SetOnItemChecked(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { ListView_SetOnStartDock(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ListView_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DropTarget(&self) -> TListItem  {
          TListItem {
              0: unsafe { ListView_GetDropTarget(self.0) }
              , 1: false,
          }
      }

      pub fn SetDropTarget(&self, aValue: &TListItem)  {
          unsafe { ListView_SetDropTarget(self.0, aValue.Instance()) }
      }

      pub fn ItemFocused(&self) -> TListItem  {
          TListItem {
              0: unsafe { ListView_GetItemFocused(self.0) }
              , 1: false,
          }
      }

      pub fn SetItemFocused(&self, aValue: &TListItem)  {
          unsafe { ListView_SetItemFocused(self.0, aValue.Instance()) }
      }

      pub fn SelCount(&self) -> i32  {
          unsafe { ListView_GetSelCount(self.0) }
      }

      pub fn Selected(&self) -> TListItem  {
          TListItem {
              0: unsafe { ListView_GetSelected(self.0) }
              , 1: false,
          }
      }

      pub fn SetSelected(&self, aValue: &TListItem)  {
          unsafe { ListView_SetSelected(self.0, aValue.Instance()) }
      }

      pub fn TopItem(&self) -> TListItem  {
          TListItem {
              0: unsafe { ListView_GetTopItem(self.0) }
              , 1: false,
          }
      }

      pub fn VisibleRowCount(&self) -> i32  {
          unsafe { ListView_GetVisibleRowCount(self.0) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ListView_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ListView_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ListView_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ListView_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ListView_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ListView_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ListView_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ListView_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ListView_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ListView_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ListView_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ListView_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ListView_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ListView_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ListView_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ListView_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ListView_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ListView_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ListView_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ListView_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ListView_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ListView_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ListView_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ListView_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ListView_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ListView_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ListView_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ListView_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ListView_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ListView_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ListView_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ListView_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ListView_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ListView_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ListView_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ListView_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ListView_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ListView_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ListView_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ListView_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListView_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ListView_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ListView_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ListView_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ListView_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ListView_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListView_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ListView_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ListView_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ListView_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListView_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ListView_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListView_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ListView_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListView_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ListView_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListView_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ListView_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ListView_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ListView_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ListView_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ListView_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Column(&self, index: i32) -> TListColumn  {
          TListColumn {
              0: unsafe { ListView_GetColumn(self.0, index) }
              , 1: false,
          }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ListView_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ListView_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ListView_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ListView_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListView_StaticClassType() }
      }
}

impl IObject for TListView {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TListView {}
impl IControl for TListView {}
impl IWinControl for TListView {}

impl TTreeView {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTreeView {
              0: unsafe { TreeView_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTreeView { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TreeView_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AlphaSort(&self, aRecurse: bool) -> bool  {
          unsafe { TreeView_AlphaSort(self.0, aRecurse) }
      }

      pub fn FullCollapse(&self)  {
          unsafe { TreeView_FullCollapse(self.0) }
      }

      pub fn FullExpand(&self)  {
          unsafe { TreeView_FullExpand(self.0) }
      }

      pub fn GetNodeAt(&self, x: i32, y: i32) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeView_GetNodeAt(self.0, x, y) }
              , 1: false,
          }
      }

      pub fn IsEditing(&self) -> bool  {
          unsafe { TreeView_IsEditing(self.0) }
      }

      pub fn LoadFromFile(&self, fileName: &str)  {
          unsafe { TreeView_LoadFromFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { TreeView_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToFile(&self, fileName: &str)  {
          unsafe { TreeView_SaveToFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { TreeView_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn ClearSelection(&self, keepPrimary: bool)  {
          unsafe { TreeView_ClearSelection(self.0, keepPrimary) }
      }

      pub fn CustomSort(&self, sortProc: PFNTVCOMPARE, data: isize, aRecurse: bool) -> bool  {
          unsafe { TreeView_CustomSort(self.0, sortProc, data, aRecurse) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { TreeView_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { TreeView_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { TreeView_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { TreeView_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { TreeView_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { TreeView_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { TreeView_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { TreeView_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { TreeView_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { TreeView_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { TreeView_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { TreeView_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { TreeView_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { TreeView_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { TreeView_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { TreeView_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { TreeView_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { TreeView_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { TreeView_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { TreeView_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TreeView_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TreeView_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { TreeView_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { TreeView_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { TreeView_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { TreeView_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { TreeView_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TreeView_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TreeView_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { TreeView_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { TreeView_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { TreeView_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { TreeView_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { TreeView_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { TreeView_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeView_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { TreeView_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TreeView_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeView_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TreeView_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TreeView_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TreeView_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TreeView_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeView_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TreeView_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TreeView_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TreeView_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TreeView_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { TreeView_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { TreeView_AnchorClient(self.0, aSpace) }
      }

      pub fn DefaultItemHeight(&self) -> i32  {
          unsafe { TreeView_GetDefaultItemHeight(self.0) }
      }

      pub fn SetDefaultItemHeight(&self, aValue: i32)  {
          unsafe { TreeView_SetDefaultItemHeight(self.0, aValue) }
      }

      pub fn ExpandSignColor(&self) -> TColor  {
          unsafe { TreeView_GetExpandSignColor(self.0) }
      }

      pub fn SetExpandSignColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetExpandSignColor(self.0, aValue) }
      }

      pub fn ExpandSignSize(&self) -> i32  {
          unsafe { TreeView_GetExpandSignSize(self.0) }
      }

      pub fn SetExpandSignSize(&self, aValue: i32)  {
          unsafe { TreeView_SetExpandSignSize(self.0, aValue) }
      }

      pub fn ExpandSignType(&self) -> TTreeViewExpandSignType  {
          unsafe { TreeView_GetExpandSignType(self.0) }
      }

      pub fn SetExpandSignType(&self, aValue: TTreeViewExpandSignType)  {
          unsafe { TreeView_SetExpandSignType(self.0, aValue) }
      }

      pub fn HotTrackColor(&self) -> TColor  {
          unsafe { TreeView_GetHotTrackColor(self.0) }
      }

      pub fn SetHotTrackColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetHotTrackColor(self.0, aValue) }
      }

      pub fn ImagesWidth(&self) -> i32  {
          unsafe { TreeView_GetImagesWidth(self.0) }
      }

      pub fn SetImagesWidth(&self, aValue: i32)  {
          unsafe { TreeView_SetImagesWidth(self.0, aValue) }
      }

      pub fn Options(&self) -> TTreeViewOptions  {
          unsafe { TreeView_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TTreeViewOptions)  {
          unsafe { TreeView_SetOptions(self.0, aValue) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { TreeView_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { TreeView_SetScrollBars(self.0, aValue) }
      }

      pub fn SelectionColor(&self) -> TColor  {
          unsafe { TreeView_GetSelectionColor(self.0) }
      }

      pub fn SetSelectionColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetSelectionColor(self.0, aValue) }
      }

      pub fn SelectionFontColor(&self) -> TColor  {
          unsafe { TreeView_GetSelectionFontColor(self.0) }
      }

      pub fn SetSelectionFontColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetSelectionFontColor(self.0, aValue) }
      }

      pub fn SelectionFontColorUsed(&self) -> bool  {
          unsafe { TreeView_GetSelectionFontColorUsed(self.0) }
      }

      pub fn SetSelectionFontColorUsed(&self, aValue: bool)  {
          unsafe { TreeView_SetSelectionFontColorUsed(self.0, aValue) }
      }

      pub fn SeparatorColor(&self) -> TColor  {
          unsafe { TreeView_GetSeparatorColor(self.0) }
      }

      pub fn SetSeparatorColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetSeparatorColor(self.0, aValue) }
      }

      pub fn StateImagesWidth(&self) -> i32  {
          unsafe { TreeView_GetStateImagesWidth(self.0) }
      }

      pub fn SetStateImagesWidth(&self, aValue: i32)  {
          unsafe { TreeView_SetStateImagesWidth(self.0, aValue) }
      }

      pub fn ToolTips(&self) -> bool  {
          unsafe { TreeView_GetToolTips(self.0) }
      }

      pub fn SetToolTips(&self, aValue: bool)  {
          unsafe { TreeView_SetToolTips(self.0, aValue) }
      }

      pub fn TreeLineColor(&self) -> TColor  {
          unsafe { TreeView_GetTreeLineColor(self.0) }
      }

      pub fn SetTreeLineColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetTreeLineColor(self.0, aValue) }
      }

      pub fn TreeLinePenStyle(&self) -> TPenStyle  {
          unsafe { TreeView_GetTreeLinePenStyle(self.0) }
      }

      pub fn SetTreeLinePenStyle(&self, aValue: TPenStyle)  {
          unsafe { TreeView_SetTreeLinePenStyle(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { TreeView_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { TreeView_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { TreeView_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { TreeView_SetAnchors(self.0, aValue) }
      }

      pub fn AutoExpand(&self) -> bool  {
          unsafe { TreeView_GetAutoExpand(self.0) }
      }

      pub fn SetAutoExpand(&self, aValue: bool)  {
          unsafe { TreeView_SetAutoExpand(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { TreeView_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { TreeView_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { TreeView_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { TreeView_SetBorderStyle(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { TreeView_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { TreeView_SetBorderWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { TreeView_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { TreeView_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { TreeView_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { TreeView_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { TreeView_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { TreeView_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { TreeView_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { TreeView_SetDragKind(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { TreeView_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { TreeView_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { TreeView_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { TreeView_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { TreeView_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { TreeView_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { TreeView_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { TreeView_SetFont(self.0, aValue.Instance()) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { TreeView_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { TreeView_SetHideSelection(self.0, aValue) }
      }

      pub fn HotTrack(&self) -> bool  {
          unsafe { TreeView_GetHotTrack(self.0) }
      }

      pub fn SetHotTrack(&self, aValue: bool)  {
          unsafe { TreeView_SetHotTrack(self.0, aValue) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { TreeView_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { TreeView_SetImages(self.0, aValue.Instance()) }
      }

      pub fn Indent(&self) -> i32  {
          unsafe { TreeView_GetIndent(self.0) }
      }

      pub fn SetIndent(&self, aValue: i32)  {
          unsafe { TreeView_SetIndent(self.0, aValue) }
      }

      pub fn MultiSelect(&self) -> bool  {
          unsafe { TreeView_GetMultiSelect(self.0) }
      }

      pub fn SetMultiSelect(&self, aValue: bool)  {
          unsafe { TreeView_SetMultiSelect(self.0, aValue) }
      }

      pub fn MultiSelectStyle(&self) -> TMultiSelectStyle  {
          unsafe { TreeView_GetMultiSelectStyle(self.0) }
      }

      pub fn SetMultiSelectStyle(&self, aValue: TMultiSelectStyle)  {
          unsafe { TreeView_SetMultiSelectStyle(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { TreeView_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { TreeView_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { TreeView_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { TreeView_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { TreeView_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { TreeView_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { TreeView_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { TreeView_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { TreeView_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { TreeView_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { TreeView_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { TreeView_SetReadOnly(self.0, aValue) }
      }

      pub fn RightClickSelect(&self) -> bool  {
          unsafe { TreeView_GetRightClickSelect(self.0) }
      }

      pub fn SetRightClickSelect(&self, aValue: bool)  {
          unsafe { TreeView_SetRightClickSelect(self.0, aValue) }
      }

      pub fn RowSelect(&self) -> bool  {
          unsafe { TreeView_GetRowSelect(self.0) }
      }

      pub fn SetRowSelect(&self, aValue: bool)  {
          unsafe { TreeView_SetRowSelect(self.0, aValue) }
      }

      pub fn ShowButtons(&self) -> bool  {
          unsafe { TreeView_GetShowButtons(self.0) }
      }

      pub fn SetShowButtons(&self, aValue: bool)  {
          unsafe { TreeView_SetShowButtons(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { TreeView_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { TreeView_SetShowHint(self.0, aValue) }
      }

      pub fn ShowLines(&self) -> bool  {
          unsafe { TreeView_GetShowLines(self.0) }
      }

      pub fn SetShowLines(&self, aValue: bool)  {
          unsafe { TreeView_SetShowLines(self.0, aValue) }
      }

      pub fn ShowRoot(&self) -> bool  {
          unsafe { TreeView_GetShowRoot(self.0) }
      }

      pub fn SetShowRoot(&self, aValue: bool)  {
          unsafe { TreeView_SetShowRoot(self.0, aValue) }
      }

      pub fn SortType(&self) -> TSortType  {
          unsafe { TreeView_GetSortType(self.0) }
      }

      pub fn SetSortType(&self, aValue: TSortType)  {
          unsafe { TreeView_SetSortType(self.0, aValue) }
      }

      pub fn StateImages(&self) -> TImageList  {
          TImageList {
              0: unsafe { TreeView_GetStateImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetStateImages(&self, aValue: &TImageList)  {
          unsafe { TreeView_SetStateImages(self.0, aValue.Instance()) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { TreeView_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { TreeView_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { TreeView_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { TreeView_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { TreeView_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { TreeView_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAddition(&self, aEventId: TTVExpandedEvent)  {
          unsafe { TreeView_SetOnAddition(self.0, aEventId) }
      }

      pub fn SetOnAdvancedCustomDraw(&self, aEventId: TTVAdvancedCustomDrawEvent)  {
          unsafe { TreeView_SetOnAdvancedCustomDraw(self.0, aEventId) }
      }

      pub fn SetOnAdvancedCustomDrawItem(&self, aEventId: TTVAdvancedCustomDrawItemEvent)  {
          unsafe { TreeView_SetOnAdvancedCustomDrawItem(self.0, aEventId) }
      }

      pub fn SetOnChange(&self, aEventId: TTVChangedEvent)  {
          unsafe { TreeView_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnChanging(&self, aEventId: TTVChangingEvent)  {
          unsafe { TreeView_SetOnChanging(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnCollapsed(&self, aEventId: TTVExpandedEvent)  {
          unsafe { TreeView_SetOnCollapsed(self.0, aEventId) }
      }

      pub fn SetOnCollapsing(&self, aEventId: TTVCollapsingEvent)  {
          unsafe { TreeView_SetOnCollapsing(self.0, aEventId) }
      }

      pub fn SetOnCompare(&self, aEventId: TTVCompareEvent)  {
          unsafe { TreeView_SetOnCompare(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { TreeView_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnCustomDraw(&self, aEventId: TTVCustomDrawEvent)  {
          unsafe { TreeView_SetOnCustomDraw(self.0, aEventId) }
      }

      pub fn SetOnCustomDrawItem(&self, aEventId: TTVCustomDrawItemEvent)  {
          unsafe { TreeView_SetOnCustomDrawItem(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDeletion(&self, aEventId: TTVExpandedEvent)  {
          unsafe { TreeView_SetOnDeletion(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { TreeView_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { TreeView_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEdited(&self, aEventId: TTVEditedEvent)  {
          unsafe { TreeView_SetOnEdited(self.0, aEventId) }
      }

      pub fn SetOnEditing(&self, aEventId: TTVEditingEvent)  {
          unsafe { TreeView_SetOnEditing(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { TreeView_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnExpanding(&self, aEventId: TTVExpandingEvent)  {
          unsafe { TreeView_SetOnExpanding(self.0, aEventId) }
      }

      pub fn SetOnExpanded(&self, aEventId: TTVExpandedEvent)  {
          unsafe { TreeView_SetOnExpanded(self.0, aEventId) }
      }

      pub fn SetOnGetSelectedIndex(&self, aEventId: TTVExpandedEvent)  {
          unsafe { TreeView_SetOnGetSelectedIndex(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { TreeView_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { TreeView_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { TreeView_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { TreeView_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { TreeView_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { TreeView_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { TreeView_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Items(&self) -> TTreeNodes  {
          TTreeNodes {
              0: unsafe { TreeView_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TTreeNodes)  {
          unsafe { TreeView_SetItems(self.0, aValue.Instance()) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { TreeView_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DropTarget(&self) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeView_GetDropTarget(self.0) }
              , 1: false,
          }
      }

      pub fn SetDropTarget(&self, aValue: &TTreeNode)  {
          unsafe { TreeView_SetDropTarget(self.0, aValue.Instance()) }
      }

      pub fn Selected(&self) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeView_GetSelected(self.0) }
              , 1: false,
          }
      }

      pub fn SetSelected(&self, aValue: &TTreeNode)  {
          unsafe { TreeView_SetSelected(self.0, aValue.Instance()) }
      }

      pub fn TopItem(&self) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeView_GetTopItem(self.0) }
              , 1: false,
          }
      }

      pub fn SetTopItem(&self, aValue: &TTreeNode)  {
          unsafe { TreeView_SetTopItem(self.0, aValue.Instance()) }
      }

      pub fn SelectionCount(&self) -> u32  {
          unsafe { TreeView_GetSelectionCount(self.0) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { TreeView_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { TreeView_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { TreeView_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { TreeView_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { TreeView_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { TreeView_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { TreeView_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { TreeView_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { TreeView_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { TreeView_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { TreeView_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { TreeView_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { TreeView_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { TreeView_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { TreeView_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { TreeView_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { TreeView_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { TreeView_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { TreeView_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { TreeView_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { TreeView_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { TreeView_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { TreeView_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { TreeView_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { TreeView_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { TreeView_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { TreeView_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { TreeView_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { TreeView_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { TreeView_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { TreeView_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { TreeView_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { TreeView_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { TreeView_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { TreeView_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { TreeView_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { TreeView_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { TreeView_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { TreeView_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { TreeView_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TreeView_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { TreeView_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { TreeView_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { TreeView_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { TreeView_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { TreeView_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TreeView_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TreeView_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { TreeView_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { TreeView_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TreeView_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { TreeView_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TreeView_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { TreeView_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TreeView_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { TreeView_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TreeView_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { TreeView_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { TreeView_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { TreeView_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { TreeView_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { TreeView_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Selections(&self, index: i32) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeView_GetSelections(self.0, index) }
              , 1: false,
          }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TreeView_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TreeView_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { TreeView_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TreeView_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TreeView_StaticClassType() }
      }
}

impl IObject for TTreeView {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTreeView {}
impl IControl for TTreeView {}
impl IWinControl for TTreeView {}

impl TStatusBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TStatusBar {
              0: unsafe { StatusBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStatusBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StatusBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { StatusBar_FlipChildren(self.0, allLevels) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { StatusBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { StatusBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { StatusBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { StatusBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { StatusBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { StatusBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { StatusBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { StatusBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { StatusBar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { StatusBar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { StatusBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { StatusBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { StatusBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { StatusBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { StatusBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { StatusBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetFocus(&self) {
          unsafe { StatusBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { StatusBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { StatusBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StatusBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StatusBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { StatusBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { StatusBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { StatusBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { StatusBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { StatusBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StatusBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StatusBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { StatusBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { StatusBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { StatusBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { StatusBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { StatusBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { StatusBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { StatusBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StatusBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StatusBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StatusBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { StatusBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StatusBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StatusBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StatusBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StatusBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StatusBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { StatusBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { StatusBar_AnchorClient(self.0, aSpace) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { StatusBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { StatusBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn AutoHint(&self) -> bool  {
          unsafe { StatusBar_GetAutoHint(self.0) }
      }

      pub fn SetAutoHint(&self, aValue: bool)  {
          unsafe { StatusBar_SetAutoHint(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { StatusBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { StatusBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { StatusBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { StatusBar_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { StatusBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { StatusBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { StatusBar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { StatusBar_SetBorderWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { StatusBar_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { StatusBar_SetColor(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { StatusBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { StatusBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { StatusBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { StatusBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { StatusBar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { StatusBar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { StatusBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { StatusBar_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { StatusBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { StatusBar_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { StatusBar_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { StatusBar_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { StatusBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { StatusBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Panels(&self) -> TStatusPanels  {
          TStatusPanels {
              0: unsafe { StatusBar_GetPanels(self.0) }
              , 1: false,
          }
      }

      pub fn SetPanels(&self, aValue: &TStatusPanels)  {
          unsafe { StatusBar_SetPanels(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { StatusBar_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { StatusBar_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { StatusBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { StatusBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { StatusBar_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { StatusBar_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { StatusBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { StatusBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { StatusBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { StatusBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { StatusBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { StatusBar_SetShowHint(self.0, aValue) }
      }

      pub fn SimplePanel(&self) -> bool  {
          unsafe { StatusBar_GetSimplePanel(self.0) }
      }

      pub fn SetSimplePanel(&self, aValue: bool)  {
          unsafe { StatusBar_SetSimplePanel(self.0, aValue) }
      }

      pub fn SimpleText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusBar_GetSimpleText(self.0)).to_string_lossy()  }
      }

      pub fn SetSimpleText(&self, aValue: &str)  {
          unsafe { StatusBar_SetSimpleText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn SizeGrip(&self) -> bool  {
          unsafe { StatusBar_GetSizeGrip(self.0) }
      }

      pub fn SetSizeGrip(&self, aValue: bool)  {
          unsafe { StatusBar_SetSizeGrip(self.0, aValue) }
      }

      pub fn UseSystemFont(&self) -> bool  {
          unsafe { StatusBar_GetUseSystemFont(self.0) }
      }

      pub fn SetUseSystemFont(&self, aValue: bool)  {
          unsafe { StatusBar_SetUseSystemFont(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { StatusBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { StatusBar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { StatusBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { StatusBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { StatusBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { StatusBar_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { StatusBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnHint(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnHint(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { StatusBar_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { StatusBar_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { StatusBar_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { StatusBar_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { StatusBar_SetOnStartDock(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { StatusBar_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { StatusBar_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { StatusBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { StatusBar_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { StatusBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { StatusBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { StatusBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { StatusBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { StatusBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { StatusBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { StatusBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { StatusBar_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { StatusBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { StatusBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { StatusBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { StatusBar_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { StatusBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { StatusBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { StatusBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { StatusBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { StatusBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { StatusBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { StatusBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { StatusBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { StatusBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { StatusBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { StatusBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { StatusBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { StatusBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { StatusBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { StatusBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { StatusBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { StatusBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { StatusBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { StatusBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { StatusBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { StatusBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { StatusBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { StatusBar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { StatusBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { StatusBar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { StatusBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { StatusBar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { StatusBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { StatusBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { StatusBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { StatusBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { StatusBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { StatusBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { StatusBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { StatusBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StatusBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { StatusBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StatusBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { StatusBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StatusBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { StatusBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StatusBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { StatusBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { StatusBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { StatusBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { StatusBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { StatusBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StatusBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StatusBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { StatusBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StatusBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StatusBar_StaticClassType() }
      }
}

impl IObject for TStatusBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TStatusBar {}
impl IControl for TStatusBar {}
impl IWinControl for TStatusBar {}

impl TToolBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TToolBar {
              0: unsafe { ToolBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TToolBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ToolBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ToolBar_FlipChildren(self.0, allLevels) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ToolBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ToolBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ToolBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ToolBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ToolBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ToolBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ToolBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ToolBar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ToolBar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ToolBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ToolBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ToolBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ToolBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ToolBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ToolBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ToolBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ToolBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ToolBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ToolBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToolBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToolBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ToolBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ToolBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ToolBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ToolBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ToolBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToolBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToolBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ToolBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ToolBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ToolBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ToolBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ToolBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ToolBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ToolBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ToolBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ToolBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ToolBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ToolBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ToolBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToolBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToolBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToolBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToolBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ToolBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ToolBar_AnchorClient(self.0, aSpace) }
      }

      pub fn ButtonCount(&self) -> i32  {
          unsafe { ToolBar_GetButtonCount(self.0) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ToolBar_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn RowCount(&self) -> i32  {
          unsafe { ToolBar_GetRowCount(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ToolBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ToolBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ToolBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ToolBar_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ToolBar_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ToolBar_SetAutoSize(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { ToolBar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { ToolBar_SetBorderWidth(self.0, aValue) }
      }

      pub fn ButtonHeight(&self) -> i32  {
          unsafe { ToolBar_GetButtonHeight(self.0) }
      }

      pub fn SetButtonHeight(&self, aValue: i32)  {
          unsafe { ToolBar_SetButtonHeight(self.0, aValue) }
      }

      pub fn ButtonWidth(&self) -> i32  {
          unsafe { ToolBar_GetButtonWidth(self.0) }
      }

      pub fn SetButtonWidth(&self, aValue: i32)  {
          unsafe { ToolBar_SetButtonWidth(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolBar_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ToolBar_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ToolBar_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ToolBar_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ToolBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ToolBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ToolBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ToolBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ToolBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ToolBar_SetDockSite(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ToolBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ToolBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ToolBar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ToolBar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ToolBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ToolBar_SetDragMode(self.0, aValue) }
      }

      pub fn EdgeBorders(&self) -> TEdgeBorders  {
          unsafe { ToolBar_GetEdgeBorders(self.0) }
      }

      pub fn SetEdgeBorders(&self, aValue: TEdgeBorders)  {
          unsafe { ToolBar_SetEdgeBorders(self.0, aValue) }
      }

      pub fn EdgeInner(&self) -> TEdgeStyle  {
          unsafe { ToolBar_GetEdgeInner(self.0) }
      }

      pub fn SetEdgeInner(&self, aValue: TEdgeStyle)  {
          unsafe { ToolBar_SetEdgeInner(self.0, aValue) }
      }

      pub fn EdgeOuter(&self) -> TEdgeStyle  {
          unsafe { ToolBar_GetEdgeOuter(self.0) }
      }

      pub fn SetEdgeOuter(&self, aValue: TEdgeStyle)  {
          unsafe { ToolBar_SetEdgeOuter(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ToolBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ToolBar_SetEnabled(self.0, aValue) }
      }

      pub fn Flat(&self) -> bool  {
          unsafe { ToolBar_GetFlat(self.0) }
      }

      pub fn SetFlat(&self, aValue: bool)  {
          unsafe { ToolBar_SetFlat(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ToolBar_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ToolBar_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ToolBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ToolBar_SetHeight(self.0, aValue) }
      }

      pub fn HotImages(&self) -> TImageList  {
          TImageList {
              0: unsafe { ToolBar_GetHotImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetHotImages(&self, aValue: &TImageList)  {
          unsafe { ToolBar_SetHotImages(self.0, aValue.Instance()) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { ToolBar_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { ToolBar_SetImages(self.0, aValue.Instance()) }
      }

      pub fn Indent(&self) -> i32  {
          unsafe { ToolBar_GetIndent(self.0) }
      }

      pub fn SetIndent(&self, aValue: i32)  {
          unsafe { ToolBar_SetIndent(self.0, aValue) }
      }

      pub fn List(&self) -> bool  {
          unsafe { ToolBar_GetList(self.0) }
      }

      pub fn SetList(&self, aValue: bool)  {
          unsafe { ToolBar_SetList(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ToolBar_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ToolBar_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ToolBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ToolBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ToolBar_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ToolBar_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ToolBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ToolBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ToolBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ToolBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowCaptions(&self) -> bool  {
          unsafe { ToolBar_GetShowCaptions(self.0) }
      }

      pub fn SetShowCaptions(&self, aValue: bool)  {
          unsafe { ToolBar_SetShowCaptions(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ToolBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ToolBar_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ToolBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ToolBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ToolBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ToolBar_SetTabStop(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { ToolBar_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { ToolBar_SetTransparent(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ToolBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ToolBar_SetVisible(self.0, aValue) }
      }

      pub fn Wrapable(&self) -> bool  {
          unsafe { ToolBar_GetWrapable(self.0) }
      }

      pub fn SetWrapable(&self, aValue: bool)  {
          unsafe { ToolBar_SetWrapable(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ToolBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { ToolBar_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ToolBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ToolBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ToolBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ToolBar_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ToolBar_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ToolBar_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolBar_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { ToolBar_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ToolBar_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ToolBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ToolBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ToolBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ToolBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ToolBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ToolBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ToolBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ToolBar_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ToolBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ToolBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ToolBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ToolBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ToolBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ToolBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ToolBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ToolBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ToolBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ToolBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ToolBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ToolBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ToolBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ToolBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ToolBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ToolBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ToolBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ToolBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ToolBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ToolBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ToolBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ToolBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ToolBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ToolBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ToolBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ToolBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ToolBar_SetWidth(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ToolBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ToolBar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ToolBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ToolBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ToolBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ToolBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ToolBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ToolBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ToolBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ToolBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ToolBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ToolBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ToolBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ToolBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ToolBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ToolBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ToolBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ToolBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Buttons(&self, index: i32) -> TToolButton  {
          TToolButton {
              0: unsafe { ToolBar_GetButtons(self.0, index) }
              , 1: false,
          }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ToolBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ToolBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ToolBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ToolBar_StaticClassType() }
      }
}

impl IObject for TToolBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TToolBar {}
impl IControl for TToolBar {}
impl IWinControl for TToolBar {}

impl TBitBtn {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TBitBtn {
              0: unsafe { BitBtn_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TBitBtn { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  BitBtn_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Click(&self)  {
          unsafe { BitBtn_Click(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { BitBtn_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { BitBtn_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { BitBtn_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { BitBtn_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { BitBtn_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { BitBtn_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { BitBtn_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { BitBtn_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { BitBtn_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { BitBtn_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { BitBtn_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { BitBtn_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { BitBtn_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { BitBtn_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { BitBtn_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { BitBtn_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { BitBtn_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { BitBtn_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { BitBtn_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { BitBtn_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { BitBtn_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { BitBtn_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { BitBtn_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { BitBtn_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { BitBtn_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { BitBtn_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { BitBtn_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { BitBtn_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { BitBtn_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { BitBtn_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { BitBtn_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { BitBtn_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { BitBtn_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { BitBtn_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { BitBtn_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BitBtn_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { BitBtn_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { BitBtn_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BitBtn_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { BitBtn_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { BitBtn_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { BitBtn_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { BitBtn_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BitBtn_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { BitBtn_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { BitBtn_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { BitBtn_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { BitBtn_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { BitBtn_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { BitBtn_AnchorClient(self.0, aSpace) }
      }

      pub fn DefaultCaption(&self) -> bool  {
          unsafe { BitBtn_GetDefaultCaption(self.0) }
      }

      pub fn SetDefaultCaption(&self, aValue: bool)  {
          unsafe { BitBtn_SetDefaultCaption(self.0, aValue) }
      }

      pub fn GlyphShowMode(&self) -> TGlyphShowMode  {
          unsafe { BitBtn_GetGlyphShowMode(self.0) }
      }

      pub fn SetGlyphShowMode(&self, aValue: TGlyphShowMode)  {
          unsafe { BitBtn_SetGlyphShowMode(self.0, aValue) }
      }

      pub fn ImageWidth(&self) -> i32  {
          unsafe { BitBtn_GetImageWidth(self.0) }
      }

      pub fn SetImageWidth(&self, aValue: i32)  {
          unsafe { BitBtn_SetImageWidth(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { BitBtn_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { BitBtn_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { BitBtn_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { BitBtn_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { BitBtn_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { BitBtn_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { BitBtn_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { BitBtn_SetBiDiMode(self.0, aValue) }
      }

      pub fn Cancel(&self) -> bool  {
          unsafe { BitBtn_GetCancel(self.0) }
      }

      pub fn SetCancel(&self, aValue: bool)  {
          unsafe { BitBtn_SetCancel(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BitBtn_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { BitBtn_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { BitBtn_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { BitBtn_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { BitBtn_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { BitBtn_SetDefault(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { BitBtn_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { BitBtn_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { BitBtn_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { BitBtn_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { BitBtn_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { BitBtn_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Glyph(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { BitBtn_GetGlyph(self.0) }
              , 1: false,
          }
      }

      pub fn SetGlyph(&self, aValue: &TBitmap)  {
          unsafe { BitBtn_SetGlyph(self.0, aValue.Instance()) }
      }

      pub fn Layout(&self) -> TButtonLayout  {
          unsafe { BitBtn_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TButtonLayout)  {
          unsafe { BitBtn_SetLayout(self.0, aValue) }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { BitBtn_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { BitBtn_SetModalResult(self.0, aValue) }
      }

      pub fn NumGlyphs(&self) -> TNumGlyphs  {
          unsafe { BitBtn_GetNumGlyphs(self.0) }
      }

      pub fn SetNumGlyphs(&self, aValue: TNumGlyphs)  {
          unsafe { BitBtn_SetNumGlyphs(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { BitBtn_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { BitBtn_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { BitBtn_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { BitBtn_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { BitBtn_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { BitBtn_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { BitBtn_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { BitBtn_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { BitBtn_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { BitBtn_SetShowHint(self.0, aValue) }
      }

      pub fn Spacing(&self) -> i32  {
          unsafe { BitBtn_GetSpacing(self.0) }
      }

      pub fn SetSpacing(&self, aValue: i32)  {
          unsafe { BitBtn_SetSpacing(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { BitBtn_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { BitBtn_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { BitBtn_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { BitBtn_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { BitBtn_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { BitBtn_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { BitBtn_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { BitBtn_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { BitBtn_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { BitBtn_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { BitBtn_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { BitBtn_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { BitBtn_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { BitBtn_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { BitBtn_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { BitBtn_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { BitBtn_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { BitBtn_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { BitBtn_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { BitBtn_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { BitBtn_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { BitBtn_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { BitBtn_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { BitBtn_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { BitBtn_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { BitBtn_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { BitBtn_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { BitBtn_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { BitBtn_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { BitBtn_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { BitBtn_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { BitBtn_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { BitBtn_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { BitBtn_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { BitBtn_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { BitBtn_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { BitBtn_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { BitBtn_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { BitBtn_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { BitBtn_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { BitBtn_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { BitBtn_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { BitBtn_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { BitBtn_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { BitBtn_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { BitBtn_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { BitBtn_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { BitBtn_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { BitBtn_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { BitBtn_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { BitBtn_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { BitBtn_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { BitBtn_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { BitBtn_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { BitBtn_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { BitBtn_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { BitBtn_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { BitBtn_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { BitBtn_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BitBtn_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { BitBtn_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { BitBtn_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { BitBtn_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { BitBtn_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { BitBtn_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BitBtn_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { BitBtn_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { BitBtn_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { BitBtn_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BitBtn_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { BitBtn_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BitBtn_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { BitBtn_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BitBtn_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { BitBtn_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BitBtn_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { BitBtn_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { BitBtn_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { BitBtn_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { BitBtn_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { BitBtn_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { BitBtn_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { BitBtn_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { BitBtn_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BitBtn_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { BitBtn_StaticClassType() }
      }
}

impl IObject for TBitBtn {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TBitBtn {}
impl IControl for TBitBtn {}
impl IWinControl for TBitBtn {}

impl TIcon {
      pub fn new() -> Self {
          TIcon {
              0: unsafe { Icon_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TIcon { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Icon_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Icon_Assign(self.0, source.Instance()) }
      }

      pub fn HandleAllocated(&self) -> bool  {
          unsafe { Icon_HandleAllocated(self.0) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { Icon_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { Icon_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn SetSize(&self, aWidth: i32, aHeight: i32)  {
          unsafe { Icon_SetSize(self.0, aWidth, aHeight) }
      }

      pub fn LoadFromResourceName(&self, instance: usize, resName: &str)  {
          unsafe { Icon_LoadFromResourceName(self.0, instance, CString::new(resName).unwrap().as_ptr()) }
      }

      pub fn LoadFromResourceID(&self, instance: usize, resID: i32)  {
          unsafe { Icon_LoadFromResourceID(self.0, instance, resID) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Icon_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { Icon_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { Icon_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Icon_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Icon_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Icon_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Icon_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Icon_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Icon_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Icon_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HICON  {
          unsafe { Icon_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HICON)  {
          unsafe { Icon_SetHandle(self.0, aValue) }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { Icon_GetEmpty(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Icon_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Icon_SetHeight(self.0, aValue) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { Icon_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { Icon_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { Icon_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { Icon_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { Icon_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { Icon_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { Icon_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { Icon_SetTransparent(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Icon_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Icon_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Icon_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Icon_StaticClassType() }
      }
}

impl IObject for TIcon {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TIcon {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TBitmap {
      pub fn new() -> Self {
          TBitmap {
              0: unsafe { Bitmap_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TBitmap { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Bitmap_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Bitmap_Assign(self.0, source.Instance()) }
      }

      pub fn FreeImage(&self)  {
          unsafe { Bitmap_FreeImage(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool  {
          unsafe { Bitmap_HandleAllocated(self.0) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { Bitmap_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { Bitmap_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn SetSize(&self, aWidth: i32, aHeight: i32)  {
          unsafe { Bitmap_SetSize(self.0, aWidth, aHeight) }
      }

      pub fn LoadFromResourceName(&self, instance: usize, resName: &str)  {
          unsafe { Bitmap_LoadFromResourceName(self.0, instance, CString::new(resName).unwrap().as_ptr()) }
      }

      pub fn LoadFromResourceID(&self, instance: usize, resID: i32)  {
          unsafe { Bitmap_LoadFromResourceID(self.0, instance, resID) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Bitmap_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { Bitmap_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { Bitmap_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Bitmap_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Bitmap_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Bitmap_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Bitmap_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Bitmap_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Bitmap_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Bitmap_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Bitmap_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Handle(&self) -> HBITMAP  {
          unsafe { Bitmap_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HBITMAP)  {
          unsafe { Bitmap_SetHandle(self.0, aValue) }
      }

      pub fn HandleType(&self) -> TBitmapHandleType  {
          unsafe { Bitmap_GetHandleType(self.0) }
      }

      pub fn SetHandleType(&self, aValue: TBitmapHandleType)  {
          unsafe { Bitmap_SetHandleType(self.0, aValue) }
      }

      pub fn MaskHandle(&self) -> HBITMAP  {
          unsafe { Bitmap_GetMaskHandle(self.0) }
      }

      pub fn SetMaskHandle(&self, aValue: HBITMAP)  {
          unsafe { Bitmap_SetMaskHandle(self.0, aValue) }
      }

      pub fn PixelFormat(&self) -> TPixelFormat  {
          unsafe { Bitmap_GetPixelFormat(self.0) }
      }

      pub fn SetPixelFormat(&self, aValue: TPixelFormat)  {
          unsafe { Bitmap_SetPixelFormat(self.0, aValue) }
      }

      pub fn TransparentMode(&self) -> TTransparentMode  {
          unsafe { Bitmap_GetTransparentMode(self.0) }
      }

      pub fn SetTransparentMode(&self, aValue: TTransparentMode)  {
          unsafe { Bitmap_SetTransparentMode(self.0, aValue) }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { Bitmap_GetEmpty(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Bitmap_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Bitmap_SetHeight(self.0, aValue) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { Bitmap_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { Bitmap_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { Bitmap_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { Bitmap_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { Bitmap_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { Bitmap_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { Bitmap_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { Bitmap_SetTransparent(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Bitmap_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Bitmap_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Bitmap_SetOnChange(self.0, aEventId) }
      }

      pub fn ScanLine(&self, row: i32) -> usize  {
          unsafe { Bitmap_GetScanLine(self.0, row) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Bitmap_StaticClassType() }
      }
      pub fn Clear(&self)  {
          unsafe { Bitmap_Clear(self.0) }
      }

      pub fn BeginUpdate(&self, aCanvasOnly: bool)  {
          unsafe { Bitmap_BeginUpdate(self.0, aCanvasOnly) }
      }

      pub fn EndUpdate(&self, aStreamIsValid: bool)  {
          unsafe { Bitmap_EndUpdate(self.0, aStreamIsValid) }
      }

      pub fn LoadFromDevice(&self, aDc: HDC)  {
          unsafe { Bitmap_LoadFromDevice(self.0, aDc) }
      }

}

impl IObject for TBitmap {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TBitmap {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TMemoryStream {
      pub fn new() -> Self {
          TMemoryStream {
              0: unsafe { MemoryStream_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMemoryStream { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MemoryStream_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Clear(&self)  {
          unsafe { MemoryStream_Clear(self.0) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { MemoryStream_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn LoadFromFile(&self, fileName: &str)  {
          unsafe { MemoryStream_LoadFromFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn Seek(&self, offset: *mut i64, origin: TSeekOrigin, result: *mut i64)  {
          unsafe { MemoryStream_Seek(self.0, offset, origin, result) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { MemoryStream_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn SaveToFile(&self, fileName: &str)  {
          unsafe { MemoryStream_SaveToFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn CopyFrom(&self, source: &dyn IObject, count: *mut i64, result: *mut i64)  {
          unsafe { MemoryStream_CopyFrom(self.0, source.Instance(), count, result) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MemoryStream_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MemoryStream_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MemoryStream_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MemoryStream_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MemoryStream_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MemoryStream_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MemoryStream_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Memory(&self) -> usize  {
          unsafe { MemoryStream_GetMemory(self.0) }
      }

      pub fn Position(&self, result: *mut i64)  {
          unsafe { MemoryStream_GetPosition(self.0, result) }
      }

      pub fn SetPosition(&self, aValue: *mut i64)  {
          unsafe { MemoryStream_SetPosition(self.0, aValue) }
      }

      pub fn Size(&self, result: *mut i64)  {
          unsafe { MemoryStream_GetSize(self.0, result) }
      }

      pub fn SetSize(&self, aValue: *mut i64)  {
          unsafe { MemoryStream_SetSize(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MemoryStream_StaticClassType() }
      }
      pub fn Write(&self, buffer: usize, count: i32) -> i32  {
          unsafe { MemoryStream_Write(self.0, buffer, count) }
      }

      pub fn Read(&self, buffer: usize, count: i32) -> i32  {
          unsafe { MemoryStream_Read(self.0, buffer, count) }
      }

}

impl IObject for TMemoryStream {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TMemoryStream {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TFont {
      pub fn new() -> Self {
          TFont {
              0: unsafe { Font_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TFont { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Font_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Font_Assign(self.0, source.Instance()) }
      }

      pub fn HandleAllocated(&self) -> bool  {
          unsafe { Font_HandleAllocated(self.0) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Font_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Font_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Font_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Font_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Font_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Font_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Font_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Font_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HFONT  {
          unsafe { Font_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HFONT)  {
          unsafe { Font_SetHandle(self.0, aValue) }
      }

      pub fn PixelsPerInch(&self) -> i32  {
          unsafe { Font_GetPixelsPerInch(self.0) }
      }

      pub fn SetPixelsPerInch(&self, aValue: i32)  {
          unsafe { Font_SetPixelsPerInch(self.0, aValue) }
      }

      pub fn Charset(&self) -> TFontCharset  {
          unsafe { Font_GetCharset(self.0) }
      }

      pub fn SetCharset(&self, aValue: TFontCharset)  {
          unsafe { Font_SetCharset(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Font_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Font_SetColor(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Font_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Font_SetHeight(self.0, aValue) }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Font_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Font_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Orientation(&self) -> i32  {
          unsafe { Font_GetOrientation(self.0) }
      }

      pub fn SetOrientation(&self, aValue: i32)  {
          unsafe { Font_SetOrientation(self.0, aValue) }
      }

      pub fn Pitch(&self) -> TFontPitch  {
          unsafe { Font_GetPitch(self.0) }
      }

      pub fn SetPitch(&self, aValue: TFontPitch)  {
          unsafe { Font_SetPitch(self.0, aValue) }
      }

      pub fn Size(&self) -> i32  {
          unsafe { Font_GetSize(self.0) }
      }

      pub fn SetSize(&self, aValue: i32)  {
          unsafe { Font_SetSize(self.0, aValue) }
      }

      pub fn Style(&self) -> TFontStyles  {
          unsafe { Font_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TFontStyles)  {
          unsafe { Font_SetStyle(self.0, aValue) }
      }

      pub fn Quality(&self) -> TFontQuality  {
          unsafe { Font_GetQuality(self.0) }
      }

      pub fn SetQuality(&self, aValue: TFontQuality)  {
          unsafe { Font_SetQuality(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Font_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Font_StaticClassType() }
      }
}

impl IObject for TFont {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TFont {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TStrings {
      pub fn new() -> Self {
          TStrings {
              0: unsafe { Strings_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStrings { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Strings_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self, s: &str) -> i32  {
          unsafe { Strings_Add(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn AddObject(&self, s: &str, aObject: &dyn IObject) -> i32  {
          unsafe { Strings_AddObject(self.0, CString::new(s).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Append(&self, s: &str)  {
          unsafe { Strings_Append(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Strings_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { Strings_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { Strings_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { Strings_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { Strings_EndUpdate(self.0) }
      }

      pub fn Equals(&self, strings: &TStrings) -> bool  {
          unsafe { Strings_Equals(self.0, strings.Instance()) }
      }

      pub fn IndexOf(&self, s: &str) -> i32  {
          unsafe { Strings_IndexOf(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn IndexOfName(&self, name: &str) -> i32  {
          unsafe { Strings_IndexOfName(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn IndexOfObject(&self, aObject: &dyn IObject) -> i32  {
          unsafe { Strings_IndexOfObject(self.0, aObject.Instance()) }
      }

      pub fn Insert(&self, index: i32, s: &str)  {
          unsafe { Strings_Insert(self.0, index, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn InsertObject(&self, index: i32, s: &str, aObject: &dyn IObject)  {
          unsafe { Strings_InsertObject(self.0, index, CString::new(s).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn LoadFromFile(&self, fileName: &str)  {
          unsafe { Strings_LoadFromFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { Strings_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn Move(&self, curIndex: i32, newIndex: i32)  {
          unsafe { Strings_Move(self.0, curIndex, newIndex) }
      }

      pub fn SaveToFile(&self, fileName: &str)  {
          unsafe { Strings_SaveToFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { Strings_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Strings_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Strings_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Strings_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Strings_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Strings_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Strings_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Capacity(&self) -> i32  {
          unsafe { Strings_GetCapacity(self.0) }
      }

      pub fn SetCapacity(&self, aValue: i32)  {
          unsafe { Strings_SetCapacity(self.0, aValue) }
      }

      pub fn CommaText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetCommaText(self.0)).to_string_lossy()  }
      }

      pub fn SetCommaText(&self, aValue: &str)  {
          unsafe { Strings_SetCommaText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { Strings_GetCount(self.0) }
      }

      pub fn Delimiter(&self) -> Char  {
          unsafe { Strings_GetDelimiter(self.0) }
      }

      pub fn SetDelimiter(&self, aValue: Char)  {
          unsafe { Strings_SetDelimiter(self.0, aValue) }
      }

      pub fn NameValueSeparator(&self) -> Char  {
          unsafe { Strings_GetNameValueSeparator(self.0) }
      }

      pub fn SetNameValueSeparator(&self, aValue: Char)  {
          unsafe { Strings_SetNameValueSeparator(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { Strings_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Objects(&self, index: i32) -> TObject  {
          TObject {
              0: unsafe { Strings_GetObjects(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetObjects(&self, index: i32, aValue: &dyn IObject)  {
          unsafe { Strings_SetObjects(self.0, index, aValue.Instance()) }
      }

      pub fn Values<'a>(&self, name: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetValues(self.0, CString::new(name).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn SetValues(&self, name: &str, aValue: &str)  {
          unsafe { Strings_SetValues(self.0, CString::new(name).unwrap().as_ptr(), CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ValueFromIndex<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetValueFromIndex(self.0, index)).to_string_lossy()  }
      }

      pub fn SetValueFromIndex(&self, index: i32, aValue: &str)  {
          unsafe { Strings_SetValueFromIndex(self.0, index, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Strings<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Strings_GetStrings(self.0, index)).to_string_lossy()  }
      }

      pub fn SetStrings(&self, index: i32, aValue: &str)  {
          unsafe { Strings_SetStrings(self.0, index, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Strings_StaticClassType() }
      }
}

impl IObject for TStrings {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TStrings {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TStringList {
      pub fn new() -> Self {
          TStringList {
              0: unsafe { StringList_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStringList { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StringList_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self, s: &str) -> i32  {
          unsafe { StringList_Add(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn AddObject(&self, s: &str, aObject: &dyn IObject) -> i32  {
          unsafe { StringList_AddObject(self.0, CString::new(s).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { StringList_Assign(self.0, source.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { StringList_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { StringList_Delete(self.0, index) }
      }

      pub fn IndexOf(&self, s: &str) -> i32  {
          unsafe { StringList_IndexOf(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn Insert(&self, index: i32, s: &str)  {
          unsafe { StringList_Insert(self.0, index, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn InsertObject(&self, index: i32, s: &str, aObject: &dyn IObject)  {
          unsafe { StringList_InsertObject(self.0, index, CString::new(s).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Append(&self, s: &str)  {
          unsafe { StringList_Append(self.0, CString::new(s).unwrap().as_ptr()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { StringList_BeginUpdate(self.0) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { StringList_EndUpdate(self.0) }
      }

      pub fn Equals(&self, strings: &TStrings) -> bool  {
          unsafe { StringList_Equals(self.0, strings.Instance()) }
      }

      pub fn IndexOfName(&self, name: &str) -> i32  {
          unsafe { StringList_IndexOfName(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn IndexOfObject(&self, aObject: &dyn IObject) -> i32  {
          unsafe { StringList_IndexOfObject(self.0, aObject.Instance()) }
      }

      pub fn LoadFromFile(&self, fileName: &str)  {
          unsafe { StringList_LoadFromFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { StringList_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn Move(&self, curIndex: i32, newIndex: i32)  {
          unsafe { StringList_Move(self.0, curIndex, newIndex) }
      }

      pub fn SaveToFile(&self, fileName: &str)  {
          unsafe { StringList_SaveToFile(self.0, CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { StringList_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StringList_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StringList_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StringList_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StringList_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StringList_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StringList_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Sorted(&self) -> bool  {
          unsafe { StringList_GetSorted(self.0) }
      }

      pub fn SetSorted(&self, aValue: bool)  {
          unsafe { StringList_SetSorted(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { StringList_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnChanging(&self, aEventId: TNotifyEvent)  {
          unsafe { StringList_SetOnChanging(self.0, aEventId) }
      }

      pub fn Capacity(&self) -> i32  {
          unsafe { StringList_GetCapacity(self.0) }
      }

      pub fn SetCapacity(&self, aValue: i32)  {
          unsafe { StringList_SetCapacity(self.0, aValue) }
      }

      pub fn CommaText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetCommaText(self.0)).to_string_lossy()  }
      }

      pub fn SetCommaText(&self, aValue: &str)  {
          unsafe { StringList_SetCommaText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { StringList_GetCount(self.0) }
      }

      pub fn Delimiter(&self) -> Char  {
          unsafe { StringList_GetDelimiter(self.0) }
      }

      pub fn SetDelimiter(&self, aValue: Char)  {
          unsafe { StringList_SetDelimiter(self.0, aValue) }
      }

      pub fn NameValueSeparator(&self) -> Char  {
          unsafe { StringList_GetNameValueSeparator(self.0) }
      }

      pub fn SetNameValueSeparator(&self, aValue: Char)  {
          unsafe { StringList_SetNameValueSeparator(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { StringList_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Objects(&self, index: i32) -> TObject  {
          TObject {
              0: unsafe { StringList_GetObjects(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetObjects(&self, index: i32, aValue: &dyn IObject)  {
          unsafe { StringList_SetObjects(self.0, index, aValue.Instance()) }
      }

      pub fn Values<'a>(&self, name: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetValues(self.0, CString::new(name).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn SetValues(&self, name: &str, aValue: &str)  {
          unsafe { StringList_SetValues(self.0, CString::new(name).unwrap().as_ptr(), CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ValueFromIndex<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetValueFromIndex(self.0, index)).to_string_lossy()  }
      }

      pub fn SetValueFromIndex(&self, index: i32, aValue: &str)  {
          unsafe { StringList_SetValueFromIndex(self.0, index, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Strings<'a>(&self, index: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringList_GetStrings(self.0, index)).to_string_lossy()  }
      }

      pub fn SetStrings(&self, index: i32, aValue: &str)  {
          unsafe { StringList_SetStrings(self.0, index, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StringList_StaticClassType() }
      }
}

impl IObject for TStringList {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TStringList {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TBrush {
      pub fn new() -> Self {
          TBrush {
              0: unsafe { Brush_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TBrush { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Brush_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Brush_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Brush_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Brush_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Brush_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Brush_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Brush_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Brush_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Brush_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Brush_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Bitmap(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { Brush_GetBitmap(self.0) }
              , 1: false,
          }
      }

      pub fn SetBitmap(&self, aValue: &TBitmap)  {
          unsafe { Brush_SetBitmap(self.0, aValue.Instance()) }
      }

      pub fn Handle(&self) -> HBRUSH  {
          unsafe { Brush_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HBRUSH)  {
          unsafe { Brush_SetHandle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Brush_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Brush_SetColor(self.0, aValue) }
      }

      pub fn Style(&self) -> TBrushStyle  {
          unsafe { Brush_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TBrushStyle)  {
          unsafe { Brush_SetStyle(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Brush_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Brush_StaticClassType() }
      }
}

impl IObject for TBrush {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TBrush {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TPen {
      pub fn new() -> Self {
          TPen {
              0: unsafe { Pen_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPen { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Pen_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Pen_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Pen_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Pen_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Pen_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Pen_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Pen_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Pen_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Pen_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Pen_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HPEN  {
          unsafe { Pen_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HPEN)  {
          unsafe { Pen_SetHandle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Pen_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Pen_SetColor(self.0, aValue) }
      }

      pub fn Mode(&self) -> TPenMode  {
          unsafe { Pen_GetMode(self.0) }
      }

      pub fn SetMode(&self, aValue: TPenMode)  {
          unsafe { Pen_SetMode(self.0, aValue) }
      }

      pub fn Style(&self) -> TPenStyle  {
          unsafe { Pen_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TPenStyle)  {
          unsafe { Pen_SetStyle(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Pen_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Pen_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Pen_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Pen_StaticClassType() }
      }
}

impl IObject for TPen {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TPen {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TMenuItem {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMenuItem {
              0: unsafe { MenuItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMenuItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MenuItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Insert(&self, index: i32, item: &TMenuItem)  {
          unsafe { MenuItem_Insert(self.0, index, item.Instance()) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { MenuItem_Delete(self.0, index) }
      }

      pub fn Clear(&self)  {
          unsafe { MenuItem_Clear(self.0) }
      }

      pub fn Click(&self)  {
          unsafe { MenuItem_Click(self.0) }
      }

      pub fn IndexOf(&self, item: &TMenuItem) -> i32  {
          unsafe { MenuItem_IndexOf(self.0, item.Instance()) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { MenuItem_HasParent(self.0) }
      }

      pub fn Add(&self, item: &TMenuItem)  {
          unsafe { MenuItem_Add(self.0, item.Instance()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { MenuItem_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MenuItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { MenuItem_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MenuItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MenuItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MenuItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MenuItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MenuItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MenuItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MenuItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HMENU  {
          unsafe { MenuItem_GetHandle(self.0) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { MenuItem_GetCount(self.0) }
      }

      pub fn Parent(&self) -> TMenuItem  {
          TMenuItem {
              0: unsafe { MenuItem_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { MenuItem_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { MenuItem_SetAction(self.0, aValue.Instance()) }
      }

      pub fn AutoCheck(&self) -> bool  {
          unsafe { MenuItem_GetAutoCheck(self.0) }
      }

      pub fn SetAutoCheck(&self, aValue: bool)  {
          unsafe { MenuItem_SetAutoCheck(self.0, aValue) }
      }

      pub fn Bitmap(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { MenuItem_GetBitmap(self.0) }
              , 1: false,
          }
      }

      pub fn SetBitmap(&self, aValue: &TBitmap)  {
          unsafe { MenuItem_SetBitmap(self.0, aValue.Instance()) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MenuItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { MenuItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { MenuItem_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { MenuItem_SetChecked(self.0, aValue) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { MenuItem_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { MenuItem_SetDefault(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { MenuItem_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { MenuItem_SetEnabled(self.0, aValue) }
      }

      pub fn GroupIndex(&self) -> i8  {
          unsafe { MenuItem_GetGroupIndex(self.0) }
      }

      pub fn SetGroupIndex(&self, aValue: i8)  {
          unsafe { MenuItem_SetGroupIndex(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MenuItem_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { MenuItem_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { MenuItem_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { MenuItem_SetImageIndex(self.0, aValue) }
      }

      pub fn RadioItem(&self) -> bool  {
          unsafe { MenuItem_GetRadioItem(self.0) }
      }

      pub fn SetRadioItem(&self, aValue: bool)  {
          unsafe { MenuItem_SetRadioItem(self.0, aValue) }
      }

      pub fn ShortCut(&self) -> TShortCut  {
          unsafe { MenuItem_GetShortCut(self.0) }
      }

      pub fn SetShortCut(&self, aValue: TShortCut)  {
          unsafe { MenuItem_SetShortCut(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { MenuItem_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { MenuItem_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { MenuItem_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnMeasureItem(&self, aEventId: TMenuMeasureItemEvent)  {
          unsafe { MenuItem_SetOnMeasureItem(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { MenuItem_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { MenuItem_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { MenuItem_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { MenuItem_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MenuItem_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { MenuItem_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { MenuItem_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { MenuItem_SetTag(self.0, aValue) }
      }

      pub fn Items(&self, index: i32) -> TMenuItem  {
          TMenuItem {
              0: unsafe { MenuItem_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { MenuItem_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MenuItem_StaticClassType() }
      }
}

impl IObject for TMenuItem {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMenuItem {}

impl TPicture {
      pub fn new() -> Self {
          TPicture {
              0: unsafe { Picture_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPicture { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Picture_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { Picture_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { Picture_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { Picture_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { Picture_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Picture_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Picture_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Picture_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Picture_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Picture_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Picture_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Picture_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Picture_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Picture_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Bitmap(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { Picture_GetBitmap(self.0) }
              , 1: false,
          }
      }

      pub fn SetBitmap(&self, aValue: &TBitmap)  {
          unsafe { Picture_SetBitmap(self.0, aValue.Instance()) }
      }

      pub fn Graphic(&self) -> TGraphic  {
          TGraphic {
              0: unsafe { Picture_GetGraphic(self.0) }
              , 1: false,
          }
      }

      pub fn SetGraphic(&self, aValue: &TGraphic)  {
          unsafe { Picture_SetGraphic(self.0, aValue.Instance()) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Picture_GetHeight(self.0) }
      }

      pub fn Icon(&self) -> TIcon  {
          TIcon {
              0: unsafe { Picture_GetIcon(self.0) }
              , 1: false,
          }
      }

      pub fn SetIcon(&self, aValue: &TIcon)  {
          unsafe { Picture_SetIcon(self.0, aValue.Instance()) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Picture_GetWidth(self.0) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Picture_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Picture_StaticClassType() }
      }
}

impl IObject for TPicture {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TPicture {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TListColumns {
      pub fn new(aOwner: &TListView) -> Self {
          TListColumns {
              0: unsafe { ListColumns_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListColumns { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListColumns_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self) -> TListColumn  {
          TListColumn {
              0: unsafe { ListColumns_Add(self.0) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TListView  {
          TListView {
              0: unsafe { ListColumns_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ListColumns_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { ListColumns_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { ListColumns_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { ListColumns_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { ListColumns_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { ListColumns_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListColumns_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Insert(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { ListColumns_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListColumns_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListColumns_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListColumns_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListColumns_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListColumns_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListColumns_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListColumns_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ListColumns_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TListColumn  {
          TListColumn {
              0: unsafe { ListColumns_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TListColumn)  {
          unsafe { ListColumns_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListColumns_StaticClassType() }
      }
}

impl IObject for TListColumns {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TListColumns {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TListItems {
      pub fn new(aOwner: &TListView) -> Self {
          TListItems {
              0: unsafe { ListItems_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListItems { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListItems_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self) -> TListItem  {
          TListItem {
              0: unsafe { ListItems_Add(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ListItems_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { ListItems_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { ListItems_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { ListItems_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { ListItems_EndUpdate(self.0) }
      }

      pub fn IndexOf(&self, value: &TListItem) -> i32  {
          unsafe { ListItems_IndexOf(self.0, value.Instance()) }
      }

      pub fn Insert(&self, index: i32) -> TListItem  {
          TListItem {
              0: unsafe { ListItems_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListItems_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListItems_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListItems_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListItems_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListItems_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListItems_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListItems_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListItems_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ListItems_GetCount(self.0) }
      }

      pub fn SetCount(&self, aValue: i32)  {
          unsafe { ListItems_SetCount(self.0, aValue) }
      }

      pub fn Owner(&self) -> TListView  {
          TListView {
              0: unsafe { ListItems_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Item(&self, index: i32) -> TListItem  {
          TListItem {
              0: unsafe { ListItems_GetItem(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItem(&self, index: i32, aValue: &TListItem)  {
          unsafe { ListItems_SetItem(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListItems_StaticClassType() }
      }
}

impl IObject for TListItems {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TListItems {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TTreeNodes {
      pub fn new(aOwner: &TTreeView) -> Self {
          TTreeNodes {
              0: unsafe { TreeNodes_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTreeNodes { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TreeNodes_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddChildFirst(&self, parent: &TTreeNode, s: &str) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddChildFirst(self.0, parent.Instance(), CString::new(s).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn AddChild(&self, parent: &TTreeNode, s: &str) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddChild(self.0, parent.Instance(), CString::new(s).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn AddChildObjectFirst(&self, parent: &TTreeNode, s: &str, ptr: usize) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddChildObjectFirst(self.0, parent.Instance(), CString::new(s).unwrap().as_ptr(), ptr) }
              , 1: false,
          }
      }

      pub fn AddChildObject(&self, parent: &TTreeNode, s: &str, ptr: usize) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddChildObject(self.0, parent.Instance(), CString::new(s).unwrap().as_ptr(), ptr) }
              , 1: false,
          }
      }

      pub fn AddObjectFirst(&self, sibling: &TTreeNode, s: &str, ptr: usize) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddObjectFirst(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr(), ptr) }
              , 1: false,
          }
      }

      pub fn AddObject(&self, sibling: &TTreeNode, s: &str, ptr: usize) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddObject(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr(), ptr) }
              , 1: false,
          }
      }

      pub fn AddNode(&self, node: &TTreeNode, relative: &TTreeNode, s: &str, ptr: usize, method: TNodeAttachMode) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddNode(self.0, node.Instance(), relative.Instance(), CString::new(s).unwrap().as_ptr(), ptr, method) }
              , 1: false,
          }
      }

      pub fn AddFirst(&self, sibling: &TTreeNode, s: &str) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_AddFirst(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Add(&self, sibling: &TTreeNode, s: &str) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_Add(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TreeNodes_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { TreeNodes_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { TreeNodes_Clear(self.0) }
      }

      pub fn Delete(&self, node: &TTreeNode)  {
          unsafe { TreeNodes_Delete(self.0, node.Instance()) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { TreeNodes_EndUpdate(self.0) }
      }

      pub fn GetFirstNode(&self) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_GetFirstNode(self.0) }
              , 1: false,
          }
      }

      pub fn Insert(&self, sibling: &TTreeNode, s: &str) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_Insert(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn InsertObject(&self, sibling: &TTreeNode, s: &str, ptr: usize) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_InsertObject(self.0, sibling.Instance(), CString::new(s).unwrap().as_ptr(), ptr) }
              , 1: false,
          }
      }

      pub fn CustomSort(&self, sortProc: PFNTVCOMPARE, data: isize, aRecurse: bool) -> bool  {
          unsafe { TreeNodes_CustomSort(self.0, sortProc, data, aRecurse) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TreeNodes_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TreeNodes_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeNodes_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TreeNodes_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TreeNodes_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TreeNodes_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TreeNodes_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeNodes_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { TreeNodes_GetCount(self.0) }
      }

      pub fn Owner(&self) -> TTreeView  {
          TTreeView {
              0: unsafe { TreeNodes_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Item(&self, index: i32) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNodes_GetItem(self.0, index) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TreeNodes_StaticClassType() }
      }
}

impl IObject for TTreeNodes {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TTreeNodes {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TListItem {
      pub fn new(aOwner: &TListItems) -> Self {
          TListItem {
              0: unsafe { ListItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn DisplayRectSubItem(&self, subItem: i32, code: TDisplayCode, result: *mut TRect)  {
          unsafe { ListItem_DisplayRectSubItem(self.0, subItem, code, result) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ListItem_Assign(self.0, source.Instance()) }
      }

      pub fn Delete(&self)  {
          unsafe { ListItem_Delete(self.0) }
      }

      pub fn DisplayRect(&self, code: TDisplayCode, result: *mut TRect)  {
          unsafe { ListItem_DisplayRect(self.0, code, result) }
      }

      pub fn EditCaption(&self) -> bool  {
          unsafe { ListItem_EditCaption(self.0) }
      }

      pub fn MakeVisible(&self, partialOK: bool)  {
          unsafe { ListItem_MakeVisible(self.0, partialOK) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn DropTarget(&self) -> bool  {
          unsafe { ListItem_GetDropTarget(self.0) }
      }

      pub fn SetDropTarget(&self, aValue: bool)  {
          unsafe { ListItem_SetDropTarget(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ListItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { ListItem_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { ListItem_SetChecked(self.0, aValue) }
      }

      pub fn Cut(&self) -> bool  {
          unsafe { ListItem_GetCut(self.0) }
      }

      pub fn SetCut(&self, aValue: bool)  {
          unsafe { ListItem_SetCut(self.0, aValue) }
      }

      pub fn Data(&self) -> usize  {
          unsafe { ListItem_GetData(self.0) }
      }

      pub fn SetData(&self, aValue: usize)  {
          unsafe { ListItem_SetData(self.0, aValue) }
      }

      pub fn Focused(&self) -> bool  {
          unsafe { ListItem_GetFocused(self.0) }
      }

      pub fn SetFocused(&self, aValue: bool)  {
          unsafe { ListItem_SetFocused(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { ListItem_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { ListItem_SetImageIndex(self.0, aValue) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { ListItem_GetIndex(self.0) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ListItem_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ListItem_SetLeft(self.0, aValue) }
      }

      pub fn ListView(&self) -> TListView  {
          TListView {
              0: unsafe { ListItem_GetListView(self.0) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TListItems  {
          TListItems {
              0: unsafe { ListItem_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Position(&self, result: *mut TPoint)  {
          unsafe { ListItem_GetPosition(self.0, result) }
      }

      pub fn SetPosition(&self, aValue: *mut TPoint)  {
          unsafe { ListItem_SetPosition(self.0, aValue) }
      }

      pub fn Selected(&self) -> bool  {
          unsafe { ListItem_GetSelected(self.0) }
      }

      pub fn SetSelected(&self, aValue: bool)  {
          unsafe { ListItem_SetSelected(self.0, aValue) }
      }

      pub fn StateIndex(&self) -> i32  {
          unsafe { ListItem_GetStateIndex(self.0) }
      }

      pub fn SetStateIndex(&self, aValue: i32)  {
          unsafe { ListItem_SetStateIndex(self.0, aValue) }
      }

      pub fn SubItems(&self) -> TStrings  {
          TStrings {
              0: unsafe { ListItem_GetSubItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetSubItems(&self, aValue: &TStrings)  {
          unsafe { ListItem_SetSubItems(self.0, aValue.Instance()) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ListItem_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ListItem_SetTop(self.0, aValue) }
      }

      pub fn SubItemImages(&self, index: i32) -> i32  {
          unsafe { ListItem_GetSubItemImages(self.0, index) }
      }

      pub fn SetSubItemImages(&self, index: i32, aValue: i32)  {
          unsafe { ListItem_SetSubItemImages(self.0, index, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListItem_StaticClassType() }
      }
}

impl IObject for TListItem {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TListItem {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TTreeNode {
      pub fn new(aOwner: &TTreeNodes) -> Self {
          TTreeNode {
              0: unsafe { TreeNode_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTreeNode { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TreeNode_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TreeNode_Assign(self.0, source.Instance()) }
      }

      pub fn Collapse(&self, recurse: bool)  {
          unsafe { TreeNode_Collapse(self.0, recurse) }
      }

      pub fn Delete(&self)  {
          unsafe { TreeNode_Delete(self.0) }
      }

      pub fn DisplayRect(&self, textOnly: bool, result: *mut TRect)  {
          unsafe { TreeNode_DisplayRect(self.0, textOnly, result) }
      }

      pub fn EditText(&self) -> bool  {
          unsafe { TreeNode_EditText(self.0) }
      }

      pub fn Expand(&self, recurse: bool)  {
          unsafe { TreeNode_Expand(self.0, recurse) }
      }

      pub fn IndexOf(&self, value: &TTreeNode) -> i32  {
          unsafe { TreeNode_IndexOf(self.0, value.Instance()) }
      }

      pub fn MakeVisible(&self)  {
          unsafe { TreeNode_MakeVisible(self.0) }
      }

      pub fn MoveTo(&self, destination: &TTreeNode, mode: TNodeAttachMode)  {
          unsafe { TreeNode_MoveTo(self.0, destination.Instance(), mode) }
      }

      pub fn CustomSort(&self, sortProc: PFNTVCOMPARE, data: isize, aRecurse: bool) -> bool  {
          unsafe { TreeNode_CustomSort(self.0, sortProc, data, aRecurse) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TreeNode_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TreeNode_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeNode_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TreeNode_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TreeNode_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TreeNode_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TreeNode_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TreeNode_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AbsoluteIndex(&self) -> i32  {
          unsafe { TreeNode_GetAbsoluteIndex(self.0) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { TreeNode_GetCount(self.0) }
      }

      pub fn Cut(&self) -> bool  {
          unsafe { TreeNode_GetCut(self.0) }
      }

      pub fn SetCut(&self, aValue: bool)  {
          unsafe { TreeNode_SetCut(self.0, aValue) }
      }

      pub fn Data(&self) -> usize  {
          unsafe { TreeNode_GetData(self.0) }
      }

      pub fn SetData(&self, aValue: usize)  {
          unsafe { TreeNode_SetData(self.0, aValue) }
      }

      pub fn Deleting(&self) -> bool  {
          unsafe { TreeNode_GetDeleting(self.0) }
      }

      pub fn Focused(&self) -> bool  {
          unsafe { TreeNode_GetFocused(self.0) }
      }

      pub fn SetFocused(&self, aValue: bool)  {
          unsafe { TreeNode_SetFocused(self.0, aValue) }
      }

      pub fn DropTarget(&self) -> bool  {
          unsafe { TreeNode_GetDropTarget(self.0) }
      }

      pub fn SetDropTarget(&self, aValue: bool)  {
          unsafe { TreeNode_SetDropTarget(self.0, aValue) }
      }

      pub fn Selected(&self) -> bool  {
          unsafe { TreeNode_GetSelected(self.0) }
      }

      pub fn SetSelected(&self, aValue: bool)  {
          unsafe { TreeNode_SetSelected(self.0, aValue) }
      }

      pub fn Expanded(&self) -> bool  {
          unsafe { TreeNode_GetExpanded(self.0) }
      }

      pub fn SetExpanded(&self, aValue: bool)  {
          unsafe { TreeNode_SetExpanded(self.0, aValue) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { TreeNode_GetHandle(self.0) }
      }

      pub fn HasChildren(&self) -> bool  {
          unsafe { TreeNode_GetHasChildren(self.0) }
      }

      pub fn SetHasChildren(&self, aValue: bool)  {
          unsafe { TreeNode_SetHasChildren(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { TreeNode_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { TreeNode_SetImageIndex(self.0, aValue) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { TreeNode_GetIndex(self.0) }
      }

      pub fn IsVisible(&self) -> bool  {
          unsafe { TreeNode_GetIsVisible(self.0) }
      }

      pub fn Level(&self) -> i32  {
          unsafe { TreeNode_GetLevel(self.0) }
      }

      pub fn Owner(&self) -> TTreeNodes  {
          TTreeNodes {
              0: unsafe { TreeNode_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Parent(&self) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNode_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SelectedIndex(&self) -> i32  {
          unsafe { TreeNode_GetSelectedIndex(self.0) }
      }

      pub fn SetSelectedIndex(&self, aValue: i32)  {
          unsafe { TreeNode_SetSelectedIndex(self.0, aValue) }
      }

      pub fn StateIndex(&self) -> i32  {
          unsafe { TreeNode_GetStateIndex(self.0) }
      }

      pub fn SetStateIndex(&self, aValue: i32)  {
          unsafe { TreeNode_SetStateIndex(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TreeNode_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { TreeNode_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TreeView(&self) -> TTreeView  {
          TTreeView {
              0: unsafe { TreeNode_GetTreeView(self.0) }
              , 1: false,
          }
      }

      pub fn Item(&self, index: i32) -> TTreeNode  {
          TTreeNode {
              0: unsafe { TreeNode_GetItem(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItem(&self, index: i32, aValue: &TTreeNode)  {
          unsafe { TreeNode_SetItem(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TreeNode_StaticClassType() }
      }
}

impl IObject for TTreeNode {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TTreeNode {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TPageControl {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPageControl {
              0: unsafe { PageControl_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPageControl { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PageControl_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn SelectNextPage(&self, goForward: bool, checkTabVisible: bool)  {
          unsafe { PageControl_SelectNextPage(self.0, goForward, checkTabVisible) }
      }

      pub fn TabRect(&self, index: i32, result: *mut TRect)  {
          unsafe { PageControl_TabRect(self.0, index, result) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { PageControl_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { PageControl_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { PageControl_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { PageControl_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { PageControl_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { PageControl_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { PageControl_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { PageControl_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { PageControl_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { PageControl_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { PageControl_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { PageControl_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { PageControl_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { PageControl_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { PageControl_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { PageControl_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { PageControl_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { PageControl_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { PageControl_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { PageControl_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { PageControl_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { PageControl_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { PageControl_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PageControl_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { PageControl_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { PageControl_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { PageControl_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { PageControl_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { PageControl_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { PageControl_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { PageControl_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { PageControl_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { PageControl_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { PageControl_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PageControl_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageControl_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PageControl_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PageControl_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageControl_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PageControl_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PageControl_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PageControl_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PageControl_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageControl_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { PageControl_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { PageControl_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { PageControl_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { PageControl_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { PageControl_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { PageControl_AnchorClient(self.0, aSpace) }
      }

      pub fn Options(&self) -> TCTabControlOptions  {
          unsafe { PageControl_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TCTabControlOptions)  {
          unsafe { PageControl_SetOptions(self.0, aValue) }
      }

      pub fn ActivePageIndex(&self) -> i32  {
          unsafe { PageControl_GetActivePageIndex(self.0) }
      }

      pub fn SetActivePageIndex(&self, aValue: i32)  {
          unsafe { PageControl_SetActivePageIndex(self.0, aValue) }
      }

      pub fn PageCount(&self) -> i32  {
          unsafe { PageControl_GetPageCount(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { PageControl_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { PageControl_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { PageControl_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { PageControl_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { PageControl_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { PageControl_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { PageControl_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { PageControl_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { PageControl_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { PageControl_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { PageControl_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { PageControl_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { PageControl_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { PageControl_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { PageControl_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { PageControl_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { PageControl_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { PageControl_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { PageControl_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { PageControl_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { PageControl_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { PageControl_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { PageControl_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { PageControl_SetImages(self.0, aValue.Instance()) }
      }

      pub fn MultiLine(&self) -> bool  {
          unsafe { PageControl_GetMultiLine(self.0) }
      }

      pub fn SetMultiLine(&self, aValue: bool)  {
          unsafe { PageControl_SetMultiLine(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { PageControl_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { PageControl_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { PageControl_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { PageControl_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { PageControl_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { PageControl_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { PageControl_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { PageControl_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { PageControl_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { PageControl_SetShowHint(self.0, aValue) }
      }

      pub fn TabHeight(&self) -> i16  {
          unsafe { PageControl_GetTabHeight(self.0) }
      }

      pub fn SetTabHeight(&self, aValue: i16)  {
          unsafe { PageControl_SetTabHeight(self.0, aValue) }
      }

      pub fn TabIndex(&self) -> i32  {
          unsafe { PageControl_GetTabIndex(self.0) }
      }

      pub fn SetTabIndex(&self, aValue: i32)  {
          unsafe { PageControl_SetTabIndex(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { PageControl_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { PageControl_SetTabOrder(self.0, aValue) }
      }

      pub fn TabPosition(&self) -> TTabPosition  {
          unsafe { PageControl_GetTabPosition(self.0) }
      }

      pub fn SetTabPosition(&self, aValue: TTabPosition)  {
          unsafe { PageControl_SetTabPosition(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { PageControl_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { PageControl_SetTabStop(self.0, aValue) }
      }

      pub fn TabWidth(&self) -> i16  {
          unsafe { PageControl_GetTabWidth(self.0) }
      }

      pub fn SetTabWidth(&self, aValue: i16)  {
          unsafe { PageControl_SetTabWidth(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { PageControl_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { PageControl_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnChanging(&self, aEventId: TTabChangingEvent)  {
          unsafe { PageControl_SetOnChanging(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { PageControl_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { PageControl_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { PageControl_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { PageControl_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { PageControl_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { PageControl_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { PageControl_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { PageControl_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { PageControl_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { PageControl_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { PageControl_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { PageControl_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { PageControl_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { PageControl_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { PageControl_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { PageControl_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { PageControl_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { PageControl_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { PageControl_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { PageControl_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { PageControl_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { PageControl_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { PageControl_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { PageControl_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { PageControl_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { PageControl_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { PageControl_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { PageControl_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { PageControl_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { PageControl_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { PageControl_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { PageControl_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { PageControl_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { PageControl_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { PageControl_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { PageControl_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { PageControl_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { PageControl_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { PageControl_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { PageControl_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { PageControl_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { PageControl_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { PageControl_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { PageControl_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { PageControl_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { PageControl_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { PageControl_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { PageControl_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { PageControl_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { PageControl_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { PageControl_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PageControl_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { PageControl_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PageControl_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PageControl_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PageControl_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PageControl_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PageControl_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PageControl_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PageControl_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PageControl_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PageControl_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { PageControl_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PageControl_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { PageControl_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PageControl_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { PageControl_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PageControl_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { PageControl_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { PageControl_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { PageControl_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { PageControl_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { PageControl_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Pages(&self, index: i32) -> TTabSheet  {
          TTabSheet {
              0: unsafe { PageControl_GetPages(self.0, index) }
              , 1: false,
          }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { PageControl_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { PageControl_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PageControl_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PageControl_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PageControl_StaticClassType() }
      }
}

impl IObject for TPageControl {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPageControl {}
impl IControl for TPageControl {}
impl IWinControl for TPageControl {}

impl TTabSheet {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTabSheet {
              0: unsafe { TabSheet_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTabSheet { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TabSheet_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { TabSheet_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { TabSheet_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { TabSheet_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { TabSheet_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { TabSheet_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { TabSheet_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { TabSheet_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { TabSheet_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { TabSheet_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { TabSheet_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { TabSheet_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { TabSheet_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { TabSheet_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { TabSheet_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { TabSheet_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { TabSheet_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { TabSheet_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { TabSheet_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { TabSheet_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { TabSheet_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TabSheet_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TabSheet_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { TabSheet_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { TabSheet_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { TabSheet_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { TabSheet_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { TabSheet_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { TabSheet_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { TabSheet_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { TabSheet_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { TabSheet_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { TabSheet_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { TabSheet_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { TabSheet_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { TabSheet_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TabSheet_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { TabSheet_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TabSheet_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TabSheet_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TabSheet_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TabSheet_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TabSheet_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TabSheet_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TabSheet_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TabSheet_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { TabSheet_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TabSheet_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { TabSheet_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { TabSheet_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { TabSheet_AnchorClient(self.0, aSpace) }
      }

      pub fn PageControl(&self) -> TPageControl  {
          TPageControl {
              0: unsafe { TabSheet_GetPageControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetPageControl(&self, aValue: &TPageControl)  {
          unsafe { TabSheet_SetPageControl(self.0, aValue.Instance()) }
      }

      pub fn TabIndex(&self) -> i32  {
          unsafe { TabSheet_GetTabIndex(self.0) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { TabSheet_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { TabSheet_SetBorderWidth(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TabSheet_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { TabSheet_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { TabSheet_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { TabSheet_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { TabSheet_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { TabSheet_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { TabSheet_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { TabSheet_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { TabSheet_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { TabSheet_SetHeight(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { TabSheet_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { TabSheet_SetImageIndex(self.0, aValue) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { TabSheet_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { TabSheet_SetLeft(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { TabSheet_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { TabSheet_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn PageIndex(&self) -> i32  {
          unsafe { TabSheet_GetPageIndex(self.0) }
      }

      pub fn SetPageIndex(&self, aValue: i32)  {
          unsafe { TabSheet_SetPageIndex(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { TabSheet_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { TabSheet_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { TabSheet_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { TabSheet_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { TabSheet_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { TabSheet_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { TabSheet_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { TabSheet_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { TabSheet_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { TabSheet_SetShowHint(self.0, aValue) }
      }

      pub fn TabVisible(&self) -> bool  {
          unsafe { TabSheet_GetTabVisible(self.0) }
      }

      pub fn SetTabVisible(&self, aValue: bool)  {
          unsafe { TabSheet_SetTabVisible(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { TabSheet_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { TabSheet_SetTop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { TabSheet_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { TabSheet_SetVisible(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { TabSheet_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { TabSheet_SetWidth(self.0, aValue) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { TabSheet_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { TabSheet_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { TabSheet_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { TabSheet_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnHide(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnHide(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { TabSheet_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { TabSheet_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { TabSheet_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { TabSheet_SetOnShow(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { TabSheet_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { TabSheet_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { TabSheet_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { TabSheet_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { TabSheet_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { TabSheet_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { TabSheet_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { TabSheet_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { TabSheet_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { TabSheet_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { TabSheet_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { TabSheet_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { TabSheet_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { TabSheet_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { TabSheet_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { TabSheet_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { TabSheet_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { TabSheet_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { TabSheet_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { TabSheet_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { TabSheet_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { TabSheet_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { TabSheet_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { TabSheet_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { TabSheet_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { TabSheet_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { TabSheet_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { TabSheet_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { TabSheet_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { TabSheet_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { TabSheet_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { TabSheet_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { TabSheet_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { TabSheet_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { TabSheet_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { TabSheet_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { TabSheet_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { TabSheet_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { TabSheet_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { TabSheet_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { TabSheet_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { TabSheet_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TabSheet_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { TabSheet_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { TabSheet_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { TabSheet_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { TabSheet_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { TabSheet_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TabSheet_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TabSheet_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { TabSheet_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { TabSheet_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TabSheet_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { TabSheet_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TabSheet_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { TabSheet_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TabSheet_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { TabSheet_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TabSheet_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { TabSheet_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { TabSheet_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { TabSheet_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { TabSheet_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { TabSheet_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TabSheet_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { TabSheet_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { TabSheet_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { TabSheet_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TabSheet_StaticClassType() }
      }
}

impl IObject for TTabSheet {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTabSheet {}
impl IControl for TTabSheet {}
impl IWinControl for TTabSheet {}

impl TButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TButton {
              0: unsafe { Button_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Button_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Click(&self)  {
          unsafe { Button_Click(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Button_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Button_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Button_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Button_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Button_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Button_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Button_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Button_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Button_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Button_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Button_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Button_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Button_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Button_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Button_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Button_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Button_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { Button_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Button_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Button_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Button_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Button_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Button_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Button_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Button_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Button_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Button_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Button_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Button_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Button_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Button_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Button_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Button_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Button_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Button_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Button_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Button_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Button_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Button_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Button_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Button_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Button_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Button_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Button_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Button_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Button_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Button_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Button_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Button_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Button_AnchorClient(self.0, aSpace) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Button_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Button_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Button_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Button_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Button_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Button_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Button_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Button_SetBiDiMode(self.0, aValue) }
      }

      pub fn Cancel(&self) -> bool  {
          unsafe { Button_GetCancel(self.0) }
      }

      pub fn SetCancel(&self, aValue: bool)  {
          unsafe { Button_SetCancel(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Button_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { Button_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Button_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Button_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { Button_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { Button_SetDefault(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Button_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Button_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Button_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Button_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Button_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Button_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Button_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Button_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Button_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Button_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Button_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Button_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { Button_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { Button_SetModalResult(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Button_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Button_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Button_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Button_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Button_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Button_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Button_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Button_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Button_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Button_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Button_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Button_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Button_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Button_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Button_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Button_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Button_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Button_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Button_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Button_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Button_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Button_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { Button_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { Button_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { Button_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { Button_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Button_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Button_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Button_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Button_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Button_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Button_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Button_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Button_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Button_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Button_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Button_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Button_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Button_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Button_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Button_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Button_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Button_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Button_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Button_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Button_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Button_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Button_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Button_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Button_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Button_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Button_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Button_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Button_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Button_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Button_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Button_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Button_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Button_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Button_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Button_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Button_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Button_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Button_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Button_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Button_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Button_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Button_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Button_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Button_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Button_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Button_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Button_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Button_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Button_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Button_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Button_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Button_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Button_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Button_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Button_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Button_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Button_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Button_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Button_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Button_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Button_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Button_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Button_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Button_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Button_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Button_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Button_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Button_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Button_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Button_StaticClassType() }
      }
}

impl IObject for TButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TButton {}
impl IControl for TButton {}
impl IWinControl for TButton {}

impl TEdit {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TEdit {
              0: unsafe { Edit_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TEdit { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Edit_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Clear(&self)  {
          unsafe { Edit_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { Edit_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { Edit_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { Edit_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { Edit_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { Edit_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { Edit_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Edit_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Edit_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Edit_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Edit_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Edit_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Edit_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Edit_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Edit_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Edit_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Edit_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Edit_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Edit_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Edit_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Edit_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Edit_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Edit_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Edit_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { Edit_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Edit_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Edit_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Edit_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Edit_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Edit_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Edit_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Edit_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Edit_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Edit_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Edit_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Edit_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Edit_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Edit_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Edit_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Edit_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Edit_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Edit_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Edit_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Edit_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Edit_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Edit_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Edit_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Edit_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Edit_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Edit_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Edit_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Edit_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Edit_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Edit_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Edit_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Edit_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Edit_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Edit_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Edit_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { Edit_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { Edit_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Edit_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Edit_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSelect(&self) -> bool  {
          unsafe { Edit_GetAutoSelect(self.0) }
      }

      pub fn SetAutoSelect(&self, aValue: bool)  {
          unsafe { Edit_SetAutoSelect(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Edit_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Edit_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Edit_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Edit_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { Edit_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { Edit_SetBorderStyle(self.0, aValue) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { Edit_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { Edit_SetCharCase(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Edit_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Edit_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Edit_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Edit_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Edit_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Edit_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Edit_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Edit_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Edit_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Edit_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Edit_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Edit_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Edit_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Edit_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Edit_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Edit_SetFont(self.0, aValue.Instance()) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { Edit_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { Edit_SetHideSelection(self.0, aValue) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { Edit_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { Edit_SetMaxLength(self.0, aValue) }
      }

      pub fn NumbersOnly(&self) -> bool  {
          unsafe { Edit_GetNumbersOnly(self.0) }
      }

      pub fn SetNumbersOnly(&self, aValue: bool)  {
          unsafe { Edit_SetNumbersOnly(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Edit_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Edit_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Edit_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Edit_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Edit_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Edit_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Edit_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Edit_SetParentShowHint(self.0, aValue) }
      }

      pub fn PasswordChar(&self) -> Char  {
          unsafe { Edit_GetPasswordChar(self.0) }
      }

      pub fn SetPasswordChar(&self, aValue: Char)  {
          unsafe { Edit_SetPasswordChar(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Edit_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Edit_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { Edit_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { Edit_SetReadOnly(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Edit_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Edit_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Edit_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Edit_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Edit_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Edit_SetTabStop(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Edit_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { Edit_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Edit_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { Edit_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Edit_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Edit_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Edit_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Edit_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Edit_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Edit_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { Edit_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { Edit_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { Edit_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Edit_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Edit_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Edit_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Edit_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { Edit_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { Edit_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { Edit_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { Edit_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { Edit_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { Edit_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { Edit_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Edit_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { Edit_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Edit_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Edit_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Edit_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Edit_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Edit_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Edit_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Edit_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Edit_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Edit_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Edit_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Edit_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Edit_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Edit_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Edit_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Edit_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Edit_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Edit_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Edit_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Edit_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Edit_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Edit_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Edit_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Edit_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Edit_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Edit_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Edit_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Edit_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Edit_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Edit_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Edit_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Edit_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Edit_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Edit_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Edit_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Edit_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Edit_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Edit_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Edit_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Edit_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Edit_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Edit_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Edit_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Edit_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Edit_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Edit_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Edit_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Edit_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Edit_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Edit_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Edit_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Edit_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Edit_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Edit_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Edit_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Edit_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Edit_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Edit_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Edit_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Edit_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Edit_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Edit_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Edit_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Edit_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Edit_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Edit_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Edit_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Edit_StaticClassType() }
      }
}

impl IObject for TEdit {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TEdit {}
impl IControl for TEdit {}
impl IWinControl for TEdit {}

impl TScreen {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TScreen {
              0: unsafe { Screen_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TScreen { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Screen_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Screen_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Screen_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Screen_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Screen_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Screen_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Screen_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Screen_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Screen_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Screen_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Screen_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Screen_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ActiveControl(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Screen_GetActiveControl(self.0) }
              , 1: false,
          }
      }

      pub fn ActiveForm(&self) -> TForm  {
          TForm {
              0: unsafe { Screen_GetActiveForm(self.0) }
              , 1: false,
          }
      }

      pub fn CustomFormCount(&self) -> i32  {
          unsafe { Screen_GetCustomFormCount(self.0) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Screen_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Screen_SetCursor(self.0, aValue) }
      }

      pub fn FocusedForm(&self) -> TForm  {
          TForm {
              0: unsafe { Screen_GetFocusedForm(self.0) }
              , 1: false,
          }
      }

      pub fn MonitorCount(&self) -> i32  {
          unsafe { Screen_GetMonitorCount(self.0) }
      }

      pub fn DesktopRect(&self, result: *mut TRect)  {
          unsafe { Screen_GetDesktopRect(self.0, result) }
      }

      pub fn DesktopHeight(&self) -> i32  {
          unsafe { Screen_GetDesktopHeight(self.0) }
      }

      pub fn DesktopLeft(&self) -> i32  {
          unsafe { Screen_GetDesktopLeft(self.0) }
      }

      pub fn DesktopTop(&self) -> i32  {
          unsafe { Screen_GetDesktopTop(self.0) }
      }

      pub fn DesktopWidth(&self) -> i32  {
          unsafe { Screen_GetDesktopWidth(self.0) }
      }

      pub fn WorkAreaRect(&self, result: *mut TRect)  {
          unsafe { Screen_GetWorkAreaRect(self.0, result) }
      }

      pub fn WorkAreaHeight(&self) -> i32  {
          unsafe { Screen_GetWorkAreaHeight(self.0) }
      }

      pub fn WorkAreaLeft(&self) -> i32  {
          unsafe { Screen_GetWorkAreaLeft(self.0) }
      }

      pub fn WorkAreaTop(&self) -> i32  {
          unsafe { Screen_GetWorkAreaTop(self.0) }
      }

      pub fn WorkAreaWidth(&self) -> i32  {
          unsafe { Screen_GetWorkAreaWidth(self.0) }
      }

      pub fn Fonts(&self) -> TStrings  {
          TStrings {
              0: unsafe { Screen_GetFonts(self.0) }
              , 1: false,
          }
      }

      pub fn FormCount(&self) -> i32  {
          unsafe { Screen_GetFormCount(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Screen_GetHeight(self.0) }
      }

      pub fn PixelsPerInch(&self) -> i32  {
          unsafe { Screen_GetPixelsPerInch(self.0) }
      }

      pub fn PrimaryMonitor(&self) -> TMonitor  {
          TMonitor {
              0: unsafe { Screen_GetPrimaryMonitor(self.0) }
              , 1: false,
          }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Screen_GetWidth(self.0) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Screen_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Screen_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Screen_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Screen_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Screen_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Screen_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Screen_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Screen_SetTag(self.0, aValue) }
      }

      pub fn Cursors(&self, index: i32) -> HICON  {
          unsafe { Screen_GetCursors(self.0, index) }
      }

      pub fn SetCursors(&self, index: i32, aValue: HICON)  {
          unsafe { Screen_SetCursors(self.0, index, aValue) }
      }

      pub fn Monitors(&self, index: i32) -> TMonitor  {
          TMonitor {
              0: unsafe { Screen_GetMonitors(self.0, index) }
              , 1: false,
          }
      }

      pub fn Forms(&self, index: i32) -> TForm  {
          TForm {
              0: unsafe { Screen_GetForms(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Screen_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Screen_StaticClassType() }
      }
}

impl IObject for TScreen {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TScreen {}

impl TMouse {
      pub fn new() -> Self {
          TMouse {
              0: unsafe { Mouse_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMouse { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Mouse_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Mouse_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Mouse_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Mouse_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Mouse_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Mouse_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Mouse_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Mouse_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Capture(&self) -> HWND  {
          unsafe { Mouse_GetCapture(self.0) }
      }

      pub fn SetCapture(&self, aValue: HWND)  {
          unsafe { Mouse_SetCapture(self.0, aValue) }
      }

      pub fn CursorPos(&self, result: *mut TPoint)  {
          unsafe { Mouse_GetCursorPos(self.0, result) }
      }

      pub fn SetCursorPos(&self, aValue: *mut TPoint)  {
          unsafe { Mouse_SetCursorPos(self.0, aValue) }
      }

      pub fn IsDragging(&self) -> bool  {
          unsafe { Mouse_GetIsDragging(self.0) }
      }

      pub fn WheelScrollLines(&self) -> i32  {
          unsafe { Mouse_GetWheelScrollLines(self.0) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Mouse_StaticClassType() }
      }
}

impl IObject for TMouse {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TMouse {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TListColumn {
      pub fn new(aOwner: &TCollection) -> Self {
          TListColumn {
              0: unsafe { ListColumn_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TListColumn { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ListColumn_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ListColumn_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListColumn_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ListColumn_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListColumn_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ListColumn_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ListColumn_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ListColumn_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ListColumn_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ListColumn_ToString(self.0)).to_string_lossy()  }
      }

      pub fn SortIndicator(&self) -> TSortIndicator  {
          unsafe { ListColumn_GetSortIndicator(self.0) }
      }

      pub fn SetSortIndicator(&self, aValue: TSortIndicator)  {
          unsafe { ListColumn_SetSortIndicator(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { ListColumn_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { ListColumn_SetAlignment(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ListColumn_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ListColumn_SetAutoSize(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListColumn_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ListColumn_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { ListColumn_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { ListColumn_SetImageIndex(self.0, aValue) }
      }

      pub fn MaxWidth(&self) -> i32  {
          unsafe { ListColumn_GetMaxWidth(self.0) }
      }

      pub fn SetMaxWidth(&self, aValue: i32)  {
          unsafe { ListColumn_SetMaxWidth(self.0, aValue) }
      }

      pub fn MinWidth(&self) -> i32  {
          unsafe { ListColumn_GetMinWidth(self.0) }
      }

      pub fn SetMinWidth(&self, aValue: i32)  {
          unsafe { ListColumn_SetMinWidth(self.0, aValue) }
      }

      pub fn Tag(&self) -> i32  {
          unsafe { ListColumn_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: i32)  {
          unsafe { ListColumn_SetTag(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ListColumn_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ListColumn_SetWidth(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { ListColumn_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { ListColumn_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { ListColumn_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { ListColumn_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ListColumn_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { ListColumn_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ListColumn_StaticClassType() }
      }
}

impl IObject for TListColumn {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TListColumn {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TCollectionItem {
      pub fn new(aOwner: &TCollection) -> Self {
          TCollectionItem {
              0: unsafe { CollectionItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCollectionItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CollectionItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CollectionItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { CollectionItem_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CollectionItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CollectionItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CollectionItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CollectionItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CollectionItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CollectionItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CollectionItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { CollectionItem_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { CollectionItem_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { CollectionItem_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { CollectionItem_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CollectionItem_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { CollectionItem_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CollectionItem_StaticClassType() }
      }
}

impl IObject for TCollectionItem {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TCollectionItem {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TStatusPanels {
      pub fn new(aOwner: &TStatusBar) -> Self {
          TStatusPanels {
              0: unsafe { StatusPanels_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStatusPanels { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StatusPanels_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self) -> TStatusPanel  {
          TStatusPanel {
              0: unsafe { StatusPanels_Add(self.0) }
              , 1: false,
          }
      }

      pub fn Insert(&self, index: i32) -> TStatusPanel  {
          TStatusPanel {
              0: unsafe { StatusPanels_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { StatusPanels_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { StatusPanels_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { StatusPanels_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { StatusPanels_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { StatusPanels_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { StatusPanels_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { StatusPanels_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusPanels_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StatusPanels_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusPanels_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StatusPanels_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StatusPanels_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { StatusPanels_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StatusPanels_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusPanels_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Capacity(&self) -> i32  {
          unsafe { StatusPanels_GetCapacity(self.0) }
      }

      pub fn SetCapacity(&self, aValue: i32)  {
          unsafe { StatusPanels_SetCapacity(self.0, aValue) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { StatusPanels_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TStatusPanel  {
          TStatusPanel {
              0: unsafe { StatusPanels_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TStatusPanel)  {
          unsafe { StatusPanels_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StatusPanels_StaticClassType() }
      }
}

impl IObject for TStatusPanels {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TStatusPanels {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TStatusPanel {
      pub fn new(aOwner: &TCollection) -> Self {
          TStatusPanel {
              0: unsafe { StatusPanel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStatusPanel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StatusPanel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { StatusPanel_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusPanel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StatusPanel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusPanel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StatusPanel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StatusPanel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { StatusPanel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StatusPanel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StatusPanel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { StatusPanel_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { StatusPanel_SetAlignment(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { StatusPanel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { StatusPanel_SetBiDiMode(self.0, aValue) }
      }

      pub fn Style(&self) -> TStatusPanelStyle  {
          unsafe { StatusPanel_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TStatusPanelStyle)  {
          unsafe { StatusPanel_SetStyle(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusPanel_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { StatusPanel_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { StatusPanel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { StatusPanel_SetWidth(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { StatusPanel_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { StatusPanel_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { StatusPanel_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { StatusPanel_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StatusPanel_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { StatusPanel_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StatusPanel_StaticClassType() }
      }
}

impl IObject for TStatusPanel {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TStatusPanel {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TSpinEdit {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TSpinEdit {
              0: unsafe { SpinEdit_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TSpinEdit { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  SpinEdit_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Clear(&self)  {
          unsafe { SpinEdit_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { SpinEdit_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { SpinEdit_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { SpinEdit_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { SpinEdit_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { SpinEdit_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { SpinEdit_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { SpinEdit_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { SpinEdit_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { SpinEdit_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { SpinEdit_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { SpinEdit_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { SpinEdit_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { SpinEdit_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { SpinEdit_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { SpinEdit_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { SpinEdit_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { SpinEdit_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { SpinEdit_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { SpinEdit_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { SpinEdit_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { SpinEdit_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { SpinEdit_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { SpinEdit_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { SpinEdit_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { SpinEdit_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { SpinEdit_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { SpinEdit_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { SpinEdit_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { SpinEdit_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { SpinEdit_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { SpinEdit_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { SpinEdit_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { SpinEdit_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { SpinEdit_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { SpinEdit_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { SpinEdit_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { SpinEdit_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { SpinEdit_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { SpinEdit_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { SpinEdit_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { SpinEdit_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpinEdit_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { SpinEdit_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SpinEdit_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpinEdit_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SpinEdit_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SpinEdit_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SpinEdit_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SpinEdit_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SpinEdit_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { SpinEdit_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { SpinEdit_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { SpinEdit_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { SpinEdit_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { SpinEdit_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { SpinEdit_AnchorClient(self.0, aSpace) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { SpinEdit_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { SpinEdit_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSelect(&self) -> bool  {
          unsafe { SpinEdit_GetAutoSelect(self.0) }
      }

      pub fn SetAutoSelect(&self, aValue: bool)  {
          unsafe { SpinEdit_SetAutoSelect(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { SpinEdit_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { SpinEdit_SetAutoSize(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { SpinEdit_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { SpinEdit_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { SpinEdit_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { SpinEdit_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { SpinEdit_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { SpinEdit_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { SpinEdit_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { SpinEdit_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Increment(&self) -> i32  {
          unsafe { SpinEdit_GetIncrement(self.0) }
      }

      pub fn SetIncrement(&self, aValue: i32)  {
          unsafe { SpinEdit_SetIncrement(self.0, aValue) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { SpinEdit_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { SpinEdit_SetMaxLength(self.0, aValue) }
      }

      pub fn MaxValue(&self) -> i32  {
          unsafe { SpinEdit_GetMaxValue(self.0) }
      }

      pub fn SetMaxValue(&self, aValue: i32)  {
          unsafe { SpinEdit_SetMaxValue(self.0, aValue) }
      }

      pub fn MinValue(&self) -> i32  {
          unsafe { SpinEdit_GetMinValue(self.0) }
      }

      pub fn SetMinValue(&self, aValue: i32)  {
          unsafe { SpinEdit_SetMinValue(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { SpinEdit_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { SpinEdit_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { SpinEdit_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { SpinEdit_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { SpinEdit_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { SpinEdit_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { SpinEdit_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { SpinEdit_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { SpinEdit_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { SpinEdit_SetReadOnly(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { SpinEdit_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { SpinEdit_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { SpinEdit_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { SpinEdit_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { SpinEdit_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { SpinEdit_SetTabStop(self.0, aValue) }
      }

      pub fn Value(&self) -> i32  {
          unsafe { SpinEdit_GetValue(self.0) }
      }

      pub fn SetValue(&self, aValue: i32)  {
          unsafe { SpinEdit_SetValue(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { SpinEdit_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { SpinEdit_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { SpinEdit_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { SpinEdit_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { SpinEdit_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { SpinEdit_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { SpinEdit_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { SpinEdit_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { SpinEdit_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { SpinEdit_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { SpinEdit_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { SpinEdit_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { SpinEdit_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { SpinEdit_SetAlignment(self.0, aValue) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { SpinEdit_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { SpinEdit_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { SpinEdit_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { SpinEdit_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { SpinEdit_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { SpinEdit_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { SpinEdit_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpinEdit_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { SpinEdit_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpinEdit_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { SpinEdit_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpinEdit_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { SpinEdit_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { SpinEdit_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { SpinEdit_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { SpinEdit_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { SpinEdit_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { SpinEdit_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { SpinEdit_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { SpinEdit_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { SpinEdit_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { SpinEdit_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { SpinEdit_GetHandle(self.0) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { SpinEdit_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { SpinEdit_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { SpinEdit_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { SpinEdit_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { SpinEdit_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { SpinEdit_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { SpinEdit_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { SpinEdit_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { SpinEdit_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { SpinEdit_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { SpinEdit_SetAlign(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { SpinEdit_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { SpinEdit_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { SpinEdit_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { SpinEdit_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { SpinEdit_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { SpinEdit_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { SpinEdit_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { SpinEdit_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { SpinEdit_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { SpinEdit_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { SpinEdit_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { SpinEdit_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { SpinEdit_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { SpinEdit_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { SpinEdit_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { SpinEdit_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { SpinEdit_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { SpinEdit_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { SpinEdit_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { SpinEdit_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { SpinEdit_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { SpinEdit_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { SpinEdit_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { SpinEdit_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { SpinEdit_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { SpinEdit_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { SpinEdit_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpinEdit_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { SpinEdit_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { SpinEdit_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { SpinEdit_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { SpinEdit_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { SpinEdit_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SpinEdit_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { SpinEdit_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { SpinEdit_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { SpinEdit_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpinEdit_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { SpinEdit_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpinEdit_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { SpinEdit_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpinEdit_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { SpinEdit_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpinEdit_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { SpinEdit_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { SpinEdit_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { SpinEdit_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { SpinEdit_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { SpinEdit_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { SpinEdit_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { SpinEdit_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { SpinEdit_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { SpinEdit_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SpinEdit_StaticClassType() }
      }
}

impl IObject for TSpinEdit {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TSpinEdit {}
impl IControl for TSpinEdit {}
impl IWinControl for TSpinEdit {}

impl TMiniWebview {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMiniWebview {
              0: unsafe { MiniWebview_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMiniWebview { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MiniWebview_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Navigate(&self, aURL: &str)  {
          unsafe { MiniWebview_Navigate(self.0, CString::new(aURL).unwrap().as_ptr()) }
      }

      pub fn GoBack(&self)  {
          unsafe { MiniWebview_GoBack(self.0) }
      }

      pub fn GoForward(&self)  {
          unsafe { MiniWebview_GoForward(self.0) }
      }

      pub fn GoHome(&self)  {
          unsafe { MiniWebview_GoHome(self.0) }
      }

      pub fn GoSearch(&self)  {
          unsafe { MiniWebview_GoSearch(self.0) }
      }

      pub fn Refresh(&self) {
          unsafe { MiniWebview_Refresh(self.0) }
      }

      pub fn Stop(&self)  {
          unsafe { MiniWebview_Stop(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { MiniWebview_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn ExecuteScript<'a>(&self, aScriptText: &str, aScriptType: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MiniWebview_ExecuteScript(self.0, CString::new(aScriptText).unwrap().as_ptr(), CString::new(aScriptType).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn ExecuteJS<'a>(&self, aScriptText: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MiniWebview_ExecuteJS(self.0, CString::new(aScriptText).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn LoadHTML(&self, aStr: &str)  {
          unsafe { MiniWebview_LoadHTML(self.0, CString::new(aStr).unwrap().as_ptr()) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { MiniWebview_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { MiniWebview_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { MiniWebview_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { MiniWebview_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { MiniWebview_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { MiniWebview_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { MiniWebview_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { MiniWebview_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { MiniWebview_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { MiniWebview_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { MiniWebview_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { MiniWebview_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { MiniWebview_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { MiniWebview_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { MiniWebview_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { MiniWebview_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetFocus(&self) {
          unsafe { MiniWebview_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { MiniWebview_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { MiniWebview_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MiniWebview_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MiniWebview_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { MiniWebview_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { MiniWebview_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { MiniWebview_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { MiniWebview_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MiniWebview_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MiniWebview_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { MiniWebview_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { MiniWebview_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { MiniWebview_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { MiniWebview_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { MiniWebview_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { MiniWebview_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MiniWebview_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { MiniWebview_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MiniWebview_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MiniWebview_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MiniWebview_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MiniWebview_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MiniWebview_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MiniWebview_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MiniWebview_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MiniWebview_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MiniWebview_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MiniWebview_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MiniWebview_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { MiniWebview_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { MiniWebview_AnchorClient(self.0, aSpace) }
      }

      pub fn ReadyState(&self) -> TReadyState  {
          unsafe { MiniWebview_GetReadyState(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { MiniWebview_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { MiniWebview_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { MiniWebview_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { MiniWebview_SetAnchors(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { MiniWebview_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { MiniWebview_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { MiniWebview_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { MiniWebview_SetEnabled(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { MiniWebview_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { MiniWebview_SetVisible(self.0, aValue) }
      }

      pub fn SetOnTitleChange(&self, aEventId: TWebTitleChangeEvent)  {
          unsafe { MiniWebview_SetOnTitleChange(self.0, aEventId) }
      }

      pub fn SetOnJSExternal(&self, aEventId: TWebJSExternalEvent)  {
          unsafe { MiniWebview_SetOnJSExternal(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { MiniWebview_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { MiniWebview_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { MiniWebview_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { MiniWebview_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { MiniWebview_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { MiniWebview_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { MiniWebview_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { MiniWebview_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { MiniWebview_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { MiniWebview_GetHandle(self.0) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { MiniWebview_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { MiniWebview_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { MiniWebview_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { MiniWebview_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { MiniWebview_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { MiniWebview_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { MiniWebview_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { MiniWebview_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { MiniWebview_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { MiniWebview_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { MiniWebview_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { MiniWebview_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { MiniWebview_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { MiniWebview_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { MiniWebview_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { MiniWebview_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { MiniWebview_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { MiniWebview_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { MiniWebview_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { MiniWebview_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { MiniWebview_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { MiniWebview_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { MiniWebview_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { MiniWebview_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { MiniWebview_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { MiniWebview_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { MiniWebview_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { MiniWebview_GetFloating(self.0) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { MiniWebview_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { MiniWebview_SetShowHint(self.0, aValue) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { MiniWebview_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { MiniWebview_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { MiniWebview_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { MiniWebview_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { MiniWebview_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { MiniWebview_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { MiniWebview_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { MiniWebview_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { MiniWebview_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { MiniWebview_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { MiniWebview_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { MiniWebview_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MiniWebview_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { MiniWebview_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { MiniWebview_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { MiniWebview_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { MiniWebview_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { MiniWebview_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MiniWebview_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { MiniWebview_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { MiniWebview_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { MiniWebview_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MiniWebview_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { MiniWebview_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MiniWebview_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { MiniWebview_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MiniWebview_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { MiniWebview_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MiniWebview_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { MiniWebview_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { MiniWebview_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { MiniWebview_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { MiniWebview_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { MiniWebview_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MiniWebview_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MiniWebview_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { MiniWebview_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MiniWebview_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MiniWebview_StaticClassType() }
      }
}

impl IObject for TMiniWebview {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMiniWebview {}
impl IControl for TMiniWebview {}
impl IWinControl for TMiniWebview {}

impl TCanvas {
      pub fn new() -> Self {
          TCanvas {
              0: unsafe { Canvas_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCanvas { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Canvas_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Arc(&self, x1: i32, y1: i32, x2: i32, y2: i32, x3: i32, y3: i32, x4: i32, y4: i32)  {
          unsafe { Canvas_Arc(self.0, x1, y1, x2, y2, x3, y3, x4, y4) }
      }

      pub fn ArcTo(&self, x1: i32, y1: i32, x2: i32, y2: i32, x3: i32, y3: i32, x4: i32, y4: i32)  {
          unsafe { Canvas_ArcTo(self.0, x1, y1, x2, y2, x3, y3, x4, y4) }
      }

      pub fn AngleArc(&self, x: i32, y: i32, radius: u32, startAngle: *mut f32, sweepAngle: *mut f32)  {
          unsafe { Canvas_AngleArc(self.0, x, y, radius, startAngle, sweepAngle) }
      }

      pub fn Chord(&self, x1: i32, y1: i32, x2: i32, y2: i32, x3: i32, y3: i32, x4: i32, y4: i32)  {
          unsafe { Canvas_Chord(self.0, x1, y1, x2, y2, x3, y3, x4, y4) }
      }

      pub fn Ellipse(&self, x1: i32, y1: i32, x2: i32, y2: i32)  {
          unsafe { Canvas_Ellipse(self.0, x1, y1, x2, y2) }
      }

      pub fn FloodFill(&self, x: i32, y: i32, color: TColor, fillStyle: TFillStyle)  {
          unsafe { Canvas_FloodFill(self.0, x, y, color, fillStyle) }
      }

      pub fn HandleAllocated(&self) -> bool  {
          unsafe { Canvas_HandleAllocated(self.0) }
      }

      pub fn LineTo(&self, x: i32, y: i32)  {
          unsafe { Canvas_LineTo(self.0, x, y) }
      }

      pub fn MoveTo(&self, x: i32, y: i32)  {
          unsafe { Canvas_MoveTo(self.0, x, y) }
      }

      pub fn Pie(&self, x1: i32, y1: i32, x2: i32, y2: i32, x3: i32, y3: i32, x4: i32, y4: i32)  {
          unsafe { Canvas_Pie(self.0, x1, y1, x2, y2, x3, y3, x4, y4) }
      }

      pub fn Rectangle(&self, x1: i32, y1: i32, x2: i32, y2: i32)  {
          unsafe { Canvas_Rectangle(self.0, x1, y1, x2, y2) }
      }

      pub fn Refresh(&self)  {
          unsafe { Canvas_Refresh(self.0) }
      }

      pub fn RoundRect(&self, x1: i32, y1: i32, x2: i32, y2: i32, x3: i32, y3: i32)  {
          unsafe { Canvas_RoundRect(self.0, x1, y1, x2, y2, x3, y3) }
      }

      pub fn TextExtent(&self, text: &str, result: *mut TSize)  {
          unsafe { Canvas_TextExtent(self.0, CString::new(text).unwrap().as_ptr(), result) }
      }

      pub fn TextOut(&self, x: i32, y: i32, text: &str)  {
          unsafe { Canvas_TextOut(self.0, x, y, CString::new(text).unwrap().as_ptr()) }
      }

      pub fn Lock(&self)  {
          unsafe { Canvas_Lock(self.0) }
      }

      pub fn TextHeight(&self, text: &str) -> i32  {
          unsafe { Canvas_TextHeight(self.0, CString::new(text).unwrap().as_ptr()) }
      }

      pub fn TextWidth(&self, text: &str) -> i32  {
          unsafe { Canvas_TextWidth(self.0, CString::new(text).unwrap().as_ptr()) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Canvas_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Canvas_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Canvas_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Canvas_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Canvas_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Canvas_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Canvas_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Canvas_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Canvas_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HDC  {
          unsafe { Canvas_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HDC)  {
          unsafe { Canvas_SetHandle(self.0, aValue) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Canvas_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn SetBrush(&self, aValue: &TBrush)  {
          unsafe { Canvas_SetBrush(self.0, aValue.Instance()) }
      }

      pub fn CopyMode(&self) -> i32  {
          unsafe { Canvas_GetCopyMode(self.0) }
      }

      pub fn SetCopyMode(&self, aValue: i32)  {
          unsafe { Canvas_SetCopyMode(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Canvas_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Canvas_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Pen(&self) -> TPen  {
          TPen {
              0: unsafe { Canvas_GetPen(self.0) }
              , 1: false,
          }
      }

      pub fn SetPen(&self, aValue: &TPen)  {
          unsafe { Canvas_SetPen(self.0, aValue.Instance()) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Canvas_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnChanging(&self, aEventId: TNotifyEvent)  {
          unsafe { Canvas_SetOnChanging(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Canvas_StaticClassType() }
      }
      pub fn BrushCopy(&self, dest: *mut TRect, bitmap: &TBitmap, source: *mut TRect, color: TColor)  {
          unsafe { Canvas_BrushCopy(self.0, dest, bitmap.Instance(), source, color) }
      }

      pub fn CopyRect(&self, dest: *mut TRect, canvas: &TCanvas, source: *mut TRect)  {
          unsafe { Canvas_CopyRect(self.0, dest, canvas.Instance(), source) }
      }

      pub fn Draw1(&self, x: i32, y: i32, graphic: &TGraphic)  {
          unsafe { Canvas_Draw1(self.0, x, y, graphic.Instance()) }
      }

      pub fn Draw2(&self, x: i32, y: i32, graphic: &TGraphic, opacity: i8)  {
          unsafe { Canvas_Draw2(self.0, x, y, graphic.Instance(), opacity) }
      }

      pub fn DrawFocusRect(&self, aRect: *mut TRect)  {
          unsafe { Canvas_DrawFocusRect(self.0, aRect) }
      }

      pub fn FillRect(&self, rect: *mut TRect)  {
          unsafe { Canvas_FillRect(self.0, rect) }
      }

      pub fn FrameRect(&self, rect: *mut TRect)  {
          unsafe { Canvas_FrameRect(self.0, rect) }
      }

      pub fn StretchDraw(&self, rect: *mut TRect, graphic: &TGraphic)  {
          unsafe { Canvas_StretchDraw(self.0, rect, graphic.Instance()) }
      }

      pub fn TextRect1(&self, rect: *mut TRect, x: i32, y: i32, text: &str)  {
          unsafe { Canvas_TextRect1(self.0, rect, x, y, CString::new(text).unwrap().as_ptr()) }
      }


      pub fn Polygon(&self, aPoints: *mut TPoint, aLen: i32)  {
          unsafe { Canvas_Polygon(self.0, aPoints, aLen) }
      }

      pub fn Polyline(&self, aPoints: *mut TPoint, aLen: i32)  {
          unsafe { Canvas_Polyline(self.0, aPoints, aLen) }
      }

      pub fn PolyBezier(&self, aPoints: *mut TPoint, aLen: i32)  {
          unsafe { Canvas_PolyBezier(self.0, aPoints, aLen) }
      }

      pub fn Pixels(&self, x: i32, y: i32) -> TColor  {
          unsafe { Canvas_Pixels(self.0, x, y) }
      }

      pub fn SetPixels(&self, x: i32, y: i32, aColor: TColor)  {
          unsafe { Canvas_SetPixels(self.0, x, y, aColor) }
      }

}

impl IObject for TCanvas {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TCanvas {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TApplication {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TApplication {
              0: unsafe { Application_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TApplication { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Application_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ActivateHint(&self, cursorPos: *mut TPoint)  {
          unsafe { Application_ActivateHint(self.0, cursorPos) }
      }

      pub fn BringToFront(&self)  {
          unsafe { Application_BringToFront(self.0) }
      }

      pub fn CancelHint(&self)  {
          unsafe { Application_CancelHint(self.0) }
      }

      pub fn HandleMessage(&self)  {
          unsafe { Application_HandleMessage(self.0) }
      }

      pub fn HideHint(&self)  {
          unsafe { Application_HideHint(self.0) }
      }

      pub fn Minimize(&self)  {
          unsafe { Application_Minimize(self.0) }
      }

      pub fn ModalStarted(&self)  {
          unsafe { Application_ModalStarted(self.0) }
      }

      pub fn ModalFinished(&self)  {
          unsafe { Application_ModalFinished(self.0) }
      }

      pub fn ProcessMessages(&self)  {
          unsafe { Application_ProcessMessages(self.0) }
      }

      pub fn Restore(&self)  {
          unsafe { Application_Restore(self.0) }
      }

      pub fn RestoreTopMosts(&self)  {
          unsafe { Application_RestoreTopMosts(self.0) }
      }

      pub fn Terminate(&self)  {
          unsafe { Application_Terminate(self.0) }
      }

      pub fn MessageBox(&self, text: &str, caption: &str, flags: i32) -> i32  {
          unsafe { Application_MessageBox(self.0, CString::new(text).unwrap().as_ptr(), CString::new(caption).unwrap().as_ptr(), flags) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Application_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Application_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Application_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Application_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Application_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Application_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Application_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Application_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Application_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Application_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Application_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Scaled(&self) -> bool  {
          unsafe { Application_GetScaled(self.0) }
      }

      pub fn SetScaled(&self, aValue: bool)  {
          unsafe { Application_SetScaled(self.0, aValue) }
      }

      pub fn SingleInstanceEnabled(&self) -> bool  {
          unsafe { Application_GetSingleInstanceEnabled(self.0) }
      }

      pub fn SetSingleInstanceEnabled(&self, aValue: bool)  {
          unsafe { Application_SetSingleInstanceEnabled(self.0, aValue) }
      }

      pub fn Location<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Application_GetLocation(self.0)).to_string_lossy()  }
      }

      pub fn StopOnException(&self) -> bool  {
          unsafe { Application_GetStopOnException(self.0) }
      }

      pub fn SetStopOnException(&self, aValue: bool)  {
          unsafe { Application_SetStopOnException(self.0, aValue) }
      }

      pub fn ExceptionExitCode(&self) -> i32  {
          unsafe { Application_GetExceptionExitCode(self.0) }
      }

      pub fn SetExceptionExitCode(&self, aValue: i32)  {
          unsafe { Application_SetExceptionExitCode(self.0, aValue) }
      }

      pub fn ExeName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Application_GetExeName(self.0)).to_string_lossy()  }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Application_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Application_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn HintColor(&self) -> TColor  {
          unsafe { Application_GetHintColor(self.0) }
      }

      pub fn SetHintColor(&self, aValue: TColor)  {
          unsafe { Application_SetHintColor(self.0, aValue) }
      }

      pub fn HintHidePause(&self) -> i32  {
          unsafe { Application_GetHintHidePause(self.0) }
      }

      pub fn SetHintHidePause(&self, aValue: i32)  {
          unsafe { Application_SetHintHidePause(self.0, aValue) }
      }

      pub fn HintPause(&self) -> i32  {
          unsafe { Application_GetHintPause(self.0) }
      }

      pub fn SetHintPause(&self, aValue: i32)  {
          unsafe { Application_SetHintPause(self.0, aValue) }
      }

      pub fn HintShortCuts(&self) -> bool  {
          unsafe { Application_GetHintShortCuts(self.0) }
      }

      pub fn SetHintShortCuts(&self, aValue: bool)  {
          unsafe { Application_SetHintShortCuts(self.0, aValue) }
      }

      pub fn HintShortPause(&self) -> i32  {
          unsafe { Application_GetHintShortPause(self.0) }
      }

      pub fn SetHintShortPause(&self, aValue: i32)  {
          unsafe { Application_SetHintShortPause(self.0, aValue) }
      }

      pub fn Icon(&self) -> TIcon  {
          TIcon {
              0: unsafe { Application_GetIcon(self.0) }
              , 1: false,
          }
      }

      pub fn SetIcon(&self, aValue: &TIcon)  {
          unsafe { Application_SetIcon(self.0, aValue.Instance()) }
      }

      pub fn MainForm(&self) -> TForm  {
          TForm {
              0: unsafe { Application_GetMainForm(self.0) }
              , 1: false,
          }
      }

      pub fn MainFormHandle(&self) -> HWND  {
          unsafe { Application_GetMainFormHandle(self.0) }
      }

      pub fn MainFormOnTaskBar(&self) -> bool  {
          unsafe { Application_GetMainFormOnTaskBar(self.0) }
      }

      pub fn SetMainFormOnTaskBar(&self, aValue: bool)  {
          unsafe { Application_SetMainFormOnTaskBar(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Application_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Application_SetBiDiMode(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Application_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Application_SetShowHint(self.0, aValue) }
      }

      pub fn ShowMainForm(&self) -> bool  {
          unsafe { Application_GetShowMainForm(self.0) }
      }

      pub fn SetShowMainForm(&self, aValue: bool)  {
          unsafe { Application_SetShowMainForm(self.0, aValue) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Application_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { Application_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn SetOnActivate(&self, aEventId: TNotifyEvent)  {
          unsafe { Application_SetOnActivate(self.0, aEventId) }
      }

      pub fn SetOnDeactivate(&self, aEventId: TNotifyEvent)  {
          unsafe { Application_SetOnDeactivate(self.0, aEventId) }
      }

      pub fn SetOnException(&self, aEventId: TExceptionEvent)  {
          unsafe { Application_SetOnException(self.0, aEventId) }
      }

      pub fn SetOnHelp(&self, aEventId: THelpEvent)  {
          unsafe { Application_SetOnHelp(self.0, aEventId) }
      }

      pub fn SetOnHint(&self, aEventId: TNotifyEvent)  {
          unsafe { Application_SetOnHint(self.0, aEventId) }
      }

      pub fn SetOnMinimize(&self, aEventId: TNotifyEvent)  {
          unsafe { Application_SetOnMinimize(self.0, aEventId) }
      }

      pub fn SetOnRestore(&self, aEventId: TNotifyEvent)  {
          unsafe { Application_SetOnRestore(self.0, aEventId) }
      }

      pub fn SetOnShortCut(&self, aEventId: TShortCutEvent)  {
          unsafe { Application_SetOnShortCut(self.0, aEventId) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Application_GetHandle(self.0) }
      }

      pub fn SetHandle(&self, aValue: HWND)  {
          unsafe { Application_SetHandle(self.0, aValue) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Application_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Application_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Application_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Application_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Application_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Application_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Application_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Application_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Application_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Application_StaticClassType() }
      }
      pub fn Initialize(&self)  {
          unsafe { Application_Initialize(self.0) }
      }

      pub fn CreateForm(&self) -> TForm  {
          TForm {
              0: unsafe { Application_CreateForm(self.0, false) },
              1: false,
          }
      }

      pub fn Run(&self)  {
          unsafe { Application_Run(self.0) }
      }

}

impl IObject for TApplication {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TApplication {}

impl TGraphic {
      pub fn new() -> Self {
          TGraphic {
              0: unsafe { Graphic_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TGraphic { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Graphic_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Graphic_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { Graphic_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { Graphic_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { Graphic_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { Graphic_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Graphic_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Graphic_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Graphic_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Graphic_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Graphic_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Graphic_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Graphic_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Graphic_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { Graphic_GetEmpty(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Graphic_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Graphic_SetHeight(self.0, aValue) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { Graphic_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { Graphic_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { Graphic_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { Graphic_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { Graphic_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { Graphic_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { Graphic_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { Graphic_SetTransparent(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Graphic_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Graphic_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { Graphic_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Graphic_StaticClassType() }
      }
}

impl IObject for TGraphic {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TGraphic {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TPngImage {
      pub fn new() -> Self {
          TPngImage {
              0: unsafe { PngImage_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPngImage { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PngImage_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { PngImage_Assign(self.0, source.Instance()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { PngImage_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { PngImage_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn LoadFromResourceName(&self, instance: usize, name: &str)  {
          unsafe { PngImage_LoadFromResourceName(self.0, instance, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn LoadFromResourceID(&self, instance: usize, resID: i32)  {
          unsafe { PngImage_LoadFromResourceID(self.0, instance, resID) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PngImage_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { PngImage_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { PngImage_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SetSize(&self, aWidth: i32, aHeight: i32)  {
          unsafe { PngImage_SetSize(self.0, aWidth, aHeight) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PngImage_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PngImage_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PngImage_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PngImage_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PngImage_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PngImage_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PngImage_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { PngImage_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Width(&self) -> i32  {
          unsafe { PngImage_GetWidth(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { PngImage_GetHeight(self.0) }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { PngImage_GetEmpty(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { PngImage_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { PngImage_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { PngImage_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { PngImage_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { PngImage_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { PngImage_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { PngImage_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { PngImage_SetTransparent(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { PngImage_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PngImage_StaticClassType() }
      }
}

impl IObject for TPngImage {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TPngImage {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TJPEGImage {
      pub fn new() -> Self {
          TJPEGImage {
              0: unsafe { JPEGImage_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TJPEGImage { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  JPEGImage_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { JPEGImage_Assign(self.0, source.Instance()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { JPEGImage_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { JPEGImage_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { JPEGImage_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { JPEGImage_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { JPEGImage_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SetSize(&self, aWidth: i32, aHeight: i32)  {
          unsafe { JPEGImage_SetSize(self.0, aWidth, aHeight) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(JPEGImage_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { JPEGImage_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(JPEGImage_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { JPEGImage_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { JPEGImage_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { JPEGImage_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(JPEGImage_ToString(self.0)).to_string_lossy()  }
      }

      pub fn PixelFormat(&self) -> TPixelFormat  {
          unsafe { JPEGImage_GetPixelFormat(self.0) }
      }

      pub fn SetPixelFormat(&self, aValue: TJPEGPixelFormat)  {
          unsafe { JPEGImage_SetPixelFormat(self.0, aValue) }
      }

      pub fn Performance(&self) -> TJPEGPerformance  {
          unsafe { JPEGImage_GetPerformance(self.0) }
      }

      pub fn SetPerformance(&self, aValue: TJPEGPerformance)  {
          unsafe { JPEGImage_SetPerformance(self.0, aValue) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { JPEGImage_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { JPEGImage_GetEmpty(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { JPEGImage_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { JPEGImage_SetHeight(self.0, aValue) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { JPEGImage_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { JPEGImage_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { JPEGImage_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { JPEGImage_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { JPEGImage_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { JPEGImage_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { JPEGImage_GetTransparent(self.0) }
      }

      pub fn SetTransparent(&self, aValue: bool)  {
          unsafe { JPEGImage_SetTransparent(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { JPEGImage_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { JPEGImage_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { JPEGImage_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { JPEGImage_StaticClassType() }
      }
}

impl IObject for TJPEGImage {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TJPEGImage {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TGIFImage {
      pub fn new() -> Self {
          TGIFImage {
              0: unsafe { GIFImage_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TGIFImage { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  GIFImage_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn SaveToStream(&self, stream: &dyn IObject)  {
          unsafe { GIFImage_SaveToStream(self.0, stream.Instance()) }
      }

      pub fn LoadFromStream(&self, stream: &dyn IObject)  {
          unsafe { GIFImage_LoadFromStream(self.0, stream.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { GIFImage_Clear(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { GIFImage_Assign(self.0, source.Instance()) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { GIFImage_Equals(self.0, obj.Instance()) }
      }

      pub fn LoadFromFile(&self, filename: &str)  {
          unsafe { GIFImage_LoadFromFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SaveToFile(&self, filename: &str)  {
          unsafe { GIFImage_SaveToFile(self.0, CString::new(filename).unwrap().as_ptr()) }
      }

      pub fn SetSize(&self, aWidth: i32, aHeight: i32)  {
          unsafe { GIFImage_SetSize(self.0, aWidth, aHeight) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GIFImage_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { GIFImage_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GIFImage_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { GIFImage_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { GIFImage_InheritsFrom(self.0, aClass) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { GIFImage_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GIFImage_ToString(self.0)).to_string_lossy()  }
      }

      pub fn BitsPerPixel(&self) -> i32  {
          unsafe { GIFImage_GetBitsPerPixel(self.0) }
      }

      pub fn Empty(&self) -> bool  {
          unsafe { GIFImage_GetEmpty(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { GIFImage_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { GIFImage_SetHeight(self.0, aValue) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { GIFImage_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { GIFImage_SetModified(self.0, aValue) }
      }

      pub fn Palette(&self) -> HPALETTE  {
          unsafe { GIFImage_GetPalette(self.0) }
      }

      pub fn SetPalette(&self, aValue: HPALETTE)  {
          unsafe { GIFImage_SetPalette(self.0, aValue) }
      }

      pub fn PaletteModified(&self) -> bool  {
          unsafe { GIFImage_GetPaletteModified(self.0) }
      }

      pub fn SetPaletteModified(&self, aValue: bool)  {
          unsafe { GIFImage_SetPaletteModified(self.0, aValue) }
      }

      pub fn Transparent(&self) -> bool  {
          unsafe { GIFImage_GetTransparent(self.0) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { GIFImage_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { GIFImage_SetWidth(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { GIFImage_SetOnChange(self.0, aEventId) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { GIFImage_StaticClassType() }
      }
}

impl IObject for TGIFImage {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TGIFImage {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TActionList {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TActionList {
              0: unsafe { ActionList_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TActionList { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ActionList_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ActionList_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ActionList_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ActionList_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ActionList_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ActionList_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ActionList_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ActionList_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ActionList_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ActionList_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ActionList_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ActionList_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { ActionList_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { ActionList_SetImages(self.0, aValue.Instance()) }
      }

      pub fn State(&self) -> TActionListState  {
          unsafe { ActionList_GetState(self.0) }
      }

      pub fn SetState(&self, aValue: TActionListState)  {
          unsafe { ActionList_SetState(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ActionList_SetOnChange(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ActionList_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ActionList_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ActionList_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ActionList_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ActionList_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ActionList_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ActionList_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ActionList_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ActionList_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ActionList_StaticClassType() }
      }
}

impl IObject for TActionList {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TActionList {}

impl TAction {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TAction {
              0: unsafe { Action_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TAction { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Action_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { Action_Execute(self.0) }
      }

      pub fn Update(&self) -> bool  {
          unsafe { Action_Update(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Action_HasParent(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Action_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Action_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Action_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Action_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Action_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Action_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Action_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Action_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Action_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Action_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AutoCheck(&self) -> bool  {
          unsafe { Action_GetAutoCheck(self.0) }
      }

      pub fn SetAutoCheck(&self, aValue: bool)  {
          unsafe { Action_SetAutoCheck(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Action_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { Action_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { Action_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { Action_SetChecked(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Action_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Action_SetEnabled(self.0, aValue) }
      }

      pub fn GroupIndex(&self) -> i32  {
          unsafe { Action_GetGroupIndex(self.0) }
      }

      pub fn SetGroupIndex(&self, aValue: i32)  {
          unsafe { Action_SetGroupIndex(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Action_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Action_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { Action_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { Action_SetImageIndex(self.0, aValue) }
      }

      pub fn ShortCut(&self) -> TShortCut  {
          unsafe { Action_GetShortCut(self.0) }
      }

      pub fn SetShortCut(&self, aValue: TShortCut)  {
          unsafe { Action_SetShortCut(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Action_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Action_SetVisible(self.0, aValue) }
      }

      pub fn SetOnExecute(&self, aEventId: TNotifyEvent)  {
          unsafe { Action_SetOnExecute(self.0, aEventId) }
      }

      pub fn SetOnUpdate(&self, aEventId: TNotifyEvent)  {
          unsafe { Action_SetOnUpdate(self.0, aEventId) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { Action_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { Action_SetIndex(self.0, aValue) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Action_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Action_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Action_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Action_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Action_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Action_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Action_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Action_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Action_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Action_StaticClassType() }
      }
}

impl IObject for TAction {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TAction {}

impl TToolButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TToolButton {
              0: unsafe { ToolButton_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TToolButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ToolButton_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CheckMenuDropdown(&self) -> bool  {
          unsafe { ToolButton_CheckMenuDropdown(self.0) }
      }

      pub fn Click(&self)  {
          unsafe { ToolButton_Click(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ToolButton_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn BringToFront(&self) {
          unsafe { ToolButton_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToolButton_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToolButton_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ToolButton_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ToolButton_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ToolButton_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { ToolButton_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ToolButton_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ToolButton_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ToolButton_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToolButton_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToolButton_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ToolButton_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ToolButton_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ToolButton_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ToolButton_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ToolButton_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ToolButton_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ToolButton_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolButton_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ToolButton_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ToolButton_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolButton_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ToolButton_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ToolButton_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ToolButton_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ToolButton_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToolButton_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToolButton_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToolButton_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToolButton_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToolButton_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ToolButton_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ToolButton_AnchorClient(self.0, aSpace) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { ToolButton_GetIndex(self.0) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ToolButton_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ToolButton_SetAction(self.0, aValue.Instance()) }
      }

      pub fn AllowAllUp(&self) -> bool  {
          unsafe { ToolButton_GetAllowAllUp(self.0) }
      }

      pub fn SetAllowAllUp(&self, aValue: bool)  {
          unsafe { ToolButton_SetAllowAllUp(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ToolButton_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ToolButton_SetAutoSize(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolButton_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ToolButton_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Down(&self) -> bool  {
          unsafe { ToolButton_GetDown(self.0) }
      }

      pub fn SetDown(&self, aValue: bool)  {
          unsafe { ToolButton_SetDown(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ToolButton_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ToolButton_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ToolButton_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ToolButton_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ToolButton_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ToolButton_SetDragMode(self.0, aValue) }
      }

      pub fn DropdownMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ToolButton_GetDropdownMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetDropdownMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ToolButton_SetDropdownMenu(self.0, aValue.Instance()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ToolButton_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ToolButton_SetEnabled(self.0, aValue) }
      }

      pub fn Grouped(&self) -> bool  {
          unsafe { ToolButton_GetGrouped(self.0) }
      }

      pub fn SetGrouped(&self, aValue: bool)  {
          unsafe { ToolButton_SetGrouped(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ToolButton_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ToolButton_SetHeight(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { ToolButton_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { ToolButton_SetImageIndex(self.0, aValue) }
      }

      pub fn Indeterminate(&self) -> bool  {
          unsafe { ToolButton_GetIndeterminate(self.0) }
      }

      pub fn SetIndeterminate(&self, aValue: bool)  {
          unsafe { ToolButton_SetIndeterminate(self.0, aValue) }
      }

      pub fn Marked(&self) -> bool  {
          unsafe { ToolButton_GetMarked(self.0) }
      }

      pub fn SetMarked(&self, aValue: bool)  {
          unsafe { ToolButton_SetMarked(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ToolButton_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ToolButton_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ToolButton_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ToolButton_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Wrap(&self) -> bool  {
          unsafe { ToolButton_GetWrap(self.0) }
      }

      pub fn SetWrap(&self, aValue: bool)  {
          unsafe { ToolButton_SetWrap(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ToolButton_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ToolButton_SetShowHint(self.0, aValue) }
      }

      pub fn Style(&self) -> TToolButtonStyle  {
          unsafe { ToolButton_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TToolButtonStyle)  {
          unsafe { ToolButton_SetStyle(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ToolButton_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ToolButton_SetVisible(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ToolButton_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ToolButton_SetWidth(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolButton_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ToolButton_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ToolButton_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ToolButton_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { ToolButton_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ToolButton_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ToolButton_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolButton_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ToolButton_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ToolButton_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ToolButton_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { ToolButton_SetOnStartDock(self.0, aEventId) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ToolButton_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ToolButton_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ToolButton_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ToolButton_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ToolButton_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ToolButton_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ToolButton_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ToolButton_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ToolButton_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ToolButton_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ToolButton_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ToolButton_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ToolButton_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ToolButton_SetClientWidth(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ToolButton_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ToolButton_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ToolButton_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ToolButton_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ToolButton_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ToolButton_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ToolButton_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ToolButton_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ToolButton_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ToolButton_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ToolButton_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ToolButton_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ToolButton_SetTop(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ToolButton_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ToolButton_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolButton_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ToolButton_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ToolButton_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ToolButton_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ToolButton_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ToolButton_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToolButton_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ToolButton_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ToolButton_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ToolButton_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolButton_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ToolButton_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolButton_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ToolButton_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolButton_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ToolButton_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolButton_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ToolButton_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ToolButton_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ToolButton_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ToolButton_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToolButton_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ToolButton_StaticClassType() }
      }
}

impl IObject for TToolButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TToolButton {}
impl IControl for TToolButton {}

impl TIniFile {
      pub fn new(aFileName: &str) -> Self {
          TIniFile {
              0: unsafe { IniFile_Create(CString::new(aFileName).unwrap().as_ptr()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TIniFile { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  IniFile_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ReadString<'a>(&self, section: &str, ident: &str, default: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(IniFile_ReadString(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), CString::new(default).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn WriteString(&self, section: &str, ident: &str, value: &str)  {
          unsafe { IniFile_WriteString(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), CString::new(value).unwrap().as_ptr()) }
      }

      pub fn ReadSections(&self, strings: &TStrings)  {
          unsafe { IniFile_ReadSections(self.0, strings.Instance()) }
      }

      pub fn ReadSectionValues(&self, section: &str, strings: &TStrings)  {
          unsafe { IniFile_ReadSectionValues(self.0, CString::new(section).unwrap().as_ptr(), strings.Instance()) }
      }

      pub fn EraseSection(&self, section: &str)  {
          unsafe { IniFile_EraseSection(self.0, CString::new(section).unwrap().as_ptr()) }
      }

      pub fn DeleteKey(&self, section: &str, ident: &str)  {
          unsafe { IniFile_DeleteKey(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr()) }
      }

      pub fn UpdateFile(&self)  {
          unsafe { IniFile_UpdateFile(self.0) }
      }

      pub fn SectionExists(&self, section: &str) -> bool  {
          unsafe { IniFile_SectionExists(self.0, CString::new(section).unwrap().as_ptr()) }
      }

      pub fn ReadInteger(&self, section: &str, ident: &str, default: i32) -> i32  {
          unsafe { IniFile_ReadInteger(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), default) }
      }

      pub fn WriteInteger(&self, section: &str, ident: &str, value: i32)  {
          unsafe { IniFile_WriteInteger(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), value) }
      }

      pub fn ReadBool(&self, section: &str, ident: &str, default: bool) -> bool  {
          unsafe { IniFile_ReadBool(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), default) }
      }

      pub fn WriteBool(&self, section: &str, ident: &str, value: bool)  {
          unsafe { IniFile_WriteBool(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr(), value) }
      }

      pub fn ReadDate(&self, section: &str, name: &str, default: u32) -> u32  {
          unsafe { IniFile_ReadDate(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), default) }
      }

      pub fn ReadDateTime(&self, section: &str, name: &str, default: u32) -> u32  {
          unsafe { IniFile_ReadDateTime(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), default) }
      }

      pub fn ReadFloat(&self, section: &str, name: &str, default: *mut f64, result: *mut f64)  {
          unsafe { IniFile_ReadFloat(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), default, result) }
      }

      pub fn ReadTime(&self, section: &str, name: &str, default: u32) -> u32  {
          unsafe { IniFile_ReadTime(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), default) }
      }

      pub fn WriteDate(&self, section: &str, name: &str, value: u32)  {
          unsafe { IniFile_WriteDate(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteDateTime(&self, section: &str, name: &str, value: u32)  {
          unsafe { IniFile_WriteDateTime(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteFloat(&self, section: &str, name: &str, value: *mut f64)  {
          unsafe { IniFile_WriteFloat(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteTime(&self, section: &str, name: &str, value: u32)  {
          unsafe { IniFile_WriteTime(self.0, CString::new(section).unwrap().as_ptr(), CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn ValueExists(&self, section: &str, ident: &str) -> bool  {
          unsafe { IniFile_ValueExists(self.0, CString::new(section).unwrap().as_ptr(), CString::new(ident).unwrap().as_ptr()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { IniFile_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(IniFile_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { IniFile_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { IniFile_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { IniFile_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { IniFile_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(IniFile_ToString(self.0)).to_string_lossy()  }
      }

      pub fn FileName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(IniFile_GetFileName(self.0)).to_string_lossy()  }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { IniFile_StaticClassType() }
      }
}

impl IObject for TIniFile {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TIniFile {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TRegistry {
      pub fn new(aAccess: u32) -> Self {
          TRegistry {
              0: unsafe { Registry_Create(aAccess) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TRegistry { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Registry_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CloseKey(&self)  {
          unsafe { Registry_CloseKey(self.0) }
      }

      pub fn CreateKey(&self, key: &str) -> bool  {
          unsafe { Registry_CreateKey(self.0, CString::new(key).unwrap().as_ptr()) }
      }

      pub fn DeleteKey(&self, key: &str) -> bool  {
          unsafe { Registry_DeleteKey(self.0, CString::new(key).unwrap().as_ptr()) }
      }

      pub fn DeleteValue(&self, name: &str) -> bool  {
          unsafe { Registry_DeleteValue(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn HasSubKeys(&self) -> bool  {
          unsafe { Registry_HasSubKeys(self.0) }
      }

      pub fn KeyExists(&self, key: &str) -> bool  {
          unsafe { Registry_KeyExists(self.0, CString::new(key).unwrap().as_ptr()) }
      }

      pub fn LoadKey(&self, key: &str, fileName: &str) -> bool  {
          unsafe { Registry_LoadKey(self.0, CString::new(key).unwrap().as_ptr(), CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn MoveKey(&self, oldName: &str, newName: &str, delete: bool)  {
          unsafe { Registry_MoveKey(self.0, CString::new(oldName).unwrap().as_ptr(), CString::new(newName).unwrap().as_ptr(), delete) }
      }

      pub fn OpenKey(&self, key: &str, canCreate: bool) -> bool  {
          unsafe { Registry_OpenKey(self.0, CString::new(key).unwrap().as_ptr(), canCreate) }
      }

      pub fn OpenKeyReadOnly(&self, key: &str) -> bool  {
          unsafe { Registry_OpenKeyReadOnly(self.0, CString::new(key).unwrap().as_ptr()) }
      }

      pub fn ReadBool(&self, name: &str) -> bool  {
          unsafe { Registry_ReadBool(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn ReadDate(&self, name: &str) -> u32  {
          unsafe { Registry_ReadDate(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn ReadDateTime(&self, name: &str) -> u32  {
          unsafe { Registry_ReadDateTime(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn ReadFloat(&self, name: &str, result: *mut f64)  {
          unsafe { Registry_ReadFloat(self.0, CString::new(name).unwrap().as_ptr(), result) }
      }

      pub fn ReadInteger(&self, name: &str) -> i32  {
          unsafe { Registry_ReadInteger(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn ReadString<'a>(&self, name: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Registry_ReadString(self.0, CString::new(name).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn ReadTime(&self, name: &str) -> u32  {
          unsafe { Registry_ReadTime(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn RegistryConnect(&self, uNCName: &str) -> bool  {
          unsafe { Registry_RegistryConnect(self.0, CString::new(uNCName).unwrap().as_ptr()) }
      }

      pub fn RenameValue(&self, oldName: &str, newName: &str)  {
          unsafe { Registry_RenameValue(self.0, CString::new(oldName).unwrap().as_ptr(), CString::new(newName).unwrap().as_ptr()) }
      }

      pub fn ReplaceKey(&self, key: &str, fileName: &str, backUpFileName: &str) -> bool  {
          unsafe { Registry_ReplaceKey(self.0, CString::new(key).unwrap().as_ptr(), CString::new(fileName).unwrap().as_ptr(), CString::new(backUpFileName).unwrap().as_ptr()) }
      }

      pub fn RestoreKey(&self, key: &str, fileName: &str) -> bool  {
          unsafe { Registry_RestoreKey(self.0, CString::new(key).unwrap().as_ptr(), CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn SaveKey(&self, key: &str, fileName: &str) -> bool  {
          unsafe { Registry_SaveKey(self.0, CString::new(key).unwrap().as_ptr(), CString::new(fileName).unwrap().as_ptr()) }
      }

      pub fn UnLoadKey(&self, key: &str) -> bool  {
          unsafe { Registry_UnLoadKey(self.0, CString::new(key).unwrap().as_ptr()) }
      }

      pub fn ValueExists(&self, name: &str) -> bool  {
          unsafe { Registry_ValueExists(self.0, CString::new(name).unwrap().as_ptr()) }
      }

      pub fn WriteBool(&self, name: &str, value: bool)  {
          unsafe { Registry_WriteBool(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteDate(&self, name: &str, value: u32)  {
          unsafe { Registry_WriteDate(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteDateTime(&self, name: &str, value: u32)  {
          unsafe { Registry_WriteDateTime(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteFloat(&self, name: &str, value: *mut f64)  {
          unsafe { Registry_WriteFloat(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteInteger(&self, name: &str, value: i32)  {
          unsafe { Registry_WriteInteger(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn WriteString(&self, name: &str, value: &str)  {
          unsafe { Registry_WriteString(self.0, CString::new(name).unwrap().as_ptr(), CString::new(value).unwrap().as_ptr()) }
      }

      pub fn WriteExpandString(&self, name: &str, value: &str)  {
          unsafe { Registry_WriteExpandString(self.0, CString::new(name).unwrap().as_ptr(), CString::new(value).unwrap().as_ptr()) }
      }

      pub fn WriteTime(&self, name: &str, value: u32)  {
          unsafe { Registry_WriteTime(self.0, CString::new(name).unwrap().as_ptr(), value) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Registry_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Registry_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Registry_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Registry_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Registry_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Registry_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Registry_ToString(self.0)).to_string_lossy()  }
      }

      pub fn CurrentKey(&self) -> HKEY  {
          unsafe { Registry_GetCurrentKey(self.0) }
      }

      pub fn CurrentPath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Registry_GetCurrentPath(self.0)).to_string_lossy()  }
      }

      pub fn LazyWrite(&self) -> bool  {
          unsafe { Registry_GetLazyWrite(self.0) }
      }

      pub fn SetLazyWrite(&self, aValue: bool)  {
          unsafe { Registry_SetLazyWrite(self.0, aValue) }
      }

      pub fn LastError(&self) -> i32  {
          unsafe { Registry_GetLastError(self.0) }
      }

      pub fn LastErrorMsg<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Registry_GetLastErrorMsg(self.0)).to_string_lossy()  }
      }

      pub fn RootKey(&self) -> HKEY  {
          unsafe { Registry_GetRootKey(self.0) }
      }

      pub fn SetRootKey(&self, aValue: HKEY)  {
          unsafe { Registry_SetRootKey(self.0, aValue) }
      }

      pub fn Access(&self) -> u32  {
          unsafe { Registry_GetAccess(self.0) }
      }

      pub fn SetAccess(&self, aValue: u32)  {
          unsafe { Registry_SetAccess(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Registry_StaticClassType() }
      }
}

impl IObject for TRegistry {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TRegistry {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TClipboard {
      pub fn new() -> Self {
          TClipboard {
              0: unsafe { Clipboard_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TClipboard { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Clipboard_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Clipboard_Assign(self.0, source.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { Clipboard_Clear(self.0) }
      }

      pub fn Close(&self)  {
          unsafe { Clipboard_Close(self.0) }
      }

      pub fn HasFormat(&self, format: u16) -> bool  {
          unsafe { Clipboard_HasFormat(self.0, format) }
      }

      pub fn Open(&self)  {
          unsafe { Clipboard_Open(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32  {
          unsafe { Clipboard_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn SetTextBuf(&self, buffer: &str)  {
          unsafe { Clipboard_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Clipboard_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Clipboard_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Clipboard_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Clipboard_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Clipboard_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Clipboard_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Clipboard_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Clipboard_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AsText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Clipboard_GetAsText(self.0)).to_string_lossy()  }
      }

      pub fn SetAsText(&self, aValue: &str)  {
          unsafe { Clipboard_SetAsText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn FormatCount(&self) -> i32  {
          unsafe { Clipboard_GetFormatCount(self.0) }
      }

      pub fn Formats(&self, index: i32) -> u16  {
          unsafe { Clipboard_GetFormats(self.0, index) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Clipboard_StaticClassType() }
      }
      pub fn SetClipboard(&self) -> TClipboard  {
          TClipboard {
              0: unsafe { Clipboard_SetClipboard(self.0) }
              , 1: false,
          }
      }

}

impl IObject for TClipboard {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TClipboard {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TMonitor {
      pub fn new() -> Self {
          TMonitor {
              0: unsafe { Monitor_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMonitor { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Monitor_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Monitor_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Monitor_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Monitor_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Monitor_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Monitor_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Monitor_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Monitor_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HMONITOR  {
          unsafe { Monitor_GetHandle(self.0) }
      }

      pub fn MonitorNum(&self) -> i32  {
          unsafe { Monitor_GetMonitorNum(self.0) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Monitor_GetLeft(self.0) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Monitor_GetHeight(self.0) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Monitor_GetTop(self.0) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Monitor_GetWidth(self.0) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Monitor_GetBoundsRect(self.0, result) }
      }

      pub fn WorkareaRect(&self, result: *mut TRect)  {
          unsafe { Monitor_GetWorkareaRect(self.0, result) }
      }

      pub fn Primary(&self) -> bool  {
          unsafe { Monitor_GetPrimary(self.0) }
      }

      pub fn PixelsPerInch(&self) -> i32  {
          unsafe { Monitor_GetPixelsPerInch(self.0) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Monitor_StaticClassType() }
      }
}

impl IObject for TMonitor {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TMonitor {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TPaintBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPaintBox {
              0: unsafe { PaintBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPaintBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PaintBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { PaintBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { PaintBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { PaintBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { PaintBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PaintBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { PaintBox_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { PaintBox_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { PaintBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { PaintBox_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { PaintBox_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { PaintBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { PaintBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { PaintBox_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { PaintBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { PaintBox_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { PaintBox_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { PaintBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { PaintBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { PaintBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PaintBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PaintBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PaintBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PaintBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PaintBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PaintBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PaintBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PaintBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PaintBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PaintBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { PaintBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { PaintBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { PaintBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { PaintBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { PaintBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { PaintBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { PaintBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { PaintBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { PaintBox_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { PaintBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { PaintBox_SetAnchors(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { PaintBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { PaintBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { PaintBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { PaintBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { PaintBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { PaintBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { PaintBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { PaintBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { PaintBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { PaintBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { PaintBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { PaintBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { PaintBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { PaintBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { PaintBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { PaintBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { PaintBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { PaintBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { PaintBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { PaintBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { PaintBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { PaintBox_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { PaintBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { PaintBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { PaintBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { PaintBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { PaintBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { PaintBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { PaintBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { PaintBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { PaintBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { PaintBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { PaintBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { PaintBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnPaint(&self, aEventId: TNotifyEvent)  {
          unsafe { PaintBox_SetOnPaint(self.0, aEventId) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { PaintBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { PaintBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { PaintBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { PaintBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { PaintBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { PaintBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { PaintBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { PaintBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { PaintBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { PaintBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { PaintBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { PaintBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { PaintBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { PaintBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { PaintBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { PaintBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { PaintBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { PaintBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { PaintBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { PaintBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { PaintBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { PaintBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { PaintBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { PaintBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { PaintBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { PaintBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { PaintBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { PaintBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { PaintBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PaintBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { PaintBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PaintBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PaintBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PaintBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PaintBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PaintBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PaintBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PaintBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PaintBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PaintBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { PaintBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PaintBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { PaintBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PaintBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { PaintBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PaintBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { PaintBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { PaintBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { PaintBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PaintBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { PaintBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PaintBox_StaticClassType() }
      }
}

impl IObject for TPaintBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPaintBox {}
impl IControl for TPaintBox {}

impl TTimer {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTimer {
              0: unsafe { Timer_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTimer { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Timer_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Timer_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Timer_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Timer_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Timer_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Timer_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Timer_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Timer_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Timer_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Timer_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Timer_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Timer_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Timer_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Timer_SetEnabled(self.0, aValue) }
      }

      pub fn Interval(&self) -> u32  {
          unsafe { Timer_GetInterval(self.0) }
      }

      pub fn SetInterval(&self, aValue: u32)  {
          unsafe { Timer_SetInterval(self.0, aValue) }
      }

      pub fn SetOnTimer(&self, aEventId: TNotifyEvent)  {
          unsafe { Timer_SetOnTimer(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Timer_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Timer_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Timer_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Timer_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Timer_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Timer_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Timer_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Timer_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Timer_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Timer_StaticClassType() }
      }
}

impl IObject for TTimer {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTimer {}

impl TList {
      pub fn new() -> Self {
          TList {
              0: unsafe { List_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TList { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  List_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self, item: usize) -> i32  {
          unsafe { List_Add(self.0, item) }
      }

      pub fn Clear(&self)  {
          unsafe { List_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { List_Delete(self.0, index) }
      }

      pub fn Expand(&self) -> TList  {
          TList {
              0: unsafe { List_Expand(self.0) }
              , 1: false,
          }
      }

      pub fn IndexOf(&self, item: usize) -> i32  {
          unsafe { List_IndexOf(self.0, item) }
      }

      pub fn Insert(&self, index: i32, item: usize)  {
          unsafe { List_Insert(self.0, index, item) }
      }

      pub fn Move(&self, curIndex: i32, newIndex: i32)  {
          unsafe { List_Move(self.0, curIndex, newIndex) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { List_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(List_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { List_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { List_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { List_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { List_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(List_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Capacity(&self) -> i32  {
          unsafe { List_GetCapacity(self.0) }
      }

      pub fn SetCapacity(&self, aValue: i32)  {
          unsafe { List_SetCapacity(self.0, aValue) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { List_GetCount(self.0) }
      }

      pub fn SetCount(&self, aValue: i32)  {
          unsafe { List_SetCount(self.0, aValue) }
      }

      pub fn List(&self) -> usize  {
          unsafe { List_GetList(self.0) }
      }

      pub fn Items(&self, index: i32) -> usize  {
          unsafe { List_GetItems(self.0, index) }
      }

      pub fn SetItems(&self, index: i32, aValue: usize)  {
          unsafe { List_SetItems(self.0, index, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { List_StaticClassType() }
      }
}

impl IObject for TList {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TList {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TForm {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TForm {
              0: unsafe { Form_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TForm { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Form_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Close(&self)  {
          unsafe { Form_Close(self.0) }
      }

      pub fn FocusControl(&self, control: &dyn IWinControl)  {
          unsafe { Form_FocusControl(self.0, control.Instance()) }
      }

      pub fn Hide(&self) {
          unsafe { Form_Hide(self.0) }
      }

      pub fn SetFocus(&self) {
          unsafe { Form_SetFocus(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Form_Show(self.0) }
      }

      pub fn ShowModal(&self) -> i32  {
          unsafe { Form_ShowModal(self.0) }
      }

      pub fn ScrollInView(&self, aControl: &dyn IControl)  {
          unsafe { Form_ScrollInView(self.0, aControl.Instance()) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Form_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Form_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Form_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Form_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Form_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Form_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Form_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Form_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Form_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Form_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Form_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Form_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Form_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Form_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Form_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Form_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Form_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Update(&self) {
          unsafe { Form_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Form_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Form_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Form_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Form_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Form_HasParent(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Form_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Form_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Form_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Form_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Form_SendToBack(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Form_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Form_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Form_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Form_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Form_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Form_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Form_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Form_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Form_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Form_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Form_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Form_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Form_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Form_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Form_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Form_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Form_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Form_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Form_AnchorClient(self.0, aSpace) }
      }

      pub fn AllowDropFiles(&self) -> bool  {
          unsafe { Form_GetAllowDropFiles(self.0) }
      }

      pub fn SetAllowDropFiles(&self, aValue: bool)  {
          unsafe { Form_SetAllowDropFiles(self.0, aValue) }
      }

      pub fn SetOnDropFiles(&self, aEventId: TDropFilesEvent)  {
          unsafe { Form_SetOnDropFiles(self.0, aEventId) }
      }

      pub fn ShowInTaskBar(&self) -> TShowInTaskbar  {
          unsafe { Form_GetShowInTaskBar(self.0) }
      }

      pub fn SetShowInTaskBar(&self, aValue: TShowInTaskbar)  {
          unsafe { Form_SetShowInTaskBar(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Form_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Form_SetAction(self.0, aValue.Instance()) }
      }

      pub fn ActiveControl(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Form_GetActiveControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetActiveControl(&self, aValue: &dyn IWinControl)  {
          unsafe { Form_SetActiveControl(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Form_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Form_SetAlign(self.0, aValue) }
      }

      pub fn AlphaBlend(&self) -> bool  {
          unsafe { Form_GetAlphaBlend(self.0) }
      }

      pub fn SetAlphaBlend(&self, aValue: bool)  {
          unsafe { Form_SetAlphaBlend(self.0, aValue) }
      }

      pub fn AlphaBlendValue(&self) -> i8  {
          unsafe { Form_GetAlphaBlendValue(self.0) }
      }

      pub fn SetAlphaBlendValue(&self, aValue: i8)  {
          unsafe { Form_SetAlphaBlendValue(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Form_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Form_SetAnchors(self.0, aValue) }
      }

      pub fn AutoScroll(&self) -> bool  {
          unsafe { Form_GetAutoScroll(self.0) }
      }

      pub fn SetAutoScroll(&self, aValue: bool)  {
          unsafe { Form_SetAutoScroll(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Form_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Form_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Form_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Form_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderIcons(&self) -> TBorderIcons  {
          unsafe { Form_GetBorderIcons(self.0) }
      }

      pub fn SetBorderIcons(&self, aValue: TBorderIcons)  {
          unsafe { Form_SetBorderIcons(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TFormBorderStyle  {
          unsafe { Form_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TFormBorderStyle)  {
          unsafe { Form_SetBorderStyle(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { Form_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { Form_SetBorderWidth(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Form_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { Form_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Form_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Form_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Form_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Form_SetClientWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Form_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Form_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Form_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Form_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Form_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Form_SetUseDockManager(self.0, aValue) }
      }

      pub fn DefaultMonitor(&self) -> TDefaultMonitor  {
          unsafe { Form_GetDefaultMonitor(self.0) }
      }

      pub fn SetDefaultMonitor(&self, aValue: TDefaultMonitor)  {
          unsafe { Form_SetDefaultMonitor(self.0, aValue) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Form_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Form_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Form_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Form_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Form_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Form_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Form_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Form_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Form_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Form_SetEnabled(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Form_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Form_SetParentFont(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Form_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Form_SetFont(self.0, aValue.Instance()) }
      }

      pub fn FormStyle(&self) -> TFormStyle  {
          unsafe { Form_GetFormStyle(self.0) }
      }

      pub fn SetFormStyle(&self, aValue: TFormStyle)  {
          unsafe { Form_SetFormStyle(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Form_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Form_SetHeight(self.0, aValue) }
      }

      pub fn HorzScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { Form_GetHorzScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetHorzScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { Form_SetHorzScrollBar(self.0, aValue.Instance()) }
      }

      pub fn Icon(&self) -> TIcon  {
          TIcon {
              0: unsafe { Form_GetIcon(self.0) }
              , 1: false,
          }
      }

      pub fn SetIcon(&self, aValue: &TIcon)  {
          unsafe { Form_SetIcon(self.0, aValue.Instance()) }
      }

      pub fn KeyPreview(&self) -> bool  {
          unsafe { Form_GetKeyPreview(self.0) }
      }

      pub fn SetKeyPreview(&self, aValue: bool)  {
          unsafe { Form_SetKeyPreview(self.0, aValue) }
      }

      pub fn Menu(&self) -> TMainMenu  {
          TMainMenu {
              0: unsafe { Form_GetMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetMenu(&self, aValue: &TMainMenu)  {
          unsafe { Form_SetMenu(self.0, aValue.Instance()) }
      }

      pub fn PixelsPerInch(&self) -> i32  {
          unsafe { Form_GetPixelsPerInch(self.0) }
      }

      pub fn SetPixelsPerInch(&self, aValue: i32)  {
          unsafe { Form_SetPixelsPerInch(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Form_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Form_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Position(&self) -> TPosition  {
          unsafe { Form_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: TPosition)  {
          unsafe { Form_SetPosition(self.0, aValue) }
      }

      pub fn Scaled(&self) -> bool  {
          unsafe { Form_GetScaled(self.0) }
      }

      pub fn SetScaled(&self, aValue: bool)  {
          unsafe { Form_SetScaled(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Form_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Form_SetShowHint(self.0, aValue) }
      }

      pub fn VertScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { Form_GetVertScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetVertScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { Form_SetVertScrollBar(self.0, aValue.Instance()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Form_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Form_SetVisible(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Form_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Form_SetWidth(self.0, aValue) }
      }

      pub fn WindowState(&self) -> TWindowState  {
          unsafe { Form_GetWindowState(self.0) }
      }

      pub fn SetWindowState(&self, aValue: TWindowState)  {
          unsafe { Form_SetWindowState(self.0, aValue) }
      }

      pub fn SetOnActivate(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnActivate(self.0, aEventId) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { Form_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnClose(&self, aEventId: TCloseEvent)  {
          unsafe { Form_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnCloseQuery(&self, aEventId: TCloseQueryEvent)  {
          unsafe { Form_SetOnCloseQuery(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Form_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDeactivate(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnDeactivate(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { Form_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Form_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Form_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { Form_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { Form_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnHide(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnHide(self.0, aEventId) }
      }

      pub fn SetOnHelp(&self, aEventId: THelpEvent)  {
          unsafe { Form_SetOnHelp(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { Form_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { Form_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { Form_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Form_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Form_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Form_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { Form_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { Form_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { Form_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnPaint(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnPaint(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnShortCut(&self, aEventId: TShortCutEvent)  {
          unsafe { Form_SetOnShortCut(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnShow(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { Form_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { Form_SetOnUnDock(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Form_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { Form_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { Form_SetModalResult(self.0, aValue) }
      }

      pub fn Monitor(&self) -> TMonitor  {
          TMonitor {
              0: unsafe { Form_GetMonitor(self.0) }
              , 1: false,
          }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Form_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Form_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Form_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Form_SetTop(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Form_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Form_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Form_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Form_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Form_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Form_GetHandle(self.0) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Form_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Form_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Form_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Form_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Form_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Form_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Form_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Form_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Form_SetTabStop(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Form_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Form_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Form_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Form_GetClientRect(self.0, result) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Form_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Form_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Form_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Form_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Form_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Form_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Form_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Form_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Form_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Form_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Form_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Form_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Form_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Form_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Form_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Form_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Form_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Form_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Form_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Form_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Form_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Form_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Form_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Form_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Form_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Form_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Form_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Form_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Form_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Form_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Form_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Form_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Form_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Form_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Form_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Form_StaticClassType() }
      }
      pub fn Create2(&self, aInitScale: bool) -> TForm  {
          TForm {
              0: unsafe { Form_Create2(self.0, aInitScale) }
              , 1: false,
          }
      }

      pub fn EnabledMaximize(&self, aValue: bool)  {
          unsafe { Form_EnabledMaximize(self.0, aValue) }
      }

      pub fn EnabledMinimize(&self, aValue: bool)  {
          unsafe { Form_EnabledMinimize(self.0, aValue) }
      }

      pub fn EnabledSystemMenu(&self, aValue: bool)  {
          unsafe { Form_EnabledSystemMenu(self.0, aValue) }
      }

      pub fn SetOnDestroy(&self, aEventId: TNotifyEvent)  {
          unsafe { Form_SetOnDestroy(self.0, aEventId) }
      }

      pub fn SetOnConstrainedResize(&self, aEventId: TConstrainedResizeEvent)  {
          unsafe { Form_SetOnConstrainedResize(self.0, aEventId) }
      }

      pub fn SetOnWndProc(&self, aEventId: TWndProcEvent)  {
          unsafe { Form_SetOnWndProc(self.0, aEventId) }
      }

      pub fn ScaleForPPI(&self, aNewPPI: i32)  {
          unsafe { Form_ScaleForPPI(self.0, aNewPPI) }
      }

      pub fn ScaleControlsForDpi(&self, aNewPPI: i32)  {
          unsafe { Form_ScaleControlsForDpi(self.0, aNewPPI) }
      }

      pub fn ScaleForCurrentDpi(&self)  {
          unsafe { Form_ScaleForCurrentDpi(self.0) }
      }

      pub fn InheritedWndProc(&self, aMsg: *mut TMessage)  {
          unsafe { Form_InheritedWndProc(self.0, aMsg) }
      }

}

impl IObject for TForm {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TForm {}
impl IControl for TForm {}
impl IWinControl for TForm {}

impl TParaAttributes {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ParaAttributes_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ParaAttributes_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ParaAttributes_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ParaAttributes_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ParaAttributes_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ParaAttributes_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ParaAttributes_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ParaAttributes_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ParaAttributes_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { ParaAttributes_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { ParaAttributes_SetAlignment(self.0, aValue) }
      }

      pub fn FirstIndent(&self) -> i32  {
          unsafe { ParaAttributes_GetFirstIndent(self.0) }
      }

      pub fn SetFirstIndent(&self, aValue: i32)  {
          unsafe { ParaAttributes_SetFirstIndent(self.0, aValue) }
      }

      pub fn LeftIndent(&self) -> i32  {
          unsafe { ParaAttributes_GetLeftIndent(self.0) }
      }

      pub fn SetLeftIndent(&self, aValue: i32)  {
          unsafe { ParaAttributes_SetLeftIndent(self.0, aValue) }
      }

      pub fn Numbering(&self) -> TNumberingStyle  {
          unsafe { ParaAttributes_GetNumbering(self.0) }
      }

      pub fn SetNumbering(&self, aValue: TNumberingStyle)  {
          unsafe { ParaAttributes_SetNumbering(self.0, aValue) }
      }

      pub fn RightIndent(&self) -> i32  {
          unsafe { ParaAttributes_GetRightIndent(self.0) }
      }

      pub fn SetRightIndent(&self, aValue: i32)  {
          unsafe { ParaAttributes_SetRightIndent(self.0, aValue) }
      }

      pub fn TabCount(&self) -> i32  {
          unsafe { ParaAttributes_GetTabCount(self.0) }
      }

      pub fn SetTabCount(&self, aValue: i32)  {
          unsafe { ParaAttributes_SetTabCount(self.0, aValue) }
      }

      pub fn Tab(&self, index: i8) -> i32  {
          unsafe { ParaAttributes_GetTab(self.0, index) }
      }

      pub fn SetTab(&self, index: i8, aValue: i32)  {
          unsafe { ParaAttributes_SetTab(self.0, index, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ParaAttributes_StaticClassType() }
      }
}

impl IObject for TParaAttributes {
    fn Instance(&self) -> usize { self.0 }
}


impl TTextAttributes {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TextAttributes_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TextAttributes_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TextAttributes_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TextAttributes_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TextAttributes_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TextAttributes_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TextAttributes_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TextAttributes_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TextAttributes_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Charset(&self) -> TFontCharset  {
          unsafe { TextAttributes_GetCharset(self.0) }
      }

      pub fn SetCharset(&self, aValue: TFontCharset)  {
          unsafe { TextAttributes_SetCharset(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { TextAttributes_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { TextAttributes_SetColor(self.0, aValue) }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TextAttributes_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TextAttributes_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Pitch(&self) -> TFontPitch  {
          unsafe { TextAttributes_GetPitch(self.0) }
      }

      pub fn SetPitch(&self, aValue: TFontPitch)  {
          unsafe { TextAttributes_SetPitch(self.0, aValue) }
      }

      pub fn Size(&self) -> i32  {
          unsafe { TextAttributes_GetSize(self.0) }
      }

      pub fn SetSize(&self, aValue: i32)  {
          unsafe { TextAttributes_SetSize(self.0, aValue) }
      }

      pub fn Style(&self) -> TFontStyles  {
          unsafe { TextAttributes_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TFontStyles)  {
          unsafe { TextAttributes_SetStyle(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { TextAttributes_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { TextAttributes_SetHeight(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TextAttributes_StaticClassType() }
      }
}

impl IObject for TTextAttributes {
    fn Instance(&self) -> usize { self.0 }
}


impl TIconOptions {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { IconOptions_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(IconOptions_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { IconOptions_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(IconOptions_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { IconOptions_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { IconOptions_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { IconOptions_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { IconOptions_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(IconOptions_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Arrangement(&self) -> TIconArrangement  {
          unsafe { IconOptions_GetArrangement(self.0) }
      }

      pub fn SetArrangement(&self, aValue: TIconArrangement)  {
          unsafe { IconOptions_SetArrangement(self.0, aValue) }
      }

      pub fn AutoArrange(&self) -> bool  {
          unsafe { IconOptions_GetAutoArrange(self.0) }
      }

      pub fn SetAutoArrange(&self, aValue: bool)  {
          unsafe { IconOptions_SetAutoArrange(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { IconOptions_StaticClassType() }
      }
}

impl IObject for TIconOptions {
    fn Instance(&self) -> usize { self.0 }
}


impl Exception {
      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Exception_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Exception_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Exception_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Exception_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Exception_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Exception_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Exception_GetHashCode(self.0) }
      }

      pub fn Message<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Exception_GetMessage(self.0)).to_string_lossy()  }
      }

      pub fn SetMessage(&self, aValue: &str)  {
          unsafe { Exception_SetMessage(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Exception_StaticClassType() }
      }
}

impl IObject for Exception {
    fn Instance(&self) -> usize { self.0 }
}


impl TScrollBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TScrollBar {
              0: unsafe { ScrollBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TScrollBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ScrollBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn SetParams(&self, aPosition: i32, aMin: i32, aMax: i32)  {
          unsafe { ScrollBar_SetParams(self.0, aPosition, aMin, aMax) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ScrollBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ScrollBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ScrollBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ScrollBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ScrollBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ScrollBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ScrollBar_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ScrollBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ScrollBar_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ScrollBar_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ScrollBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ScrollBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ScrollBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ScrollBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ScrollBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ScrollBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ScrollBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ScrollBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ScrollBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ScrollBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ScrollBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ScrollBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ScrollBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ScrollBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ScrollBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ScrollBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ScrollBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ScrollBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ScrollBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ScrollBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ScrollBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ScrollBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ScrollBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ScrollBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ScrollBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ScrollBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ScrollBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ScrollBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ScrollBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ScrollBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ScrollBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ScrollBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ScrollBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ScrollBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ScrollBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ScrollBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ScrollBar_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ScrollBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ScrollBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ScrollBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ScrollBar_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ScrollBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ScrollBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ScrollBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ScrollBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ScrollBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ScrollBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ScrollBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ScrollBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ScrollBar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ScrollBar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ScrollBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ScrollBar_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ScrollBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ScrollBar_SetEnabled(self.0, aValue) }
      }

      pub fn LargeChange(&self) -> TScrollBarInc  {
          unsafe { ScrollBar_GetLargeChange(self.0) }
      }

      pub fn SetLargeChange(&self, aValue: TScrollBarInc)  {
          unsafe { ScrollBar_SetLargeChange(self.0, aValue) }
      }

      pub fn Max(&self) -> i32  {
          unsafe { ScrollBar_GetMax(self.0) }
      }

      pub fn SetMax(&self, aValue: i32)  {
          unsafe { ScrollBar_SetMax(self.0, aValue) }
      }

      pub fn Min(&self) -> i32  {
          unsafe { ScrollBar_GetMin(self.0) }
      }

      pub fn SetMin(&self, aValue: i32)  {
          unsafe { ScrollBar_SetMin(self.0, aValue) }
      }

      pub fn PageSize(&self) -> i32  {
          unsafe { ScrollBar_GetPageSize(self.0) }
      }

      pub fn SetPageSize(&self, aValue: i32)  {
          unsafe { ScrollBar_SetPageSize(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ScrollBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ScrollBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ScrollBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ScrollBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ScrollBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ScrollBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Position(&self) -> i32  {
          unsafe { ScrollBar_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: i32)  {
          unsafe { ScrollBar_SetPosition(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ScrollBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ScrollBar_SetShowHint(self.0, aValue) }
      }

      pub fn SmallChange(&self) -> TScrollBarInc  {
          unsafe { ScrollBar_GetSmallChange(self.0) }
      }

      pub fn SetSmallChange(&self, aValue: TScrollBarInc)  {
          unsafe { ScrollBar_SetSmallChange(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ScrollBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ScrollBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ScrollBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ScrollBar_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ScrollBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ScrollBar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ScrollBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBar_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ScrollBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ScrollBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ScrollBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBar_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBar_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ScrollBar_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ScrollBar_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ScrollBar_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ScrollBar_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ScrollBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ScrollBar_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ScrollBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ScrollBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ScrollBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ScrollBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ScrollBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ScrollBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ScrollBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ScrollBar_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ScrollBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ScrollBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ScrollBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ScrollBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ScrollBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ScrollBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ScrollBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ScrollBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ScrollBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ScrollBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ScrollBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ScrollBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ScrollBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ScrollBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ScrollBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ScrollBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ScrollBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ScrollBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ScrollBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ScrollBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ScrollBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ScrollBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ScrollBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ScrollBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ScrollBar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ScrollBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ScrollBar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ScrollBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ScrollBar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ScrollBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ScrollBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ScrollBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ScrollBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ScrollBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ScrollBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ScrollBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ScrollBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ScrollBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ScrollBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ScrollBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ScrollBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ScrollBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ScrollBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ScrollBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ScrollBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ScrollBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ScrollBar_StaticClassType() }
      }
}

impl IObject for TScrollBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TScrollBar {}
impl IControl for TScrollBar {}
impl IWinControl for TScrollBar {}

impl TMaskEdit {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TMaskEdit {
              0: unsafe { MaskEdit_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TMaskEdit { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  MaskEdit_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ValidateEdit(&self)  {
          unsafe { MaskEdit_ValidateEdit(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { MaskEdit_Clear(self.0) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { MaskEdit_GetTextLen(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { MaskEdit_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { MaskEdit_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { MaskEdit_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { MaskEdit_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { MaskEdit_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { MaskEdit_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { MaskEdit_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { MaskEdit_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { MaskEdit_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { MaskEdit_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { MaskEdit_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { MaskEdit_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { MaskEdit_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { MaskEdit_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { MaskEdit_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { MaskEdit_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { MaskEdit_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { MaskEdit_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { MaskEdit_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { MaskEdit_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { MaskEdit_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { MaskEdit_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { MaskEdit_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { MaskEdit_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { MaskEdit_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { MaskEdit_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MaskEdit_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MaskEdit_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { MaskEdit_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { MaskEdit_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { MaskEdit_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { MaskEdit_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { MaskEdit_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { MaskEdit_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { MaskEdit_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { MaskEdit_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { MaskEdit_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { MaskEdit_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { MaskEdit_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { MaskEdit_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MaskEdit_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { MaskEdit_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { MaskEdit_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MaskEdit_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { MaskEdit_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { MaskEdit_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { MaskEdit_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { MaskEdit_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(MaskEdit_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MaskEdit_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { MaskEdit_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MaskEdit_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { MaskEdit_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { MaskEdit_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { MaskEdit_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { MaskEdit_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { MaskEdit_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { MaskEdit_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { MaskEdit_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { MaskEdit_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { MaskEdit_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSelect(&self) -> bool  {
          unsafe { MaskEdit_GetAutoSelect(self.0) }
      }

      pub fn SetAutoSelect(&self, aValue: bool)  {
          unsafe { MaskEdit_SetAutoSelect(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { MaskEdit_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { MaskEdit_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { MaskEdit_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { MaskEdit_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { MaskEdit_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { MaskEdit_SetBorderStyle(self.0, aValue) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { MaskEdit_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { MaskEdit_SetCharCase(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { MaskEdit_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { MaskEdit_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { MaskEdit_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { MaskEdit_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { MaskEdit_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { MaskEdit_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { MaskEdit_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { MaskEdit_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { MaskEdit_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { MaskEdit_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { MaskEdit_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { MaskEdit_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { MaskEdit_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { MaskEdit_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { MaskEdit_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { MaskEdit_SetFont(self.0, aValue.Instance()) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { MaskEdit_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { MaskEdit_SetMaxLength(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { MaskEdit_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { MaskEdit_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { MaskEdit_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { MaskEdit_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { MaskEdit_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { MaskEdit_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { MaskEdit_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { MaskEdit_SetParentShowHint(self.0, aValue) }
      }

      pub fn PasswordChar(&self) -> Char  {
          unsafe { MaskEdit_GetPasswordChar(self.0) }
      }

      pub fn SetPasswordChar(&self, aValue: Char)  {
          unsafe { MaskEdit_SetPasswordChar(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { MaskEdit_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { MaskEdit_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { MaskEdit_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { MaskEdit_SetReadOnly(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { MaskEdit_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { MaskEdit_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { MaskEdit_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { MaskEdit_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { MaskEdit_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { MaskEdit_SetTabStop(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { MaskEdit_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { MaskEdit_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { MaskEdit_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { MaskEdit_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { MaskEdit_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { MaskEdit_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { MaskEdit_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { MaskEdit_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { MaskEdit_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { MaskEdit_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { MaskEdit_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { MaskEdit_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { MaskEdit_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { MaskEdit_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { MaskEdit_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { MaskEdit_SetOnStartDock(self.0, aEventId) }
      }

      pub fn IsMasked(&self) -> bool  {
          unsafe { MaskEdit_GetIsMasked(self.0) }
      }

      pub fn EditText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetEditText(self.0)).to_string_lossy()  }
      }

      pub fn SetEditText(&self, aValue: &str)  {
          unsafe { MaskEdit_SetEditText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { MaskEdit_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { MaskEdit_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { MaskEdit_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { MaskEdit_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { MaskEdit_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { MaskEdit_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { MaskEdit_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { MaskEdit_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { MaskEdit_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { MaskEdit_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { MaskEdit_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { MaskEdit_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { MaskEdit_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { MaskEdit_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { MaskEdit_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { MaskEdit_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { MaskEdit_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { MaskEdit_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { MaskEdit_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { MaskEdit_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { MaskEdit_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { MaskEdit_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { MaskEdit_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { MaskEdit_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { MaskEdit_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { MaskEdit_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { MaskEdit_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { MaskEdit_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { MaskEdit_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { MaskEdit_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { MaskEdit_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { MaskEdit_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { MaskEdit_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { MaskEdit_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { MaskEdit_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { MaskEdit_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { MaskEdit_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { MaskEdit_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { MaskEdit_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { MaskEdit_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { MaskEdit_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { MaskEdit_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { MaskEdit_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { MaskEdit_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { MaskEdit_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { MaskEdit_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { MaskEdit_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { MaskEdit_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { MaskEdit_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { MaskEdit_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { MaskEdit_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { MaskEdit_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { MaskEdit_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(MaskEdit_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { MaskEdit_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { MaskEdit_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { MaskEdit_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MaskEdit_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { MaskEdit_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MaskEdit_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { MaskEdit_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MaskEdit_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { MaskEdit_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MaskEdit_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { MaskEdit_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { MaskEdit_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { MaskEdit_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { MaskEdit_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { MaskEdit_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MaskEdit_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { MaskEdit_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { MaskEdit_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { MaskEdit_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { MaskEdit_StaticClassType() }
      }
}

impl IObject for TMaskEdit {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TMaskEdit {}
impl IControl for TMaskEdit {}
impl IWinControl for TMaskEdit {}

impl TShape {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TShape {
              0: unsafe { Shape_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TShape { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Shape_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { Shape_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Shape_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Shape_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Shape_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Shape_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Shape_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Shape_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Shape_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Shape_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Shape_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Shape_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Shape_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Shape_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Shape_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Shape_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Shape_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Shape_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Shape_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Shape_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Shape_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Shape_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Shape_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Shape_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Shape_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Shape_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Shape_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Shape_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Shape_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Shape_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Shape_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Shape_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Shape_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Shape_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Shape_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Shape_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Shape_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Shape_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Shape_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Shape_SetAnchors(self.0, aValue) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Shape_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn SetBrush(&self, aValue: &TBrush)  {
          unsafe { Shape_SetBrush(self.0, aValue.Instance()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Shape_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Shape_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Shape_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Shape_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Shape_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Shape_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Shape_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Shape_SetEnabled(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Shape_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Shape_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Shape_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Shape_SetParentShowHint(self.0, aValue) }
      }

      pub fn Pen(&self) -> TPen  {
          TPen {
              0: unsafe { Shape_GetPen(self.0) }
              , 1: false,
          }
      }

      pub fn SetPen(&self, aValue: &TPen)  {
          unsafe { Shape_SetPen(self.0, aValue.Instance()) }
      }

      pub fn Shape(&self) -> TShapeType  {
          unsafe { Shape_GetShape(self.0) }
      }

      pub fn SetShape(&self, aValue: TShapeType)  {
          unsafe { Shape_SetShape(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Shape_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Shape_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Shape_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Shape_SetVisible(self.0, aValue) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Shape_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Shape_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Shape_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Shape_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Shape_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Shape_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Shape_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Shape_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Shape_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Shape_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Shape_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Shape_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Shape_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Shape_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Shape_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Shape_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Shape_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Shape_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Shape_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Shape_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Shape_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Shape_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Shape_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Shape_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Shape_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Shape_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Shape_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Shape_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Shape_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Shape_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Shape_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Shape_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Shape_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Shape_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Shape_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Shape_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Shape_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Shape_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Shape_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Shape_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Shape_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Shape_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Shape_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Shape_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Shape_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Shape_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Shape_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Shape_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Shape_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Shape_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Shape_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Shape_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Shape_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Shape_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Shape_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Shape_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Shape_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Shape_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Shape_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Shape_StaticClassType() }
      }
}

impl IObject for TShape {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TShape {}
impl IControl for TShape {}

impl TBevel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TBevel {
              0: unsafe { Bevel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TBevel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Bevel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { Bevel_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Bevel_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Bevel_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Bevel_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Bevel_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Bevel_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Bevel_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Bevel_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Bevel_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Bevel_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Bevel_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Bevel_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Bevel_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Bevel_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Bevel_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Bevel_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Bevel_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Bevel_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Bevel_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Bevel_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Bevel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Bevel_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Bevel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Bevel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Bevel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Bevel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Bevel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Bevel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Bevel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Bevel_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Bevel_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Bevel_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Bevel_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Bevel_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Bevel_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Bevel_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Bevel_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Bevel_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Bevel_SetAnchors(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Bevel_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Bevel_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Bevel_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Bevel_SetParentShowHint(self.0, aValue) }
      }

      pub fn Shape(&self) -> TBevelShape  {
          unsafe { Bevel_GetShape(self.0) }
      }

      pub fn SetShape(&self, aValue: TBevelShape)  {
          unsafe { Bevel_SetShape(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Bevel_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Bevel_SetShowHint(self.0, aValue) }
      }

      pub fn Style(&self) -> TBevelStyle  {
          unsafe { Bevel_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TBevelStyle)  {
          unsafe { Bevel_SetStyle(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Bevel_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Bevel_SetVisible(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Bevel_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Bevel_SetEnabled(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Bevel_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Bevel_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Bevel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Bevel_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Bevel_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Bevel_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Bevel_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Bevel_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Bevel_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Bevel_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Bevel_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Bevel_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Bevel_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Bevel_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Bevel_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Bevel_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Bevel_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Bevel_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Bevel_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Bevel_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Bevel_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Bevel_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Bevel_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Bevel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Bevel_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Bevel_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Bevel_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Bevel_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Bevel_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Bevel_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Bevel_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Bevel_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Bevel_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Bevel_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Bevel_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Bevel_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Bevel_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Bevel_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Bevel_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Bevel_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Bevel_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Bevel_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Bevel_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Bevel_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Bevel_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Bevel_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Bevel_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Bevel_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Bevel_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Bevel_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Bevel_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Bevel_StaticClassType() }
      }
}

impl IObject for TBevel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TBevel {}
impl IControl for TBevel {}

impl TScrollBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TScrollBox {
              0: unsafe { ScrollBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TScrollBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ScrollBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ScrollInView(&self, aControl: &dyn IControl)  {
          unsafe { ScrollBox_ScrollInView(self.0, aControl.Instance()) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ScrollBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ScrollBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ScrollBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ScrollBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ScrollBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ScrollBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ScrollBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ScrollBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ScrollBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ScrollBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ScrollBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ScrollBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ScrollBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ScrollBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ScrollBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ScrollBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ScrollBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ScrollBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ScrollBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ScrollBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ScrollBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ScrollBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ScrollBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ScrollBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ScrollBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ScrollBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ScrollBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ScrollBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ScrollBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ScrollBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ScrollBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ScrollBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ScrollBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ScrollBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ScrollBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ScrollBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ScrollBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ScrollBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ScrollBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ScrollBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ScrollBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ScrollBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ScrollBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ScrollBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ScrollBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ScrollBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ScrollBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ScrollBox_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ScrollBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ScrollBox_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ScrollBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ScrollBox_SetAnchors(self.0, aValue) }
      }

      pub fn AutoScroll(&self) -> bool  {
          unsafe { ScrollBox_GetAutoScroll(self.0) }
      }

      pub fn SetAutoScroll(&self, aValue: bool)  {
          unsafe { ScrollBox_SetAutoScroll(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ScrollBox_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ScrollBox_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ScrollBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ScrollBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { ScrollBox_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { ScrollBox_SetBorderStyle(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ScrollBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ScrollBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ScrollBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ScrollBox_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ScrollBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ScrollBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ScrollBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ScrollBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ScrollBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ScrollBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ScrollBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ScrollBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ScrollBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ScrollBox_SetEnabled(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ScrollBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ScrollBox_SetColor(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ScrollBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ScrollBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentBackground(&self) -> bool  {
          unsafe { ScrollBox_GetParentBackground(self.0) }
      }

      pub fn SetParentBackground(&self, aValue: bool)  {
          unsafe { ScrollBox_SetParentBackground(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ScrollBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ScrollBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ScrollBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ScrollBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ScrollBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ScrollBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ScrollBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ScrollBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ScrollBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ScrollBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ScrollBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ScrollBox_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ScrollBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ScrollBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ScrollBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ScrollBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ScrollBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ScrollBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { ScrollBox_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ScrollBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ScrollBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ScrollBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { ScrollBox_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ScrollBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ScrollBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ScrollBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { ScrollBox_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ScrollBox_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ScrollBox_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { ScrollBox_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { ScrollBox_SetOnUnDock(self.0, aEventId) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { ScrollBox_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn HorzScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { ScrollBox_GetHorzScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetHorzScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { ScrollBox_SetHorzScrollBar(self.0, aValue.Instance()) }
      }

      pub fn VertScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { ScrollBox_GetVertScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetVertScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { ScrollBox_SetVertScrollBar(self.0, aValue.Instance()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ScrollBox_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ScrollBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ScrollBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ScrollBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ScrollBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ScrollBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ScrollBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ScrollBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ScrollBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ScrollBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ScrollBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ScrollBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ScrollBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ScrollBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ScrollBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ScrollBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ScrollBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ScrollBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ScrollBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ScrollBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ScrollBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ScrollBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ScrollBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ScrollBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ScrollBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ScrollBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ScrollBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ScrollBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ScrollBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ScrollBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ScrollBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ScrollBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ScrollBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ScrollBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ScrollBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ScrollBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ScrollBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ScrollBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ScrollBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ScrollBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ScrollBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ScrollBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ScrollBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ScrollBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ScrollBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ScrollBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ScrollBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ScrollBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ScrollBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ScrollBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ScrollBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ScrollBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ScrollBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ScrollBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ScrollBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ScrollBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ScrollBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ScrollBox_StaticClassType() }
      }
}

impl IObject for TScrollBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TScrollBox {}
impl IControl for TScrollBox {}
impl IWinControl for TScrollBox {}

impl TCheckListBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TCheckListBox {
              0: unsafe { CheckListBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCheckListBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CheckListBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CheckAll(&self, aState: TCheckBoxState, allowGrayed: bool, allowDisabled: bool)  {
          unsafe { CheckListBox_CheckAll(self.0, aState, allowGrayed, allowDisabled) }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { CheckListBox_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { CheckListBox_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { CheckListBox_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { CheckListBox_DeleteSelected(self.0) }
      }

      pub fn ItemAtPos(&self, pos: *mut TPoint, existing: bool) -> i32  {
          unsafe { CheckListBox_ItemAtPos(self.0, pos, existing) }
      }

      pub fn ItemRect(&self, index: i32, result: *mut TRect)  {
          unsafe { CheckListBox_ItemRect(self.0, index, result) }
      }

      pub fn SelectAll(&self)  {
          unsafe { CheckListBox_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { CheckListBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { CheckListBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { CheckListBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { CheckListBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { CheckListBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { CheckListBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { CheckListBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { CheckListBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { CheckListBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { CheckListBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { CheckListBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { CheckListBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { CheckListBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { CheckListBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { CheckListBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { CheckListBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { CheckListBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { CheckListBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { CheckListBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { CheckListBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckListBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckListBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { CheckListBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { CheckListBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { CheckListBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { CheckListBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { CheckListBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckListBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckListBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { CheckListBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { CheckListBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { CheckListBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { CheckListBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { CheckListBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { CheckListBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckListBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { CheckListBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CheckListBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckListBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CheckListBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CheckListBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CheckListBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CheckListBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckListBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckListBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckListBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckListBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckListBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { CheckListBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { CheckListBox_AnchorClient(self.0, aSpace) }
      }

      pub fn SetOnClickCheck(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnClickCheck(self.0, aEventId) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { CheckListBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { CheckListBox_SetAlign(self.0, aValue) }
      }

      pub fn AllowGrayed(&self) -> bool  {
          unsafe { CheckListBox_GetAllowGrayed(self.0) }
      }

      pub fn SetAllowGrayed(&self, aValue: bool)  {
          unsafe { CheckListBox_SetAllowGrayed(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { CheckListBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { CheckListBox_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { CheckListBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { CheckListBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { CheckListBox_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { CheckListBox_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { CheckListBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { CheckListBox_SetColor(self.0, aValue) }
      }

      pub fn Columns(&self) -> i32  {
          unsafe { CheckListBox_GetColumns(self.0) }
      }

      pub fn SetColumns(&self, aValue: i32)  {
          unsafe { CheckListBox_SetColumns(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { CheckListBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { CheckListBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { CheckListBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckListBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { CheckListBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { CheckListBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { CheckListBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { CheckListBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { CheckListBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { CheckListBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { CheckListBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { CheckListBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { CheckListBox_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { CheckListBox_SetItemHeight(self.0, aValue) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { CheckListBox_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { CheckListBox_SetItems(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { CheckListBox_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { CheckListBox_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { CheckListBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckListBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { CheckListBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { CheckListBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { CheckListBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { CheckListBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { CheckListBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { CheckListBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { CheckListBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { CheckListBox_SetShowHint(self.0, aValue) }
      }

      pub fn Sorted(&self) -> bool  {
          unsafe { CheckListBox_GetSorted(self.0) }
      }

      pub fn SetSorted(&self, aValue: bool)  {
          unsafe { CheckListBox_SetSorted(self.0, aValue) }
      }

      pub fn Style(&self) -> TListBoxStyle  {
          unsafe { CheckListBox_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TListBoxStyle)  {
          unsafe { CheckListBox_SetStyle(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { CheckListBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { CheckListBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { CheckListBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { CheckListBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { CheckListBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { CheckListBox_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { CheckListBox_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { CheckListBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { CheckListBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { CheckListBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { CheckListBox_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { CheckListBox_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { CheckListBox_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMeasureItem(&self, aEventId: TMeasureItemEvent)  {
          unsafe { CheckListBox_SetOnMeasureItem(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { CheckListBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckListBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { CheckListBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { CheckListBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { CheckListBox_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Count(&self) -> i32  {
          unsafe { CheckListBox_GetCount(self.0) }
      }

      pub fn TopIndex(&self) -> i32  {
          unsafe { CheckListBox_GetTopIndex(self.0) }
      }

      pub fn SetTopIndex(&self, aValue: i32)  {
          unsafe { CheckListBox_SetTopIndex(self.0, aValue) }
      }

      pub fn MultiSelect(&self) -> bool  {
          unsafe { CheckListBox_GetMultiSelect(self.0) }
      }

      pub fn SetMultiSelect(&self, aValue: bool)  {
          unsafe { CheckListBox_SetMultiSelect(self.0, aValue) }
      }

      pub fn SelCount(&self) -> i32  {
          unsafe { CheckListBox_GetSelCount(self.0) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { CheckListBox_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { CheckListBox_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { CheckListBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { CheckListBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { CheckListBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { CheckListBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { CheckListBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { CheckListBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { CheckListBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { CheckListBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { CheckListBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { CheckListBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { CheckListBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { CheckListBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { CheckListBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { CheckListBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { CheckListBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { CheckListBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { CheckListBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { CheckListBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { CheckListBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { CheckListBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { CheckListBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { CheckListBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { CheckListBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { CheckListBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { CheckListBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { CheckListBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { CheckListBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { CheckListBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { CheckListBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { CheckListBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { CheckListBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { CheckListBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { CheckListBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { CheckListBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { CheckListBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { CheckListBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { CheckListBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { CheckListBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { CheckListBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { CheckListBox_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckListBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { CheckListBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { CheckListBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { CheckListBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { CheckListBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { CheckListBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckListBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { CheckListBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { CheckListBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { CheckListBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckListBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { CheckListBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckListBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { CheckListBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckListBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { CheckListBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckListBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { CheckListBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { CheckListBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { CheckListBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { CheckListBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { CheckListBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Checked(&self, index: i32) -> bool  {
          unsafe { CheckListBox_GetChecked(self.0, index) }
      }

      pub fn SetChecked(&self, index: i32, aValue: bool)  {
          unsafe { CheckListBox_SetChecked(self.0, index, aValue) }
      }

      pub fn ItemEnabled(&self, index: i32) -> bool  {
          unsafe { CheckListBox_GetItemEnabled(self.0, index) }
      }

      pub fn SetItemEnabled(&self, index: i32, aValue: bool)  {
          unsafe { CheckListBox_SetItemEnabled(self.0, index, aValue) }
      }

      pub fn State(&self, index: i32) -> TCheckBoxState  {
          unsafe { CheckListBox_GetState(self.0, index) }
      }

      pub fn SetState(&self, index: i32, aValue: TCheckBoxState)  {
          unsafe { CheckListBox_SetState(self.0, index, aValue) }
      }

      pub fn Header(&self, index: i32) -> bool  {
          unsafe { CheckListBox_GetHeader(self.0, index) }
      }

      pub fn SetHeader(&self, index: i32, aValue: bool)  {
          unsafe { CheckListBox_SetHeader(self.0, index, aValue) }
      }

      pub fn Selected(&self, index: i32) -> bool  {
          unsafe { CheckListBox_GetSelected(self.0, index) }
      }

      pub fn SetSelected(&self, index: i32, aValue: bool)  {
          unsafe { CheckListBox_SetSelected(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckListBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckListBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { CheckListBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckListBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CheckListBox_StaticClassType() }
      }
}

impl IObject for TCheckListBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TCheckListBox {}
impl IControl for TCheckListBox {}
impl IWinControl for TCheckListBox {}

impl TGauge {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TGauge {
              0: unsafe { Gauge_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TGauge { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Gauge_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn AddProgress(&self, value: i32)  {
          unsafe { Gauge_AddProgress(self.0, value) }
      }

      pub fn BringToFront(&self) {
          unsafe { Gauge_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Gauge_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Gauge_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Gauge_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Gauge_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Gauge_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { Gauge_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Gauge_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Gauge_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Gauge_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Gauge_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Gauge_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Gauge_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Gauge_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { Gauge_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Gauge_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Gauge_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Gauge_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Gauge_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Gauge_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Gauge_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Gauge_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Gauge_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Gauge_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Gauge_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Gauge_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Gauge_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Gauge_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Gauge_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Gauge_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Gauge_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Gauge_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Gauge_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Gauge_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Gauge_AnchorClient(self.0, aSpace) }
      }

      pub fn PercentDone(&self) -> i32  {
          unsafe { Gauge_GetPercentDone(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Gauge_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Gauge_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Gauge_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Gauge_SetAnchors(self.0, aValue) }
      }

      pub fn BackColor(&self) -> TColor  {
          unsafe { Gauge_GetBackColor(self.0) }
      }

      pub fn SetBackColor(&self, aValue: TColor)  {
          unsafe { Gauge_SetBackColor(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { Gauge_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { Gauge_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Gauge_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Gauge_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Gauge_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Gauge_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Gauge_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Gauge_SetEnabled(self.0, aValue) }
      }

      pub fn ForeColor(&self) -> TColor  {
          unsafe { Gauge_GetForeColor(self.0) }
      }

      pub fn SetForeColor(&self, aValue: TColor)  {
          unsafe { Gauge_SetForeColor(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Gauge_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Gauge_SetFont(self.0, aValue.Instance()) }
      }

      pub fn MinValue(&self) -> i32  {
          unsafe { Gauge_GetMinValue(self.0) }
      }

      pub fn SetMinValue(&self, aValue: i32)  {
          unsafe { Gauge_SetMinValue(self.0, aValue) }
      }

      pub fn MaxValue(&self) -> i32  {
          unsafe { Gauge_GetMaxValue(self.0) }
      }

      pub fn SetMaxValue(&self, aValue: i32)  {
          unsafe { Gauge_SetMaxValue(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Gauge_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Gauge_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Gauge_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Gauge_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Gauge_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Gauge_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Gauge_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Gauge_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Progress(&self) -> i32  {
          unsafe { Gauge_GetProgress(self.0) }
      }

      pub fn SetProgress(&self, aValue: i32)  {
          unsafe { Gauge_SetProgress(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Gauge_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Gauge_SetShowHint(self.0, aValue) }
      }

      pub fn ShowText(&self) -> bool  {
          unsafe { Gauge_GetShowText(self.0) }
      }

      pub fn SetShowText(&self, aValue: bool)  {
          unsafe { Gauge_SetShowText(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Gauge_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Gauge_SetVisible(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Gauge_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Gauge_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Gauge_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Gauge_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Gauge_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Gauge_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Gauge_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Gauge_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Gauge_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Gauge_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Gauge_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Gauge_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Gauge_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Gauge_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Gauge_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Gauge_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Gauge_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Gauge_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Gauge_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Gauge_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Gauge_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Gauge_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Gauge_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Gauge_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Gauge_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Gauge_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Gauge_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Gauge_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Gauge_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Gauge_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Gauge_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Gauge_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Gauge_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Gauge_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Gauge_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Gauge_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Gauge_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Gauge_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Gauge_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Gauge_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Gauge_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Gauge_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Gauge_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Gauge_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Gauge_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Gauge_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Gauge_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Gauge_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Gauge_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Gauge_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Gauge_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Gauge_StaticClassType() }
      }
}

impl IObject for TGauge {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TGauge {}
impl IControl for TGauge {}

impl TImageButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TImageButton {
              0: unsafe { ImageButton_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TImageButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ImageButton_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Click(&self)  {
          unsafe { ImageButton_Click(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ImageButton_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ImageButton_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ImageButton_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ImageButton_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ImageButton_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ImageButton_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { ImageButton_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ImageButton_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ImageButton_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ImageButton_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ImageButton_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ImageButton_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ImageButton_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ImageButton_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { ImageButton_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ImageButton_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ImageButton_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ImageButton_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ImageButton_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ImageButton_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageButton_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ImageButton_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ImageButton_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageButton_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ImageButton_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ImageButton_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ImageButton_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ImageButton_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ImageButton_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ImageButton_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ImageButton_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ImageButton_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ImageButton_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ImageButton_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ImageButton_AnchorClient(self.0, aSpace) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ImageButton_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ImageButton_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ImageButton_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ImageButton_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ImageButton_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ImageButton_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ImageButton_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ImageButton_SetAutoSize(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ImageButton_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ImageButton_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ImageButton_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ImageButton_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ImageButton_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ImageButton_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ImageButton_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ImageButton_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ImageButton_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ImageButton_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ImageButton_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ImageButton_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ImageButton_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ImageButton_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ImageCount(&self) -> i32  {
          unsafe { ImageButton_GetImageCount(self.0) }
      }

      pub fn SetImageCount(&self, aValue: i32)  {
          unsafe { ImageButton_SetImageCount(self.0, aValue) }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { ImageButton_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { ImageButton_SetModalResult(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ImageButton_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ImageButton_SetParentShowHint(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ImageButton_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ImageButton_SetParentFont(self.0, aValue) }
      }

      pub fn Picture(&self) -> TPicture  {
          TPicture {
              0: unsafe { ImageButton_GetPicture(self.0) }
              , 1: false,
          }
      }

      pub fn SetPicture(&self, aValue: &TPicture)  {
          unsafe { ImageButton_SetPicture(self.0, aValue.Instance()) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ImageButton_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ImageButton_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ImageButton_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ImageButton_SetShowHint(self.0, aValue) }
      }

      pub fn ShowCaption(&self) -> bool  {
          unsafe { ImageButton_GetShowCaption(self.0) }
      }

      pub fn SetShowCaption(&self, aValue: bool)  {
          unsafe { ImageButton_SetShowCaption(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ImageButton_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ImageButton_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ImageButton_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ImageButton_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ImageButton_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ImageButton_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ImageButton_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { ImageButton_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ImageButton_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ImageButton_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ImageButton_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ImageButton_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ImageButton_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ImageButton_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ImageButton_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ImageButton_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ImageButton_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ImageButton_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ImageButton_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ImageButton_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ImageButton_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ImageButton_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ImageButton_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ImageButton_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ImageButton_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ImageButton_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ImageButton_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ImageButton_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ImageButton_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ImageButton_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ImageButton_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ImageButton_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ImageButton_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ImageButton_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ImageButton_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ImageButton_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ImageButton_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ImageButton_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ImageButton_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ImageButton_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ImageButton_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ImageButton_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ImageButton_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ImageButton_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ImageButton_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ImageButton_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ImageButton_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ImageButton_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ImageButton_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ImageButton_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ImageButton_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ImageButton_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ImageButton_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ImageButton_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ImageButton_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ImageButton_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ImageButton_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ImageButton_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ImageButton_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ImageButton_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ImageButton_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ImageButton_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ImageButton_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ImageButton_StaticClassType() }
      }
}

impl IObject for TImageButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TImageButton {}
impl IControl for TImageButton {}

impl TFindDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TFindDialog {
              0: unsafe { FindDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TFindDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  FindDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CloseDialog(&self)  {
          unsafe { FindDialog_CloseDialog(self.0) }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { FindDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { FindDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FindDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { FindDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { FindDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { FindDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FindDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { FindDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { FindDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { FindDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { FindDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FindDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Left(&self) -> i32  {
          unsafe { FindDialog_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { FindDialog_SetLeft(self.0, aValue) }
      }

      pub fn Position(&self, result: *mut TPoint)  {
          unsafe { FindDialog_GetPosition(self.0, result) }
      }

      pub fn SetPosition(&self, aValue: *mut TPoint)  {
          unsafe { FindDialog_SetPosition(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { FindDialog_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { FindDialog_SetTop(self.0, aValue) }
      }

      pub fn FindText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FindDialog_GetFindText(self.0)).to_string_lossy()  }
      }

      pub fn SetFindText(&self, aValue: &str)  {
          unsafe { FindDialog_SetFindText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TFindOptions  {
          unsafe { FindDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TFindOptions)  {
          unsafe { FindDialog_SetOptions(self.0, aValue) }
      }

      pub fn SetOnFind(&self, aEventId: TNotifyEvent)  {
          unsafe { FindDialog_SetOnFind(self.0, aEventId) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { FindDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { FindDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { FindDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { FindDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { FindDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { FindDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { FindDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FindDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { FindDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { FindDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { FindDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { FindDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { FindDialog_StaticClassType() }
      }
}

impl IObject for TFindDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TFindDialog {}

impl TReplaceDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TReplaceDialog {
              0: unsafe { ReplaceDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TReplaceDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ReplaceDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CloseDialog(&self)  {
          unsafe { ReplaceDialog_CloseDialog(self.0) }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { ReplaceDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ReplaceDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ReplaceDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ReplaceDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ReplaceDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ReplaceDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ReplaceDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ReplaceDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ReplaceDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ReplaceDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ReplaceDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ReplaceDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ReplaceText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ReplaceDialog_GetReplaceText(self.0)).to_string_lossy()  }
      }

      pub fn SetReplaceText(&self, aValue: &str)  {
          unsafe { ReplaceDialog_SetReplaceText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn SetOnReplace(&self, aEventId: TNotifyEvent)  {
          unsafe { ReplaceDialog_SetOnReplace(self.0, aEventId) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ReplaceDialog_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ReplaceDialog_SetLeft(self.0, aValue) }
      }

      pub fn Position(&self, result: *mut TPoint)  {
          unsafe { ReplaceDialog_GetPosition(self.0, result) }
      }

      pub fn SetPosition(&self, aValue: *mut TPoint)  {
          unsafe { ReplaceDialog_SetPosition(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ReplaceDialog_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ReplaceDialog_SetTop(self.0, aValue) }
      }

      pub fn FindText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ReplaceDialog_GetFindText(self.0)).to_string_lossy()  }
      }

      pub fn SetFindText(&self, aValue: &str)  {
          unsafe { ReplaceDialog_SetFindText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Options(&self) -> TFindOptions  {
          unsafe { ReplaceDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TFindOptions)  {
          unsafe { ReplaceDialog_SetOptions(self.0, aValue) }
      }

      pub fn SetOnFind(&self, aEventId: TNotifyEvent)  {
          unsafe { ReplaceDialog_SetOnFind(self.0, aEventId) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ReplaceDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { ReplaceDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { ReplaceDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ReplaceDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ReplaceDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ReplaceDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ReplaceDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ReplaceDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ReplaceDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ReplaceDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ReplaceDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ReplaceDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ReplaceDialog_StaticClassType() }
      }
}

impl IObject for TReplaceDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TReplaceDialog {}

impl TPrinterSetupDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPrinterSetupDialog {
              0: unsafe { PrinterSetupDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPrinterSetupDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PrinterSetupDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { PrinterSetupDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PrinterSetupDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrinterSetupDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PrinterSetupDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PrinterSetupDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PrinterSetupDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrinterSetupDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PrinterSetupDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PrinterSetupDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PrinterSetupDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PrinterSetupDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PrinterSetupDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { PrinterSetupDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { PrinterSetupDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { PrinterSetupDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PrinterSetupDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PrinterSetupDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PrinterSetupDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PrinterSetupDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PrinterSetupDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PrinterSetupDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PrinterSetupDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PrinterSetupDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PrinterSetupDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PrinterSetupDialog_StaticClassType() }
      }
}

impl IObject for TPrinterSetupDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPrinterSetupDialog {}

impl TPageSetupDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TPageSetupDialog {
              0: unsafe { PageSetupDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPageSetupDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  PageSetupDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { PageSetupDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { PageSetupDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageSetupDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { PageSetupDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { PageSetupDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { PageSetupDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageSetupDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { PageSetupDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { PageSetupDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { PageSetupDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { PageSetupDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(PageSetupDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn MarginLeft(&self) -> i32  {
          unsafe { PageSetupDialog_GetMarginLeft(self.0) }
      }

      pub fn SetMarginLeft(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetMarginLeft(self.0, aValue) }
      }

      pub fn MarginTop(&self) -> i32  {
          unsafe { PageSetupDialog_GetMarginTop(self.0) }
      }

      pub fn SetMarginTop(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetMarginTop(self.0, aValue) }
      }

      pub fn MarginRight(&self) -> i32  {
          unsafe { PageSetupDialog_GetMarginRight(self.0) }
      }

      pub fn SetMarginRight(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetMarginRight(self.0, aValue) }
      }

      pub fn MarginBottom(&self) -> i32  {
          unsafe { PageSetupDialog_GetMarginBottom(self.0) }
      }

      pub fn SetMarginBottom(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetMarginBottom(self.0, aValue) }
      }

      pub fn Options(&self) -> TPageSetupDialogOptions  {
          unsafe { PageSetupDialog_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TPageSetupDialogOptions)  {
          unsafe { PageSetupDialog_SetOptions(self.0, aValue) }
      }

      pub fn PageWidth(&self) -> i32  {
          unsafe { PageSetupDialog_GetPageWidth(self.0) }
      }

      pub fn SetPageWidth(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetPageWidth(self.0, aValue) }
      }

      pub fn PageHeight(&self) -> i32  {
          unsafe { PageSetupDialog_GetPageHeight(self.0) }
      }

      pub fn SetPageHeight(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetPageHeight(self.0, aValue) }
      }

      pub fn Units(&self) -> TPageMeasureUnits  {
          unsafe { PageSetupDialog_GetUnits(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { PageSetupDialog_GetHandle(self.0) }
      }

      pub fn SetOnClose(&self, aEventId: TNotifyEvent)  {
          unsafe { PageSetupDialog_SetOnClose(self.0, aEventId) }
      }

      pub fn SetOnShow(&self, aEventId: TNotifyEvent)  {
          unsafe { PageSetupDialog_SetOnShow(self.0, aEventId) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { PageSetupDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { PageSetupDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { PageSetupDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { PageSetupDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(PageSetupDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { PageSetupDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { PageSetupDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { PageSetupDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { PageSetupDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { PageSetupDialog_StaticClassType() }
      }
}

impl IObject for TPageSetupDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TPageSetupDialog {}

impl TDragObject {
      pub fn new(aOwner: &dyn IControl) -> Self {
          TDragObject {
              0: unsafe { DragObject_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TDragObject { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  DragObject_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &TDragObject)  {
          unsafe { DragObject_Assign(self.0, source.Instance()) }
      }

      pub fn HideDragImage(&self)  {
          unsafe { DragObject_HideDragImage(self.0) }
      }

      pub fn ShowDragImage(&self)  {
          unsafe { DragObject_ShowDragImage(self.0) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { DragObject_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DragObject_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { DragObject_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { DragObject_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { DragObject_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { DragObject_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DragObject_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AlwaysShowDragImages(&self) -> bool  {
          unsafe { DragObject_GetAlwaysShowDragImages(self.0) }
      }

      pub fn SetAlwaysShowDragImages(&self, aValue: bool)  {
          unsafe { DragObject_SetAlwaysShowDragImages(self.0, aValue) }
      }

      pub fn DragPos(&self, result: *mut TPoint)  {
          unsafe { DragObject_GetDragPos(self.0, result) }
      }

      pub fn SetDragPos(&self, aValue: *mut TPoint)  {
          unsafe { DragObject_SetDragPos(self.0, aValue) }
      }

      pub fn DragTarget(&self) -> usize  {
          unsafe { DragObject_GetDragTarget(self.0) }
      }

      pub fn SetDragTarget(&self, aValue: usize)  {
          unsafe { DragObject_SetDragTarget(self.0, aValue) }
      }

      pub fn DragTargetPos(&self, result: *mut TPoint)  {
          unsafe { DragObject_GetDragTargetPos(self.0, result) }
      }

      pub fn SetDragTargetPos(&self, aValue: *mut TPoint)  {
          unsafe { DragObject_SetDragTargetPos(self.0, aValue) }
      }

      pub fn Dropped(&self) -> bool  {
          unsafe { DragObject_GetDropped(self.0) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { DragObject_StaticClassType() }
      }
}

impl IObject for TDragObject {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TDragObject {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TDragDockObject {
      pub fn new(aOwner: &dyn IControl) -> Self {
          TDragDockObject {
              0: unsafe { DragDockObject_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TDragDockObject { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  DragDockObject_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &TDragObject)  {
          unsafe { DragDockObject_Assign(self.0, source.Instance()) }
      }

      pub fn HideDragImage(&self)  {
          unsafe { DragDockObject_HideDragImage(self.0) }
      }

      pub fn ShowDragImage(&self)  {
          unsafe { DragDockObject_ShowDragImage(self.0) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { DragDockObject_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DragDockObject_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { DragDockObject_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { DragDockObject_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { DragDockObject_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { DragDockObject_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DragDockObject_ToString(self.0)).to_string_lossy()  }
      }

      pub fn DockRect(&self, result: *mut TRect)  {
          unsafe { DragDockObject_GetDockRect(self.0, result) }
      }

      pub fn SetDockRect(&self, aValue: *mut TRect)  {
          unsafe { DragDockObject_SetDockRect(self.0, aValue) }
      }

      pub fn DropAlign(&self) -> TAlign  {
          unsafe { DragDockObject_GetDropAlign(self.0) }
      }

      pub fn DropOnControl(&self) -> TControl  {
          TControl {
              0: unsafe { DragDockObject_GetDropOnControl(self.0) }
              , 1: false,
          }
      }

      pub fn EraseDockRect(&self, result: *mut TRect)  {
          unsafe { DragDockObject_GetEraseDockRect(self.0, result) }
      }

      pub fn SetEraseDockRect(&self, aValue: *mut TRect)  {
          unsafe { DragDockObject_SetEraseDockRect(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { DragDockObject_GetFloating(self.0) }
      }

      pub fn SetFloating(&self, aValue: bool)  {
          unsafe { DragDockObject_SetFloating(self.0, aValue) }
      }

      pub fn Control(&self) -> TControl  {
          TControl {
              0: unsafe { DragDockObject_GetControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetControl(&self, aValue: &dyn IControl)  {
          unsafe { DragDockObject_SetControl(self.0, aValue.Instance()) }
      }

      pub fn AlwaysShowDragImages(&self) -> bool  {
          unsafe { DragDockObject_GetAlwaysShowDragImages(self.0) }
      }

      pub fn SetAlwaysShowDragImages(&self, aValue: bool)  {
          unsafe { DragDockObject_SetAlwaysShowDragImages(self.0, aValue) }
      }

      pub fn DragPos(&self, result: *mut TPoint)  {
          unsafe { DragDockObject_GetDragPos(self.0, result) }
      }

      pub fn SetDragPos(&self, aValue: *mut TPoint)  {
          unsafe { DragDockObject_SetDragPos(self.0, aValue) }
      }

      pub fn DragTarget(&self) -> usize  {
          unsafe { DragDockObject_GetDragTarget(self.0) }
      }

      pub fn SetDragTarget(&self, aValue: usize)  {
          unsafe { DragDockObject_SetDragTarget(self.0, aValue) }
      }

      pub fn DragTargetPos(&self, result: *mut TPoint)  {
          unsafe { DragDockObject_GetDragTargetPos(self.0, result) }
      }

      pub fn SetDragTargetPos(&self, aValue: *mut TPoint)  {
          unsafe { DragDockObject_SetDragTargetPos(self.0, aValue) }
      }

      pub fn Dropped(&self) -> bool  {
          unsafe { DragDockObject_GetDropped(self.0) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { DragDockObject_StaticClassType() }
      }
}

impl IObject for TDragDockObject {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TDragDockObject {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TStringGrid {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TStringGrid {
              0: unsafe { StringGrid_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TStringGrid { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  StringGrid_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn DeleteColRow(&self, isColumn: bool, index: i32)  {
          unsafe { StringGrid_DeleteColRow(self.0, isColumn, index) }
      }

      pub fn DeleteCol(&self, index: i32)  {
          unsafe { StringGrid_DeleteCol(self.0, index) }
      }

      pub fn DeleteRow(&self, index: i32)  {
          unsafe { StringGrid_DeleteRow(self.0, index) }
      }

      pub fn ExchangeColRow(&self, isColumn: bool, index: i32, withIndex: i32)  {
          unsafe { StringGrid_ExchangeColRow(self.0, isColumn, index, withIndex) }
      }

      pub fn InsertColRow(&self, isColumn: bool, index: i32)  {
          unsafe { StringGrid_InsertColRow(self.0, isColumn, index) }
      }

      pub fn MoveColRow(&self, isColumn: bool, fromIndex: i32, toIndex: i32)  {
          unsafe { StringGrid_MoveColRow(self.0, isColumn, fromIndex, toIndex) }
      }

      pub fn SortColRow(&self, isColumn: bool, index: i32, fromIndex: i32, toIndex: i32)  {
          unsafe { StringGrid_SortColRow(self.0, isColumn, index, fromIndex, toIndex) }
      }

      pub fn EditorByStyle(&self, style: TColumnButtonStyle) -> TWinControl  {
          TWinControl {
              0: unsafe { StringGrid_EditorByStyle(self.0, style) }
              , 1: false,
          }
      }

      pub fn EditorKeyDown(&self, sender: &dyn IObject, key: *mut u16, shift: TShiftState)  {
          unsafe { StringGrid_EditorKeyDown(self.0, sender.Instance(), key, shift) }
      }

      pub fn EditorKeyPress(&self, sender: &dyn IObject, key: *mut Char)  {
          unsafe { StringGrid_EditorKeyPress(self.0, sender.Instance(), key) }
      }

      pub fn EditorKeyUp(&self, sender: &dyn IObject, key: *mut u16, shift: TShiftState)  {
          unsafe { StringGrid_EditorKeyUp(self.0, sender.Instance(), key, shift) }
      }

      pub fn EditorTextChanged(&self, aCol: i32, aRow: i32, aText: &str)  {
          unsafe { StringGrid_EditorTextChanged(self.0, aCol, aRow, CString::new(aText).unwrap().as_ptr()) }
      }

      pub fn EditingDone(&self)  {
          unsafe { StringGrid_EditingDone(self.0) }
      }

      pub fn AutoAdjustColumns(&self)  {
          unsafe { StringGrid_AutoAdjustColumns(self.0) }
      }

      pub fn CellRect(&self, aCol: i32, aRow: i32, result: *mut TRect)  {
          unsafe { StringGrid_CellRect(self.0, aCol, aRow, result) }
      }

      pub fn CellToGridZone(&self, aCol: i32, aRow: i32) -> TGridZone  {
          unsafe { StringGrid_CellToGridZone(self.0, aCol, aRow) }
      }

      pub fn CheckPosition(&self)  {
          unsafe { StringGrid_CheckPosition(self.0) }
      }

      pub fn ClearCols(&self) -> bool  {
          unsafe { StringGrid_ClearCols(self.0) }
      }

      pub fn ClearRows(&self) -> bool  {
          unsafe { StringGrid_ClearRows(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { StringGrid_Clear(self.0) }
      }

      pub fn ClearSelections(&self)  {
          unsafe { StringGrid_ClearSelections(self.0) }
      }

      pub fn HasMultiSelection(&self) -> bool  {
          unsafe { StringGrid_HasMultiSelection(self.0) }
      }

      pub fn InvalidateCell(&self, aCol: i32, aRow: i32)  {
          unsafe { StringGrid_InvalidateCell(self.0, aCol, aRow) }
      }

      pub fn InvalidateCol(&self, aCol: i32)  {
          unsafe { StringGrid_InvalidateCol(self.0, aCol) }
      }

      pub fn InvalidateRange(&self, aRange: *mut TRect)  {
          unsafe { StringGrid_InvalidateRange(self.0, aRange) }
      }

      pub fn InvalidateRow(&self, aRow: i32)  {
          unsafe { StringGrid_InvalidateRow(self.0, aRow) }
      }

      pub fn IsCellVisible(&self, aCol: i32, aRow: i32) -> bool  {
          unsafe { StringGrid_IsCellVisible(self.0, aCol, aRow) }
      }

      pub fn IsFixedCellVisible(&self, aCol: i32, aRow: i32) -> bool  {
          unsafe { StringGrid_IsFixedCellVisible(self.0, aCol, aRow) }
      }

      pub fn MouseCoord(&self, x: i32, y: i32, result: *mut TGridCoord)  {
          unsafe { StringGrid_MouseCoord(self.0, x, y, result) }
      }

      pub fn MouseToCell(&self, mouse: *mut TPoint, result: *mut TPoint)  {
          unsafe { StringGrid_MouseToCell(self.0, mouse, result) }
      }

      pub fn MouseToLogcell(&self, mouse: *mut TPoint, result: *mut TPoint)  {
          unsafe { StringGrid_MouseToLogcell(self.0, mouse, result) }
      }

      pub fn MouseToGridZone(&self, x: i32, y: i32) -> TGridZone  {
          unsafe { StringGrid_MouseToGridZone(self.0, x, y) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { StringGrid_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { StringGrid_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { StringGrid_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { StringGrid_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { StringGrid_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { StringGrid_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { StringGrid_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { StringGrid_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { StringGrid_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { StringGrid_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { StringGrid_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { StringGrid_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { StringGrid_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { StringGrid_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { StringGrid_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { StringGrid_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { StringGrid_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { StringGrid_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { StringGrid_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { StringGrid_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StringGrid_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StringGrid_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { StringGrid_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { StringGrid_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { StringGrid_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { StringGrid_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { StringGrid_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { StringGrid_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { StringGrid_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { StringGrid_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { StringGrid_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { StringGrid_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { StringGrid_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { StringGrid_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { StringGrid_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StringGrid_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { StringGrid_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { StringGrid_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StringGrid_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { StringGrid_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { StringGrid_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { StringGrid_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { StringGrid_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(StringGrid_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StringGrid_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { StringGrid_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StringGrid_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { StringGrid_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { StringGrid_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { StringGrid_AnchorClient(self.0, aSpace) }
      }

      pub fn SelectedColor(&self) -> TColor  {
          unsafe { StringGrid_GetSelectedColor(self.0) }
      }

      pub fn SetSelectedColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetSelectedColor(self.0, aValue) }
      }

      pub fn SelectedColumn(&self) -> TGridColumn  {
          TGridColumn {
              0: unsafe { StringGrid_GetSelectedColumn(self.0) }
              , 1: false,
          }
      }

      pub fn StrictSort(&self) -> bool  {
          unsafe { StringGrid_GetStrictSort(self.0) }
      }

      pub fn SetStrictSort(&self, aValue: bool)  {
          unsafe { StringGrid_SetStrictSort(self.0, aValue) }
      }

      pub fn FixedHotColor(&self) -> TColor  {
          unsafe { StringGrid_GetFixedHotColor(self.0) }
      }

      pub fn SetFixedHotColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetFixedHotColor(self.0, aValue) }
      }

      pub fn FastEditing(&self) -> bool  {
          unsafe { StringGrid_GetFastEditing(self.0) }
      }

      pub fn SetFastEditing(&self, aValue: bool)  {
          unsafe { StringGrid_SetFastEditing(self.0, aValue) }
      }

      pub fn FixedGridLineColor(&self) -> TColor  {
          unsafe { StringGrid_GetFixedGridLineColor(self.0) }
      }

      pub fn SetFixedGridLineColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetFixedGridLineColor(self.0, aValue) }
      }

      pub fn FocusColor(&self) -> TColor  {
          unsafe { StringGrid_GetFocusColor(self.0) }
      }

      pub fn SetFocusColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetFocusColor(self.0, aValue) }
      }

      pub fn FocusRectVisible(&self) -> bool  {
          unsafe { StringGrid_GetFocusRectVisible(self.0) }
      }

      pub fn SetFocusRectVisible(&self, aValue: bool)  {
          unsafe { StringGrid_SetFocusRectVisible(self.0, aValue) }
      }

      pub fn GridLineColor(&self) -> TColor  {
          unsafe { StringGrid_GetGridLineColor(self.0) }
      }

      pub fn SetGridLineColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetGridLineColor(self.0, aValue) }
      }

      pub fn GridLineStyle(&self) -> TPenStyle  {
          unsafe { StringGrid_GetGridLineStyle(self.0) }
      }

      pub fn SetGridLineStyle(&self, aValue: TPenStyle)  {
          unsafe { StringGrid_SetGridLineStyle(self.0, aValue) }
      }

      pub fn Editor(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { StringGrid_GetEditor(self.0) }
              , 1: false,
          }
      }

      pub fn SetEditor(&self, aValue: &dyn IWinControl)  {
          unsafe { StringGrid_SetEditor(self.0, aValue.Instance()) }
      }

      pub fn EditorBorderStyle(&self) -> TBorderStyle  {
          unsafe { StringGrid_GetEditorBorderStyle(self.0) }
      }

      pub fn SetEditorBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { StringGrid_SetEditorBorderStyle(self.0, aValue) }
      }

      pub fn EditorMode(&self) -> bool  {
          unsafe { StringGrid_GetEditorMode(self.0) }
      }

      pub fn SetEditorMode(&self, aValue: bool)  {
          unsafe { StringGrid_SetEditorMode(self.0, aValue) }
      }

      pub fn SortOrder(&self) -> TSortOrder  {
          unsafe { StringGrid_GetSortOrder(self.0) }
      }

      pub fn SetSortOrder(&self, aValue: TSortOrder)  {
          unsafe { StringGrid_SetSortOrder(self.0, aValue) }
      }

      pub fn SortColumn(&self) -> i32  {
          unsafe { StringGrid_GetSortColumn(self.0) }
      }

      pub fn SetOnAfterSelection(&self, aEventId: TOnSelectEvent)  {
          unsafe { StringGrid_SetOnAfterSelection(self.0, aEventId) }
      }

      pub fn SetOnBeforeSelection(&self, aEventId: TOnSelectEvent)  {
          unsafe { StringGrid_SetOnBeforeSelection(self.0, aEventId) }
      }

      pub fn SetOnButtonClick(&self, aEventId: TOnSelectEvent)  {
          unsafe { StringGrid_SetOnButtonClick(self.0, aEventId) }
      }

      pub fn SetOnCheckboxToggled(&self, aEventId: TToggledCheckboxEvent)  {
          unsafe { StringGrid_SetOnCheckboxToggled(self.0, aEventId) }
      }

      pub fn SetOnColRowDeleted(&self, aEventId: TGridOperationEvent)  {
          unsafe { StringGrid_SetOnColRowDeleted(self.0, aEventId) }
      }

      pub fn SetOnColRowExchanged(&self, aEventId: TGridOperationEvent)  {
          unsafe { StringGrid_SetOnColRowExchanged(self.0, aEventId) }
      }

      pub fn SetOnColRowInserted(&self, aEventId: TGridOperationEvent)  {
          unsafe { StringGrid_SetOnColRowInserted(self.0, aEventId) }
      }

      pub fn SetOnColRowMoved(&self, aEventId: TGridOperationEvent)  {
          unsafe { StringGrid_SetOnColRowMoved(self.0, aEventId) }
      }

      pub fn SetOnCompareCells(&self, aEventId: TOnCompareCells)  {
          unsafe { StringGrid_SetOnCompareCells(self.0, aEventId) }
      }

      pub fn SetOnEditingDone(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnEditingDone(self.0, aEventId) }
      }

      pub fn SetOnGetCellHint(&self, aEventId: TGetCellHintEvent)  {
          unsafe { StringGrid_SetOnGetCellHint(self.0, aEventId) }
      }

      pub fn SetOnGetCheckboxState(&self, aEventId: TGetCheckboxStateEvent)  {
          unsafe { StringGrid_SetOnGetCheckboxState(self.0, aEventId) }
      }

      pub fn SetOnSetCheckboxState(&self, aEventId: TSetCheckboxStateEvent)  {
          unsafe { StringGrid_SetOnSetCheckboxState(self.0, aEventId) }
      }

      pub fn SetOnHeaderClick(&self, aEventId: THdrEvent)  {
          unsafe { StringGrid_SetOnHeaderClick(self.0, aEventId) }
      }

      pub fn SetOnHeaderSized(&self, aEventId: THdrEvent)  {
          unsafe { StringGrid_SetOnHeaderSized(self.0, aEventId) }
      }

      pub fn SetOnHeaderSizing(&self, aEventId: THeaderSizingEvent)  {
          unsafe { StringGrid_SetOnHeaderSizing(self.0, aEventId) }
      }

      pub fn SetOnPickListSelect(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnPickListSelect(self.0, aEventId) }
      }

      pub fn SetOnSelection(&self, aEventId: TOnSelectEvent)  {
          unsafe { StringGrid_SetOnSelection(self.0, aEventId) }
      }

      pub fn SetOnSelectEditor(&self, aEventId: TSelectEditorEvent)  {
          unsafe { StringGrid_SetOnSelectEditor(self.0, aEventId) }
      }

      pub fn SetOnUserCheckboxBitmap(&self, aEventId: TUserCheckBoxBitmapEvent)  {
          unsafe { StringGrid_SetOnUserCheckboxBitmap(self.0, aEventId) }
      }

      pub fn SetOnValidateEntry(&self, aEventId: TValidateEntryEvent)  {
          unsafe { StringGrid_SetOnValidateEntry(self.0, aEventId) }
      }

      pub fn AlternateColor(&self) -> TColor  {
          unsafe { StringGrid_GetAlternateColor(self.0) }
      }

      pub fn SetAlternateColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetAlternateColor(self.0, aValue) }
      }

      pub fn AutoAdvance(&self) -> TAutoAdvance  {
          unsafe { StringGrid_GetAutoAdvance(self.0) }
      }

      pub fn SetAutoAdvance(&self, aValue: TAutoAdvance)  {
          unsafe { StringGrid_SetAutoAdvance(self.0, aValue) }
      }

      pub fn AutoEdit(&self) -> bool  {
          unsafe { StringGrid_GetAutoEdit(self.0) }
      }

      pub fn SetAutoEdit(&self, aValue: bool)  {
          unsafe { StringGrid_SetAutoEdit(self.0, aValue) }
      }

      pub fn AutoFillColumns(&self) -> bool  {
          unsafe { StringGrid_GetAutoFillColumns(self.0) }
      }

      pub fn SetAutoFillColumns(&self, aValue: bool)  {
          unsafe { StringGrid_SetAutoFillColumns(self.0, aValue) }
      }

      pub fn CellHintPriority(&self) -> TCellHintPriority  {
          unsafe { StringGrid_GetCellHintPriority(self.0) }
      }

      pub fn SetCellHintPriority(&self, aValue: TCellHintPriority)  {
          unsafe { StringGrid_SetCellHintPriority(self.0, aValue) }
      }

      pub fn ColumnClickSorts(&self) -> bool  {
          unsafe { StringGrid_GetColumnClickSorts(self.0) }
      }

      pub fn SetColumnClickSorts(&self, aValue: bool)  {
          unsafe { StringGrid_SetColumnClickSorts(self.0, aValue) }
      }

      pub fn Columns(&self) -> TGridColumns  {
          TGridColumns {
              0: unsafe { StringGrid_GetColumns(self.0) }
              , 1: false,
          }
      }

      pub fn SetColumns(&self, aValue: &TGridColumns)  {
          unsafe { StringGrid_SetColumns(self.0, aValue.Instance()) }
      }

      pub fn ExtendedSelect(&self) -> bool  {
          unsafe { StringGrid_GetExtendedSelect(self.0) }
      }

      pub fn SetExtendedSelect(&self, aValue: bool)  {
          unsafe { StringGrid_SetExtendedSelect(self.0, aValue) }
      }

      pub fn Flat(&self) -> bool  {
          unsafe { StringGrid_GetFlat(self.0) }
      }

      pub fn SetFlat(&self, aValue: bool)  {
          unsafe { StringGrid_SetFlat(self.0, aValue) }
      }

      pub fn HeaderHotZones(&self) -> TGridZoneSet  {
          unsafe { StringGrid_GetHeaderHotZones(self.0) }
      }

      pub fn SetHeaderHotZones(&self, aValue: TGridZoneSet)  {
          unsafe { StringGrid_SetHeaderHotZones(self.0, aValue) }
      }

      pub fn HeaderPushZones(&self) -> TGridZoneSet  {
          unsafe { StringGrid_GetHeaderPushZones(self.0) }
      }

      pub fn SetHeaderPushZones(&self, aValue: TGridZoneSet)  {
          unsafe { StringGrid_SetHeaderPushZones(self.0, aValue) }
      }

      pub fn ImageIndexSortAsc(&self) -> i32  {
          unsafe { StringGrid_GetImageIndexSortAsc(self.0) }
      }

      pub fn SetImageIndexSortAsc(&self, aValue: i32)  {
          unsafe { StringGrid_SetImageIndexSortAsc(self.0, aValue) }
      }

      pub fn ImageIndexSortDesc(&self) -> i32  {
          unsafe { StringGrid_GetImageIndexSortDesc(self.0) }
      }

      pub fn SetImageIndexSortDesc(&self, aValue: i32)  {
          unsafe { StringGrid_SetImageIndexSortDesc(self.0, aValue) }
      }

      pub fn MouseWheelOption(&self) -> TMouseWheelOption  {
          unsafe { StringGrid_GetMouseWheelOption(self.0) }
      }

      pub fn SetMouseWheelOption(&self, aValue: TMouseWheelOption)  {
          unsafe { StringGrid_SetMouseWheelOption(self.0, aValue) }
      }

      pub fn Options2(&self) -> TGridOptions2  {
          unsafe { StringGrid_GetOptions2(self.0) }
      }

      pub fn SetOptions2(&self, aValue: TGridOptions2)  {
          unsafe { StringGrid_SetOptions2(self.0, aValue) }
      }

      pub fn RangeSelectMode(&self) -> TRangeSelectMode  {
          unsafe { StringGrid_GetRangeSelectMode(self.0) }
      }

      pub fn SetRangeSelectMode(&self, aValue: TRangeSelectMode)  {
          unsafe { StringGrid_SetRangeSelectMode(self.0, aValue) }
      }

      pub fn TabAdvance(&self) -> TAutoAdvance  {
          unsafe { StringGrid_GetTabAdvance(self.0) }
      }

      pub fn SetTabAdvance(&self, aValue: TAutoAdvance)  {
          unsafe { StringGrid_SetTabAdvance(self.0, aValue) }
      }

      pub fn TitleFont(&self) -> TFont  {
          TFont {
              0: unsafe { StringGrid_GetTitleFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetTitleFont(&self, aValue: &TFont)  {
          unsafe { StringGrid_SetTitleFont(self.0, aValue.Instance()) }
      }

      pub fn TitleImageList(&self) -> TImageList  {
          TImageList {
              0: unsafe { StringGrid_GetTitleImageList(self.0) }
              , 1: false,
          }
      }

      pub fn SetTitleImageList(&self, aValue: &TImageList)  {
          unsafe { StringGrid_SetTitleImageList(self.0, aValue.Instance()) }
      }

      pub fn TitleStyle(&self) -> TTitleStyle  {
          unsafe { StringGrid_GetTitleStyle(self.0) }
      }

      pub fn SetTitleStyle(&self, aValue: TTitleStyle)  {
          unsafe { StringGrid_SetTitleStyle(self.0, aValue) }
      }

      pub fn UseXORFeatures(&self) -> bool  {
          unsafe { StringGrid_GetUseXORFeatures(self.0) }
      }

      pub fn SetUseXORFeatures(&self, aValue: bool)  {
          unsafe { StringGrid_SetUseXORFeatures(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { StringGrid_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { StringGrid_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { StringGrid_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { StringGrid_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { StringGrid_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { StringGrid_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { StringGrid_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { StringGrid_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { StringGrid_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetColor(self.0, aValue) }
      }

      pub fn ColCount(&self) -> i32  {
          unsafe { StringGrid_GetColCount(self.0) }
      }

      pub fn SetColCount(&self, aValue: i32)  {
          unsafe { StringGrid_SetColCount(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { StringGrid_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { StringGrid_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DefaultColWidth(&self) -> i32  {
          unsafe { StringGrid_GetDefaultColWidth(self.0) }
      }

      pub fn SetDefaultColWidth(&self, aValue: i32)  {
          unsafe { StringGrid_SetDefaultColWidth(self.0, aValue) }
      }

      pub fn DefaultRowHeight(&self) -> i32  {
          unsafe { StringGrid_GetDefaultRowHeight(self.0) }
      }

      pub fn SetDefaultRowHeight(&self, aValue: i32)  {
          unsafe { StringGrid_SetDefaultRowHeight(self.0, aValue) }
      }

      pub fn DefaultDrawing(&self) -> bool  {
          unsafe { StringGrid_GetDefaultDrawing(self.0) }
      }

      pub fn SetDefaultDrawing(&self, aValue: bool)  {
          unsafe { StringGrid_SetDefaultDrawing(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { StringGrid_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { StringGrid_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { StringGrid_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { StringGrid_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { StringGrid_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { StringGrid_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { StringGrid_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { StringGrid_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { StringGrid_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { StringGrid_SetEnabled(self.0, aValue) }
      }

      pub fn FixedColor(&self) -> TColor  {
          unsafe { StringGrid_GetFixedColor(self.0) }
      }

      pub fn SetFixedColor(&self, aValue: TColor)  {
          unsafe { StringGrid_SetFixedColor(self.0, aValue) }
      }

      pub fn FixedCols(&self) -> i32  {
          unsafe { StringGrid_GetFixedCols(self.0) }
      }

      pub fn SetFixedCols(&self, aValue: i32)  {
          unsafe { StringGrid_SetFixedCols(self.0, aValue) }
      }

      pub fn RowCount(&self) -> i32  {
          unsafe { StringGrid_GetRowCount(self.0) }
      }

      pub fn SetRowCount(&self, aValue: i32)  {
          unsafe { StringGrid_SetRowCount(self.0, aValue) }
      }

      pub fn FixedRows(&self) -> i32  {
          unsafe { StringGrid_GetFixedRows(self.0) }
      }

      pub fn SetFixedRows(&self, aValue: i32)  {
          unsafe { StringGrid_SetFixedRows(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { StringGrid_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { StringGrid_SetFont(self.0, aValue.Instance()) }
      }

      pub fn GridLineWidth(&self) -> i32  {
          unsafe { StringGrid_GetGridLineWidth(self.0) }
      }

      pub fn SetGridLineWidth(&self, aValue: i32)  {
          unsafe { StringGrid_SetGridLineWidth(self.0, aValue) }
      }

      pub fn Options(&self) -> TGridOptions  {
          unsafe { StringGrid_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TGridOptions)  {
          unsafe { StringGrid_SetOptions(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { StringGrid_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { StringGrid_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { StringGrid_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { StringGrid_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { StringGrid_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { StringGrid_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { StringGrid_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { StringGrid_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { StringGrid_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { StringGrid_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { StringGrid_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { StringGrid_SetScrollBars(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { StringGrid_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { StringGrid_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { StringGrid_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { StringGrid_SetTabOrder(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { StringGrid_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { StringGrid_SetVisible(self.0, aValue) }
      }

      pub fn VisibleColCount(&self) -> i32  {
          unsafe { StringGrid_GetVisibleColCount(self.0) }
      }

      pub fn VisibleRowCount(&self) -> i32  {
          unsafe { StringGrid_GetVisibleRowCount(self.0) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { StringGrid_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { StringGrid_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { StringGrid_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnDrawCell(&self, aEventId: TDrawCellEvent)  {
          unsafe { StringGrid_SetOnDrawCell(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { StringGrid_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { StringGrid_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetEditMask(&self, aEventId: TGetEditEvent)  {
          unsafe { StringGrid_SetOnGetEditMask(self.0, aEventId) }
      }

      pub fn SetOnGetEditText(&self, aEventId: TGetEditEvent)  {
          unsafe { StringGrid_SetOnGetEditText(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { StringGrid_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { StringGrid_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { StringGrid_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { StringGrid_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { StringGrid_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { StringGrid_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { StringGrid_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { StringGrid_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnSelectCell(&self, aEventId: TSelectCellEvent)  {
          unsafe { StringGrid_SetOnSelectCell(self.0, aEventId) }
      }

      pub fn SetOnSetEditText(&self, aEventId: TSetEditEvent)  {
          unsafe { StringGrid_SetOnSetEditText(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { StringGrid_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnTopLeftChanged(&self, aEventId: TNotifyEvent)  {
          unsafe { StringGrid_SetOnTopLeftChanged(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { StringGrid_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Col(&self) -> i32  {
          unsafe { StringGrid_GetCol(self.0) }
      }

      pub fn SetCol(&self, aValue: i32)  {
          unsafe { StringGrid_SetCol(self.0, aValue) }
      }

      pub fn GridHeight(&self) -> i32  {
          unsafe { StringGrid_GetGridHeight(self.0) }
      }

      pub fn GridWidth(&self) -> i32  {
          unsafe { StringGrid_GetGridWidth(self.0) }
      }

      pub fn LeftCol(&self) -> i32  {
          unsafe { StringGrid_GetLeftCol(self.0) }
      }

      pub fn SetLeftCol(&self, aValue: i32)  {
          unsafe { StringGrid_SetLeftCol(self.0, aValue) }
      }

      pub fn Selection(&self, result: *mut TGridRect)  {
          unsafe { StringGrid_GetSelection(self.0, result) }
      }

      pub fn SetSelection(&self, aValue: *mut TGridRect)  {
          unsafe { StringGrid_SetSelection(self.0, aValue) }
      }

      pub fn Row(&self) -> i32  {
          unsafe { StringGrid_GetRow(self.0) }
      }

      pub fn SetRow(&self, aValue: i32)  {
          unsafe { StringGrid_SetRow(self.0, aValue) }
      }

      pub fn TopRow(&self) -> i32  {
          unsafe { StringGrid_GetTopRow(self.0) }
      }

      pub fn SetTopRow(&self, aValue: i32)  {
          unsafe { StringGrid_SetTopRow(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { StringGrid_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { StringGrid_SetTabStop(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { StringGrid_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { StringGrid_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { StringGrid_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { StringGrid_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { StringGrid_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { StringGrid_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { StringGrid_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { StringGrid_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { StringGrid_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { StringGrid_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { StringGrid_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { StringGrid_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { StringGrid_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { StringGrid_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { StringGrid_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { StringGrid_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { StringGrid_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { StringGrid_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { StringGrid_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { StringGrid_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { StringGrid_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { StringGrid_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { StringGrid_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { StringGrid_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { StringGrid_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { StringGrid_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { StringGrid_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { StringGrid_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { StringGrid_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { StringGrid_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { StringGrid_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { StringGrid_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { StringGrid_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { StringGrid_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { StringGrid_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { StringGrid_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { StringGrid_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { StringGrid_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { StringGrid_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { StringGrid_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringGrid_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { StringGrid_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { StringGrid_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { StringGrid_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { StringGrid_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { StringGrid_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringGrid_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { StringGrid_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { StringGrid_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { StringGrid_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StringGrid_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { StringGrid_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StringGrid_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { StringGrid_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StringGrid_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { StringGrid_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StringGrid_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { StringGrid_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { StringGrid_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { StringGrid_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { StringGrid_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { StringGrid_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn IsCellSelected(&self, aCol: i32, aRow: i32) -> bool  {
          unsafe { StringGrid_GetIsCellSelected(self.0, aCol, aRow) }
      }

      pub fn Cells<'a>(&self, aCol: i32, aRow: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(StringGrid_GetCells(self.0, aCol, aRow)).to_string_lossy()  }
      }

      pub fn SetCells(&self, aCol: i32, aRow: i32, aValue: &str)  {
          unsafe { StringGrid_SetCells(self.0, aCol, aRow, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Cols(&self, index: i32) -> TStrings  {
          TStrings {
              0: unsafe { StringGrid_GetCols(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetCols(&self, index: i32, aValue: &TStrings)  {
          unsafe { StringGrid_SetCols(self.0, index, aValue.Instance()) }
      }

      pub fn Objects(&self, aCol: i32, aRow: i32) -> TObject  {
          TObject {
              0: unsafe { StringGrid_GetObjects(self.0, aCol, aRow) }
              , 1: false,
          }
      }

      pub fn SetObjects(&self, aCol: i32, aRow: i32, aValue: &dyn IObject)  {
          unsafe { StringGrid_SetObjects(self.0, aCol, aRow, aValue.Instance()) }
      }

      pub fn Rows(&self, index: i32) -> TStrings  {
          TStrings {
              0: unsafe { StringGrid_GetRows(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetRows(&self, index: i32, aValue: &TStrings)  {
          unsafe { StringGrid_SetRows(self.0, index, aValue.Instance()) }
      }

      pub fn ColWidths(&self, index: i32) -> i32  {
          unsafe { StringGrid_GetColWidths(self.0, index) }
      }

      pub fn SetColWidths(&self, index: i32, aValue: i32)  {
          unsafe { StringGrid_SetColWidths(self.0, index, aValue) }
      }

      pub fn RowHeights(&self, index: i32) -> i32  {
          unsafe { StringGrid_GetRowHeights(self.0, index) }
      }

      pub fn SetRowHeights(&self, index: i32, aValue: i32)  {
          unsafe { StringGrid_SetRowHeights(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StringGrid_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { StringGrid_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { StringGrid_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { StringGrid_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { StringGrid_StaticClassType() }
      }
}

impl IObject for TStringGrid {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TStringGrid {}
impl IControl for TStringGrid {}
impl IWinControl for TStringGrid {}

impl TDrawGrid {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TDrawGrid {
              0: unsafe { DrawGrid_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TDrawGrid { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  DrawGrid_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CellRect(&self, aCol: i32, aRow: i32, result: *mut TRect)  {
          unsafe { DrawGrid_CellRect(self.0, aCol, aRow, result) }
      }

      pub fn MouseToCell(&self, x: i32, y: i32, aCol: *mut i32, aRow: *mut i32)  {
          unsafe { DrawGrid_MouseToCell(self.0, x, y, aCol, aRow) }
      }

      pub fn MouseCoord(&self, x: i32, y: i32, result: *mut TGridCoord)  {
          unsafe { DrawGrid_MouseCoord(self.0, x, y, result) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { DrawGrid_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { DrawGrid_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { DrawGrid_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { DrawGrid_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { DrawGrid_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { DrawGrid_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { DrawGrid_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { DrawGrid_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { DrawGrid_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { DrawGrid_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { DrawGrid_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { DrawGrid_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { DrawGrid_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { DrawGrid_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { DrawGrid_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { DrawGrid_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { DrawGrid_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { DrawGrid_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { DrawGrid_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { DrawGrid_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { DrawGrid_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { DrawGrid_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { DrawGrid_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { DrawGrid_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { DrawGrid_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { DrawGrid_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { DrawGrid_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { DrawGrid_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { DrawGrid_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { DrawGrid_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { DrawGrid_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { DrawGrid_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { DrawGrid_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { DrawGrid_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { DrawGrid_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DrawGrid_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { DrawGrid_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { DrawGrid_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DrawGrid_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { DrawGrid_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { DrawGrid_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { DrawGrid_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { DrawGrid_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(DrawGrid_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { DrawGrid_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { DrawGrid_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { DrawGrid_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { DrawGrid_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { DrawGrid_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { DrawGrid_AnchorClient(self.0, aSpace) }
      }

      pub fn SetOnColRowMoved(&self, aEventId: TGridOperationEvent)  {
          unsafe { DrawGrid_SetOnColRowMoved(self.0, aEventId) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { DrawGrid_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { DrawGrid_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { DrawGrid_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { DrawGrid_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { DrawGrid_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { DrawGrid_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { DrawGrid_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { DrawGrid_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { DrawGrid_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { DrawGrid_SetColor(self.0, aValue) }
      }

      pub fn ColCount(&self) -> i32  {
          unsafe { DrawGrid_GetColCount(self.0) }
      }

      pub fn SetColCount(&self, aValue: i32)  {
          unsafe { DrawGrid_SetColCount(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { DrawGrid_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { DrawGrid_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DefaultColWidth(&self) -> i32  {
          unsafe { DrawGrid_GetDefaultColWidth(self.0) }
      }

      pub fn SetDefaultColWidth(&self, aValue: i32)  {
          unsafe { DrawGrid_SetDefaultColWidth(self.0, aValue) }
      }

      pub fn DefaultRowHeight(&self) -> i32  {
          unsafe { DrawGrid_GetDefaultRowHeight(self.0) }
      }

      pub fn SetDefaultRowHeight(&self, aValue: i32)  {
          unsafe { DrawGrid_SetDefaultRowHeight(self.0, aValue) }
      }

      pub fn DefaultDrawing(&self) -> bool  {
          unsafe { DrawGrid_GetDefaultDrawing(self.0) }
      }

      pub fn SetDefaultDrawing(&self, aValue: bool)  {
          unsafe { DrawGrid_SetDefaultDrawing(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { DrawGrid_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { DrawGrid_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { DrawGrid_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { DrawGrid_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { DrawGrid_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { DrawGrid_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { DrawGrid_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { DrawGrid_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { DrawGrid_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { DrawGrid_SetEnabled(self.0, aValue) }
      }

      pub fn FixedColor(&self) -> TColor  {
          unsafe { DrawGrid_GetFixedColor(self.0) }
      }

      pub fn SetFixedColor(&self, aValue: TColor)  {
          unsafe { DrawGrid_SetFixedColor(self.0, aValue) }
      }

      pub fn FixedCols(&self) -> i32  {
          unsafe { DrawGrid_GetFixedCols(self.0) }
      }

      pub fn SetFixedCols(&self, aValue: i32)  {
          unsafe { DrawGrid_SetFixedCols(self.0, aValue) }
      }

      pub fn RowCount(&self) -> i32  {
          unsafe { DrawGrid_GetRowCount(self.0) }
      }

      pub fn SetRowCount(&self, aValue: i32)  {
          unsafe { DrawGrid_SetRowCount(self.0, aValue) }
      }

      pub fn FixedRows(&self) -> i32  {
          unsafe { DrawGrid_GetFixedRows(self.0) }
      }

      pub fn SetFixedRows(&self, aValue: i32)  {
          unsafe { DrawGrid_SetFixedRows(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { DrawGrid_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { DrawGrid_SetFont(self.0, aValue.Instance()) }
      }

      pub fn GridLineWidth(&self) -> i32  {
          unsafe { DrawGrid_GetGridLineWidth(self.0) }
      }

      pub fn SetGridLineWidth(&self, aValue: i32)  {
          unsafe { DrawGrid_SetGridLineWidth(self.0, aValue) }
      }

      pub fn Options(&self) -> TGridOptions  {
          unsafe { DrawGrid_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TGridOptions)  {
          unsafe { DrawGrid_SetOptions(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { DrawGrid_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { DrawGrid_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { DrawGrid_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { DrawGrid_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { DrawGrid_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { DrawGrid_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { DrawGrid_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { DrawGrid_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { DrawGrid_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { DrawGrid_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { DrawGrid_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { DrawGrid_SetScrollBars(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { DrawGrid_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { DrawGrid_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { DrawGrid_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { DrawGrid_SetTabOrder(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { DrawGrid_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { DrawGrid_SetVisible(self.0, aValue) }
      }

      pub fn VisibleColCount(&self) -> i32  {
          unsafe { DrawGrid_GetVisibleColCount(self.0) }
      }

      pub fn VisibleRowCount(&self) -> i32  {
          unsafe { DrawGrid_GetVisibleRowCount(self.0) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { DrawGrid_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { DrawGrid_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { DrawGrid_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnDrawCell(&self, aEventId: TDrawCellEvent)  {
          unsafe { DrawGrid_SetOnDrawCell(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { DrawGrid_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { DrawGrid_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetEditMask(&self, aEventId: TGetEditEvent)  {
          unsafe { DrawGrid_SetOnGetEditMask(self.0, aEventId) }
      }

      pub fn SetOnGetEditText(&self, aEventId: TGetEditEvent)  {
          unsafe { DrawGrid_SetOnGetEditText(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { DrawGrid_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { DrawGrid_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { DrawGrid_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { DrawGrid_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { DrawGrid_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { DrawGrid_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { DrawGrid_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { DrawGrid_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnSelectCell(&self, aEventId: TSelectCellEvent)  {
          unsafe { DrawGrid_SetOnSelectCell(self.0, aEventId) }
      }

      pub fn SetOnSetEditText(&self, aEventId: TSetEditEvent)  {
          unsafe { DrawGrid_SetOnSetEditText(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { DrawGrid_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnTopLeftChanged(&self, aEventId: TNotifyEvent)  {
          unsafe { DrawGrid_SetOnTopLeftChanged(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { DrawGrid_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Col(&self) -> i32  {
          unsafe { DrawGrid_GetCol(self.0) }
      }

      pub fn SetCol(&self, aValue: i32)  {
          unsafe { DrawGrid_SetCol(self.0, aValue) }
      }

      pub fn EditorMode(&self) -> bool  {
          unsafe { DrawGrid_GetEditorMode(self.0) }
      }

      pub fn SetEditorMode(&self, aValue: bool)  {
          unsafe { DrawGrid_SetEditorMode(self.0, aValue) }
      }

      pub fn GridHeight(&self) -> i32  {
          unsafe { DrawGrid_GetGridHeight(self.0) }
      }

      pub fn GridWidth(&self) -> i32  {
          unsafe { DrawGrid_GetGridWidth(self.0) }
      }

      pub fn LeftCol(&self) -> i32  {
          unsafe { DrawGrid_GetLeftCol(self.0) }
      }

      pub fn SetLeftCol(&self, aValue: i32)  {
          unsafe { DrawGrid_SetLeftCol(self.0, aValue) }
      }

      pub fn Selection(&self, result: *mut TGridRect)  {
          unsafe { DrawGrid_GetSelection(self.0, result) }
      }

      pub fn SetSelection(&self, aValue: *mut TGridRect)  {
          unsafe { DrawGrid_SetSelection(self.0, aValue) }
      }

      pub fn Row(&self) -> i32  {
          unsafe { DrawGrid_GetRow(self.0) }
      }

      pub fn SetRow(&self, aValue: i32)  {
          unsafe { DrawGrid_SetRow(self.0, aValue) }
      }

      pub fn TopRow(&self) -> i32  {
          unsafe { DrawGrid_GetTopRow(self.0) }
      }

      pub fn SetTopRow(&self, aValue: i32)  {
          unsafe { DrawGrid_SetTopRow(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { DrawGrid_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { DrawGrid_SetTabStop(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { DrawGrid_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { DrawGrid_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { DrawGrid_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { DrawGrid_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { DrawGrid_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { DrawGrid_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { DrawGrid_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { DrawGrid_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { DrawGrid_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { DrawGrid_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { DrawGrid_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { DrawGrid_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { DrawGrid_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { DrawGrid_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { DrawGrid_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { DrawGrid_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { DrawGrid_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { DrawGrid_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { DrawGrid_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { DrawGrid_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { DrawGrid_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { DrawGrid_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { DrawGrid_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { DrawGrid_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { DrawGrid_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { DrawGrid_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { DrawGrid_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { DrawGrid_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { DrawGrid_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { DrawGrid_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { DrawGrid_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { DrawGrid_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { DrawGrid_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { DrawGrid_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { DrawGrid_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { DrawGrid_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { DrawGrid_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { DrawGrid_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { DrawGrid_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { DrawGrid_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(DrawGrid_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { DrawGrid_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { DrawGrid_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { DrawGrid_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { DrawGrid_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { DrawGrid_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(DrawGrid_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { DrawGrid_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { DrawGrid_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { DrawGrid_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DrawGrid_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { DrawGrid_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DrawGrid_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { DrawGrid_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DrawGrid_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { DrawGrid_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DrawGrid_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { DrawGrid_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { DrawGrid_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { DrawGrid_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { DrawGrid_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { DrawGrid_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn ColWidths(&self, index: i32) -> i32  {
          unsafe { DrawGrid_GetColWidths(self.0, index) }
      }

      pub fn SetColWidths(&self, index: i32, aValue: i32)  {
          unsafe { DrawGrid_SetColWidths(self.0, index, aValue) }
      }

      pub fn RowHeights(&self, index: i32) -> i32  {
          unsafe { DrawGrid_GetRowHeights(self.0, index) }
      }

      pub fn SetRowHeights(&self, index: i32, aValue: i32)  {
          unsafe { DrawGrid_SetRowHeights(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { DrawGrid_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { DrawGrid_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { DrawGrid_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { DrawGrid_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { DrawGrid_StaticClassType() }
      }
}

impl IObject for TDrawGrid {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TDrawGrid {}
impl IControl for TDrawGrid {}
impl IWinControl for TDrawGrid {}

impl TValueListEditor {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TValueListEditor {
              0: unsafe { ValueListEditor_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TValueListEditor { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ValueListEditor_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn DeleteRow(&self, aRow: i32)  {
          unsafe { ValueListEditor_DeleteRow(self.0, aRow) }
      }

      pub fn Refresh(&self) {
          unsafe { ValueListEditor_Refresh(self.0) }
      }

      pub fn CellRect(&self, aCol: i32, aRow: i32, result: *mut TRect)  {
          unsafe { ValueListEditor_CellRect(self.0, aCol, aRow, result) }
      }

      pub fn MouseToCell(&self, x: i32, y: i32, aCol: *mut i32, aRow: *mut i32)  {
          unsafe { ValueListEditor_MouseToCell(self.0, x, y, aCol, aRow) }
      }

      pub fn MouseCoord(&self, x: i32, y: i32, result: *mut TGridCoord)  {
          unsafe { ValueListEditor_MouseCoord(self.0, x, y, result) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ValueListEditor_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ValueListEditor_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ValueListEditor_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ValueListEditor_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ValueListEditor_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ValueListEditor_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ValueListEditor_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ValueListEditor_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ValueListEditor_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ValueListEditor_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ValueListEditor_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ValueListEditor_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ValueListEditor_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ValueListEditor_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ValueListEditor_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ValueListEditor_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ValueListEditor_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ValueListEditor_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ValueListEditor_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ValueListEditor_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ValueListEditor_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ValueListEditor_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ValueListEditor_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ValueListEditor_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ValueListEditor_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ValueListEditor_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ValueListEditor_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ValueListEditor_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ValueListEditor_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ValueListEditor_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ValueListEditor_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ValueListEditor_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ValueListEditor_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ValueListEditor_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ValueListEditor_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ValueListEditor_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ValueListEditor_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ValueListEditor_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ValueListEditor_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ValueListEditor_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ValueListEditor_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ValueListEditor_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ValueListEditor_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ValueListEditor_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ValueListEditor_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ValueListEditor_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ValueListEditor_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ValueListEditor_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ValueListEditor_AnchorClient(self.0, aSpace) }
      }

      pub fn ColCount(&self) -> i32  {
          unsafe { ValueListEditor_GetColCount(self.0) }
      }

      pub fn SetColCount(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetColCount(self.0, aValue) }
      }

      pub fn RowCount(&self) -> i32  {
          unsafe { ValueListEditor_GetRowCount(self.0) }
      }

      pub fn VisibleColCount(&self) -> i32  {
          unsafe { ValueListEditor_GetVisibleColCount(self.0) }
      }

      pub fn VisibleRowCount(&self) -> i32  {
          unsafe { ValueListEditor_GetVisibleRowCount(self.0) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ValueListEditor_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ValueListEditor_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ValueListEditor_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ValueListEditor_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ValueListEditor_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ValueListEditor_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { ValueListEditor_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { ValueListEditor_SetBorderStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ValueListEditor_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ValueListEditor_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ValueListEditor_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ValueListEditor_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DefaultColWidth(&self) -> i32  {
          unsafe { ValueListEditor_GetDefaultColWidth(self.0) }
      }

      pub fn SetDefaultColWidth(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetDefaultColWidth(self.0, aValue) }
      }

      pub fn DefaultDrawing(&self) -> bool  {
          unsafe { ValueListEditor_GetDefaultDrawing(self.0) }
      }

      pub fn SetDefaultDrawing(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetDefaultDrawing(self.0, aValue) }
      }

      pub fn DefaultRowHeight(&self) -> i32  {
          unsafe { ValueListEditor_GetDefaultRowHeight(self.0) }
      }

      pub fn SetDefaultRowHeight(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetDefaultRowHeight(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ValueListEditor_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ValueListEditor_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ValueListEditor_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ValueListEditor_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ValueListEditor_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ValueListEditor_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ValueListEditor_SetDragMode(self.0, aValue) }
      }

      pub fn DropDownRows(&self) -> i32  {
          unsafe { ValueListEditor_GetDropDownRows(self.0) }
      }

      pub fn SetDropDownRows(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetDropDownRows(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ValueListEditor_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetEnabled(self.0, aValue) }
      }

      pub fn FixedColor(&self) -> TColor  {
          unsafe { ValueListEditor_GetFixedColor(self.0) }
      }

      pub fn SetFixedColor(&self, aValue: TColor)  {
          unsafe { ValueListEditor_SetFixedColor(self.0, aValue) }
      }

      pub fn FixedCols(&self) -> i32  {
          unsafe { ValueListEditor_GetFixedCols(self.0) }
      }

      pub fn SetFixedCols(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetFixedCols(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ValueListEditor_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ValueListEditor_SetFont(self.0, aValue.Instance()) }
      }

      pub fn GridLineWidth(&self) -> i32  {
          unsafe { ValueListEditor_GetGridLineWidth(self.0) }
      }

      pub fn SetGridLineWidth(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetGridLineWidth(self.0, aValue) }
      }

      pub fn Options(&self) -> TGridOptions  {
          unsafe { ValueListEditor_GetOptions(self.0) }
      }

      pub fn SetOptions(&self, aValue: TGridOptions)  {
          unsafe { ValueListEditor_SetOptions(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ValueListEditor_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ValueListEditor_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ValueListEditor_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ValueListEditor_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ValueListEditor_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ValueListEditor_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ScrollBars(&self) -> TScrollStyle  {
          unsafe { ValueListEditor_GetScrollBars(self.0) }
      }

      pub fn SetScrollBars(&self, aValue: TScrollStyle)  {
          unsafe { ValueListEditor_SetScrollBars(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ValueListEditor_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetShowHint(self.0, aValue) }
      }

      pub fn Strings(&self) -> TStrings  {
          TStrings {
              0: unsafe { ValueListEditor_GetStrings(self.0) }
              , 1: false,
          }
      }

      pub fn SetStrings(&self, aValue: &TStrings)  {
          unsafe { ValueListEditor_SetStrings(self.0, aValue.Instance()) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ValueListEditor_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ValueListEditor_SetTabOrder(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ValueListEditor_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ValueListEditor_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ValueListEditor_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ValueListEditor_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnDrawCell(&self, aEventId: TDrawCellEvent)  {
          unsafe { ValueListEditor_SetOnDrawCell(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { ValueListEditor_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ValueListEditor_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetEditMask(&self, aEventId: TGetEditEvent)  {
          unsafe { ValueListEditor_SetOnGetEditMask(self.0, aEventId) }
      }

      pub fn SetOnGetEditText(&self, aEventId: TGetEditEvent)  {
          unsafe { ValueListEditor_SetOnGetEditText(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ValueListEditor_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ValueListEditor_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ValueListEditor_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ValueListEditor_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ValueListEditor_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ValueListEditor_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ValueListEditor_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ValueListEditor_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnSelectCell(&self, aEventId: TSelectCellEvent)  {
          unsafe { ValueListEditor_SetOnSelectCell(self.0, aEventId) }
      }

      pub fn SetOnSetEditText(&self, aEventId: TSetEditEvent)  {
          unsafe { ValueListEditor_SetOnSetEditText(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { ValueListEditor_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnTopLeftChanged(&self, aEventId: TNotifyEvent)  {
          unsafe { ValueListEditor_SetOnTopLeftChanged(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ValueListEditor_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Col(&self) -> i32  {
          unsafe { ValueListEditor_GetCol(self.0) }
      }

      pub fn SetCol(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetCol(self.0, aValue) }
      }

      pub fn EditorMode(&self) -> bool  {
          unsafe { ValueListEditor_GetEditorMode(self.0) }
      }

      pub fn SetEditorMode(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetEditorMode(self.0, aValue) }
      }

      pub fn GridHeight(&self) -> i32  {
          unsafe { ValueListEditor_GetGridHeight(self.0) }
      }

      pub fn GridWidth(&self) -> i32  {
          unsafe { ValueListEditor_GetGridWidth(self.0) }
      }

      pub fn LeftCol(&self) -> i32  {
          unsafe { ValueListEditor_GetLeftCol(self.0) }
      }

      pub fn SetLeftCol(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetLeftCol(self.0, aValue) }
      }

      pub fn Selection(&self, result: *mut TGridRect)  {
          unsafe { ValueListEditor_GetSelection(self.0, result) }
      }

      pub fn SetSelection(&self, aValue: *mut TGridRect)  {
          unsafe { ValueListEditor_SetSelection(self.0, aValue) }
      }

      pub fn Row(&self) -> i32  {
          unsafe { ValueListEditor_GetRow(self.0) }
      }

      pub fn SetRow(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetRow(self.0, aValue) }
      }

      pub fn TopRow(&self) -> i32  {
          unsafe { ValueListEditor_GetTopRow(self.0) }
      }

      pub fn SetTopRow(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetTopRow(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ValueListEditor_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetTabStop(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ValueListEditor_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ValueListEditor_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ValueListEditor_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ValueListEditor_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ValueListEditor_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ValueListEditor_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ValueListEditor_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ValueListEditor_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ValueListEditor_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ValueListEditor_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ValueListEditor_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ValueListEditor_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ValueListEditor_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ValueListEditor_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ValueListEditor_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ValueListEditor_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ValueListEditor_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ValueListEditor_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ValueListEditor_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ValueListEditor_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ValueListEditor_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ValueListEditor_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ValueListEditor_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ValueListEditor_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ValueListEditor_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ValueListEditor_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ValueListEditor_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ValueListEditor_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ValueListEditor_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ValueListEditor_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ValueListEditor_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ValueListEditor_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ValueListEditor_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ValueListEditor_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ValueListEditor_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ValueListEditor_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ValueListEditor_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ValueListEditor_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ValueListEditor_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ValueListEditor_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ValueListEditor_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ValueListEditor_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ValueListEditor_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ValueListEditor_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ValueListEditor_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ValueListEditor_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ValueListEditor_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ValueListEditor_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ValueListEditor_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ValueListEditor_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ValueListEditor_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ValueListEditor_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ValueListEditor_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ValueListEditor_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ValueListEditor_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Cells<'a>(&self, aCol: i32, aRow: i32) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ValueListEditor_GetCells(self.0, aCol, aRow)).to_string_lossy()  }
      }

      pub fn SetCells(&self, aCol: i32, aRow: i32, aValue: &str)  {
          unsafe { ValueListEditor_SetCells(self.0, aCol, aRow, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Values<'a>(&self, key: &str) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ValueListEditor_GetValues(self.0, CString::new(key).unwrap().as_ptr())).to_string_lossy()  }
      }

      pub fn SetValues(&self, key: &str, aValue: &str)  {
          unsafe { ValueListEditor_SetValues(self.0, CString::new(key).unwrap().as_ptr(), CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ColWidths(&self, index: i32) -> i32  {
          unsafe { ValueListEditor_GetColWidths(self.0, index) }
      }

      pub fn SetColWidths(&self, index: i32, aValue: i32)  {
          unsafe { ValueListEditor_SetColWidths(self.0, index, aValue) }
      }

      pub fn RowHeights(&self, index: i32) -> i32  {
          unsafe { ValueListEditor_GetRowHeights(self.0, index) }
      }

      pub fn SetRowHeights(&self, index: i32, aValue: i32)  {
          unsafe { ValueListEditor_SetRowHeights(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ValueListEditor_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ValueListEditor_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ValueListEditor_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ValueListEditor_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ValueListEditor_StaticClassType() }
      }
}

impl IObject for TValueListEditor {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TValueListEditor {}
impl IControl for TValueListEditor {}
impl IWinControl for TValueListEditor {}

impl THeaderControl {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          THeaderControl {
              0: unsafe { HeaderControl_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          THeaderControl { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  HeaderControl_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { HeaderControl_FlipChildren(self.0, allLevels) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { HeaderControl_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { HeaderControl_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { HeaderControl_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { HeaderControl_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { HeaderControl_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { HeaderControl_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { HeaderControl_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { HeaderControl_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { HeaderControl_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { HeaderControl_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { HeaderControl_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { HeaderControl_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { HeaderControl_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { HeaderControl_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { HeaderControl_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { HeaderControl_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { HeaderControl_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { HeaderControl_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { HeaderControl_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { HeaderControl_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { HeaderControl_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { HeaderControl_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { HeaderControl_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { HeaderControl_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { HeaderControl_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { HeaderControl_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { HeaderControl_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { HeaderControl_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { HeaderControl_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { HeaderControl_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { HeaderControl_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { HeaderControl_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { HeaderControl_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { HeaderControl_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderControl_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { HeaderControl_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { HeaderControl_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderControl_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { HeaderControl_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { HeaderControl_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { HeaderControl_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { HeaderControl_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderControl_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { HeaderControl_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { HeaderControl_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { HeaderControl_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { HeaderControl_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { HeaderControl_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { HeaderControl_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { HeaderControl_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { HeaderControl_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { HeaderControl_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { HeaderControl_SetAnchors(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { HeaderControl_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { HeaderControl_SetBorderWidth(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { HeaderControl_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { HeaderControl_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { HeaderControl_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { HeaderControl_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { HeaderControl_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { HeaderControl_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { HeaderControl_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { HeaderControl_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { HeaderControl_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { HeaderControl_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { HeaderControl_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { HeaderControl_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { HeaderControl_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { HeaderControl_SetImages(self.0, aValue.Instance()) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { HeaderControl_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { HeaderControl_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Sections(&self) -> THeaderSections  {
          THeaderSections {
              0: unsafe { HeaderControl_GetSections(self.0) }
              , 1: false,
          }
      }

      pub fn SetSections(&self, aValue: &THeaderSections)  {
          unsafe { HeaderControl_SetSections(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { HeaderControl_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { HeaderControl_SetShowHint(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { HeaderControl_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { HeaderControl_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { HeaderControl_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { HeaderControl_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { HeaderControl_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { HeaderControl_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { HeaderControl_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { HeaderControl_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { HeaderControl_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { HeaderControl_SetVisible(self.0, aValue) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { HeaderControl_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { HeaderControl_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { HeaderControl_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { HeaderControl_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { HeaderControl_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { HeaderControl_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { HeaderControl_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { HeaderControl_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { HeaderControl_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { HeaderControl_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { HeaderControl_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnSectionClick(&self, aEventId: TSectionNotifyEvent)  {
          unsafe { HeaderControl_SetOnSectionClick(self.0, aEventId) }
      }

      pub fn SetOnSectionResize(&self, aEventId: TSectionNotifyEvent)  {
          unsafe { HeaderControl_SetOnSectionResize(self.0, aEventId) }
      }

      pub fn SetOnSectionTrack(&self, aEventId: TSectionTrackEvent)  {
          unsafe { HeaderControl_SetOnSectionTrack(self.0, aEventId) }
      }

      pub fn SetOnSectionDrag(&self, aEventId: TSectionDragEvent)  {
          unsafe { HeaderControl_SetOnSectionDrag(self.0, aEventId) }
      }

      pub fn SetOnSectionEndDrag(&self, aEventId: TNotifyEvent)  {
          unsafe { HeaderControl_SetOnSectionEndDrag(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { HeaderControl_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { HeaderControl_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { HeaderControl_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { HeaderControl_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { HeaderControl_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { HeaderControl_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { HeaderControl_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { HeaderControl_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { HeaderControl_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { HeaderControl_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { HeaderControl_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { HeaderControl_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { HeaderControl_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { HeaderControl_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { HeaderControl_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { HeaderControl_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { HeaderControl_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { HeaderControl_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { HeaderControl_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { HeaderControl_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { HeaderControl_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { HeaderControl_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { HeaderControl_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { HeaderControl_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { HeaderControl_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { HeaderControl_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { HeaderControl_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { HeaderControl_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { HeaderControl_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { HeaderControl_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { HeaderControl_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { HeaderControl_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { HeaderControl_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { HeaderControl_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { HeaderControl_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { HeaderControl_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { HeaderControl_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { HeaderControl_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { HeaderControl_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { HeaderControl_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { HeaderControl_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { HeaderControl_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { HeaderControl_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { HeaderControl_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { HeaderControl_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderControl_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { HeaderControl_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { HeaderControl_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { HeaderControl_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { HeaderControl_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { HeaderControl_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderControl_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { HeaderControl_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { HeaderControl_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { HeaderControl_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { HeaderControl_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { HeaderControl_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { HeaderControl_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { HeaderControl_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { HeaderControl_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { HeaderControl_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { HeaderControl_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { HeaderControl_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { HeaderControl_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { HeaderControl_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { HeaderControl_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { HeaderControl_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { HeaderControl_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { HeaderControl_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { HeaderControl_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { HeaderControl_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { HeaderControl_StaticClassType() }
      }
}

impl IObject for THeaderControl {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for THeaderControl {}
impl IControl for THeaderControl {}
impl IWinControl for THeaderControl {}

impl THeaderSection {
      pub fn new(aOwner: &TCollection) -> Self {
          THeaderSection {
              0: unsafe { HeaderSection_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          THeaderSection { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  HeaderSection_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { HeaderSection_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderSection_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { HeaderSection_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderSection_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { HeaderSection_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { HeaderSection_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { HeaderSection_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { HeaderSection_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderSection_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Left(&self) -> i32  {
          unsafe { HeaderSection_GetLeft(self.0) }
      }

      pub fn Right(&self) -> i32  {
          unsafe { HeaderSection_GetRight(self.0) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { HeaderSection_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { HeaderSection_SetAlignment(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { HeaderSection_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { HeaderSection_SetImageIndex(self.0, aValue) }
      }

      pub fn MaxWidth(&self) -> i32  {
          unsafe { HeaderSection_GetMaxWidth(self.0) }
      }

      pub fn SetMaxWidth(&self, aValue: i32)  {
          unsafe { HeaderSection_SetMaxWidth(self.0, aValue) }
      }

      pub fn MinWidth(&self) -> i32  {
          unsafe { HeaderSection_GetMinWidth(self.0) }
      }

      pub fn SetMinWidth(&self, aValue: i32)  {
          unsafe { HeaderSection_SetMinWidth(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderSection_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { HeaderSection_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { HeaderSection_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { HeaderSection_SetWidth(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { HeaderSection_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { HeaderSection_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { HeaderSection_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { HeaderSection_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderSection_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { HeaderSection_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { HeaderSection_StaticClassType() }
      }
}

impl IObject for THeaderSection {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for THeaderSection {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl THeaderSections {
      pub fn new(aOwner: &THeaderControl) -> Self {
          THeaderSections {
              0: unsafe { HeaderSections_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          THeaderSections { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  HeaderSections_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self) -> THeaderSection  {
          THeaderSection {
              0: unsafe { HeaderSections_Add(self.0) }
              , 1: false,
          }
      }

      pub fn AddItem(&self, item: &THeaderSection, index: i32) -> THeaderSection  {
          THeaderSection {
              0: unsafe { HeaderSections_AddItem(self.0, item.Instance(), index) }
              , 1: false,
          }
      }

      pub fn Insert(&self, index: i32) -> THeaderSection  {
          THeaderSection {
              0: unsafe { HeaderSections_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { HeaderSections_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { HeaderSections_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { HeaderSections_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { HeaderSections_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { HeaderSections_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { HeaderSections_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { HeaderSections_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(HeaderSections_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { HeaderSections_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderSections_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { HeaderSections_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { HeaderSections_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { HeaderSections_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { HeaderSections_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(HeaderSections_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { HeaderSections_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> THeaderSection  {
          THeaderSection {
              0: unsafe { HeaderSections_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &THeaderSection)  {
          unsafe { HeaderSections_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { HeaderSections_StaticClassType() }
      }
}

impl IObject for THeaderSections {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for THeaderSections {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TLabeledEdit {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TLabeledEdit {
              0: unsafe { LabeledEdit_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TLabeledEdit { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  LabeledEdit_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { LabeledEdit_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Clear(&self)  {
          unsafe { LabeledEdit_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { LabeledEdit_ClearSelection(self.0) }
      }

      pub fn CopyToClipboard(&self)  {
          unsafe { LabeledEdit_CopyToClipboard(self.0) }
      }

      pub fn CutToClipboard(&self)  {
          unsafe { LabeledEdit_CutToClipboard(self.0) }
      }

      pub fn PasteFromClipboard(&self)  {
          unsafe { LabeledEdit_PasteFromClipboard(self.0) }
      }

      pub fn Undo(&self)  {
          unsafe { LabeledEdit_Undo(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { LabeledEdit_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { LabeledEdit_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { LabeledEdit_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { LabeledEdit_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { LabeledEdit_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { LabeledEdit_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { LabeledEdit_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { LabeledEdit_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { LabeledEdit_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { LabeledEdit_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { LabeledEdit_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { LabeledEdit_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { LabeledEdit_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { LabeledEdit_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { LabeledEdit_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { LabeledEdit_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { LabeledEdit_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetFocus(&self) {
          unsafe { LabeledEdit_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { LabeledEdit_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { LabeledEdit_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { LabeledEdit_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { LabeledEdit_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { LabeledEdit_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { LabeledEdit_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { LabeledEdit_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { LabeledEdit_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { LabeledEdit_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { LabeledEdit_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { LabeledEdit_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { LabeledEdit_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { LabeledEdit_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { LabeledEdit_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { LabeledEdit_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { LabeledEdit_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { LabeledEdit_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LabeledEdit_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { LabeledEdit_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { LabeledEdit_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LabeledEdit_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { LabeledEdit_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { LabeledEdit_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { LabeledEdit_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { LabeledEdit_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(LabeledEdit_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { LabeledEdit_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { LabeledEdit_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { LabeledEdit_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { LabeledEdit_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { LabeledEdit_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { LabeledEdit_AnchorClient(self.0, aSpace) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { LabeledEdit_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { LabeledEdit_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { LabeledEdit_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { LabeledEdit_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSelect(&self) -> bool  {
          unsafe { LabeledEdit_GetAutoSelect(self.0) }
      }

      pub fn SetAutoSelect(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetAutoSelect(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { LabeledEdit_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { LabeledEdit_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { LabeledEdit_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { LabeledEdit_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { LabeledEdit_SetBorderStyle(self.0, aValue) }
      }

      pub fn CharCase(&self) -> TEditCharCase  {
          unsafe { LabeledEdit_GetCharCase(self.0) }
      }

      pub fn SetCharCase(&self, aValue: TEditCharCase)  {
          unsafe { LabeledEdit_SetCharCase(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { LabeledEdit_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { LabeledEdit_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { LabeledEdit_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { LabeledEdit_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { LabeledEdit_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { LabeledEdit_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { LabeledEdit_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { LabeledEdit_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { LabeledEdit_SetDragMode(self.0, aValue) }
      }

      pub fn EditLabel(&self) -> TBoundLabel  {
          TBoundLabel {
              0: unsafe { LabeledEdit_GetEditLabel(self.0) }
              , 1: false,
          }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { LabeledEdit_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { LabeledEdit_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { LabeledEdit_SetFont(self.0, aValue.Instance()) }
      }

      pub fn HideSelection(&self) -> bool  {
          unsafe { LabeledEdit_GetHideSelection(self.0) }
      }

      pub fn SetHideSelection(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetHideSelection(self.0, aValue) }
      }

      pub fn LabelPosition(&self) -> TLabelPosition  {
          unsafe { LabeledEdit_GetLabelPosition(self.0) }
      }

      pub fn SetLabelPosition(&self, aValue: TLabelPosition)  {
          unsafe { LabeledEdit_SetLabelPosition(self.0, aValue) }
      }

      pub fn LabelSpacing(&self) -> i32  {
          unsafe { LabeledEdit_GetLabelSpacing(self.0) }
      }

      pub fn SetLabelSpacing(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetLabelSpacing(self.0, aValue) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { LabeledEdit_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetMaxLength(self.0, aValue) }
      }

      pub fn NumbersOnly(&self) -> bool  {
          unsafe { LabeledEdit_GetNumbersOnly(self.0) }
      }

      pub fn SetNumbersOnly(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetNumbersOnly(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { LabeledEdit_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { LabeledEdit_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { LabeledEdit_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { LabeledEdit_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetParentShowHint(self.0, aValue) }
      }

      pub fn PasswordChar(&self) -> Char  {
          unsafe { LabeledEdit_GetPasswordChar(self.0) }
      }

      pub fn SetPasswordChar(&self, aValue: Char)  {
          unsafe { LabeledEdit_SetPasswordChar(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { LabeledEdit_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { LabeledEdit_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { LabeledEdit_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetReadOnly(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { LabeledEdit_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { LabeledEdit_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { LabeledEdit_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { LabeledEdit_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetTabStop(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LabeledEdit_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { LabeledEdit_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn TextHint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LabeledEdit_GetTextHint(self.0)).to_string_lossy()  }
      }

      pub fn SetTextHint(&self, aValue: &str)  {
          unsafe { LabeledEdit_SetTextHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { LabeledEdit_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { LabeledEdit_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { LabeledEdit_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { LabeledEdit_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { LabeledEdit_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { LabeledEdit_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { LabeledEdit_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { LabeledEdit_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { LabeledEdit_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { LabeledEdit_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { LabeledEdit_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn CanUndo(&self) -> bool  {
          unsafe { LabeledEdit_GetCanUndo(self.0) }
      }

      pub fn Modified(&self) -> bool  {
          unsafe { LabeledEdit_GetModified(self.0) }
      }

      pub fn SetModified(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetModified(self.0, aValue) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { LabeledEdit_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { LabeledEdit_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetSelStart(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LabeledEdit_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { LabeledEdit_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { LabeledEdit_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { LabeledEdit_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { LabeledEdit_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { LabeledEdit_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { LabeledEdit_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { LabeledEdit_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { LabeledEdit_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { LabeledEdit_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { LabeledEdit_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { LabeledEdit_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { LabeledEdit_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { LabeledEdit_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { LabeledEdit_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { LabeledEdit_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { LabeledEdit_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { LabeledEdit_SetAlign(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { LabeledEdit_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { LabeledEdit_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { LabeledEdit_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { LabeledEdit_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { LabeledEdit_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { LabeledEdit_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { LabeledEdit_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { LabeledEdit_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { LabeledEdit_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { LabeledEdit_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { LabeledEdit_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { LabeledEdit_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { LabeledEdit_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { LabeledEdit_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { LabeledEdit_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { LabeledEdit_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { LabeledEdit_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { LabeledEdit_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { LabeledEdit_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LabeledEdit_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { LabeledEdit_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { LabeledEdit_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { LabeledEdit_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { LabeledEdit_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { LabeledEdit_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(LabeledEdit_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { LabeledEdit_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { LabeledEdit_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { LabeledEdit_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LabeledEdit_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { LabeledEdit_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LabeledEdit_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { LabeledEdit_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LabeledEdit_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { LabeledEdit_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LabeledEdit_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { LabeledEdit_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { LabeledEdit_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { LabeledEdit_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { LabeledEdit_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { LabeledEdit_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { LabeledEdit_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { LabeledEdit_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { LabeledEdit_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { LabeledEdit_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { LabeledEdit_StaticClassType() }
      }
}

impl IObject for TLabeledEdit {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TLabeledEdit {}
impl IControl for TLabeledEdit {}
impl IWinControl for TLabeledEdit {}

impl TBoundLabel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TBoundLabel {
              0: unsafe { BoundLabel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TBoundLabel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  BoundLabel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { BoundLabel_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { BoundLabel_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { BoundLabel_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { BoundLabel_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { BoundLabel_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { BoundLabel_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { BoundLabel_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { BoundLabel_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { BoundLabel_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { BoundLabel_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { BoundLabel_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { BoundLabel_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { BoundLabel_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { BoundLabel_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { BoundLabel_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { BoundLabel_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { BoundLabel_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { BoundLabel_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { BoundLabel_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { BoundLabel_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BoundLabel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { BoundLabel_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { BoundLabel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BoundLabel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { BoundLabel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { BoundLabel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { BoundLabel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { BoundLabel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(BoundLabel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { BoundLabel_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { BoundLabel_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { BoundLabel_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { BoundLabel_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { BoundLabel_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { BoundLabel_AnchorClient(self.0, aSpace) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { BoundLabel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { BoundLabel_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BoundLabel_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { BoundLabel_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { BoundLabel_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { BoundLabel_SetColor(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { BoundLabel_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { BoundLabel_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { BoundLabel_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { BoundLabel_SetDragMode(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { BoundLabel_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { BoundLabel_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { BoundLabel_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { BoundLabel_SetHeight(self.0, aValue) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { BoundLabel_GetLeft(self.0) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { BoundLabel_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { BoundLabel_SetParentColor(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { BoundLabel_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { BoundLabel_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { BoundLabel_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { BoundLabel_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { BoundLabel_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { BoundLabel_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowAccelChar(&self) -> bool  {
          unsafe { BoundLabel_GetShowAccelChar(self.0) }
      }

      pub fn SetShowAccelChar(&self, aValue: bool)  {
          unsafe { BoundLabel_SetShowAccelChar(self.0, aValue) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { BoundLabel_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { BoundLabel_SetShowHint(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { BoundLabel_GetTop(self.0) }
      }

      pub fn Layout(&self) -> TTextLayout  {
          unsafe { BoundLabel_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TTextLayout)  {
          unsafe { BoundLabel_SetLayout(self.0, aValue) }
      }

      pub fn WordWrap(&self) -> bool  {
          unsafe { BoundLabel_GetWordWrap(self.0) }
      }

      pub fn SetWordWrap(&self, aValue: bool)  {
          unsafe { BoundLabel_SetWordWrap(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { BoundLabel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { BoundLabel_SetWidth(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { BoundLabel_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { BoundLabel_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { BoundLabel_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { BoundLabel_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { BoundLabel_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { BoundLabel_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { BoundLabel_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { BoundLabel_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { BoundLabel_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { BoundLabel_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { BoundLabel_SetEnabled(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { BoundLabel_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { BoundLabel_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { BoundLabel_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { BoundLabel_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { BoundLabel_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { BoundLabel_SetAnchors(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { BoundLabel_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { BoundLabel_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { BoundLabel_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { BoundLabel_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { BoundLabel_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { BoundLabel_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { BoundLabel_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { BoundLabel_SetClientWidth(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { BoundLabel_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { BoundLabel_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { BoundLabel_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { BoundLabel_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { BoundLabel_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { BoundLabel_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { BoundLabel_GetFloating(self.0) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { BoundLabel_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { BoundLabel_SetVisible(self.0, aValue) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { BoundLabel_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { BoundLabel_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { BoundLabel_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { BoundLabel_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BoundLabel_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { BoundLabel_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { BoundLabel_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { BoundLabel_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { BoundLabel_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { BoundLabel_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(BoundLabel_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { BoundLabel_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { BoundLabel_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { BoundLabel_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BoundLabel_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { BoundLabel_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BoundLabel_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { BoundLabel_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BoundLabel_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { BoundLabel_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BoundLabel_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { BoundLabel_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { BoundLabel_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { BoundLabel_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { BoundLabel_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { BoundLabel_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { BoundLabel_StaticClassType() }
      }
}

impl IObject for TBoundLabel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TBoundLabel {}
impl IControl for TBoundLabel {}

impl TFlowPanel {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TFlowPanel {
              0: unsafe { FlowPanel_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TFlowPanel { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  FlowPanel_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetControlIndex(&self, aControl: &dyn IControl) -> i32  {
          unsafe { FlowPanel_GetControlIndex(self.0, aControl.Instance()) }
      }

      pub fn SetControlIndex(&self, aControl: &dyn IControl, index: i32)  {
          unsafe { FlowPanel_SetControlIndex(self.0, aControl.Instance(), index) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { FlowPanel_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { FlowPanel_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { FlowPanel_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { FlowPanel_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { FlowPanel_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { FlowPanel_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { FlowPanel_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { FlowPanel_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { FlowPanel_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { FlowPanel_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { FlowPanel_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { FlowPanel_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { FlowPanel_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { FlowPanel_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { FlowPanel_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { FlowPanel_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { FlowPanel_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { FlowPanel_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { FlowPanel_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { FlowPanel_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { FlowPanel_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { FlowPanel_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { FlowPanel_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { FlowPanel_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { FlowPanel_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { FlowPanel_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { FlowPanel_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { FlowPanel_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { FlowPanel_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { FlowPanel_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { FlowPanel_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { FlowPanel_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { FlowPanel_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { FlowPanel_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { FlowPanel_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FlowPanel_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { FlowPanel_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { FlowPanel_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FlowPanel_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { FlowPanel_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { FlowPanel_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { FlowPanel_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { FlowPanel_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(FlowPanel_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { FlowPanel_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { FlowPanel_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { FlowPanel_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { FlowPanel_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { FlowPanel_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { FlowPanel_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { FlowPanel_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { FlowPanel_SetAlign(self.0, aValue) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { FlowPanel_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { FlowPanel_SetAlignment(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { FlowPanel_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { FlowPanel_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { FlowPanel_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { FlowPanel_SetAutoSize(self.0, aValue) }
      }

      pub fn AutoWrap(&self) -> bool  {
          unsafe { FlowPanel_GetAutoWrap(self.0) }
      }

      pub fn SetAutoWrap(&self, aValue: bool)  {
          unsafe { FlowPanel_SetAutoWrap(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { FlowPanel_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { FlowPanel_SetBiDiMode(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { FlowPanel_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { FlowPanel_SetBorderWidth(self.0, aValue) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { FlowPanel_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { FlowPanel_SetBorderStyle(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FlowPanel_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { FlowPanel_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { FlowPanel_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { FlowPanel_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { FlowPanel_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { FlowPanel_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { FlowPanel_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { FlowPanel_SetUseDockManager(self.0, aValue) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { FlowPanel_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { FlowPanel_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { FlowPanel_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { FlowPanel_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { FlowPanel_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { FlowPanel_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { FlowPanel_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { FlowPanel_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { FlowPanel_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { FlowPanel_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { FlowPanel_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { FlowPanel_SetEnabled(self.0, aValue) }
      }

      pub fn FlowStyle(&self) -> TFlowStyle  {
          unsafe { FlowPanel_GetFlowStyle(self.0) }
      }

      pub fn SetFlowStyle(&self, aValue: TFlowStyle)  {
          unsafe { FlowPanel_SetFlowStyle(self.0, aValue) }
      }

      pub fn FullRepaint(&self) -> bool  {
          unsafe { FlowPanel_GetFullRepaint(self.0) }
      }

      pub fn SetFullRepaint(&self, aValue: bool)  {
          unsafe { FlowPanel_SetFullRepaint(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { FlowPanel_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { FlowPanel_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentBackground(&self) -> bool  {
          unsafe { FlowPanel_GetParentBackground(self.0) }
      }

      pub fn SetParentBackground(&self, aValue: bool)  {
          unsafe { FlowPanel_SetParentBackground(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { FlowPanel_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { FlowPanel_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { FlowPanel_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { FlowPanel_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { FlowPanel_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { FlowPanel_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { FlowPanel_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { FlowPanel_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { FlowPanel_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { FlowPanel_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { FlowPanel_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { FlowPanel_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { FlowPanel_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { FlowPanel_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { FlowPanel_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { FlowPanel_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { FlowPanel_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { FlowPanel_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { FlowPanel_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { FlowPanel_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { FlowPanel_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { FlowPanel_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { FlowPanel_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { FlowPanel_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { FlowPanel_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { FlowPanel_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { FlowPanel_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { FlowPanel_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { FlowPanel_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { FlowPanel_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { FlowPanel_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { FlowPanel_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { FlowPanel_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { FlowPanel_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { FlowPanel_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { FlowPanel_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { FlowPanel_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { FlowPanel_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { FlowPanel_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { FlowPanel_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { FlowPanel_GetShowing(self.0) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { FlowPanel_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { FlowPanel_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { FlowPanel_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { FlowPanel_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { FlowPanel_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { FlowPanel_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { FlowPanel_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { FlowPanel_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { FlowPanel_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { FlowPanel_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { FlowPanel_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { FlowPanel_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { FlowPanel_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { FlowPanel_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { FlowPanel_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { FlowPanel_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { FlowPanel_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { FlowPanel_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { FlowPanel_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { FlowPanel_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { FlowPanel_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { FlowPanel_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { FlowPanel_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { FlowPanel_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { FlowPanel_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { FlowPanel_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { FlowPanel_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FlowPanel_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { FlowPanel_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { FlowPanel_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { FlowPanel_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { FlowPanel_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { FlowPanel_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(FlowPanel_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { FlowPanel_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { FlowPanel_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { FlowPanel_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { FlowPanel_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { FlowPanel_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { FlowPanel_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { FlowPanel_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { FlowPanel_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { FlowPanel_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { FlowPanel_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { FlowPanel_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { FlowPanel_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { FlowPanel_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { FlowPanel_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { FlowPanel_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { FlowPanel_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { FlowPanel_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { FlowPanel_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { FlowPanel_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { FlowPanel_StaticClassType() }
      }
}

impl IObject for TFlowPanel {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TFlowPanel {}
impl IControl for TFlowPanel {}
impl IWinControl for TFlowPanel {}

impl TCoolBar {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TCoolBar {
              0: unsafe { CoolBar_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCoolBar { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CoolBar_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { CoolBar_FlipChildren(self.0, allLevels) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { CoolBar_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { CoolBar_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { CoolBar_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { CoolBar_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { CoolBar_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { CoolBar_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { CoolBar_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { CoolBar_HandleAllocated(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { CoolBar_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { CoolBar_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { CoolBar_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { CoolBar_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { CoolBar_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { CoolBar_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { CoolBar_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { CoolBar_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { CoolBar_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { CoolBar_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CoolBar_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CoolBar_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { CoolBar_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { CoolBar_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { CoolBar_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { CoolBar_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { CoolBar_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CoolBar_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CoolBar_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { CoolBar_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { CoolBar_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { CoolBar_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { CoolBar_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { CoolBar_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { CoolBar_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { CoolBar_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CoolBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CoolBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CoolBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CoolBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CoolBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CoolBar_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CoolBar_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CoolBar_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CoolBar_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { CoolBar_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { CoolBar_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { CoolBar_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { CoolBar_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { CoolBar_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { CoolBar_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { CoolBar_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { CoolBar_SetAutoSize(self.0, aValue) }
      }

      pub fn BandBorderStyle(&self) -> TBorderStyle  {
          unsafe { CoolBar_GetBandBorderStyle(self.0) }
      }

      pub fn SetBandBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { CoolBar_SetBandBorderStyle(self.0, aValue) }
      }

      pub fn BandMaximize(&self) -> TCoolBandMaximize  {
          unsafe { CoolBar_GetBandMaximize(self.0) }
      }

      pub fn SetBandMaximize(&self, aValue: TCoolBandMaximize)  {
          unsafe { CoolBar_SetBandMaximize(self.0, aValue) }
      }

      pub fn Bands(&self) -> TCoolBands  {
          TCoolBands {
              0: unsafe { CoolBar_GetBands(self.0) }
              , 1: false,
          }
      }

      pub fn SetBands(&self, aValue: &TCoolBands)  {
          unsafe { CoolBar_SetBands(self.0, aValue.Instance()) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { CoolBar_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { CoolBar_SetBorderWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { CoolBar_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { CoolBar_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { CoolBar_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { CoolBar_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { CoolBar_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { CoolBar_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { CoolBar_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { CoolBar_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { CoolBar_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { CoolBar_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { CoolBar_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { CoolBar_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { CoolBar_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { CoolBar_SetDragMode(self.0, aValue) }
      }

      pub fn EdgeBorders(&self) -> TEdgeBorders  {
          unsafe { CoolBar_GetEdgeBorders(self.0) }
      }

      pub fn SetEdgeBorders(&self, aValue: TEdgeBorders)  {
          unsafe { CoolBar_SetEdgeBorders(self.0, aValue) }
      }

      pub fn EdgeInner(&self) -> TEdgeStyle  {
          unsafe { CoolBar_GetEdgeInner(self.0) }
      }

      pub fn SetEdgeInner(&self, aValue: TEdgeStyle)  {
          unsafe { CoolBar_SetEdgeInner(self.0, aValue) }
      }

      pub fn EdgeOuter(&self) -> TEdgeStyle  {
          unsafe { CoolBar_GetEdgeOuter(self.0) }
      }

      pub fn SetEdgeOuter(&self, aValue: TEdgeStyle)  {
          unsafe { CoolBar_SetEdgeOuter(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { CoolBar_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { CoolBar_SetEnabled(self.0, aValue) }
      }

      pub fn FixedSize(&self) -> bool  {
          unsafe { CoolBar_GetFixedSize(self.0) }
      }

      pub fn SetFixedSize(&self, aValue: bool)  {
          unsafe { CoolBar_SetFixedSize(self.0, aValue) }
      }

      pub fn FixedOrder(&self) -> bool  {
          unsafe { CoolBar_GetFixedOrder(self.0) }
      }

      pub fn SetFixedOrder(&self, aValue: bool)  {
          unsafe { CoolBar_SetFixedOrder(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { CoolBar_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { CoolBar_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { CoolBar_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { CoolBar_SetImages(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { CoolBar_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { CoolBar_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { CoolBar_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { CoolBar_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { CoolBar_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { CoolBar_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { CoolBar_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { CoolBar_SetParentShowHint(self.0, aValue) }
      }

      pub fn Bitmap(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { CoolBar_GetBitmap(self.0) }
              , 1: false,
          }
      }

      pub fn SetBitmap(&self, aValue: &TBitmap)  {
          unsafe { CoolBar_SetBitmap(self.0, aValue.Instance()) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { CoolBar_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { CoolBar_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { CoolBar_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { CoolBar_SetShowHint(self.0, aValue) }
      }

      pub fn ShowText(&self) -> bool  {
          unsafe { CoolBar_GetShowText(self.0) }
      }

      pub fn SetShowText(&self, aValue: bool)  {
          unsafe { CoolBar_SetShowText(self.0, aValue) }
      }

      pub fn Vertical(&self) -> bool  {
          unsafe { CoolBar_GetVertical(self.0) }
      }

      pub fn SetVertical(&self, aValue: bool)  {
          unsafe { CoolBar_SetVertical(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { CoolBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { CoolBar_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { CoolBar_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { CoolBar_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { CoolBar_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { CoolBar_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { CoolBar_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { CoolBar_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { CoolBar_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { CoolBar_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { CoolBar_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { CoolBar_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { CoolBar_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { CoolBar_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { CoolBar_SetOnUnDock(self.0, aEventId) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { CoolBar_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { CoolBar_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { CoolBar_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { CoolBar_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { CoolBar_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { CoolBar_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { CoolBar_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { CoolBar_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { CoolBar_GetShowing(self.0) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { CoolBar_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { CoolBar_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { CoolBar_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { CoolBar_SetTabStop(self.0, aValue) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { CoolBar_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { CoolBar_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { CoolBar_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { CoolBar_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { CoolBar_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { CoolBar_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { CoolBar_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { CoolBar_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { CoolBar_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { CoolBar_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { CoolBar_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { CoolBar_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { CoolBar_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { CoolBar_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { CoolBar_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { CoolBar_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { CoolBar_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { CoolBar_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { CoolBar_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { CoolBar_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { CoolBar_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { CoolBar_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { CoolBar_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { CoolBar_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { CoolBar_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { CoolBar_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { CoolBar_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { CoolBar_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { CoolBar_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { CoolBar_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { CoolBar_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBar_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { CoolBar_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { CoolBar_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { CoolBar_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { CoolBar_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { CoolBar_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBar_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { CoolBar_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { CoolBar_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { CoolBar_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CoolBar_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { CoolBar_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CoolBar_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { CoolBar_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CoolBar_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { CoolBar_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CoolBar_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { CoolBar_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { CoolBar_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { CoolBar_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { CoolBar_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { CoolBar_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CoolBar_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CoolBar_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { CoolBar_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CoolBar_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CoolBar_StaticClassType() }
      }
}

impl IObject for TCoolBar {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TCoolBar {}
impl IControl for TCoolBar {}
impl IWinControl for TCoolBar {}

impl TCoolBands {
      pub fn new(aOwner: &TCoolBar) -> Self {
          TCoolBands {
              0: unsafe { CoolBands_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCoolBands { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CoolBands_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Add(&self) -> TCoolBand  {
          TCoolBand {
              0: unsafe { CoolBands_Add(self.0) }
              , 1: false,
          }
      }

      pub fn FindBand(&self, aControl: &dyn IControl) -> TCoolBand  {
          TCoolBand {
              0: unsafe { CoolBands_FindBand(self.0, aControl.Instance()) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { CoolBands_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { CoolBands_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { CoolBands_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { CoolBands_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { CoolBands_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { CoolBands_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { CoolBands_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBands_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Insert(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { CoolBands_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CoolBands_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBands_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CoolBands_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CoolBands_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CoolBands_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CoolBands_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBands_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { CoolBands_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TCoolBand  {
          TCoolBand {
              0: unsafe { CoolBands_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TCoolBand)  {
          unsafe { CoolBands_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CoolBands_StaticClassType() }
      }
}

impl IObject for TCoolBands {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TCoolBands {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TCoolBand {
      pub fn new(aOwner: &TCollection) -> Self {
          TCoolBand {
              0: unsafe { CoolBand_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCoolBand { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CoolBand_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { CoolBand_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBand_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CoolBand_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBand_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CoolBand_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CoolBand_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CoolBand_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CoolBand_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CoolBand_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Height(&self) -> i32  {
          unsafe { CoolBand_GetHeight(self.0) }
      }

      pub fn Bitmap(&self) -> TBitmap  {
          TBitmap {
              0: unsafe { CoolBand_GetBitmap(self.0) }
              , 1: false,
          }
      }

      pub fn SetBitmap(&self, aValue: &TBitmap)  {
          unsafe { CoolBand_SetBitmap(self.0, aValue.Instance()) }
      }

      pub fn BorderStyle(&self) -> TBorderStyle  {
          unsafe { CoolBand_GetBorderStyle(self.0) }
      }

      pub fn SetBorderStyle(&self, aValue: TBorderStyle)  {
          unsafe { CoolBand_SetBorderStyle(self.0, aValue) }
      }

      pub fn Break(&self) -> bool  {
          unsafe { CoolBand_GetBreak(self.0) }
      }

      pub fn SetBreak(&self, aValue: bool)  {
          unsafe { CoolBand_SetBreak(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { CoolBand_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { CoolBand_SetColor(self.0, aValue) }
      }

      pub fn Control(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { CoolBand_GetControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetControl(&self, aValue: &dyn IWinControl)  {
          unsafe { CoolBand_SetControl(self.0, aValue.Instance()) }
      }

      pub fn FixedBackground(&self) -> bool  {
          unsafe { CoolBand_GetFixedBackground(self.0) }
      }

      pub fn SetFixedBackground(&self, aValue: bool)  {
          unsafe { CoolBand_SetFixedBackground(self.0, aValue) }
      }

      pub fn FixedSize(&self) -> bool  {
          unsafe { CoolBand_GetFixedSize(self.0) }
      }

      pub fn SetFixedSize(&self, aValue: bool)  {
          unsafe { CoolBand_SetFixedSize(self.0, aValue) }
      }

      pub fn HorizontalOnly(&self) -> bool  {
          unsafe { CoolBand_GetHorizontalOnly(self.0) }
      }

      pub fn SetHorizontalOnly(&self, aValue: bool)  {
          unsafe { CoolBand_SetHorizontalOnly(self.0, aValue) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { CoolBand_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { CoolBand_SetImageIndex(self.0, aValue) }
      }

      pub fn MinHeight(&self) -> i32  {
          unsafe { CoolBand_GetMinHeight(self.0) }
      }

      pub fn SetMinHeight(&self, aValue: i32)  {
          unsafe { CoolBand_SetMinHeight(self.0, aValue) }
      }

      pub fn MinWidth(&self) -> i32  {
          unsafe { CoolBand_GetMinWidth(self.0) }
      }

      pub fn SetMinWidth(&self, aValue: i32)  {
          unsafe { CoolBand_SetMinWidth(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { CoolBand_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { CoolBand_SetParentColor(self.0, aValue) }
      }

      pub fn ParentBitmap(&self) -> bool  {
          unsafe { CoolBand_GetParentBitmap(self.0) }
      }

      pub fn SetParentBitmap(&self, aValue: bool)  {
          unsafe { CoolBand_SetParentBitmap(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBand_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { CoolBand_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { CoolBand_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { CoolBand_SetVisible(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { CoolBand_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { CoolBand_SetWidth(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { CoolBand_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { CoolBand_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { CoolBand_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { CoolBand_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CoolBand_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { CoolBand_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CoolBand_StaticClassType() }
      }
}

impl IObject for TCoolBand {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TCoolBand {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TCollection {
      pub fn new(aOwner: usize) -> Self {
          TCollection {
              0: unsafe { Collection_Create(aOwner) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCollection { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Collection_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { Collection_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Add(&self) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { Collection_Add(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { Collection_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { Collection_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { Collection_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { Collection_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { Collection_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { Collection_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Collection_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Insert(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { Collection_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Collection_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Collection_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Collection_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Collection_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Collection_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Collection_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Collection_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { Collection_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { Collection_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TCollectionItem)  {
          unsafe { Collection_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Collection_StaticClassType() }
      }
}

impl IObject for TCollection {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TCollection {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TPrinter {
      pub fn new() -> Self {
          TPrinter {
              0: unsafe { Printer_Create() },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TPrinter { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Printer_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Abort(&self)  {
          unsafe { Printer_Abort(self.0) }
      }

      pub fn BeginDoc(&self)  {
          unsafe { Printer_BeginDoc(self.0) }
      }

      pub fn EndDoc(&self)  {
          unsafe { Printer_EndDoc(self.0) }
      }

      pub fn NewPage(&self)  {
          unsafe { Printer_NewPage(self.0) }
      }

      pub fn Refresh(&self)  {
          unsafe { Printer_Refresh(self.0) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Printer_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Printer_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Printer_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Printer_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Printer_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Printer_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Printer_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Aborted(&self) -> bool  {
          unsafe { Printer_GetAborted(self.0) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { Printer_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn Copies(&self) -> i32  {
          unsafe { Printer_GetCopies(self.0) }
      }

      pub fn SetCopies(&self, aValue: i32)  {
          unsafe { Printer_SetCopies(self.0, aValue) }
      }

      pub fn Fonts(&self) -> TStrings  {
          TStrings {
              0: unsafe { Printer_GetFonts(self.0) }
              , 1: false,
          }
      }

      pub fn Orientation(&self) -> TPrinterOrientation  {
          unsafe { Printer_GetOrientation(self.0) }
      }

      pub fn SetOrientation(&self, aValue: TPrinterOrientation)  {
          unsafe { Printer_SetOrientation(self.0, aValue) }
      }

      pub fn PageHeight(&self) -> i32  {
          unsafe { Printer_GetPageHeight(self.0) }
      }

      pub fn PageWidth(&self) -> i32  {
          unsafe { Printer_GetPageWidth(self.0) }
      }

      pub fn PageNumber(&self) -> i32  {
          unsafe { Printer_GetPageNumber(self.0) }
      }

      pub fn PrinterIndex(&self) -> i32  {
          unsafe { Printer_GetPrinterIndex(self.0) }
      }

      pub fn SetPrinterIndex(&self, aValue: i32)  {
          unsafe { Printer_SetPrinterIndex(self.0, aValue) }
      }

      pub fn Printing(&self) -> bool  {
          unsafe { Printer_GetPrinting(self.0) }
      }

      pub fn Printers(&self) -> TStrings  {
          TStrings {
              0: unsafe { Printer_GetPrinters(self.0) }
              , 1: false,
          }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Printer_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { Printer_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Printer_StaticClassType() }
      }
      pub fn SetPrinter(&self, aName: &str)  {
          unsafe { Printer_SetPrinter(self.0, CString::new(aName).unwrap().as_ptr()) }
      }

}

impl IObject for TPrinter {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TPrinter {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TTaskDialog {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TTaskDialog {
              0: unsafe { TaskDialog_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTaskDialog { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TaskDialog_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Execute(&self) -> bool  {
          unsafe { TaskDialog_Execute(self.0) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { TaskDialog_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialog_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { TaskDialog_HasParent(self.0) }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { TaskDialog_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TaskDialog_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialog_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TaskDialog_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TaskDialog_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TaskDialog_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TaskDialog_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialog_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Buttons(&self) -> TTaskDialogButtons  {
          TTaskDialogButtons {
              0: unsafe { TaskDialog_GetButtons(self.0) }
              , 1: false,
          }
      }

      pub fn SetButtons(&self, aValue: &TTaskDialogButtons)  {
          unsafe { TaskDialog_SetButtons(self.0, aValue.Instance()) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { TaskDialog_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn CommonButtons(&self) -> TTaskDialogCommonButtons  {
          unsafe { TaskDialog_GetCommonButtons(self.0) }
      }

      pub fn SetCommonButtons(&self, aValue: TTaskDialogCommonButtons)  {
          unsafe { TaskDialog_SetCommonButtons(self.0, aValue) }
      }

      pub fn DefaultButton(&self) -> TTaskDialogCommonButton  {
          unsafe { TaskDialog_GetDefaultButton(self.0) }
      }

      pub fn SetDefaultButton(&self, aValue: TTaskDialogCommonButton)  {
          unsafe { TaskDialog_SetDefaultButton(self.0, aValue) }
      }

      pub fn ExpandButtonCaption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetExpandButtonCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetExpandButtonCaption(&self, aValue: &str)  {
          unsafe { TaskDialog_SetExpandButtonCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ExpandedText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetExpandedText(self.0)).to_string_lossy()  }
      }

      pub fn SetExpandedText(&self, aValue: &str)  {
          unsafe { TaskDialog_SetExpandedText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Flags(&self) -> TTaskDialogFlags  {
          unsafe { TaskDialog_GetFlags(self.0) }
      }

      pub fn SetFlags(&self, aValue: TTaskDialogFlags)  {
          unsafe { TaskDialog_SetFlags(self.0, aValue) }
      }

      pub fn FooterIcon(&self) -> TTaskDialogIcon  {
          unsafe { TaskDialog_GetFooterIcon(self.0) }
      }

      pub fn SetFooterIcon(&self, aValue: TTaskDialogIcon)  {
          unsafe { TaskDialog_SetFooterIcon(self.0, aValue) }
      }

      pub fn FooterText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetFooterText(self.0)).to_string_lossy()  }
      }

      pub fn SetFooterText(&self, aValue: &str)  {
          unsafe { TaskDialog_SetFooterText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn MainIcon(&self) -> TTaskDialogIcon  {
          unsafe { TaskDialog_GetMainIcon(self.0) }
      }

      pub fn SetMainIcon(&self, aValue: TTaskDialogIcon)  {
          unsafe { TaskDialog_SetMainIcon(self.0, aValue) }
      }

      pub fn RadioButtons(&self) -> TTaskDialogButtons  {
          TTaskDialogButtons {
              0: unsafe { TaskDialog_GetRadioButtons(self.0) }
              , 1: false,
          }
      }

      pub fn SetRadioButtons(&self, aValue: &TTaskDialogButtons)  {
          unsafe { TaskDialog_SetRadioButtons(self.0, aValue.Instance()) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { TaskDialog_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Title<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetTitle(self.0)).to_string_lossy()  }
      }

      pub fn SetTitle(&self, aValue: &str)  {
          unsafe { TaskDialog_SetTitle(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn VerificationText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetVerificationText(self.0)).to_string_lossy()  }
      }

      pub fn SetVerificationText(&self, aValue: &str)  {
          unsafe { TaskDialog_SetVerificationText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn SetOnButtonClicked(&self, aEventId: TTaskDlgClickEvent)  {
          unsafe { TaskDialog_SetOnButtonClicked(self.0, aEventId) }
      }

      pub fn Button(&self) -> TTaskDialogButtonItem  {
          TTaskDialogButtonItem {
              0: unsafe { TaskDialog_GetButton(self.0) }
              , 1: false,
          }
      }

      pub fn SetButton(&self, aValue: &TTaskDialogButtonItem)  {
          unsafe { TaskDialog_SetButton(self.0, aValue.Instance()) }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { TaskDialog_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { TaskDialog_SetModalResult(self.0, aValue) }
      }

      pub fn RadioButton(&self) -> TTaskDialogRadioButtonItem  {
          TTaskDialogRadioButtonItem {
              0: unsafe { TaskDialog_GetRadioButton(self.0) }
              , 1: false,
          }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { TaskDialog_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { TaskDialog_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { TaskDialog_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { TaskDialog_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialog_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { TaskDialog_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { TaskDialog_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { TaskDialog_SetTag(self.0, aValue) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { TaskDialog_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TaskDialog_StaticClassType() }
      }
}

impl IObject for TTaskDialog {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TTaskDialog {}

impl TTaskDialogButtons {
      pub fn Add(&self) -> TTaskDialogBaseButtonItem  {
          TTaskDialogBaseButtonItem {
              0: unsafe { TaskDialogButtons_Add(self.0) }
              , 1: false,
          }
      }

      pub fn FindButton(&self, aModalResult: TModalResult) -> TTaskDialogBaseButtonItem  {
          TTaskDialogBaseButtonItem {
              0: unsafe { TaskDialogButtons_FindButton(self.0, aModalResult) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { TaskDialogButtons_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TaskDialogButtons_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { TaskDialogButtons_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { TaskDialogButtons_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { TaskDialogButtons_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { TaskDialogButtons_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { TaskDialogButtons_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogButtons_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Insert(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { TaskDialogButtons_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TaskDialogButtons_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogButtons_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TaskDialogButtons_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TaskDialogButtons_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TaskDialogButtons_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TaskDialogButtons_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogButtons_ToString(self.0)).to_string_lossy()  }
      }

      pub fn DefaultButton(&self) -> TTaskDialogBaseButtonItem  {
          TTaskDialogBaseButtonItem {
              0: unsafe { TaskDialogButtons_GetDefaultButton(self.0) }
              , 1: false,
          }
      }

      pub fn SetDefaultButton(&self, aValue: &TTaskDialogBaseButtonItem)  {
          unsafe { TaskDialogButtons_SetDefaultButton(self.0, aValue.Instance()) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { TaskDialogButtons_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TTaskDialogBaseButtonItem  {
          TTaskDialogBaseButtonItem {
              0: unsafe { TaskDialogButtons_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TTaskDialogBaseButtonItem)  {
          unsafe { TaskDialogButtons_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TaskDialogButtons_StaticClassType() }
      }
}

impl IObject for TTaskDialogButtons {
    fn Instance(&self) -> usize { self.0 }
}


impl TTaskDialogButtonItem {
      pub fn new(aOwner: &TCollection) -> Self {
          TTaskDialogButtonItem {
              0: unsafe { TaskDialogButtonItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTaskDialogButtonItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TaskDialogButtonItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogButtonItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TaskDialogButtonItem_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TaskDialogButtonItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogButtonItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TaskDialogButtonItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TaskDialogButtonItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TaskDialogButtonItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TaskDialogButtonItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogButtonItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { TaskDialogButtonItem_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { TaskDialogButtonItem_SetModalResult(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogButtonItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { TaskDialogButtonItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { TaskDialogButtonItem_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { TaskDialogButtonItem_SetDefault(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { TaskDialogButtonItem_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { TaskDialogButtonItem_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { TaskDialogButtonItem_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { TaskDialogButtonItem_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogButtonItem_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { TaskDialogButtonItem_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TaskDialogButtonItem_StaticClassType() }
      }
}

impl IObject for TTaskDialogButtonItem {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TTaskDialogButtonItem {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TTaskDialogRadioButtonItem {
      pub fn new(aOwner: &TCollection) -> Self {
          TTaskDialogRadioButtonItem {
              0: unsafe { TaskDialogRadioButtonItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTaskDialogRadioButtonItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TaskDialogRadioButtonItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogRadioButtonItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TaskDialogRadioButtonItem_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TaskDialogRadioButtonItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogRadioButtonItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TaskDialogRadioButtonItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TaskDialogRadioButtonItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TaskDialogRadioButtonItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TaskDialogRadioButtonItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogRadioButtonItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { TaskDialogRadioButtonItem_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { TaskDialogRadioButtonItem_SetModalResult(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogRadioButtonItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { TaskDialogRadioButtonItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { TaskDialogRadioButtonItem_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { TaskDialogRadioButtonItem_SetDefault(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { TaskDialogRadioButtonItem_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { TaskDialogRadioButtonItem_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { TaskDialogRadioButtonItem_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { TaskDialogRadioButtonItem_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogRadioButtonItem_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { TaskDialogRadioButtonItem_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TaskDialogRadioButtonItem_StaticClassType() }
      }
}

impl IObject for TTaskDialogRadioButtonItem {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TTaskDialogRadioButtonItem {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TTaskDialogBaseButtonItem {
      pub fn new(aOwner: &TCollection) -> Self {
          TTaskDialogBaseButtonItem {
              0: unsafe { TaskDialogBaseButtonItem_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TTaskDialogBaseButtonItem { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  TaskDialogBaseButtonItem_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogBaseButtonItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { TaskDialogBaseButtonItem_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { TaskDialogBaseButtonItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogBaseButtonItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { TaskDialogBaseButtonItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { TaskDialogBaseButtonItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { TaskDialogBaseButtonItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { TaskDialogBaseButtonItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(TaskDialogBaseButtonItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ModalResult(&self) -> TModalResult  {
          unsafe { TaskDialogBaseButtonItem_GetModalResult(self.0) }
      }

      pub fn SetModalResult(&self, aValue: TModalResult)  {
          unsafe { TaskDialogBaseButtonItem_SetModalResult(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogBaseButtonItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { TaskDialogBaseButtonItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Default(&self) -> bool  {
          unsafe { TaskDialogBaseButtonItem_GetDefault(self.0) }
      }

      pub fn SetDefault(&self, aValue: bool)  {
          unsafe { TaskDialogBaseButtonItem_SetDefault(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { TaskDialogBaseButtonItem_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { TaskDialogBaseButtonItem_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { TaskDialogBaseButtonItem_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { TaskDialogBaseButtonItem_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(TaskDialogBaseButtonItem_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { TaskDialogBaseButtonItem_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { TaskDialogBaseButtonItem_StaticClassType() }
      }
}

impl IObject for TTaskDialogBaseButtonItem {
    fn Instance(&self) -> usize { self.0 }
}

impl Drop for TTaskDialogBaseButtonItem {
     fn drop(&mut self) {
         if self.1 {
             self.Free();
         }
     }
}

impl TComboBoxEx {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TComboBoxEx {
              0: unsafe { ComboBoxEx_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TComboBoxEx { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ComboBoxEx_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ComboBoxEx_Focused(self.0) }
      }

      pub fn AddItem(&self, item: &str, aObject: &dyn IObject)  {
          unsafe { ComboBoxEx_AddItem(self.0, CString::new(item).unwrap().as_ptr(), aObject.Instance()) }
      }

      pub fn Clear(&self)  {
          unsafe { ComboBoxEx_Clear(self.0) }
      }

      pub fn ClearSelection(&self)  {
          unsafe { ComboBoxEx_ClearSelection(self.0) }
      }

      pub fn DeleteSelected(&self)  {
          unsafe { ComboBoxEx_DeleteSelected(self.0) }
      }

      pub fn SelectAll(&self)  {
          unsafe { ComboBoxEx_SelectAll(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ComboBoxEx_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ComboBoxEx_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ComboBoxEx_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ComboBoxEx_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ComboBoxEx_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ComboBoxEx_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ComboBoxEx_FlipChildren(self.0, allLevels) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ComboBoxEx_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ComboBoxEx_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ComboBoxEx_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ComboBoxEx_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ComboBoxEx_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ComboBoxEx_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ComboBoxEx_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ComboBoxEx_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ComboBoxEx_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ComboBoxEx_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ComboBoxEx_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ComboBoxEx_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ComboBoxEx_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ComboBoxEx_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ComboBoxEx_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ComboBoxEx_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ComboBoxEx_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ComboBoxEx_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ComboBoxEx_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ComboBoxEx_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ComboBoxEx_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ComboBoxEx_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ComboBoxEx_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ComboBoxEx_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ComboBoxEx_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ComboBoxEx_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ComboBoxEx_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBoxEx_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ComboBoxEx_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ComboBoxEx_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBoxEx_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ComboBoxEx_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ComboBoxEx_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ComboBoxEx_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ComboBoxEx_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboBoxEx_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ComboBoxEx_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ComboBoxEx_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ComboBoxEx_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ComboBoxEx_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ComboBoxEx_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ComboBoxEx_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ComboBoxEx_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ComboBoxEx_SetAlign(self.0, aValue) }
      }

      pub fn AutoCompleteOptions(&self) -> TAutoCompleteOptions  {
          unsafe { ComboBoxEx_GetAutoCompleteOptions(self.0) }
      }

      pub fn SetAutoCompleteOptions(&self, aValue: TAutoCompleteOptions)  {
          unsafe { ComboBoxEx_SetAutoCompleteOptions(self.0, aValue) }
      }

      pub fn ItemsEx(&self) -> TComboExItems  {
          TComboExItems {
              0: unsafe { ComboBoxEx_GetItemsEx(self.0) }
              , 1: false,
          }
      }

      pub fn SetItemsEx(&self, aValue: &TComboExItems)  {
          unsafe { ComboBoxEx_SetItemsEx(self.0, aValue.Instance()) }
      }

      pub fn Style(&self) -> TComboBoxExStyle  {
          unsafe { ComboBoxEx_GetStyle(self.0) }
      }

      pub fn SetStyle(&self, aValue: TComboBoxExStyle)  {
          unsafe { ComboBoxEx_SetStyle(self.0, aValue) }
      }

      pub fn StyleEx(&self) -> TComboBoxExStyles  {
          unsafe { ComboBoxEx_GetStyleEx(self.0) }
      }

      pub fn SetStyleEx(&self, aValue: TComboBoxExStyles)  {
          unsafe { ComboBoxEx_SetStyleEx(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ComboBoxEx_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ComboBoxEx_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ComboBoxEx_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ComboBoxEx_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ComboBoxEx_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ComboBoxEx_SetBiDiMode(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ComboBoxEx_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ComboBoxEx_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ComboBoxEx_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ComboBoxEx_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ComboBoxEx_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ComboBoxEx_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ComboBoxEx_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ComboBoxEx_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ComboBoxEx_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ComboBoxEx_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ComboBoxEx_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ComboBoxEx_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ComboBoxEx_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ComboBoxEx_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ItemHeight(&self) -> i32  {
          unsafe { ComboBoxEx_GetItemHeight(self.0) }
      }

      pub fn SetItemHeight(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetItemHeight(self.0, aValue) }
      }

      pub fn MaxLength(&self) -> i32  {
          unsafe { ComboBoxEx_GetMaxLength(self.0) }
      }

      pub fn SetMaxLength(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetMaxLength(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { ComboBoxEx_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ComboBoxEx_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ComboBoxEx_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ComboBoxEx_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ComboBoxEx_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ComboBoxEx_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ComboBoxEx_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ComboBoxEx_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ComboBoxEx_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ComboBoxEx_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetTabStop(self.0, aValue) }
      }

      pub fn Text<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBoxEx_GetText(self.0)).to_string_lossy()  }
      }

      pub fn SetText(&self, aValue: &str)  {
          unsafe { ComboBoxEx_SetText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ComboBoxEx_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetVisible(self.0, aValue) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { ComboBoxEx_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ComboBoxEx_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ComboBoxEx_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { ComboBoxEx_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ComboBoxEx_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { ComboBoxEx_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { ComboBoxEx_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { ComboBoxEx_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ComboBoxEx_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnSelect(&self, aEventId: TNotifyEvent)  {
          unsafe { ComboBoxEx_SetOnSelect(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { ComboBoxEx_SetOnStartDock(self.0, aEventId) }
      }

      pub fn Images(&self) -> TImageList  {
          TImageList {
              0: unsafe { ComboBoxEx_GetImages(self.0) }
              , 1: false,
          }
      }

      pub fn SetImages(&self, aValue: &TImageList)  {
          unsafe { ComboBoxEx_SetImages(self.0, aValue.Instance()) }
      }

      pub fn DropDownCount(&self) -> i32  {
          unsafe { ComboBoxEx_GetDropDownCount(self.0) }
      }

      pub fn SetDropDownCount(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetDropDownCount(self.0, aValue) }
      }

      pub fn SelText<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBoxEx_GetSelText(self.0)).to_string_lossy()  }
      }

      pub fn SetSelText(&self, aValue: &str)  {
          unsafe { ComboBoxEx_SetSelText(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Canvas(&self) -> TCanvas  {
          TCanvas {
              0: unsafe { ComboBoxEx_GetCanvas(self.0) }
              , 1: false,
          }
      }

      pub fn DroppedDown(&self) -> bool  {
          unsafe { ComboBoxEx_GetDroppedDown(self.0) }
      }

      pub fn SetDroppedDown(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetDroppedDown(self.0, aValue) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { ComboBoxEx_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { ComboBoxEx_SetItems(self.0, aValue.Instance()) }
      }

      pub fn SelLength(&self) -> i32  {
          unsafe { ComboBoxEx_GetSelLength(self.0) }
      }

      pub fn SetSelLength(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetSelLength(self.0, aValue) }
      }

      pub fn SelStart(&self) -> i32  {
          unsafe { ComboBoxEx_GetSelStart(self.0) }
      }

      pub fn SetSelStart(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetSelStart(self.0, aValue) }
      }

      pub fn ItemIndex(&self) -> i32  {
          unsafe { ComboBoxEx_GetItemIndex(self.0) }
      }

      pub fn SetItemIndex(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetItemIndex(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ComboBoxEx_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ComboBoxEx_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ComboBoxEx_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ComboBoxEx_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ComboBoxEx_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ComboBoxEx_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ComboBoxEx_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ComboBoxEx_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ComboBoxEx_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ComboBoxEx_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ComboBoxEx_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ComboBoxEx_SetUseDockManager(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ComboBoxEx_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ComboBoxEx_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ComboBoxEx_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ComboBoxEx_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ComboBoxEx_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ComboBoxEx_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ComboBoxEx_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ComboBoxEx_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ComboBoxEx_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ComboBoxEx_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ComboBoxEx_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ComboBoxEx_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ComboBoxEx_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ComboBoxEx_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ComboBoxEx_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ComboBoxEx_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ComboBoxEx_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ComboBoxEx_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ComboBoxEx_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBoxEx_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ComboBoxEx_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ComboBoxEx_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ComboBoxEx_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ComboBoxEx_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ComboBoxEx_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboBoxEx_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ComboBoxEx_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ComboBoxEx_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ComboBoxEx_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBoxEx_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBoxEx_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBoxEx_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBoxEx_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBoxEx_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBoxEx_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBoxEx_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ComboBoxEx_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ComboBoxEx_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ComboBoxEx_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ComboBoxEx_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ComboBoxEx_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ComboBoxEx_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ComboBoxEx_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ComboBoxEx_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ComboBoxEx_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ComboBoxEx_StaticClassType() }
      }
}

impl IObject for TComboBoxEx {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TComboBoxEx {}
impl IControl for TComboBoxEx {}
impl IWinControl for TComboBoxEx {}

impl TComboExItems {
      pub fn Add(&self) -> TComboExItem  {
          TComboExItem {
              0: unsafe { ComboExItems_Add(self.0) }
              , 1: false,
          }
      }

      pub fn AddItem(&self, caption: &str, imageIndex: i32, selectedImageIndex: i32, overlayImageIndex: i32, indent: i32, data: usize) -> TComboExItem  {
          TComboExItem {
              0: unsafe { ComboExItems_AddItem(self.0, CString::new(caption).unwrap().as_ptr(), imageIndex, selectedImageIndex, overlayImageIndex, indent, data) }
              , 1: false,
          }
      }

      pub fn Insert(&self, index: i32) -> TComboExItem  {
          TComboExItem {
              0: unsafe { ComboExItems_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { ComboExItems_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ComboExItems_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { ComboExItems_BeginUpdate(self.0) }
      }

      pub fn Clear(&self)  {
          unsafe { ComboExItems_Clear(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { ComboExItems_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { ComboExItems_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { ComboExItems_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboExItems_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ComboExItems_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboExItems_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ComboExItems_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ComboExItems_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ComboExItems_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ComboExItems_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboExItems_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Count(&self) -> i32  {
          unsafe { ComboExItems_GetCount(self.0) }
      }

      pub fn ComboItems(&self, index: i32) -> TComboExItem  {
          TComboExItem {
              0: unsafe { ComboExItems_GetComboItems(self.0, index) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ComboExItems_StaticClassType() }
      }
}

impl IObject for TComboExItems {
    fn Instance(&self) -> usize { self.0 }
}


impl TComboExItem {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ComboExItem_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboExItem_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ComboExItem_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboExItem_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ComboExItem_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ComboExItem_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ComboExItem_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ComboExItem_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ComboExItem_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Indent(&self) -> i32  {
          unsafe { ComboExItem_GetIndent(self.0) }
      }

      pub fn SetIndent(&self, aValue: i32)  {
          unsafe { ComboExItem_SetIndent(self.0, aValue) }
      }

      pub fn OverlayImageIndex(&self) -> i32  {
          unsafe { ComboExItem_GetOverlayImageIndex(self.0) }
      }

      pub fn SetOverlayImageIndex(&self, aValue: i32)  {
          unsafe { ComboExItem_SetOverlayImageIndex(self.0, aValue) }
      }

      pub fn Data(&self) -> usize  {
          unsafe { ComboExItem_GetData(self.0) }
      }

      pub fn SetData(&self, aValue: usize)  {
          unsafe { ComboExItem_SetData(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboExItem_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ComboExItem_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { ComboExItem_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { ComboExItem_SetImageIndex(self.0, aValue) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { ComboExItem_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { ComboExItem_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { ComboExItem_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { ComboExItem_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ComboExItem_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { ComboExItem_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ComboExItem_StaticClassType() }
      }
}

impl IObject for TComboExItem {
    fn Instance(&self) -> usize { self.0 }
}


impl TFrame {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TFrame {
              0: unsafe { Frame_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TFrame { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  Frame_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn ScrollInView(&self, aControl: &dyn IControl)  {
          unsafe { Frame_ScrollInView(self.0, aControl.Instance()) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { Frame_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { Frame_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { Frame_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { Frame_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { Frame_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { Frame_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { Frame_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { Frame_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { Frame_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { Frame_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { Frame_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { Frame_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { Frame_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { Frame_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { Frame_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { Frame_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { Frame_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { Frame_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { Frame_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { Frame_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Frame_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Frame_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { Frame_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { Frame_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { Frame_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { Frame_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { Frame_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { Frame_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { Frame_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { Frame_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { Frame_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { Frame_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { Frame_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { Frame_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { Frame_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Frame_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { Frame_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { Frame_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Frame_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { Frame_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { Frame_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { Frame_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { Frame_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(Frame_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Frame_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { Frame_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Frame_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { Frame_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { Frame_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { Frame_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { Frame_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { Frame_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { Frame_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { Frame_SetAnchors(self.0, aValue) }
      }

      pub fn AutoScroll(&self) -> bool  {
          unsafe { Frame_GetAutoScroll(self.0) }
      }

      pub fn SetAutoScroll(&self, aValue: bool)  {
          unsafe { Frame_SetAutoScroll(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { Frame_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { Frame_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { Frame_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { Frame_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { Frame_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { Frame_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { Frame_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { Frame_SetDockSite(self.0, aValue) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { Frame_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { Frame_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { Frame_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { Frame_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { Frame_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { Frame_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { Frame_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { Frame_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { Frame_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { Frame_SetEnabled(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { Frame_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { Frame_SetColor(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { Frame_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { Frame_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { Frame_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { Frame_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { Frame_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { Frame_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { Frame_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { Frame_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { Frame_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { Frame_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { Frame_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { Frame_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { Frame_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { Frame_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { Frame_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { Frame_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { Frame_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { Frame_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { Frame_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { Frame_SetVisible(self.0, aValue) }
      }

      pub fn SetOnAlignPosition(&self, aEventId: TAlignPositionEvent)  {
          unsafe { Frame_SetOnAlignPosition(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnContextPopup(&self, aEventId: TContextPopupEvent)  {
          unsafe { Frame_SetOnContextPopup(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDockDrop(&self, aEventId: TDockDropEvent)  {
          unsafe { Frame_SetOnDockDrop(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { Frame_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { Frame_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDock(&self, aEventId: TEndDragEvent)  {
          unsafe { Frame_SetOnEndDock(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { Frame_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnGetSiteInfo(&self, aEventId: TGetSiteInfoEvent)  {
          unsafe { Frame_SetOnGetSiteInfo(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { Frame_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { Frame_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { Frame_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { Frame_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { Frame_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { Frame_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { Frame_SetOnResize(self.0, aEventId) }
      }

      pub fn SetOnStartDock(&self, aEventId: TStartDockEvent)  {
          unsafe { Frame_SetOnStartDock(self.0, aEventId) }
      }

      pub fn SetOnUnDock(&self, aEventId: TUnDockEvent)  {
          unsafe { Frame_SetOnUnDock(self.0, aEventId) }
      }

      pub fn HorzScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { Frame_GetHorzScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetHorzScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { Frame_SetHorzScrollBar(self.0, aValue.Instance()) }
      }

      pub fn VertScrollBar(&self) -> TControlScrollBar  {
          TControlScrollBar {
              0: unsafe { Frame_GetVertScrollBar(self.0) }
              , 1: false,
          }
      }

      pub fn SetVertScrollBar(&self, aValue: &TControlScrollBar)  {
          unsafe { Frame_SetVertScrollBar(self.0, aValue.Instance()) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { Frame_GetDockClientCount(self.0) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { Frame_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { Frame_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { Frame_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { Frame_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { Frame_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { Frame_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { Frame_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { Frame_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { Frame_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { Frame_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { Frame_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { Frame_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { Frame_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { Frame_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { Frame_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { Frame_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { Frame_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { Frame_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { Frame_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { Frame_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { Frame_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { Frame_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { Frame_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { Frame_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { Frame_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { Frame_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { Frame_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { Frame_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { Frame_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { Frame_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { Frame_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { Frame_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { Frame_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { Frame_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { Frame_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { Frame_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { Frame_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Frame_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { Frame_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { Frame_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { Frame_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { Frame_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { Frame_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(Frame_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { Frame_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { Frame_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { Frame_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Frame_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { Frame_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Frame_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { Frame_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Frame_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { Frame_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Frame_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { Frame_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { Frame_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { Frame_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { Frame_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { Frame_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Frame_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { Frame_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { Frame_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { Frame_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { Frame_StaticClassType() }
      }
}

impl IObject for TFrame {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TFrame {}
impl IControl for TFrame {}
impl IWinControl for TFrame {}

impl TControlScrollBar {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ControlScrollBar_Assign(self.0, source.Instance()) }
      }

      pub fn IsScrollBarVisible(&self) -> bool  {
          unsafe { ControlScrollBar_IsScrollBarVisible(self.0) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ControlScrollBar_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ControlScrollBar_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlScrollBar_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ControlScrollBar_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ControlScrollBar_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ControlScrollBar_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ControlScrollBar_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlScrollBar_ToString(self.0)).to_string_lossy()  }
      }

      pub fn ScrollPos(&self) -> i32  {
          unsafe { ControlScrollBar_GetScrollPos(self.0) }
      }

      pub fn Increment(&self) -> TScrollBarInc  {
          unsafe { ControlScrollBar_GetIncrement(self.0) }
      }

      pub fn SetIncrement(&self, aValue: TScrollBarInc)  {
          unsafe { ControlScrollBar_SetIncrement(self.0, aValue) }
      }

      pub fn Position(&self) -> i32  {
          unsafe { ControlScrollBar_GetPosition(self.0) }
      }

      pub fn SetPosition(&self, aValue: i32)  {
          unsafe { ControlScrollBar_SetPosition(self.0, aValue) }
      }

      pub fn Range(&self) -> i32  {
          unsafe { ControlScrollBar_GetRange(self.0) }
      }

      pub fn SetRange(&self, aValue: i32)  {
          unsafe { ControlScrollBar_SetRange(self.0, aValue) }
      }

      pub fn Smooth(&self) -> bool  {
          unsafe { ControlScrollBar_GetSmooth(self.0) }
      }

      pub fn SetSmooth(&self, aValue: bool)  {
          unsafe { ControlScrollBar_SetSmooth(self.0, aValue) }
      }

      pub fn Tracking(&self) -> bool  {
          unsafe { ControlScrollBar_GetTracking(self.0) }
      }

      pub fn SetTracking(&self, aValue: bool)  {
          unsafe { ControlScrollBar_SetTracking(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ControlScrollBar_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ControlScrollBar_SetVisible(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ControlScrollBar_StaticClassType() }
      }
}

impl IObject for TControlScrollBar {
    fn Instance(&self) -> usize { self.0 }
}


impl TSizeConstraints {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { SizeConstraints_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(SizeConstraints_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { SizeConstraints_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SizeConstraints_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { SizeConstraints_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { SizeConstraints_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { SizeConstraints_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { SizeConstraints_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(SizeConstraints_ToString(self.0)).to_string_lossy()  }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { SizeConstraints_SetOnChange(self.0, aEventId) }
      }

      pub fn MaxHeight(&self) -> TConstraintSize  {
          unsafe { SizeConstraints_GetMaxHeight(self.0) }
      }

      pub fn SetMaxHeight(&self, aValue: TConstraintSize)  {
          unsafe { SizeConstraints_SetMaxHeight(self.0, aValue) }
      }

      pub fn MaxWidth(&self) -> TConstraintSize  {
          unsafe { SizeConstraints_GetMaxWidth(self.0) }
      }

      pub fn SetMaxWidth(&self, aValue: TConstraintSize)  {
          unsafe { SizeConstraints_SetMaxWidth(self.0, aValue) }
      }

      pub fn MinHeight(&self) -> TConstraintSize  {
          unsafe { SizeConstraints_GetMinHeight(self.0) }
      }

      pub fn SetMinHeight(&self, aValue: TConstraintSize)  {
          unsafe { SizeConstraints_SetMinHeight(self.0, aValue) }
      }

      pub fn MinWidth(&self) -> TConstraintSize  {
          unsafe { SizeConstraints_GetMinWidth(self.0) }
      }

      pub fn SetMinWidth(&self, aValue: TConstraintSize)  {
          unsafe { SizeConstraints_SetMinWidth(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { SizeConstraints_StaticClassType() }
      }
}

impl IObject for TSizeConstraints {
    fn Instance(&self) -> usize { self.0 }
}


impl TXButton {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TXButton {
              0: unsafe { XButton_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TXButton { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  XButton_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn BringToFront(&self) {
          unsafe { XButton_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { XButton_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { XButton_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { XButton_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { XButton_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { XButton_Hide(self.0) }
      }

      pub fn Invalidate(&self) {
          unsafe { XButton_Invalidate(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { XButton_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { XButton_Refresh(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { XButton_Repaint(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { XButton_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { XButton_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { XButton_SendToBack(self.0) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { XButton_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn Show(&self) {
          unsafe { XButton_Show(self.0) }
      }

      pub fn Update(&self) {
          unsafe { XButton_Update(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { XButton_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { XButton_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { XButton_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { XButton_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(XButton_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { XButton_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { XButton_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(XButton_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { XButton_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { XButton_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { XButton_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { XButton_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(XButton_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { XButton_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { XButton_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { XButton_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { XButton_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { XButton_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { XButton_AnchorClient(self.0, aSpace) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(XButton_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { XButton_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ShowCaption(&self) -> bool  {
          unsafe { XButton_GetShowCaption(self.0) }
      }

      pub fn SetShowCaption(&self, aValue: bool)  {
          unsafe { XButton_SetShowCaption(self.0, aValue) }
      }

      pub fn BackColor(&self) -> TColor  {
          unsafe { XButton_GetBackColor(self.0) }
      }

      pub fn SetBackColor(&self, aValue: TColor)  {
          unsafe { XButton_SetBackColor(self.0, aValue) }
      }

      pub fn HoverColor(&self) -> TColor  {
          unsafe { XButton_GetHoverColor(self.0) }
      }

      pub fn SetHoverColor(&self, aValue: TColor)  {
          unsafe { XButton_SetHoverColor(self.0, aValue) }
      }

      pub fn DownColor(&self) -> TColor  {
          unsafe { XButton_GetDownColor(self.0) }
      }

      pub fn SetDownColor(&self, aValue: TColor)  {
          unsafe { XButton_SetDownColor(self.0, aValue) }
      }

      pub fn BorderWidth(&self) -> i32  {
          unsafe { XButton_GetBorderWidth(self.0) }
      }

      pub fn SetBorderWidth(&self, aValue: i32)  {
          unsafe { XButton_SetBorderWidth(self.0, aValue) }
      }

      pub fn BorderColor(&self) -> TColor  {
          unsafe { XButton_GetBorderColor(self.0) }
      }

      pub fn SetBorderColor(&self, aValue: TColor)  {
          unsafe { XButton_SetBorderColor(self.0, aValue) }
      }

      pub fn Picture(&self) -> TPicture  {
          TPicture {
              0: unsafe { XButton_GetPicture(self.0) }
              , 1: false,
          }
      }

      pub fn SetPicture(&self, aValue: &TPicture)  {
          unsafe { XButton_SetPicture(self.0, aValue.Instance()) }
      }

      pub fn DrawMode(&self) -> TDrawImageMode  {
          unsafe { XButton_GetDrawMode(self.0) }
      }

      pub fn SetDrawMode(&self, aValue: TDrawImageMode)  {
          unsafe { XButton_SetDrawMode(self.0, aValue) }
      }

      pub fn NormalFontColor(&self) -> TColor  {
          unsafe { XButton_GetNormalFontColor(self.0) }
      }

      pub fn SetNormalFontColor(&self, aValue: TColor)  {
          unsafe { XButton_SetNormalFontColor(self.0, aValue) }
      }

      pub fn DownFontColor(&self) -> TColor  {
          unsafe { XButton_GetDownFontColor(self.0) }
      }

      pub fn SetDownFontColor(&self, aValue: TColor)  {
          unsafe { XButton_SetDownFontColor(self.0, aValue) }
      }

      pub fn HoverFontColor(&self) -> TColor  {
          unsafe { XButton_GetHoverFontColor(self.0) }
      }

      pub fn SetHoverFontColor(&self, aValue: TColor)  {
          unsafe { XButton_SetHoverFontColor(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { XButton_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { XButton_SetAction(self.0, aValue.Instance()) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { XButton_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { XButton_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { XButton_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { XButton_SetAnchors(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { XButton_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { XButton_SetBiDiMode(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { XButton_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { XButton_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { XButton_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { XButton_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { XButton_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { XButton_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { XButton_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { XButton_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { XButton_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { XButton_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { XButton_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { XButton_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { XButton_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { XButton_SetShowHint(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { XButton_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { XButton_SetVisible(self.0, aValue) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { XButton_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { XButton_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { XButton_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { XButton_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { XButton_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { XButton_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { XButton_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { XButton_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { XButton_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { XButton_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { XButton_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { XButton_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { XButton_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { XButton_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { XButton_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { XButton_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { XButton_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { XButton_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { XButton_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { XButton_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { XButton_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { XButton_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { XButton_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { XButton_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { XButton_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { XButton_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { XButton_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { XButton_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { XButton_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { XButton_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { XButton_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { XButton_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(XButton_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { XButton_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { XButton_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { XButton_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { XButton_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { XButton_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(XButton_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { XButton_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { XButton_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { XButton_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { XButton_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { XButton_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { XButton_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { XButton_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { XButton_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { XButton_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { XButton_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { XButton_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { XButton_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { XButton_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { XButton_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { XButton_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { XButton_StaticClassType() }
      }
}

impl IObject for TXButton {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TXButton {}
impl IControl for TXButton {}

impl TAnchorSide {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { AnchorSide_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(AnchorSide_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { AnchorSide_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(AnchorSide_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { AnchorSide_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { AnchorSide_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { AnchorSide_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { AnchorSide_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(AnchorSide_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Owner(&self) -> TControl  {
          TControl {
              0: unsafe { AnchorSide_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Control(&self) -> TControl  {
          TControl {
              0: unsafe { AnchorSide_GetControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetControl(&self, aValue: &dyn IControl)  {
          unsafe { AnchorSide_SetControl(self.0, aValue.Instance()) }
      }

      pub fn Side(&self) -> TAnchorSideReference  {
          unsafe { AnchorSide_GetSide(self.0) }
      }

      pub fn SetSide(&self, aValue: TAnchorSideReference)  {
          unsafe { AnchorSide_SetSide(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { AnchorSide_StaticClassType() }
      }
}

impl IObject for TAnchorSide {
    fn Instance(&self) -> usize { self.0 }
}


impl TControlBorderSpacing {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ControlBorderSpacing_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ControlBorderSpacing_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ControlBorderSpacing_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlBorderSpacing_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ControlBorderSpacing_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ControlBorderSpacing_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ControlBorderSpacing_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ControlBorderSpacing_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlBorderSpacing_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Control(&self) -> TControl  {
          TControl {
              0: unsafe { ControlBorderSpacing_GetControl(self.0) }
              , 1: false,
          }
      }

      pub fn AroundLeft(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetAroundLeft(self.0) }
      }

      pub fn AroundTop(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetAroundTop(self.0) }
      }

      pub fn AroundRight(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetAroundRight(self.0) }
      }

      pub fn AroundBottom(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetAroundBottom(self.0) }
      }

      pub fn ControlLeft(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlLeft(self.0) }
      }

      pub fn ControlTop(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlTop(self.0) }
      }

      pub fn ControlWidth(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlWidth(self.0) }
      }

      pub fn ControlHeight(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlHeight(self.0) }
      }

      pub fn ControlRight(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlRight(self.0) }
      }

      pub fn ControlBottom(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetControlBottom(self.0) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ControlBorderSpacing_SetOnChange(self.0, aEventId) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetTop(self.0, aValue) }
      }

      pub fn Right(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetRight(self.0) }
      }

      pub fn SetRight(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetRight(self.0, aValue) }
      }

      pub fn Bottom(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetBottom(self.0) }
      }

      pub fn SetBottom(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetBottom(self.0, aValue) }
      }

      pub fn Around(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetAround(self.0) }
      }

      pub fn SetAround(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetAround(self.0, aValue) }
      }

      pub fn InnerBorder(&self) -> i32  {
          unsafe { ControlBorderSpacing_GetInnerBorder(self.0) }
      }

      pub fn SetInnerBorder(&self, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetInnerBorder(self.0, aValue) }
      }

      pub fn CellAlignHorizontal(&self) -> TControlCellAlign  {
          unsafe { ControlBorderSpacing_GetCellAlignHorizontal(self.0) }
      }

      pub fn SetCellAlignHorizontal(&self, aValue: TControlCellAlign)  {
          unsafe { ControlBorderSpacing_SetCellAlignHorizontal(self.0, aValue) }
      }

      pub fn CellAlignVertical(&self) -> TControlCellAlign  {
          unsafe { ControlBorderSpacing_GetCellAlignVertical(self.0) }
      }

      pub fn SetCellAlignVertical(&self, aValue: TControlCellAlign)  {
          unsafe { ControlBorderSpacing_SetCellAlignVertical(self.0, aValue) }
      }

      pub fn Space(&self, kind: TAnchorKind) -> i32  {
          unsafe { ControlBorderSpacing_GetSpace(self.0, kind) }
      }

      pub fn SetSpace(&self, kind: TAnchorKind, aValue: i32)  {
          unsafe { ControlBorderSpacing_SetSpace(self.0, kind, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ControlBorderSpacing_StaticClassType() }
      }
}

impl IObject for TControlBorderSpacing {
    fn Instance(&self) -> usize { self.0 }
}


impl TControlChildSizing {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { ControlChildSizing_Assign(self.0, source.Instance()) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ControlChildSizing_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ControlChildSizing_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlChildSizing_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ControlChildSizing_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ControlChildSizing_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ControlChildSizing_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ControlChildSizing_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ControlChildSizing_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Control(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ControlChildSizing_GetControl(self.0) }
              , 1: false,
          }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ControlChildSizing_SetOnChange(self.0, aEventId) }
      }

      pub fn LeftRightSpacing(&self) -> i32  {
          unsafe { ControlChildSizing_GetLeftRightSpacing(self.0) }
      }

      pub fn SetLeftRightSpacing(&self, aValue: i32)  {
          unsafe { ControlChildSizing_SetLeftRightSpacing(self.0, aValue) }
      }

      pub fn TopBottomSpacing(&self) -> i32  {
          unsafe { ControlChildSizing_GetTopBottomSpacing(self.0) }
      }

      pub fn SetTopBottomSpacing(&self, aValue: i32)  {
          unsafe { ControlChildSizing_SetTopBottomSpacing(self.0, aValue) }
      }

      pub fn HorizontalSpacing(&self) -> i32  {
          unsafe { ControlChildSizing_GetHorizontalSpacing(self.0) }
      }

      pub fn SetHorizontalSpacing(&self, aValue: i32)  {
          unsafe { ControlChildSizing_SetHorizontalSpacing(self.0, aValue) }
      }

      pub fn VerticalSpacing(&self) -> i32  {
          unsafe { ControlChildSizing_GetVerticalSpacing(self.0) }
      }

      pub fn SetVerticalSpacing(&self, aValue: i32)  {
          unsafe { ControlChildSizing_SetVerticalSpacing(self.0, aValue) }
      }

      pub fn EnlargeHorizontal(&self) -> TChildControlResizeStyle  {
          unsafe { ControlChildSizing_GetEnlargeHorizontal(self.0) }
      }

      pub fn SetEnlargeHorizontal(&self, aValue: TChildControlResizeStyle)  {
          unsafe { ControlChildSizing_SetEnlargeHorizontal(self.0, aValue) }
      }

      pub fn EnlargeVertical(&self) -> TChildControlResizeStyle  {
          unsafe { ControlChildSizing_GetEnlargeVertical(self.0) }
      }

      pub fn SetEnlargeVertical(&self, aValue: TChildControlResizeStyle)  {
          unsafe { ControlChildSizing_SetEnlargeVertical(self.0, aValue) }
      }

      pub fn ShrinkHorizontal(&self) -> TChildControlResizeStyle  {
          unsafe { ControlChildSizing_GetShrinkHorizontal(self.0) }
      }

      pub fn SetShrinkHorizontal(&self, aValue: TChildControlResizeStyle)  {
          unsafe { ControlChildSizing_SetShrinkHorizontal(self.0, aValue) }
      }

      pub fn ShrinkVertical(&self) -> TChildControlResizeStyle  {
          unsafe { ControlChildSizing_GetShrinkVertical(self.0) }
      }

      pub fn SetShrinkVertical(&self, aValue: TChildControlResizeStyle)  {
          unsafe { ControlChildSizing_SetShrinkVertical(self.0, aValue) }
      }

      pub fn Layout(&self) -> TControlChildrenLayout  {
          unsafe { ControlChildSizing_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TControlChildrenLayout)  {
          unsafe { ControlChildSizing_SetLayout(self.0, aValue) }
      }

      pub fn ControlsPerLine(&self) -> i32  {
          unsafe { ControlChildSizing_GetControlsPerLine(self.0) }
      }

      pub fn SetControlsPerLine(&self, aValue: i32)  {
          unsafe { ControlChildSizing_SetControlsPerLine(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ControlChildSizing_StaticClassType() }
      }
}

impl IObject for TControlChildSizing {
    fn Instance(&self) -> usize { self.0 }
}


impl TCheckGroup {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TCheckGroup {
              0: unsafe { CheckGroup_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TCheckGroup { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  CheckGroup_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { CheckGroup_FlipChildren(self.0, allLevels) }
      }

      pub fn Rows(&self) -> i32  {
          unsafe { CheckGroup_Rows(self.0) }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { CheckGroup_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { CheckGroup_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { CheckGroup_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { CheckGroup_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { CheckGroup_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { CheckGroup_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn Focused(&self) -> bool {
          unsafe { CheckGroup_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { CheckGroup_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { CheckGroup_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { CheckGroup_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { CheckGroup_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { CheckGroup_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { CheckGroup_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { CheckGroup_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { CheckGroup_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { CheckGroup_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { CheckGroup_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { CheckGroup_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { CheckGroup_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckGroup_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckGroup_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { CheckGroup_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { CheckGroup_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { CheckGroup_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { CheckGroup_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { CheckGroup_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { CheckGroup_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { CheckGroup_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { CheckGroup_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { CheckGroup_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { CheckGroup_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { CheckGroup_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { CheckGroup_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { CheckGroup_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckGroup_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { CheckGroup_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { CheckGroup_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckGroup_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { CheckGroup_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { CheckGroup_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { CheckGroup_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { CheckGroup_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(CheckGroup_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckGroup_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { CheckGroup_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckGroup_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { CheckGroup_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { CheckGroup_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { CheckGroup_AnchorClient(self.0, aSpace) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { CheckGroup_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { CheckGroup_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { CheckGroup_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { CheckGroup_SetAnchors(self.0, aValue) }
      }

      pub fn AutoFill(&self) -> bool  {
          unsafe { CheckGroup_GetAutoFill(self.0) }
      }

      pub fn SetAutoFill(&self, aValue: bool)  {
          unsafe { CheckGroup_SetAutoFill(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { CheckGroup_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { CheckGroup_SetAutoSize(self.0, aValue) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { CheckGroup_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { CheckGroup_SetBiDiMode(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckGroup_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { CheckGroup_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { CheckGroup_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { CheckGroup_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { CheckGroup_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { CheckGroup_SetClientWidth(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { CheckGroup_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { CheckGroup_SetColor(self.0, aValue) }
      }

      pub fn ColumnLayout(&self) -> TColumnLayout  {
          unsafe { CheckGroup_GetColumnLayout(self.0) }
      }

      pub fn SetColumnLayout(&self, aValue: TColumnLayout)  {
          unsafe { CheckGroup_SetColumnLayout(self.0, aValue) }
      }

      pub fn Columns(&self) -> i32  {
          unsafe { CheckGroup_GetColumns(self.0) }
      }

      pub fn SetColumns(&self, aValue: i32)  {
          unsafe { CheckGroup_SetColumns(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { CheckGroup_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { CheckGroup_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { CheckGroup_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckGroup_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { CheckGroup_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { CheckGroup_SetDragCursor(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { CheckGroup_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { CheckGroup_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { CheckGroup_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { CheckGroup_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { CheckGroup_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { CheckGroup_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Items(&self) -> TStrings  {
          TStrings {
              0: unsafe { CheckGroup_GetItems(self.0) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, aValue: &TStrings)  {
          unsafe { CheckGroup_SetItems(self.0, aValue.Instance()) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDblClick(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnDblClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { CheckGroup_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { CheckGroup_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { CheckGroup_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnItemClick(&self, aEventId: TCheckGroupClicked)  {
          unsafe { CheckGroup_SetOnItemClick(self.0, aEventId) }
      }

      pub fn SetOnKeyDown(&self, aEventId: TKeyEvent)  {
          unsafe { CheckGroup_SetOnKeyDown(self.0, aEventId) }
      }

      pub fn SetOnKeyPress(&self, aEventId: TKeyPressEvent)  {
          unsafe { CheckGroup_SetOnKeyPress(self.0, aEventId) }
      }

      pub fn SetOnKeyUp(&self, aEventId: TKeyEvent)  {
          unsafe { CheckGroup_SetOnKeyUp(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { CheckGroup_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { CheckGroup_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { CheckGroup_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { CheckGroup_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { CheckGroup_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { CheckGroup_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn SetOnResize(&self, aEventId: TNotifyEvent)  {
          unsafe { CheckGroup_SetOnResize(self.0, aEventId) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { CheckGroup_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { CheckGroup_SetParentFont(self.0, aValue) }
      }

      pub fn ParentColor(&self) -> bool  {
          unsafe { CheckGroup_GetParentColor(self.0) }
      }

      pub fn SetParentColor(&self, aValue: bool)  {
          unsafe { CheckGroup_SetParentColor(self.0, aValue) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { CheckGroup_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { CheckGroup_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { CheckGroup_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { CheckGroup_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { CheckGroup_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { CheckGroup_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { CheckGroup_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { CheckGroup_SetShowHint(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { CheckGroup_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { CheckGroup_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { CheckGroup_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { CheckGroup_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { CheckGroup_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { CheckGroup_SetVisible(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { CheckGroup_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { CheckGroup_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { CheckGroup_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { CheckGroup_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { CheckGroup_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { CheckGroup_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { CheckGroup_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { CheckGroup_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { CheckGroup_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { CheckGroup_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { CheckGroup_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { CheckGroup_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { CheckGroup_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { CheckGroup_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { CheckGroup_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { CheckGroup_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { CheckGroup_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { CheckGroup_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { CheckGroup_GetClientRect(self.0, result) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { CheckGroup_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { CheckGroup_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { CheckGroup_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { CheckGroup_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { CheckGroup_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { CheckGroup_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { CheckGroup_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { CheckGroup_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { CheckGroup_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { CheckGroup_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { CheckGroup_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { CheckGroup_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { CheckGroup_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { CheckGroup_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { CheckGroup_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { CheckGroup_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { CheckGroup_SetCursor(self.0, aValue) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckGroup_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { CheckGroup_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { CheckGroup_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { CheckGroup_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { CheckGroup_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { CheckGroup_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(CheckGroup_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { CheckGroup_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { CheckGroup_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { CheckGroup_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckGroup_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { CheckGroup_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckGroup_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { CheckGroup_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckGroup_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { CheckGroup_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckGroup_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { CheckGroup_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { CheckGroup_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { CheckGroup_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { CheckGroup_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { CheckGroup_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn Checked(&self, index: i32) -> bool  {
          unsafe { CheckGroup_GetChecked(self.0, index) }
      }

      pub fn SetChecked(&self, index: i32, aValue: bool)  {
          unsafe { CheckGroup_SetChecked(self.0, index, aValue) }
      }

      pub fn CheckEnabled(&self, index: i32) -> bool  {
          unsafe { CheckGroup_GetCheckEnabled(self.0, index) }
      }

      pub fn SetCheckEnabled(&self, index: i32, aValue: bool)  {
          unsafe { CheckGroup_SetCheckEnabled(self.0, index, aValue) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckGroup_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { CheckGroup_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { CheckGroup_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { CheckGroup_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { CheckGroup_StaticClassType() }
      }
}

impl IObject for TCheckGroup {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TCheckGroup {}
impl IControl for TCheckGroup {}
impl IWinControl for TCheckGroup {}

impl TToggleBox {
      pub fn new(aOwner: &dyn IComponent) -> Self {
          TToggleBox {
              0: unsafe { ToggleBox_Create(aOwner.Instance()) },
              1: true,
          }
      }

      pub fn As(inst: usize) -> Self {
          TToggleBox { 0: inst, 1: false }
      }

      pub fn Free(&mut self) {
          unsafe {
              if self.0 > 0 {
                  ToggleBox_Free(self.0);
                  self.0 = 0;
              }
          }
      }

      pub fn CanFocus(&self) -> bool {
          unsafe { ToggleBox_CanFocus(self.0) }
      }

      pub fn ContainsControl(&self, control: &dyn IControl) -> bool {
          unsafe { ToggleBox_ContainsControl(self.0, control.Instance()) }
      }

      pub fn ControlAtPos(&self, pos: *mut TPoint, allowDisabled: bool, allowWinControls: bool) -> TControl {
          TControl {
              0: unsafe { ToggleBox_ControlAtPos(self.0, pos, allowDisabled, allowWinControls) }
              , 1: false,
          }
      }

      pub fn DisableAlign(&self) {
          unsafe { ToggleBox_DisableAlign(self.0) }
      }

      pub fn EnableAlign(&self) {
          unsafe { ToggleBox_EnableAlign(self.0) }
      }

      pub fn FindChildControl(&self, controlName: &str) -> TControl {
          TControl {
              0: unsafe { ToggleBox_FindChildControl(self.0, CString::new(controlName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn FlipChildren(&self, allLevels: bool) {
          unsafe { ToggleBox_FlipChildren(self.0, allLevels) }
      }

      pub fn Focused(&self) -> bool {
          unsafe { ToggleBox_Focused(self.0) }
      }

      pub fn HandleAllocated(&self) -> bool {
          unsafe { ToggleBox_HandleAllocated(self.0) }
      }

      pub fn InsertControl(&self, aControl: &dyn IControl) {
          unsafe { ToggleBox_InsertControl(self.0, aControl.Instance()) }
      }

      pub fn Invalidate(&self) {
          unsafe { ToggleBox_Invalidate(self.0) }
      }

      pub fn RemoveControl(&self, aControl: &dyn IControl) {
          unsafe { ToggleBox_RemoveControl(self.0, aControl.Instance()) }
      }

      pub fn Realign(&self) {
          unsafe { ToggleBox_Realign(self.0) }
      }

      pub fn Repaint(&self) {
          unsafe { ToggleBox_Repaint(self.0) }
      }

      pub fn ScaleBy(&self, m: i32, d: i32) {
          unsafe { ToggleBox_ScaleBy(self.0, m, d) }
      }

      pub fn ScrollBy(&self, deltaX: i32, deltaY: i32) {
          unsafe { ToggleBox_ScrollBy(self.0, deltaX, deltaY) }
      }

      pub fn SetBounds(&self, aLeft: i32, aTop: i32, aWidth: i32, aHeight: i32) {
          unsafe { ToggleBox_SetBounds(self.0, aLeft, aTop, aWidth, aHeight) }
      }

      pub fn SetFocus(&self) {
          unsafe { ToggleBox_SetFocus(self.0) }
      }

      pub fn Update(&self) {
          unsafe { ToggleBox_Update(self.0) }
      }

      pub fn BringToFront(&self) {
          unsafe { ToggleBox_BringToFront(self.0) }
      }

      pub fn ClientToScreen(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToggleBox_ClientToScreen(self.0, point, result) }
      }

      pub fn ClientToParent(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToggleBox_ClientToParent(self.0, point, aParent.Instance(), result) }
      }

      pub fn Dragging(&self) -> bool {
          unsafe { ToggleBox_Dragging(self.0) }
      }

      pub fn HasParent(&self) -> bool {
          unsafe { ToggleBox_HasParent(self.0) }
      }

      pub fn Hide(&self) {
          unsafe { ToggleBox_Hide(self.0) }
      }

      pub fn Perform(&self, msg: u32, wParam: usize, lParam: isize) -> isize {
          unsafe { ToggleBox_Perform(self.0, msg, wParam, lParam) }
      }

      pub fn Refresh(&self) {
          unsafe { ToggleBox_Refresh(self.0) }
      }

      pub fn ScreenToClient(&self, point: *mut TPoint, result: *mut TPoint) {
          unsafe { ToggleBox_ScreenToClient(self.0, point, result) }
      }

      pub fn ParentToClient(&self, point: *mut TPoint, aParent: &dyn IWinControl, result: *mut TPoint) {
          unsafe { ToggleBox_ParentToClient(self.0, point, aParent.Instance(), result) }
      }

      pub fn SendToBack(&self) {
          unsafe { ToggleBox_SendToBack(self.0) }
      }

      pub fn Show(&self) {
          unsafe { ToggleBox_Show(self.0) }
      }

      pub fn GetTextBuf(&self, buffer: &str, bufSize: i32) -> i32 {
          unsafe { ToggleBox_GetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr(), bufSize) }
      }

      pub fn GetTextLen(&self) -> i32 {
          unsafe { ToggleBox_GetTextLen(self.0) }
      }

      pub fn SetTextBuf(&self, buffer: &str) {
          unsafe { ToggleBox_SetTextBuf(self.0, CString::new(buffer).unwrap().as_ptr()) }
      }

      pub fn FindComponent(&self, aName: &str) -> TComponent {
          TComponent {
              0: unsafe { ToggleBox_FindComponent(self.0, CString::new(aName).unwrap().as_ptr()) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToggleBox_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Assign(&self, source: &dyn IObject) {
          unsafe { ToggleBox_Assign(self.0, source.Instance()) }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { ToggleBox_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToggleBox_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { ToggleBox_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { ToggleBox_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { ToggleBox_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { ToggleBox_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(ToggleBox_ToString(self.0)).to_string_lossy()  }
      }

      pub fn AnchorToNeighbour(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToggleBox_AnchorToNeighbour(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorParallel(&self, aSide: TAnchorKind, aSpace: i32, aSibling: &dyn IControl) {
          unsafe { ToggleBox_AnchorParallel(self.0, aSide, aSpace, aSibling.Instance()) }
      }

      pub fn AnchorHorizontalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToggleBox_AnchorHorizontalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorVerticalCenterTo(&self, aSibling: &dyn IControl) {
          unsafe { ToggleBox_AnchorVerticalCenterTo(self.0, aSibling.Instance()) }
      }

      pub fn AnchorAsAlign(&self, aTheAlign: TAlign, aSpace: i32) {
          unsafe { ToggleBox_AnchorAsAlign(self.0, aTheAlign, aSpace) }
      }

      pub fn AnchorClient(&self, aSpace: i32) {
          unsafe { ToggleBox_AnchorClient(self.0, aSpace) }
      }

      pub fn AllowGrayed(&self) -> bool  {
          unsafe { ToggleBox_GetAllowGrayed(self.0) }
      }

      pub fn SetAllowGrayed(&self, aValue: bool)  {
          unsafe { ToggleBox_SetAllowGrayed(self.0, aValue) }
      }

      pub fn Align(&self) -> TAlign  {
          unsafe { ToggleBox_GetAlign(self.0) }
      }

      pub fn SetAlign(&self, aValue: TAlign)  {
          unsafe { ToggleBox_SetAlign(self.0, aValue) }
      }

      pub fn Anchors(&self) -> TAnchors  {
          unsafe { ToggleBox_GetAnchors(self.0) }
      }

      pub fn SetAnchors(&self, aValue: TAnchors)  {
          unsafe { ToggleBox_SetAnchors(self.0, aValue) }
      }

      pub fn AutoSize(&self) -> bool  {
          unsafe { ToggleBox_GetAutoSize(self.0) }
      }

      pub fn SetAutoSize(&self, aValue: bool)  {
          unsafe { ToggleBox_SetAutoSize(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToggleBox_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { ToggleBox_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Checked(&self) -> bool  {
          unsafe { ToggleBox_GetChecked(self.0) }
      }

      pub fn SetChecked(&self, aValue: bool)  {
          unsafe { ToggleBox_SetChecked(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { ToggleBox_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { ToggleBox_SetColor(self.0, aValue) }
      }

      pub fn Constraints(&self) -> TSizeConstraints  {
          TSizeConstraints {
              0: unsafe { ToggleBox_GetConstraints(self.0) }
              , 1: false,
          }
      }

      pub fn SetConstraints(&self, aValue: &TSizeConstraints)  {
          unsafe { ToggleBox_SetConstraints(self.0, aValue.Instance()) }
      }

      pub fn DoubleBuffered(&self) -> bool  {
          unsafe { ToggleBox_GetDoubleBuffered(self.0) }
      }

      pub fn SetDoubleBuffered(&self, aValue: bool)  {
          unsafe { ToggleBox_SetDoubleBuffered(self.0, aValue) }
      }

      pub fn DragCursor(&self) -> TCursor  {
          unsafe { ToggleBox_GetDragCursor(self.0) }
      }

      pub fn SetDragCursor(&self, aValue: TCursor)  {
          unsafe { ToggleBox_SetDragCursor(self.0, aValue) }
      }

      pub fn DragKind(&self) -> TDragKind  {
          unsafe { ToggleBox_GetDragKind(self.0) }
      }

      pub fn SetDragKind(&self, aValue: TDragKind)  {
          unsafe { ToggleBox_SetDragKind(self.0, aValue) }
      }

      pub fn DragMode(&self) -> TDragMode  {
          unsafe { ToggleBox_GetDragMode(self.0) }
      }

      pub fn SetDragMode(&self, aValue: TDragMode)  {
          unsafe { ToggleBox_SetDragMode(self.0, aValue) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { ToggleBox_GetEnabled(self.0) }
      }

      pub fn SetEnabled(&self, aValue: bool)  {
          unsafe { ToggleBox_SetEnabled(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { ToggleBox_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { ToggleBox_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Hint<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToggleBox_GetHint(self.0)).to_string_lossy()  }
      }

      pub fn SetHint(&self, aValue: &str)  {
          unsafe { ToggleBox_SetHint(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn SetOnChange(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnChange(self.0, aEventId) }
      }

      pub fn SetOnClick(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnClick(self.0, aEventId) }
      }

      pub fn SetOnDragDrop(&self, aEventId: TDragDropEvent)  {
          unsafe { ToggleBox_SetOnDragDrop(self.0, aEventId) }
      }

      pub fn SetOnDragOver(&self, aEventId: TDragOverEvent)  {
          unsafe { ToggleBox_SetOnDragOver(self.0, aEventId) }
      }

      pub fn SetOnEndDrag(&self, aEventId: TEndDragEvent)  {
          unsafe { ToggleBox_SetOnEndDrag(self.0, aEventId) }
      }

      pub fn SetOnEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnEnter(self.0, aEventId) }
      }

      pub fn SetOnExit(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnExit(self.0, aEventId) }
      }

      pub fn SetOnMouseDown(&self, aEventId: TMouseEvent)  {
          unsafe { ToggleBox_SetOnMouseDown(self.0, aEventId) }
      }

      pub fn SetOnMouseEnter(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnMouseEnter(self.0, aEventId) }
      }

      pub fn SetOnMouseLeave(&self, aEventId: TNotifyEvent)  {
          unsafe { ToggleBox_SetOnMouseLeave(self.0, aEventId) }
      }

      pub fn SetOnMouseMove(&self, aEventId: TMouseMoveEvent)  {
          unsafe { ToggleBox_SetOnMouseMove(self.0, aEventId) }
      }

      pub fn SetOnMouseUp(&self, aEventId: TMouseEvent)  {
          unsafe { ToggleBox_SetOnMouseUp(self.0, aEventId) }
      }

      pub fn SetOnMouseWheel(&self, aEventId: TMouseWheelEvent)  {
          unsafe { ToggleBox_SetOnMouseWheel(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelDown(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ToggleBox_SetOnMouseWheelDown(self.0, aEventId) }
      }

      pub fn SetOnMouseWheelUp(&self, aEventId: TMouseWheelUpDownEvent)  {
          unsafe { ToggleBox_SetOnMouseWheelUp(self.0, aEventId) }
      }

      pub fn ParentDoubleBuffered(&self) -> bool  {
          unsafe { ToggleBox_GetParentDoubleBuffered(self.0) }
      }

      pub fn SetParentDoubleBuffered(&self, aValue: bool)  {
          unsafe { ToggleBox_SetParentDoubleBuffered(self.0, aValue) }
      }

      pub fn ParentFont(&self) -> bool  {
          unsafe { ToggleBox_GetParentFont(self.0) }
      }

      pub fn SetParentFont(&self, aValue: bool)  {
          unsafe { ToggleBox_SetParentFont(self.0, aValue) }
      }

      pub fn ParentShowHint(&self) -> bool  {
          unsafe { ToggleBox_GetParentShowHint(self.0) }
      }

      pub fn SetParentShowHint(&self, aValue: bool)  {
          unsafe { ToggleBox_SetParentShowHint(self.0, aValue) }
      }

      pub fn PopupMenu(&self) -> TPopupMenu  {
          TPopupMenu {
              0: unsafe { ToggleBox_GetPopupMenu(self.0) }
              , 1: false,
          }
      }

      pub fn SetPopupMenu(&self, aValue: &TPopupMenu)  {
          unsafe { ToggleBox_SetPopupMenu(self.0, aValue.Instance()) }
      }

      pub fn ShowHint(&self) -> bool  {
          unsafe { ToggleBox_GetShowHint(self.0) }
      }

      pub fn SetShowHint(&self, aValue: bool)  {
          unsafe { ToggleBox_SetShowHint(self.0, aValue) }
      }

      pub fn State(&self) -> TCheckBoxState  {
          unsafe { ToggleBox_GetState(self.0) }
      }

      pub fn SetState(&self, aValue: TCheckBoxState)  {
          unsafe { ToggleBox_SetState(self.0, aValue) }
      }

      pub fn TabOrder(&self) -> TTabOrder  {
          unsafe { ToggleBox_GetTabOrder(self.0) }
      }

      pub fn SetTabOrder(&self, aValue: TTabOrder)  {
          unsafe { ToggleBox_SetTabOrder(self.0, aValue) }
      }

      pub fn TabStop(&self) -> bool  {
          unsafe { ToggleBox_GetTabStop(self.0) }
      }

      pub fn SetTabStop(&self, aValue: bool)  {
          unsafe { ToggleBox_SetTabStop(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { ToggleBox_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { ToggleBox_SetVisible(self.0, aValue) }
      }

      pub fn DockClientCount(&self) -> i32  {
          unsafe { ToggleBox_GetDockClientCount(self.0) }
      }

      pub fn DockSite(&self) -> bool  {
          unsafe { ToggleBox_GetDockSite(self.0) }
      }

      pub fn SetDockSite(&self, aValue: bool)  {
          unsafe { ToggleBox_SetDockSite(self.0, aValue) }
      }

      pub fn MouseInClient(&self) -> bool  {
          unsafe { ToggleBox_GetMouseInClient(self.0) }
      }

      pub fn VisibleDockClientCount(&self) -> i32  {
          unsafe { ToggleBox_GetVisibleDockClientCount(self.0) }
      }

      pub fn Brush(&self) -> TBrush  {
          TBrush {
              0: unsafe { ToggleBox_GetBrush(self.0) }
              , 1: false,
          }
      }

      pub fn ControlCount(&self) -> i32  {
          unsafe { ToggleBox_GetControlCount(self.0) }
      }

      pub fn Handle(&self) -> HWND  {
          unsafe { ToggleBox_GetHandle(self.0) }
      }

      pub fn ParentWindow(&self) -> HWND  {
          unsafe { ToggleBox_GetParentWindow(self.0) }
      }

      pub fn SetParentWindow(&self, aValue: HWND)  {
          unsafe { ToggleBox_SetParentWindow(self.0, aValue) }
      }

      pub fn Showing(&self) -> bool  {
          unsafe { ToggleBox_GetShowing(self.0) }
      }

      pub fn UseDockManager(&self) -> bool  {
          unsafe { ToggleBox_GetUseDockManager(self.0) }
      }

      pub fn SetUseDockManager(&self, aValue: bool)  {
          unsafe { ToggleBox_SetUseDockManager(self.0, aValue) }
      }

      pub fn Action(&self) -> TAction  {
          TAction {
              0: unsafe { ToggleBox_GetAction(self.0) }
              , 1: false,
          }
      }

      pub fn SetAction(&self, aValue: &TAction)  {
          unsafe { ToggleBox_SetAction(self.0, aValue.Instance()) }
      }

      pub fn BiDiMode(&self) -> TBiDiMode  {
          unsafe { ToggleBox_GetBiDiMode(self.0) }
      }

      pub fn SetBiDiMode(&self, aValue: TBiDiMode)  {
          unsafe { ToggleBox_SetBiDiMode(self.0, aValue) }
      }

      pub fn BoundsRect(&self, result: *mut TRect)  {
          unsafe { ToggleBox_GetBoundsRect(self.0, result) }
      }

      pub fn SetBoundsRect(&self, aValue: *mut TRect)  {
          unsafe { ToggleBox_SetBoundsRect(self.0, aValue) }
      }

      pub fn ClientHeight(&self) -> i32  {
          unsafe { ToggleBox_GetClientHeight(self.0) }
      }

      pub fn SetClientHeight(&self, aValue: i32)  {
          unsafe { ToggleBox_SetClientHeight(self.0, aValue) }
      }

      pub fn ClientOrigin(&self, result: *mut TPoint)  {
          unsafe { ToggleBox_GetClientOrigin(self.0, result) }
      }

      pub fn ClientRect(&self, result: *mut TRect)  {
          unsafe { ToggleBox_GetClientRect(self.0, result) }
      }

      pub fn ClientWidth(&self) -> i32  {
          unsafe { ToggleBox_GetClientWidth(self.0) }
      }

      pub fn SetClientWidth(&self, aValue: i32)  {
          unsafe { ToggleBox_SetClientWidth(self.0, aValue) }
      }

      pub fn ControlState(&self) -> TControlState  {
          unsafe { ToggleBox_GetControlState(self.0) }
      }

      pub fn SetControlState(&self, aValue: TControlState)  {
          unsafe { ToggleBox_SetControlState(self.0, aValue) }
      }

      pub fn ControlStyle(&self) -> TControlStyle  {
          unsafe { ToggleBox_GetControlStyle(self.0) }
      }

      pub fn SetControlStyle(&self, aValue: TControlStyle)  {
          unsafe { ToggleBox_SetControlStyle(self.0, aValue) }
      }

      pub fn Floating(&self) -> bool  {
          unsafe { ToggleBox_GetFloating(self.0) }
      }

      pub fn Parent(&self) -> TWinControl  {
          TWinControl {
              0: unsafe { ToggleBox_GetParent(self.0) }
              , 1: false,
          }
      }

      pub fn SetParent(&self, aValue: &dyn IWinControl)  {
          unsafe { ToggleBox_SetParent(self.0, aValue.Instance()) }
      }

      pub fn Left(&self) -> i32  {
          unsafe { ToggleBox_GetLeft(self.0) }
      }

      pub fn SetLeft(&self, aValue: i32)  {
          unsafe { ToggleBox_SetLeft(self.0, aValue) }
      }

      pub fn Top(&self) -> i32  {
          unsafe { ToggleBox_GetTop(self.0) }
      }

      pub fn SetTop(&self, aValue: i32)  {
          unsafe { ToggleBox_SetTop(self.0, aValue) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { ToggleBox_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { ToggleBox_SetWidth(self.0, aValue) }
      }

      pub fn Height(&self) -> i32  {
          unsafe { ToggleBox_GetHeight(self.0) }
      }

      pub fn SetHeight(&self, aValue: i32)  {
          unsafe { ToggleBox_SetHeight(self.0, aValue) }
      }

      pub fn Cursor(&self) -> TCursor  {
          unsafe { ToggleBox_GetCursor(self.0) }
      }

      pub fn SetCursor(&self, aValue: TCursor)  {
          unsafe { ToggleBox_SetCursor(self.0, aValue) }
      }

      pub fn ComponentCount(&self) -> i32  {
          unsafe { ToggleBox_GetComponentCount(self.0) }
      }

      pub fn ComponentIndex(&self) -> i32  {
          unsafe { ToggleBox_GetComponentIndex(self.0) }
      }

      pub fn SetComponentIndex(&self, aValue: i32)  {
          unsafe { ToggleBox_SetComponentIndex(self.0, aValue) }
      }

      pub fn Owner(&self) -> TComponent  {
          TComponent {
              0: unsafe { ToggleBox_GetOwner(self.0) }
              , 1: false,
          }
      }

      pub fn Name<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(ToggleBox_GetName(self.0)).to_string_lossy()  }
      }

      pub fn SetName(&self, aValue: &str)  {
          unsafe { ToggleBox_SetName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { ToggleBox_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { ToggleBox_SetTag(self.0, aValue) }
      }

      pub fn AnchorSideLeft(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToggleBox_GetAnchorSideLeft(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideLeft(&self, aValue: &TAnchorSide)  {
          unsafe { ToggleBox_SetAnchorSideLeft(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideTop(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToggleBox_GetAnchorSideTop(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideTop(&self, aValue: &TAnchorSide)  {
          unsafe { ToggleBox_SetAnchorSideTop(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideRight(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToggleBox_GetAnchorSideRight(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideRight(&self, aValue: &TAnchorSide)  {
          unsafe { ToggleBox_SetAnchorSideRight(self.0, aValue.Instance()) }
      }

      pub fn AnchorSideBottom(&self) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToggleBox_GetAnchorSideBottom(self.0) }
              , 1: false,
          }
      }

      pub fn SetAnchorSideBottom(&self, aValue: &TAnchorSide)  {
          unsafe { ToggleBox_SetAnchorSideBottom(self.0, aValue.Instance()) }
      }

      pub fn ChildSizing(&self) -> TControlChildSizing  {
          TControlChildSizing {
              0: unsafe { ToggleBox_GetChildSizing(self.0) }
              , 1: false,
          }
      }

      pub fn SetChildSizing(&self, aValue: &TControlChildSizing)  {
          unsafe { ToggleBox_SetChildSizing(self.0, aValue.Instance()) }
      }

      pub fn BorderSpacing(&self) -> TControlBorderSpacing  {
          TControlBorderSpacing {
              0: unsafe { ToggleBox_GetBorderSpacing(self.0) }
              , 1: false,
          }
      }

      pub fn SetBorderSpacing(&self, aValue: &TControlBorderSpacing)  {
          unsafe { ToggleBox_SetBorderSpacing(self.0, aValue.Instance()) }
      }

      pub fn DockClients(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ToggleBox_GetDockClients(self.0, index) }
              , 1: false,
          }
      }

      pub fn Controls(&self, index: i32) -> TControl  {
          TControl {
              0: unsafe { ToggleBox_GetControls(self.0, index) }
              , 1: false,
          }
      }

      pub fn Components(&self, aIndex: i32) -> TComponent  {
          TComponent {
              0: unsafe { ToggleBox_GetComponents(self.0, aIndex) }
              , 1: false,
          }
      }

      pub fn AnchorSide(&self, aKind: TAnchorKind) -> TAnchorSide  {
          TAnchorSide {
              0: unsafe { ToggleBox_GetAnchorSide(self.0, aKind) }
              , 1: false,
          }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { ToggleBox_StaticClassType() }
      }
}

impl IObject for TToggleBox {
    fn Instance(&self) -> usize { self.0 }
}

impl IComponent for TToggleBox {}
impl IControl for TToggleBox {}
impl IWinControl for TToggleBox {}

impl TGridColumnTitle {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { GridColumnTitle_Assign(self.0, source.Instance()) }
      }

      pub fn FillTitleDefaultFont(&self)  {
          unsafe { GridColumnTitle_FillTitleDefaultFont(self.0) }
      }

      pub fn IsDefault(&self) -> bool  {
          unsafe { GridColumnTitle_IsDefault(self.0) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumnTitle_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { GridColumnTitle_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumnTitle_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { GridColumnTitle_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { GridColumnTitle_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { GridColumnTitle_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { GridColumnTitle_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumnTitle_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Column(&self) -> TGridColumn  {
          TGridColumn {
              0: unsafe { GridColumnTitle_GetColumn(self.0) }
              , 1: false,
          }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { GridColumnTitle_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { GridColumnTitle_SetAlignment(self.0, aValue) }
      }

      pub fn Caption<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumnTitle_GetCaption(self.0)).to_string_lossy()  }
      }

      pub fn SetCaption(&self, aValue: &str)  {
          unsafe { GridColumnTitle_SetCaption(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { GridColumnTitle_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { GridColumnTitle_SetColor(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { GridColumnTitle_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { GridColumnTitle_SetFont(self.0, aValue.Instance()) }
      }

      pub fn ImageIndex(&self) -> i32  {
          unsafe { GridColumnTitle_GetImageIndex(self.0) }
      }

      pub fn SetImageIndex(&self, aValue: i32)  {
          unsafe { GridColumnTitle_SetImageIndex(self.0, aValue) }
      }

      pub fn ImageLayout(&self) -> TButtonLayout  {
          unsafe { GridColumnTitle_GetImageLayout(self.0) }
      }

      pub fn SetImageLayout(&self, aValue: TButtonLayout)  {
          unsafe { GridColumnTitle_SetImageLayout(self.0, aValue) }
      }

      pub fn Layout(&self) -> TTextLayout  {
          unsafe { GridColumnTitle_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TTextLayout)  {
          unsafe { GridColumnTitle_SetLayout(self.0, aValue) }
      }

      pub fn MultiLine(&self) -> bool  {
          unsafe { GridColumnTitle_GetMultiLine(self.0) }
      }

      pub fn SetMultiLine(&self, aValue: bool)  {
          unsafe { GridColumnTitle_SetMultiLine(self.0, aValue) }
      }

      pub fn PrefixOption(&self) -> TPrefixOption  {
          unsafe { GridColumnTitle_GetPrefixOption(self.0) }
      }

      pub fn SetPrefixOption(&self, aValue: TPrefixOption)  {
          unsafe { GridColumnTitle_SetPrefixOption(self.0, aValue) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { GridColumnTitle_StaticClassType() }
      }
}

impl IObject for TGridColumnTitle {
    fn Instance(&self) -> usize { self.0 }
}


impl TGridColumn {
      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { GridColumn_Assign(self.0, source.Instance()) }
      }

      pub fn IsDefault(&self) -> bool  {
          unsafe { GridColumn_IsDefault(self.0) }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumn_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { GridColumn_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumn_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { GridColumn_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { GridColumn_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { GridColumn_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { GridColumn_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumn_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Grid(&self) -> TStringGrid  {
          TStringGrid {
              0: unsafe { GridColumn_GetGrid(self.0) }
              , 1: false,
          }
      }

      pub fn DefaultWidth(&self) -> i32  {
          unsafe { GridColumn_GetDefaultWidth(self.0) }
      }

      pub fn StoredWidth(&self) -> i32  {
          unsafe { GridColumn_GetStoredWidth(self.0) }
      }

      pub fn WidthChanged(&self) -> bool  {
          unsafe { GridColumn_GetWidthChanged(self.0) }
      }

      pub fn Alignment(&self) -> TAlignment  {
          unsafe { GridColumn_GetAlignment(self.0) }
      }

      pub fn SetAlignment(&self, aValue: TAlignment)  {
          unsafe { GridColumn_SetAlignment(self.0, aValue) }
      }

      pub fn ButtonStyle(&self) -> TColumnButtonStyle  {
          unsafe { GridColumn_GetButtonStyle(self.0) }
      }

      pub fn SetButtonStyle(&self, aValue: TColumnButtonStyle)  {
          unsafe { GridColumn_SetButtonStyle(self.0, aValue) }
      }

      pub fn Color(&self) -> TColor  {
          unsafe { GridColumn_GetColor(self.0) }
      }

      pub fn SetColor(&self, aValue: TColor)  {
          unsafe { GridColumn_SetColor(self.0, aValue) }
      }

      pub fn DropDownRows(&self) -> i32  {
          unsafe { GridColumn_GetDropDownRows(self.0) }
      }

      pub fn SetDropDownRows(&self, aValue: i32)  {
          unsafe { GridColumn_SetDropDownRows(self.0, aValue) }
      }

      pub fn Expanded(&self) -> bool  {
          unsafe { GridColumn_GetExpanded(self.0) }
      }

      pub fn SetExpanded(&self, aValue: bool)  {
          unsafe { GridColumn_SetExpanded(self.0, aValue) }
      }

      pub fn Font(&self) -> TFont  {
          TFont {
              0: unsafe { GridColumn_GetFont(self.0) }
              , 1: false,
          }
      }

      pub fn SetFont(&self, aValue: &TFont)  {
          unsafe { GridColumn_SetFont(self.0, aValue.Instance()) }
      }

      pub fn Layout(&self) -> TTextLayout  {
          unsafe { GridColumn_GetLayout(self.0) }
      }

      pub fn SetLayout(&self, aValue: TTextLayout)  {
          unsafe { GridColumn_SetLayout(self.0, aValue) }
      }

      pub fn MinSize(&self) -> i32  {
          unsafe { GridColumn_GetMinSize(self.0) }
      }

      pub fn SetMinSize(&self, aValue: i32)  {
          unsafe { GridColumn_SetMinSize(self.0, aValue) }
      }

      pub fn MaxSize(&self) -> i32  {
          unsafe { GridColumn_GetMaxSize(self.0) }
      }

      pub fn SetMaxSize(&self, aValue: i32)  {
          unsafe { GridColumn_SetMaxSize(self.0, aValue) }
      }

      pub fn PickList(&self) -> TStrings  {
          TStrings {
              0: unsafe { GridColumn_GetPickList(self.0) }
              , 1: false,
          }
      }

      pub fn SetPickList(&self, aValue: &TStrings)  {
          unsafe { GridColumn_SetPickList(self.0, aValue.Instance()) }
      }

      pub fn ReadOnly(&self) -> bool  {
          unsafe { GridColumn_GetReadOnly(self.0) }
      }

      pub fn SetReadOnly(&self, aValue: bool)  {
          unsafe { GridColumn_SetReadOnly(self.0, aValue) }
      }

      pub fn SizePriority(&self) -> i32  {
          unsafe { GridColumn_GetSizePriority(self.0) }
      }

      pub fn SetSizePriority(&self, aValue: i32)  {
          unsafe { GridColumn_SetSizePriority(self.0, aValue) }
      }

      pub fn Tag(&self) -> isize  {
          unsafe { GridColumn_GetTag(self.0) }
      }

      pub fn SetTag(&self, aValue: isize)  {
          unsafe { GridColumn_SetTag(self.0, aValue) }
      }

      pub fn Title(&self) -> TGridColumnTitle  {
          TGridColumnTitle {
              0: unsafe { GridColumn_GetTitle(self.0) }
              , 1: false,
          }
      }

      pub fn SetTitle(&self, aValue: &TGridColumnTitle)  {
          unsafe { GridColumn_SetTitle(self.0, aValue.Instance()) }
      }

      pub fn Width(&self) -> i32  {
          unsafe { GridColumn_GetWidth(self.0) }
      }

      pub fn SetWidth(&self, aValue: i32)  {
          unsafe { GridColumn_SetWidth(self.0, aValue) }
      }

      pub fn Visible(&self) -> bool  {
          unsafe { GridColumn_GetVisible(self.0) }
      }

      pub fn SetVisible(&self, aValue: bool)  {
          unsafe { GridColumn_SetVisible(self.0, aValue) }
      }

      pub fn ValueChecked<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumn_GetValueChecked(self.0)).to_string_lossy()  }
      }

      pub fn SetValueChecked(&self, aValue: &str)  {
          unsafe { GridColumn_SetValueChecked(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn ValueUnchecked<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumn_GetValueUnchecked(self.0)).to_string_lossy()  }
      }

      pub fn SetValueUnchecked(&self, aValue: &str)  {
          unsafe { GridColumn_SetValueUnchecked(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      pub fn Collection(&self) -> TCollection  {
          TCollection {
              0: unsafe { GridColumn_GetCollection(self.0) }
              , 1: false,
          }
      }

      pub fn SetCollection(&self, aValue: &TCollection)  {
          unsafe { GridColumn_SetCollection(self.0, aValue.Instance()) }
      }

      pub fn Index(&self) -> i32  {
          unsafe { GridColumn_GetIndex(self.0) }
      }

      pub fn SetIndex(&self, aValue: i32)  {
          unsafe { GridColumn_SetIndex(self.0, aValue) }
      }

      pub fn DisplayName<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumn_GetDisplayName(self.0)).to_string_lossy()  }
      }

      pub fn SetDisplayName(&self, aValue: &str)  {
          unsafe { GridColumn_SetDisplayName(self.0, CString::new(aValue).unwrap().as_ptr()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { GridColumn_StaticClassType() }
      }
}

impl IObject for TGridColumn {
    fn Instance(&self) -> usize { self.0 }
}


impl TGridColumns {
      pub fn Add(&self) -> TGridColumn  {
          TGridColumn {
              0: unsafe { GridColumns_Add(self.0) }
              , 1: false,
          }
      }

      pub fn Clear(&self)  {
          unsafe { GridColumns_Clear(self.0) }
      }

      pub fn RealIndex(&self, index: i32) -> i32  {
          unsafe { GridColumns_RealIndex(self.0, index) }
      }

      pub fn IndexOf(&self, column: &TGridColumn) -> i32  {
          unsafe { GridColumns_IndexOf(self.0, column.Instance()) }
      }

      pub fn IsDefault(&self) -> bool  {
          unsafe { GridColumns_IsDefault(self.0) }
      }

      pub fn HasIndex(&self, index: i32) -> bool  {
          unsafe { GridColumns_HasIndex(self.0, index) }
      }

      pub fn Owner(&self) -> TObject  {
          TObject {
              0: unsafe { GridColumns_Owner(self.0) }
              , 1: false,
          }
      }

      pub fn Assign(&self, source: &dyn IObject)  {
          unsafe { GridColumns_Assign(self.0, source.Instance()) }
      }

      pub fn BeginUpdate(&self)  {
          unsafe { GridColumns_BeginUpdate(self.0) }
      }

      pub fn Delete(&self, index: i32)  {
          unsafe { GridColumns_Delete(self.0, index) }
      }

      pub fn EndUpdate(&self)  {
          unsafe { GridColumns_EndUpdate(self.0) }
      }

      pub fn FindItemID(&self, iD: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { GridColumns_FindItemID(self.0, iD) }
              , 1: false,
          }
      }

      pub fn GetNamePath<'a>(&self) -> Cow<'a, str>  {
          unsafe { CStr::from_ptr(GridColumns_GetNamePath(self.0)).to_string_lossy()  }
      }

      pub fn Insert(&self, index: i32) -> TCollectionItem  {
          TCollectionItem {
              0: unsafe { GridColumns_Insert(self.0, index) }
              , 1: false,
          }
      }

      pub fn ClassType(&self) -> TClass {
          unsafe { GridColumns_ClassType(self.0) }
      }

      pub fn ClassName<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumns_ClassName(self.0)).to_string_lossy()  }
      }

      pub fn InstanceSize(&self) -> i32 {
          unsafe { GridColumns_InstanceSize(self.0) }
      }

      pub fn InheritsFrom(&self, aClass: TClass) -> bool {
          unsafe { GridColumns_InheritsFrom(self.0, aClass) }
      }

      pub fn Equals(&self, obj: &dyn IObject) -> bool {
          unsafe { GridColumns_Equals(self.0, obj.Instance()) }
      }

      pub fn GetHashCode(&self) -> i32 {
          unsafe { GridColumns_GetHashCode(self.0) }
      }

      pub fn ToString<'a>(&self) -> Cow<'a, str> {
          unsafe { CStr::from_ptr(GridColumns_ToString(self.0)).to_string_lossy()  }
      }

      pub fn Grid(&self) -> TStringGrid  {
          TStringGrid {
              0: unsafe { GridColumns_GetGrid(self.0) }
              , 1: false,
          }
      }

      pub fn VisibleCount(&self) -> i32  {
          unsafe { GridColumns_GetVisibleCount(self.0) }
      }

      pub fn Enabled(&self) -> bool  {
          unsafe { GridColumns_GetEnabled(self.0) }
      }

      pub fn Count(&self) -> i32  {
          unsafe { GridColumns_GetCount(self.0) }
      }

      pub fn Items(&self, index: i32) -> TGridColumn  {
          TGridColumn {
              0: unsafe { GridColumns_GetItems(self.0, index) }
              , 1: false,
          }
      }

      pub fn SetItems(&self, index: i32, aValue: &TGridColumn)  {
          unsafe { GridColumns_SetItems(self.0, index, aValue.Instance()) }
      }

      // static class
      pub fn Class() -> TClass {
          unsafe { GridColumns_StaticClassType() }
      }
}

impl IObject for TGridColumns {
    fn Instance(&self) -> usize { self.0 }
}



pub fn NullObject() -> TObject {
   TObject { 0: 0, 1: false, }
}

fn getApplication() -> TApplication {
   initLibLCLCallback();
   TApplication {
       0: unsafe { Application_Instance() }, 1: false,
   }
}

// ------------------------------------ global vars ------------------------------------

lazy_static! {
    pub static ref Application: TApplication = getApplication();
    pub static ref Screen: TScreen = TScreen::As(unsafe { Screen_Instance() });
    pub static ref Mouse: TMouse = TMouse::As(unsafe { Mouse_Instance() });
    pub static ref Clipboard: TClipboard = TClipboard::As(unsafe { Clipboard_Instance() });
    pub static ref Printer: TPrinter = TPrinter::As(unsafe { Printer_Instance() });
}
