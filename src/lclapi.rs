/*
    The code is automatically generated by the genBind tool.
    Author: ying32
    https://github.com/ying32
*/

#![allow(non_snake_case)]
#![allow(improper_ctypes)]
#![allow(dead_code)]

use std::collections::HashMap;
use std::mem::{size_of, transmute};
use std::os::raw::c_char;
use std::sync::Mutex;
use types::*;

// MSVC 编译器，静态加载
#[link(name = "liblcl")]
extern "system" {


  pub fn DLibStringEncoding() -> TStringEncoding;
  pub fn DLibVersion() -> u32;
  pub fn DSysLocale(AInfo: *mut TSysLocale);
  pub fn Application_Instance() -> usize;
  pub fn Mouse_Instance() -> usize;
  pub fn Screen_Instance() -> usize;
  pub fn DTextToShortCut(AText: *const c_char) -> TShortCut;
  pub fn DShortCutToText(AVal: TShortCut) -> *const c_char;
  pub fn Clipboard_Instance() -> usize;
  pub fn DSetClipboard(ANewClipboard: usize) -> usize;
  #[cfg(not(target_os = "windows"))]
  pub fn DSendMessage(hWd: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
  #[cfg(not(target_os = "windows"))]
  pub fn DPostMessage(hWd: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DIsIconic(hWnd: HWND) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DIsWindow(hWnd: HWND) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DIsZoomed(hWnd: HWND) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DIsWindowVisible(hWnd: HWND) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DGetDC(hWnd: HWND) -> HDC;
  #[cfg(not(target_os = "windows"))]
  pub fn DReleaseDC(hWnd: HWND, dc: HDC) -> i32;
  #[cfg(not(target_os = "windows"))]
  pub fn DSetForegroundWindow(hWnd: HWND) -> bool;
  #[cfg(not(target_os = "windows"))]
  pub fn DRegisterClipboardFormat(AFormat: *const c_char) -> TClipboardFormat;
  #[cfg(not(target_os = "windows"))]
  pub fn DWindowFromPoint(point: *mut TPoint) -> HWND;
  fn SetEventCallback(APtr: usize);
  fn SetMessageCallback(APtr: usize);
  fn SetThreadSyncCallback(APtr: usize);
  fn SetExceptionHandlerCallback(APtr: usize);
  pub fn DGetStringArrOf(P: usize, AIndex: isize) -> *const c_char;
  pub fn DStrLen(p: *const c_char) -> isize;
  pub fn DMove(Src: usize, Dest: usize, Len: isize);
  pub fn DShowMessage(AMsg: *const c_char);
  pub fn DGetMainInstance() -> HINST;
  pub fn DMessageDlg(Msg: *const c_char, DlgType: TMsgDlgType, Buttons: TMsgDlgButtons, HelpCtx: i32) -> i32;
  pub fn DSynchronize(AUseMsg: bool);
  pub fn DMainThreadId() -> TThreadID;
  pub fn DCurrentThreadId() -> TThreadID;
  pub fn DSysOpen(FileName: *const c_char);
  pub fn DExtractFilePath(AFileName: *const c_char) -> *const c_char;
  pub fn DFileExists(AFileName: *const c_char) -> bool;
  pub fn DSelectDirectory1(Directory: *mut *const c_char, Options: TSelectDirOpts, HelpCtx: i32) -> bool;
  pub fn DSelectDirectory2(Caption: *const c_char, Root: *const c_char, AShowHidden: bool, Directory: *mut *const c_char) -> bool;
  pub fn DInputBox(ACaption: *const c_char, APrompt: *const c_char, ADefault: *const c_char) -> *const c_char;
  pub fn DInputQuery(ACaption: *const c_char, APrompt: *const c_char, Value: *const c_char, AOut: *mut *const c_char) -> bool;
  pub fn DPasswordBox(ACaption: *const c_char, APrompt: *const c_char) -> *const c_char;
  pub fn DInputCombo(ACaption: *const c_char, APrompt: *const c_char, AList: usize) -> i32;
  pub fn DInputComboEx(ACaption: *const c_char, APrompt: *const c_char, AList: usize, AllowCustomText: bool) -> *const c_char;
  #[cfg(target_os = "windows")]
  pub fn DCreateURLShortCut(ADestPath: *const c_char, AShortCutName: *const c_char, AURL: *const c_char);
  #[cfg(target_os = "windows")]
  pub fn DCreateShortCut(ADestPath: *const c_char, AShortCutName: *const c_char, ASrcFileName: *const c_char, AIconFileName: *const c_char, ADescription: *const c_char, ACmdArgs: *const c_char) -> bool;
  pub fn DSetPropertyValue(Instance: usize, PropName: *const c_char, Value: *const c_char);
  pub fn DSetPropertySecValue(Instance: usize, PropName: *const c_char, SecPropName: *const c_char, Value: *const c_char);
  pub fn DGUIDToString(AGUID: *mut TGUID) -> *const c_char;
  pub fn DStringToGUID(AGUIDStr: *const c_char, AGUID: *mut TGUID);
  pub fn DCreateGUID(AGUID: *mut TGUID);
  pub fn Printer_Instance() -> usize;
  pub fn DLibAbout() -> *const c_char;
  pub fn DGetLibResourceCount() -> i32;
  pub fn DGetLibResourceItem(AIndex: i32, AResult: *mut TResItem);
  pub fn DModifyLibResource(APtr: usize, AValue: *const c_char);
  pub fn DGetLibType() -> TLibType;
  pub fn DInitGoDll(AMainThreadId: TThreadID);
  pub fn DFindControl(AHandle: HWND) -> usize;
  pub fn DFindLCLControl(AScreenPos: *mut TPoint) -> usize;
  pub fn DFindOwnerControl(Handle: HWND) -> usize;
  pub fn DFindControlAtPosition(APosition: *mut TPoint, AllowDisabled: bool) -> usize;
  pub fn DFindLCLWindow(AScreenPos: *mut TPoint, AllowDisabled: bool) -> usize;
  pub fn DFindDragTarget(APosition: *mut TPoint, AllowDisabled: bool) -> usize;
  #[cfg(target_os = "linux")]
  pub fn GtkWidget_GetGtkFixed(Ah: HWND) -> PGtkFixed;
  #[cfg(target_os = "linux")]
  pub fn GdkWindow_FromForm(AForm: usize) -> PGdkWindow;
  #[cfg(target_os = "linux")]
  pub fn GdkWindow_GetXId(AW: PGdkWindow, AXId: *mut TXId);
  #[cfg(target_os = "linux")]
  pub fn GtkWidget_Window(Ah: HWND) -> PGdkWindow;
  #[cfg(target_os = "macos")]
  pub fn NSWindow_FromForm(AForm: usize) -> MyNSWindow;
  pub fn ResFormLoadFromResourceName(AInstance: usize, AResName: *const c_char, ARoot: usize);
  pub fn ResFormLoadFromFile(AFileName: *const c_char, ARoot: usize);
  pub fn ResFormLoadFromStream(AStream: usize, ARoot: usize);



  // ----------------- TObject ----------------------
  pub fn Object_Create() -> usize;
  pub fn Object_Free(AObj: usize);
  pub fn Object_ClassType(AObj: usize) -> TClass;
  pub fn Object_ClassName(AObj: usize) -> *const c_char;
  pub fn Object_InstanceSize(AObj: usize) -> i32;
  pub fn Object_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Object_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Object_GetHashCode(AObj: usize) -> i32;
  pub fn Object_ToString(AObj: usize) -> *const c_char;
  pub fn Object_StaticClassType() -> TClass;

  // ----------------- TComponent ----------------------
  pub fn Component_Create(AOwner: usize) -> usize;
  pub fn Component_Free(AObj: usize);
  pub fn Component_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Component_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Component_HasParent(AObj: usize) -> bool;
  pub fn Component_Assign(AObj: usize, Source: usize);
  pub fn Component_ClassType(AObj: usize) -> TClass;
  pub fn Component_ClassName(AObj: usize) -> *const c_char;
  pub fn Component_InstanceSize(AObj: usize) -> i32;
  pub fn Component_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Component_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Component_GetHashCode(AObj: usize) -> i32;
  pub fn Component_ToString(AObj: usize) -> *const c_char;
  pub fn Component_GetComponentCount(AObj: usize) -> i32;
  pub fn Component_GetComponentIndex(AObj: usize) -> i32;
  pub fn Component_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Component_GetOwner(AObj: usize) -> usize;
  pub fn Component_GetName(AObj: usize) -> *const c_char;
  pub fn Component_SetName(AObj: usize, AValue: *const c_char);
  pub fn Component_GetTag(AObj: usize) -> isize;
  pub fn Component_SetTag(AObj: usize, AValue: isize);
  pub fn Component_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Component_StaticClassType() -> TClass;

  // ----------------- TControl ----------------------
  pub fn Control_Create(AOwner: usize) -> usize;
  pub fn Control_Free(AObj: usize);
  pub fn Control_BringToFront(AObj: usize);
  pub fn Control_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Control_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Control_Dragging(AObj: usize) -> bool;
  pub fn Control_HasParent(AObj: usize) -> bool;
  pub fn Control_Hide(AObj: usize);
  pub fn Control_Invalidate(AObj: usize);
  pub fn Control_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Control_Refresh(AObj: usize);
  pub fn Control_Repaint(AObj: usize);
  pub fn Control_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Control_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Control_SendToBack(AObj: usize);
  pub fn Control_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Control_Show(AObj: usize);
  pub fn Control_Update(AObj: usize);
  pub fn Control_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Control_GetTextLen(AObj: usize) -> i32;
  pub fn Control_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Control_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Control_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Control_Assign(AObj: usize, Source: usize);
  pub fn Control_ClassType(AObj: usize) -> TClass;
  pub fn Control_ClassName(AObj: usize) -> *const c_char;
  pub fn Control_InstanceSize(AObj: usize) -> i32;
  pub fn Control_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Control_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Control_GetHashCode(AObj: usize) -> i32;
  pub fn Control_ToString(AObj: usize) -> *const c_char;
  pub fn Control_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Control_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Control_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Control_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Control_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Control_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Control_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Control_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Control_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Control_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Control_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Control_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Control_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Control_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Control_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Control_GetEnabled(AObj: usize) -> bool;
  pub fn Control_SetEnabled(AObj: usize, AValue: bool);
  pub fn Control_GetAction(AObj: usize) -> usize;
  pub fn Control_SetAction(AObj: usize, AValue: usize);
  pub fn Control_GetAlign(AObj: usize) -> TAlign;
  pub fn Control_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Control_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Control_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Control_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Control_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Control_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Control_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Control_GetClientHeight(AObj: usize) -> i32;
  pub fn Control_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Control_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Control_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Control_GetClientWidth(AObj: usize) -> i32;
  pub fn Control_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Control_GetConstraints(AObj: usize) -> usize;
  pub fn Control_SetConstraints(AObj: usize, AValue: usize);
  pub fn Control_GetControlState(AObj: usize) -> TControlState;
  pub fn Control_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Control_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Control_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Control_GetFloating(AObj: usize) -> bool;
  pub fn Control_GetShowHint(AObj: usize) -> bool;
  pub fn Control_SetShowHint(AObj: usize, AValue: bool);
  pub fn Control_GetVisible(AObj: usize) -> bool;
  pub fn Control_SetVisible(AObj: usize, AValue: bool);
  pub fn Control_GetParent(AObj: usize) -> usize;
  pub fn Control_SetParent(AObj: usize, AValue: usize);
  pub fn Control_GetLeft(AObj: usize) -> i32;
  pub fn Control_SetLeft(AObj: usize, AValue: i32);
  pub fn Control_GetTop(AObj: usize) -> i32;
  pub fn Control_SetTop(AObj: usize, AValue: i32);
  pub fn Control_GetWidth(AObj: usize) -> i32;
  pub fn Control_SetWidth(AObj: usize, AValue: i32);
  pub fn Control_GetHeight(AObj: usize) -> i32;
  pub fn Control_SetHeight(AObj: usize, AValue: i32);
  pub fn Control_GetCursor(AObj: usize) -> TCursor;
  pub fn Control_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Control_GetHint(AObj: usize) -> *const c_char;
  pub fn Control_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Control_GetComponentCount(AObj: usize) -> i32;
  pub fn Control_GetComponentIndex(AObj: usize) -> i32;
  pub fn Control_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Control_GetOwner(AObj: usize) -> usize;
  pub fn Control_GetName(AObj: usize) -> *const c_char;
  pub fn Control_SetName(AObj: usize, AValue: *const c_char);
  pub fn Control_GetTag(AObj: usize) -> isize;
  pub fn Control_SetTag(AObj: usize, AValue: isize);
  pub fn Control_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Control_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Control_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Control_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Control_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Control_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Control_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Control_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Control_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Control_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Control_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Control_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Control_StaticClassType() -> TClass;

  // ----------------- TWinControl ----------------------
  pub fn WinControl_Create(AOwner: usize) -> usize;
  pub fn WinControl_Free(AObj: usize);
  pub fn WinControl_CanFocus(AObj: usize) -> bool;
  pub fn WinControl_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn WinControl_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn WinControl_DisableAlign(AObj: usize);
  pub fn WinControl_EnableAlign(AObj: usize);
  pub fn WinControl_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn WinControl_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn WinControl_Focused(AObj: usize) -> bool;
  pub fn WinControl_HandleAllocated(AObj: usize) -> bool;
  pub fn WinControl_InsertControl(AObj: usize, AControl: usize);
  pub fn WinControl_Invalidate(AObj: usize);
  pub fn WinControl_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn WinControl_RemoveControl(AObj: usize, AControl: usize);
  pub fn WinControl_Realign(AObj: usize);
  pub fn WinControl_Repaint(AObj: usize);
  pub fn WinControl_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn WinControl_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn WinControl_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn WinControl_SetFocus(AObj: usize);
  pub fn WinControl_Update(AObj: usize);
  pub fn WinControl_BringToFront(AObj: usize);
  pub fn WinControl_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn WinControl_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn WinControl_Dragging(AObj: usize) -> bool;
  pub fn WinControl_HasParent(AObj: usize) -> bool;
  pub fn WinControl_Hide(AObj: usize);
  pub fn WinControl_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn WinControl_Refresh(AObj: usize);
  pub fn WinControl_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn WinControl_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn WinControl_SendToBack(AObj: usize);
  pub fn WinControl_Show(AObj: usize);
  pub fn WinControl_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn WinControl_GetTextLen(AObj: usize) -> i32;
  pub fn WinControl_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn WinControl_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn WinControl_GetNamePath(AObj: usize) -> *const c_char;
  pub fn WinControl_Assign(AObj: usize, Source: usize);
  pub fn WinControl_ClassType(AObj: usize) -> TClass;
  pub fn WinControl_ClassName(AObj: usize) -> *const c_char;
  pub fn WinControl_InstanceSize(AObj: usize) -> i32;
  pub fn WinControl_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn WinControl_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn WinControl_GetHashCode(AObj: usize) -> i32;
  pub fn WinControl_ToString(AObj: usize) -> *const c_char;
  pub fn WinControl_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn WinControl_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn WinControl_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn WinControl_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn WinControl_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn WinControl_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn WinControl_AnchorClient(AObj: usize, ASpace: i32);
  pub fn WinControl_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn WinControl_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn WinControl_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn WinControl_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn WinControl_GetDockClientCount(AObj: usize) -> i32;
  pub fn WinControl_GetDockSite(AObj: usize) -> bool;
  pub fn WinControl_SetDockSite(AObj: usize, AValue: bool);
  pub fn WinControl_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn WinControl_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn WinControl_GetMouseInClient(AObj: usize) -> bool;
  pub fn WinControl_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn WinControl_GetBrush(AObj: usize) -> usize;
  pub fn WinControl_GetControlCount(AObj: usize) -> i32;
  pub fn WinControl_GetHandle(AObj: usize) -> HWND;
  pub fn WinControl_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn WinControl_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn WinControl_GetParentWindow(AObj: usize) -> HWND;
  pub fn WinControl_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn WinControl_GetShowing(AObj: usize) -> bool;
  pub fn WinControl_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn WinControl_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn WinControl_GetTabStop(AObj: usize) -> bool;
  pub fn WinControl_SetTabStop(AObj: usize, AValue: bool);
  pub fn WinControl_GetUseDockManager(AObj: usize) -> bool;
  pub fn WinControl_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn WinControl_GetEnabled(AObj: usize) -> bool;
  pub fn WinControl_SetEnabled(AObj: usize, AValue: bool);
  pub fn WinControl_GetAction(AObj: usize) -> usize;
  pub fn WinControl_SetAction(AObj: usize, AValue: usize);
  pub fn WinControl_GetAlign(AObj: usize) -> TAlign;
  pub fn WinControl_SetAlign(AObj: usize, AValue: TAlign);
  pub fn WinControl_GetAnchors(AObj: usize) -> TAnchors;
  pub fn WinControl_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn WinControl_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn WinControl_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn WinControl_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn WinControl_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn WinControl_GetClientHeight(AObj: usize) -> i32;
  pub fn WinControl_SetClientHeight(AObj: usize, AValue: i32);
  pub fn WinControl_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn WinControl_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn WinControl_GetClientWidth(AObj: usize) -> i32;
  pub fn WinControl_SetClientWidth(AObj: usize, AValue: i32);
  pub fn WinControl_GetConstraints(AObj: usize) -> usize;
  pub fn WinControl_SetConstraints(AObj: usize, AValue: usize);
  pub fn WinControl_GetControlState(AObj: usize) -> TControlState;
  pub fn WinControl_SetControlState(AObj: usize, AValue: TControlState);
  pub fn WinControl_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn WinControl_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn WinControl_GetFloating(AObj: usize) -> bool;
  pub fn WinControl_GetShowHint(AObj: usize) -> bool;
  pub fn WinControl_SetShowHint(AObj: usize, AValue: bool);
  pub fn WinControl_GetVisible(AObj: usize) -> bool;
  pub fn WinControl_SetVisible(AObj: usize, AValue: bool);
  pub fn WinControl_GetParent(AObj: usize) -> usize;
  pub fn WinControl_SetParent(AObj: usize, AValue: usize);
  pub fn WinControl_GetLeft(AObj: usize) -> i32;
  pub fn WinControl_SetLeft(AObj: usize, AValue: i32);
  pub fn WinControl_GetTop(AObj: usize) -> i32;
  pub fn WinControl_SetTop(AObj: usize, AValue: i32);
  pub fn WinControl_GetWidth(AObj: usize) -> i32;
  pub fn WinControl_SetWidth(AObj: usize, AValue: i32);
  pub fn WinControl_GetHeight(AObj: usize) -> i32;
  pub fn WinControl_SetHeight(AObj: usize, AValue: i32);
  pub fn WinControl_GetCursor(AObj: usize) -> TCursor;
  pub fn WinControl_SetCursor(AObj: usize, AValue: TCursor);
  pub fn WinControl_GetHint(AObj: usize) -> *const c_char;
  pub fn WinControl_SetHint(AObj: usize, AValue: *const c_char);
  pub fn WinControl_GetComponentCount(AObj: usize) -> i32;
  pub fn WinControl_GetComponentIndex(AObj: usize) -> i32;
  pub fn WinControl_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn WinControl_GetOwner(AObj: usize) -> usize;
  pub fn WinControl_GetName(AObj: usize) -> *const c_char;
  pub fn WinControl_SetName(AObj: usize, AValue: *const c_char);
  pub fn WinControl_GetTag(AObj: usize) -> isize;
  pub fn WinControl_SetTag(AObj: usize, AValue: isize);
  pub fn WinControl_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn WinControl_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn WinControl_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn WinControl_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn WinControl_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn WinControl_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn WinControl_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn WinControl_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn WinControl_GetChildSizing(AObj: usize) -> usize;
  pub fn WinControl_SetChildSizing(AObj: usize, AValue: usize);
  pub fn WinControl_GetBorderSpacing(AObj: usize) -> usize;
  pub fn WinControl_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn WinControl_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn WinControl_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn WinControl_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn WinControl_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn WinControl_StaticClassType() -> TClass;

  // ----------------- TGraphic ----------------------
  pub fn Graphic_Create() -> usize;
  pub fn Graphic_Free(AObj: usize);
  pub fn Graphic_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Graphic_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn Graphic_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn Graphic_LoadFromStream(AObj: usize, Stream: usize);
  pub fn Graphic_SaveToStream(AObj: usize, Stream: usize);
  pub fn Graphic_Assign(AObj: usize, Source: usize);
  pub fn Graphic_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Graphic_ClassType(AObj: usize) -> TClass;
  pub fn Graphic_ClassName(AObj: usize) -> *const c_char;
  pub fn Graphic_InstanceSize(AObj: usize) -> i32;
  pub fn Graphic_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Graphic_GetHashCode(AObj: usize) -> i32;
  pub fn Graphic_ToString(AObj: usize) -> *const c_char;
  pub fn Graphic_GetEmpty(AObj: usize) -> bool;
  pub fn Graphic_GetHeight(AObj: usize) -> i32;
  pub fn Graphic_SetHeight(AObj: usize, AValue: i32);
  pub fn Graphic_GetModified(AObj: usize) -> bool;
  pub fn Graphic_SetModified(AObj: usize, AValue: bool);
  pub fn Graphic_GetPalette(AObj: usize) -> HPALETTE;
  pub fn Graphic_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn Graphic_GetPaletteModified(AObj: usize) -> bool;
  pub fn Graphic_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn Graphic_GetTransparent(AObj: usize) -> bool;
  pub fn Graphic_SetTransparent(AObj: usize, AValue: bool);
  pub fn Graphic_GetWidth(AObj: usize) -> i32;
  pub fn Graphic_SetWidth(AObj: usize, AValue: i32);
  pub fn Graphic_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Graphic_StaticClassType() -> TClass;

  // ----------------- TStrings ----------------------
  pub fn Strings_Create() -> usize;
  pub fn Strings_Free(AObj: usize);
  pub fn Strings_Add(AObj: usize, S: *const c_char) -> i32;
  pub fn Strings_AddObject(AObj: usize, S: *const c_char, AObject: usize) -> i32;
  pub fn Strings_Append(AObj: usize, S: *const c_char);
  pub fn Strings_Assign(AObj: usize, Source: usize);
  pub fn Strings_BeginUpdate(AObj: usize);
  pub fn Strings_Clear(AObj: usize);
  pub fn Strings_Delete(AObj: usize, Index: i32);
  pub fn Strings_EndUpdate(AObj: usize);
  pub fn Strings_Equals(AObj: usize, Strings: usize) -> bool;
  pub fn Strings_IndexOf(AObj: usize, S: *const c_char) -> i32;
  pub fn Strings_IndexOfName(AObj: usize, Name: *const c_char) -> i32;
  pub fn Strings_IndexOfObject(AObj: usize, AObject: usize) -> i32;
  pub fn Strings_Insert(AObj: usize, Index: i32, S: *const c_char);
  pub fn Strings_InsertObject(AObj: usize, Index: i32, S: *const c_char, AObject: usize);
  pub fn Strings_LoadFromFile(AObj: usize, FileName: *const c_char);
  pub fn Strings_LoadFromStream(AObj: usize, Stream: usize);
  pub fn Strings_Move(AObj: usize, CurIndex: i32, NewIndex: i32);
  pub fn Strings_SaveToFile(AObj: usize, FileName: *const c_char);
  pub fn Strings_SaveToStream(AObj: usize, Stream: usize);
  pub fn Strings_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Strings_ClassType(AObj: usize) -> TClass;
  pub fn Strings_ClassName(AObj: usize) -> *const c_char;
  pub fn Strings_InstanceSize(AObj: usize) -> i32;
  pub fn Strings_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Strings_GetHashCode(AObj: usize) -> i32;
  pub fn Strings_ToString(AObj: usize) -> *const c_char;
  pub fn Strings_GetCapacity(AObj: usize) -> i32;
  pub fn Strings_SetCapacity(AObj: usize, AValue: i32);
  pub fn Strings_GetCommaText(AObj: usize) -> *const c_char;
  pub fn Strings_SetCommaText(AObj: usize, AValue: *const c_char);
  pub fn Strings_GetCount(AObj: usize) -> i32;
  pub fn Strings_GetDelimiter(AObj: usize) -> Char;
  pub fn Strings_SetDelimiter(AObj: usize, AValue: Char);
  pub fn Strings_GetNameValueSeparator(AObj: usize) -> Char;
  pub fn Strings_SetNameValueSeparator(AObj: usize, AValue: Char);
  pub fn Strings_GetText(AObj: usize) -> *const c_char;
  pub fn Strings_SetText(AObj: usize, AValue: *const c_char);
  pub fn Strings_GetObjects(AObj: usize, Index: i32) -> usize;
  pub fn Strings_SetObjects(AObj: usize, Index: i32, AValue: usize);
  pub fn Strings_GetValues(AObj: usize, Name: *const c_char) -> *const c_char;
  pub fn Strings_SetValues(AObj: usize, Name: *const c_char, AValue: *const c_char);
  pub fn Strings_GetValueFromIndex(AObj: usize, Index: i32) -> *const c_char;
  pub fn Strings_SetValueFromIndex(AObj: usize, Index: i32, AValue: *const c_char);
  pub fn Strings_GetStrings(AObj: usize, Index: i32) -> *const c_char;
  pub fn Strings_SetStrings(AObj: usize, Index: i32, AValue: *const c_char);
  pub fn Strings_StaticClassType() -> TClass;

  // ----------------- TStream ----------------------

  // ----------------- TCheckBox ----------------------
  pub fn CheckBox_Create(AOwner: usize) -> usize;
  pub fn CheckBox_Free(AObj: usize);
  pub fn CheckBox_CanFocus(AObj: usize) -> bool;
  pub fn CheckBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn CheckBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn CheckBox_DisableAlign(AObj: usize);
  pub fn CheckBox_EnableAlign(AObj: usize);
  pub fn CheckBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn CheckBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn CheckBox_Focused(AObj: usize) -> bool;
  pub fn CheckBox_HandleAllocated(AObj: usize) -> bool;
  pub fn CheckBox_InsertControl(AObj: usize, AControl: usize);
  pub fn CheckBox_Invalidate(AObj: usize);
  pub fn CheckBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn CheckBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn CheckBox_Realign(AObj: usize);
  pub fn CheckBox_Repaint(AObj: usize);
  pub fn CheckBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn CheckBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn CheckBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn CheckBox_SetFocus(AObj: usize);
  pub fn CheckBox_Update(AObj: usize);
  pub fn CheckBox_BringToFront(AObj: usize);
  pub fn CheckBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckBox_Dragging(AObj: usize) -> bool;
  pub fn CheckBox_HasParent(AObj: usize) -> bool;
  pub fn CheckBox_Hide(AObj: usize);
  pub fn CheckBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn CheckBox_Refresh(AObj: usize);
  pub fn CheckBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckBox_SendToBack(AObj: usize);
  pub fn CheckBox_Show(AObj: usize);
  pub fn CheckBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn CheckBox_GetTextLen(AObj: usize) -> i32;
  pub fn CheckBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn CheckBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn CheckBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CheckBox_Assign(AObj: usize, Source: usize);
  pub fn CheckBox_ClassType(AObj: usize) -> TClass;
  pub fn CheckBox_ClassName(AObj: usize) -> *const c_char;
  pub fn CheckBox_InstanceSize(AObj: usize) -> i32;
  pub fn CheckBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CheckBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CheckBox_GetHashCode(AObj: usize) -> i32;
  pub fn CheckBox_ToString(AObj: usize) -> *const c_char;
  pub fn CheckBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn CheckBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn CheckBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn CheckBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn CheckBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn CheckBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn CheckBox_SetOnChange(AObj: usize, AEventId: usize);
  pub fn CheckBox_GetAction(AObj: usize) -> usize;
  pub fn CheckBox_SetAction(AObj: usize, AValue: usize);
  pub fn CheckBox_GetAlign(AObj: usize) -> TAlign;
  pub fn CheckBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn CheckBox_GetAlignment(AObj: usize) -> TLeftRight;
  pub fn CheckBox_SetAlignment(AObj: usize, AValue: TLeftRight);
  pub fn CheckBox_GetAllowGrayed(AObj: usize) -> bool;
  pub fn CheckBox_SetAllowGrayed(AObj: usize, AValue: bool);
  pub fn CheckBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn CheckBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn CheckBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn CheckBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn CheckBox_GetCaption(AObj: usize) -> *const c_char;
  pub fn CheckBox_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn CheckBox_GetChecked(AObj: usize) -> bool;
  pub fn CheckBox_SetChecked(AObj: usize, AValue: bool);
  pub fn CheckBox_GetColor(AObj: usize) -> TColor;
  pub fn CheckBox_SetColor(AObj: usize, AValue: TColor);
  pub fn CheckBox_GetConstraints(AObj: usize) -> usize;
  pub fn CheckBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn CheckBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn CheckBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn CheckBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn CheckBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn CheckBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn CheckBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn CheckBox_GetEnabled(AObj: usize) -> bool;
  pub fn CheckBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn CheckBox_GetFont(AObj: usize) -> usize;
  pub fn CheckBox_SetFont(AObj: usize, AValue: usize);
  pub fn CheckBox_GetParentColor(AObj: usize) -> bool;
  pub fn CheckBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn CheckBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckBox_GetParentFont(AObj: usize) -> bool;
  pub fn CheckBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn CheckBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn CheckBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn CheckBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn CheckBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn CheckBox_GetShowHint(AObj: usize) -> bool;
  pub fn CheckBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn CheckBox_GetState(AObj: usize) -> TCheckBoxState;
  pub fn CheckBox_SetState(AObj: usize, AValue: TCheckBoxState);
  pub fn CheckBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn CheckBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn CheckBox_GetTabStop(AObj: usize) -> bool;
  pub fn CheckBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn CheckBox_GetVisible(AObj: usize) -> bool;
  pub fn CheckBox_SetVisible(AObj: usize, AValue: bool);
  pub fn CheckBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn CheckBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn CheckBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn CheckBox_GetDockSite(AObj: usize) -> bool;
  pub fn CheckBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn CheckBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn CheckBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn CheckBox_GetBrush(AObj: usize) -> usize;
  pub fn CheckBox_GetControlCount(AObj: usize) -> i32;
  pub fn CheckBox_GetHandle(AObj: usize) -> HWND;
  pub fn CheckBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn CheckBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn CheckBox_GetShowing(AObj: usize) -> bool;
  pub fn CheckBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn CheckBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn CheckBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn CheckBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn CheckBox_GetClientHeight(AObj: usize) -> i32;
  pub fn CheckBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn CheckBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn CheckBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn CheckBox_GetClientWidth(AObj: usize) -> i32;
  pub fn CheckBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn CheckBox_GetControlState(AObj: usize) -> TControlState;
  pub fn CheckBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn CheckBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn CheckBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn CheckBox_GetFloating(AObj: usize) -> bool;
  pub fn CheckBox_GetParent(AObj: usize) -> usize;
  pub fn CheckBox_SetParent(AObj: usize, AValue: usize);
  pub fn CheckBox_GetLeft(AObj: usize) -> i32;
  pub fn CheckBox_SetLeft(AObj: usize, AValue: i32);
  pub fn CheckBox_GetTop(AObj: usize) -> i32;
  pub fn CheckBox_SetTop(AObj: usize, AValue: i32);
  pub fn CheckBox_GetWidth(AObj: usize) -> i32;
  pub fn CheckBox_SetWidth(AObj: usize, AValue: i32);
  pub fn CheckBox_GetHeight(AObj: usize) -> i32;
  pub fn CheckBox_SetHeight(AObj: usize, AValue: i32);
  pub fn CheckBox_GetCursor(AObj: usize) -> TCursor;
  pub fn CheckBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn CheckBox_GetHint(AObj: usize) -> *const c_char;
  pub fn CheckBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn CheckBox_GetComponentCount(AObj: usize) -> i32;
  pub fn CheckBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn CheckBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn CheckBox_GetOwner(AObj: usize) -> usize;
  pub fn CheckBox_GetName(AObj: usize) -> *const c_char;
  pub fn CheckBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn CheckBox_GetTag(AObj: usize) -> isize;
  pub fn CheckBox_SetTag(AObj: usize, AValue: isize);
  pub fn CheckBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn CheckBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn CheckBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn CheckBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn CheckBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn CheckBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn CheckBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn CheckBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn CheckBox_GetChildSizing(AObj: usize) -> usize;
  pub fn CheckBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn CheckBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn CheckBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn CheckBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn CheckBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn CheckBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn CheckBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn CheckBox_StaticClassType() -> TClass;

  // ----------------- TRadioButton ----------------------
  pub fn RadioButton_Create(AOwner: usize) -> usize;
  pub fn RadioButton_Free(AObj: usize);
  pub fn RadioButton_CanFocus(AObj: usize) -> bool;
  pub fn RadioButton_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn RadioButton_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn RadioButton_DisableAlign(AObj: usize);
  pub fn RadioButton_EnableAlign(AObj: usize);
  pub fn RadioButton_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn RadioButton_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn RadioButton_Focused(AObj: usize) -> bool;
  pub fn RadioButton_HandleAllocated(AObj: usize) -> bool;
  pub fn RadioButton_InsertControl(AObj: usize, AControl: usize);
  pub fn RadioButton_Invalidate(AObj: usize);
  pub fn RadioButton_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn RadioButton_RemoveControl(AObj: usize, AControl: usize);
  pub fn RadioButton_Realign(AObj: usize);
  pub fn RadioButton_Repaint(AObj: usize);
  pub fn RadioButton_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn RadioButton_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn RadioButton_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn RadioButton_SetFocus(AObj: usize);
  pub fn RadioButton_Update(AObj: usize);
  pub fn RadioButton_BringToFront(AObj: usize);
  pub fn RadioButton_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RadioButton_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RadioButton_Dragging(AObj: usize) -> bool;
  pub fn RadioButton_HasParent(AObj: usize) -> bool;
  pub fn RadioButton_Hide(AObj: usize);
  pub fn RadioButton_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn RadioButton_Refresh(AObj: usize);
  pub fn RadioButton_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RadioButton_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RadioButton_SendToBack(AObj: usize);
  pub fn RadioButton_Show(AObj: usize);
  pub fn RadioButton_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn RadioButton_GetTextLen(AObj: usize) -> i32;
  pub fn RadioButton_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn RadioButton_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn RadioButton_GetNamePath(AObj: usize) -> *const c_char;
  pub fn RadioButton_Assign(AObj: usize, Source: usize);
  pub fn RadioButton_ClassType(AObj: usize) -> TClass;
  pub fn RadioButton_ClassName(AObj: usize) -> *const c_char;
  pub fn RadioButton_InstanceSize(AObj: usize) -> i32;
  pub fn RadioButton_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn RadioButton_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn RadioButton_GetHashCode(AObj: usize) -> i32;
  pub fn RadioButton_ToString(AObj: usize) -> *const c_char;
  pub fn RadioButton_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RadioButton_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RadioButton_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn RadioButton_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn RadioButton_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn RadioButton_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn RadioButton_AnchorClient(AObj: usize, ASpace: i32);
  pub fn RadioButton_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioButton_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn RadioButton_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn RadioButton_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn RadioButton_SetOnChange(AObj: usize, AEventId: usize);
  pub fn RadioButton_GetAction(AObj: usize) -> usize;
  pub fn RadioButton_SetAction(AObj: usize, AValue: usize);
  pub fn RadioButton_GetAlign(AObj: usize) -> TAlign;
  pub fn RadioButton_SetAlign(AObj: usize, AValue: TAlign);
  pub fn RadioButton_GetAlignment(AObj: usize) -> TLeftRight;
  pub fn RadioButton_SetAlignment(AObj: usize, AValue: TLeftRight);
  pub fn RadioButton_GetAnchors(AObj: usize) -> TAnchors;
  pub fn RadioButton_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn RadioButton_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn RadioButton_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn RadioButton_GetCaption(AObj: usize) -> *const c_char;
  pub fn RadioButton_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn RadioButton_GetChecked(AObj: usize) -> bool;
  pub fn RadioButton_SetChecked(AObj: usize, AValue: bool);
  pub fn RadioButton_GetColor(AObj: usize) -> TColor;
  pub fn RadioButton_SetColor(AObj: usize, AValue: TColor);
  pub fn RadioButton_GetConstraints(AObj: usize) -> usize;
  pub fn RadioButton_SetConstraints(AObj: usize, AValue: usize);
  pub fn RadioButton_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn RadioButton_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RadioButton_GetDragCursor(AObj: usize) -> TCursor;
  pub fn RadioButton_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn RadioButton_GetDragKind(AObj: usize) -> TDragKind;
  pub fn RadioButton_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn RadioButton_GetDragMode(AObj: usize) -> TDragMode;
  pub fn RadioButton_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn RadioButton_GetEnabled(AObj: usize) -> bool;
  pub fn RadioButton_SetEnabled(AObj: usize, AValue: bool);
  pub fn RadioButton_GetFont(AObj: usize) -> usize;
  pub fn RadioButton_SetFont(AObj: usize, AValue: usize);
  pub fn RadioButton_GetParentColor(AObj: usize) -> bool;
  pub fn RadioButton_SetParentColor(AObj: usize, AValue: bool);
  pub fn RadioButton_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn RadioButton_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RadioButton_GetParentFont(AObj: usize) -> bool;
  pub fn RadioButton_SetParentFont(AObj: usize, AValue: bool);
  pub fn RadioButton_GetParentShowHint(AObj: usize) -> bool;
  pub fn RadioButton_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn RadioButton_GetPopupMenu(AObj: usize) -> usize;
  pub fn RadioButton_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn RadioButton_GetShowHint(AObj: usize) -> bool;
  pub fn RadioButton_SetShowHint(AObj: usize, AValue: bool);
  pub fn RadioButton_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn RadioButton_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn RadioButton_GetTabStop(AObj: usize) -> bool;
  pub fn RadioButton_SetTabStop(AObj: usize, AValue: bool);
  pub fn RadioButton_GetVisible(AObj: usize) -> bool;
  pub fn RadioButton_SetVisible(AObj: usize, AValue: bool);
  pub fn RadioButton_SetOnClick(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnExit(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn RadioButton_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn RadioButton_GetDockClientCount(AObj: usize) -> i32;
  pub fn RadioButton_GetDockSite(AObj: usize) -> bool;
  pub fn RadioButton_SetDockSite(AObj: usize, AValue: bool);
  pub fn RadioButton_GetMouseInClient(AObj: usize) -> bool;
  pub fn RadioButton_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn RadioButton_GetBrush(AObj: usize) -> usize;
  pub fn RadioButton_GetControlCount(AObj: usize) -> i32;
  pub fn RadioButton_GetHandle(AObj: usize) -> HWND;
  pub fn RadioButton_GetParentWindow(AObj: usize) -> HWND;
  pub fn RadioButton_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn RadioButton_GetShowing(AObj: usize) -> bool;
  pub fn RadioButton_GetUseDockManager(AObj: usize) -> bool;
  pub fn RadioButton_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn RadioButton_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn RadioButton_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn RadioButton_GetClientHeight(AObj: usize) -> i32;
  pub fn RadioButton_SetClientHeight(AObj: usize, AValue: i32);
  pub fn RadioButton_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn RadioButton_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn RadioButton_GetClientWidth(AObj: usize) -> i32;
  pub fn RadioButton_SetClientWidth(AObj: usize, AValue: i32);
  pub fn RadioButton_GetControlState(AObj: usize) -> TControlState;
  pub fn RadioButton_SetControlState(AObj: usize, AValue: TControlState);
  pub fn RadioButton_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn RadioButton_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn RadioButton_GetFloating(AObj: usize) -> bool;
  pub fn RadioButton_GetParent(AObj: usize) -> usize;
  pub fn RadioButton_SetParent(AObj: usize, AValue: usize);
  pub fn RadioButton_GetLeft(AObj: usize) -> i32;
  pub fn RadioButton_SetLeft(AObj: usize, AValue: i32);
  pub fn RadioButton_GetTop(AObj: usize) -> i32;
  pub fn RadioButton_SetTop(AObj: usize, AValue: i32);
  pub fn RadioButton_GetWidth(AObj: usize) -> i32;
  pub fn RadioButton_SetWidth(AObj: usize, AValue: i32);
  pub fn RadioButton_GetHeight(AObj: usize) -> i32;
  pub fn RadioButton_SetHeight(AObj: usize, AValue: i32);
  pub fn RadioButton_GetCursor(AObj: usize) -> TCursor;
  pub fn RadioButton_SetCursor(AObj: usize, AValue: TCursor);
  pub fn RadioButton_GetHint(AObj: usize) -> *const c_char;
  pub fn RadioButton_SetHint(AObj: usize, AValue: *const c_char);
  pub fn RadioButton_GetComponentCount(AObj: usize) -> i32;
  pub fn RadioButton_GetComponentIndex(AObj: usize) -> i32;
  pub fn RadioButton_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn RadioButton_GetOwner(AObj: usize) -> usize;
  pub fn RadioButton_GetName(AObj: usize) -> *const c_char;
  pub fn RadioButton_SetName(AObj: usize, AValue: *const c_char);
  pub fn RadioButton_GetTag(AObj: usize) -> isize;
  pub fn RadioButton_SetTag(AObj: usize, AValue: isize);
  pub fn RadioButton_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn RadioButton_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn RadioButton_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn RadioButton_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn RadioButton_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn RadioButton_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn RadioButton_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn RadioButton_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn RadioButton_GetChildSizing(AObj: usize) -> usize;
  pub fn RadioButton_SetChildSizing(AObj: usize, AValue: usize);
  pub fn RadioButton_GetBorderSpacing(AObj: usize) -> usize;
  pub fn RadioButton_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn RadioButton_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn RadioButton_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn RadioButton_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn RadioButton_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn RadioButton_StaticClassType() -> TClass;

  // ----------------- TGroupBox ----------------------
  pub fn GroupBox_Create(AOwner: usize) -> usize;
  pub fn GroupBox_Free(AObj: usize);
  pub fn GroupBox_CanFocus(AObj: usize) -> bool;
  pub fn GroupBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn GroupBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn GroupBox_DisableAlign(AObj: usize);
  pub fn GroupBox_EnableAlign(AObj: usize);
  pub fn GroupBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn GroupBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn GroupBox_Focused(AObj: usize) -> bool;
  pub fn GroupBox_HandleAllocated(AObj: usize) -> bool;
  pub fn GroupBox_InsertControl(AObj: usize, AControl: usize);
  pub fn GroupBox_Invalidate(AObj: usize);
  pub fn GroupBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn GroupBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn GroupBox_Realign(AObj: usize);
  pub fn GroupBox_Repaint(AObj: usize);
  pub fn GroupBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn GroupBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn GroupBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn GroupBox_SetFocus(AObj: usize);
  pub fn GroupBox_Update(AObj: usize);
  pub fn GroupBox_BringToFront(AObj: usize);
  pub fn GroupBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn GroupBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn GroupBox_Dragging(AObj: usize) -> bool;
  pub fn GroupBox_HasParent(AObj: usize) -> bool;
  pub fn GroupBox_Hide(AObj: usize);
  pub fn GroupBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn GroupBox_Refresh(AObj: usize);
  pub fn GroupBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn GroupBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn GroupBox_SendToBack(AObj: usize);
  pub fn GroupBox_Show(AObj: usize);
  pub fn GroupBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn GroupBox_GetTextLen(AObj: usize) -> i32;
  pub fn GroupBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn GroupBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn GroupBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn GroupBox_Assign(AObj: usize, Source: usize);
  pub fn GroupBox_ClassType(AObj: usize) -> TClass;
  pub fn GroupBox_ClassName(AObj: usize) -> *const c_char;
  pub fn GroupBox_InstanceSize(AObj: usize) -> i32;
  pub fn GroupBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn GroupBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn GroupBox_GetHashCode(AObj: usize) -> i32;
  pub fn GroupBox_ToString(AObj: usize) -> *const c_char;
  pub fn GroupBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn GroupBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn GroupBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn GroupBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn GroupBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn GroupBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn GroupBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn GroupBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn GroupBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn GroupBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn GroupBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn GroupBox_GetAlign(AObj: usize) -> TAlign;
  pub fn GroupBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn GroupBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn GroupBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn GroupBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn GroupBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn GroupBox_GetCaption(AObj: usize) -> *const c_char;
  pub fn GroupBox_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn GroupBox_GetColor(AObj: usize) -> TColor;
  pub fn GroupBox_SetColor(AObj: usize, AValue: TColor);
  pub fn GroupBox_GetConstraints(AObj: usize) -> usize;
  pub fn GroupBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn GroupBox_GetDockSite(AObj: usize) -> bool;
  pub fn GroupBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn GroupBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn GroupBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn GroupBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn GroupBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn GroupBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn GroupBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn GroupBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn GroupBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn GroupBox_GetEnabled(AObj: usize) -> bool;
  pub fn GroupBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn GroupBox_GetFont(AObj: usize) -> usize;
  pub fn GroupBox_SetFont(AObj: usize, AValue: usize);
  pub fn GroupBox_GetParentColor(AObj: usize) -> bool;
  pub fn GroupBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn GroupBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn GroupBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn GroupBox_GetParentFont(AObj: usize) -> bool;
  pub fn GroupBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn GroupBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn GroupBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn GroupBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn GroupBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn GroupBox_GetShowHint(AObj: usize) -> bool;
  pub fn GroupBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn GroupBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn GroupBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn GroupBox_GetTabStop(AObj: usize) -> bool;
  pub fn GroupBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn GroupBox_GetVisible(AObj: usize) -> bool;
  pub fn GroupBox_SetVisible(AObj: usize, AValue: bool);
  pub fn GroupBox_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn GroupBox_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn GroupBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn GroupBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn GroupBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn GroupBox_GetBrush(AObj: usize) -> usize;
  pub fn GroupBox_GetControlCount(AObj: usize) -> i32;
  pub fn GroupBox_GetHandle(AObj: usize) -> HWND;
  pub fn GroupBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn GroupBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn GroupBox_GetShowing(AObj: usize) -> bool;
  pub fn GroupBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn GroupBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn GroupBox_GetAction(AObj: usize) -> usize;
  pub fn GroupBox_SetAction(AObj: usize, AValue: usize);
  pub fn GroupBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn GroupBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn GroupBox_GetClientHeight(AObj: usize) -> i32;
  pub fn GroupBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn GroupBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn GroupBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn GroupBox_GetClientWidth(AObj: usize) -> i32;
  pub fn GroupBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn GroupBox_GetControlState(AObj: usize) -> TControlState;
  pub fn GroupBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn GroupBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn GroupBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn GroupBox_GetFloating(AObj: usize) -> bool;
  pub fn GroupBox_GetParent(AObj: usize) -> usize;
  pub fn GroupBox_SetParent(AObj: usize, AValue: usize);
  pub fn GroupBox_GetLeft(AObj: usize) -> i32;
  pub fn GroupBox_SetLeft(AObj: usize, AValue: i32);
  pub fn GroupBox_GetTop(AObj: usize) -> i32;
  pub fn GroupBox_SetTop(AObj: usize, AValue: i32);
  pub fn GroupBox_GetWidth(AObj: usize) -> i32;
  pub fn GroupBox_SetWidth(AObj: usize, AValue: i32);
  pub fn GroupBox_GetHeight(AObj: usize) -> i32;
  pub fn GroupBox_SetHeight(AObj: usize, AValue: i32);
  pub fn GroupBox_GetCursor(AObj: usize) -> TCursor;
  pub fn GroupBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn GroupBox_GetHint(AObj: usize) -> *const c_char;
  pub fn GroupBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn GroupBox_GetComponentCount(AObj: usize) -> i32;
  pub fn GroupBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn GroupBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn GroupBox_GetOwner(AObj: usize) -> usize;
  pub fn GroupBox_GetName(AObj: usize) -> *const c_char;
  pub fn GroupBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn GroupBox_GetTag(AObj: usize) -> isize;
  pub fn GroupBox_SetTag(AObj: usize, AValue: isize);
  pub fn GroupBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn GroupBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn GroupBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn GroupBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn GroupBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn GroupBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn GroupBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn GroupBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn GroupBox_GetChildSizing(AObj: usize) -> usize;
  pub fn GroupBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn GroupBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn GroupBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn GroupBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn GroupBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn GroupBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn GroupBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn GroupBox_StaticClassType() -> TClass;

  // ----------------- TLabel ----------------------
  pub fn Label_Create(AOwner: usize) -> usize;
  pub fn Label_Free(AObj: usize);
  pub fn Label_BringToFront(AObj: usize);
  pub fn Label_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Label_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Label_Dragging(AObj: usize) -> bool;
  pub fn Label_HasParent(AObj: usize) -> bool;
  pub fn Label_Hide(AObj: usize);
  pub fn Label_Invalidate(AObj: usize);
  pub fn Label_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Label_Refresh(AObj: usize);
  pub fn Label_Repaint(AObj: usize);
  pub fn Label_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Label_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Label_SendToBack(AObj: usize);
  pub fn Label_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Label_Show(AObj: usize);
  pub fn Label_Update(AObj: usize);
  pub fn Label_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Label_GetTextLen(AObj: usize) -> i32;
  pub fn Label_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Label_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Label_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Label_Assign(AObj: usize, Source: usize);
  pub fn Label_ClassType(AObj: usize) -> TClass;
  pub fn Label_ClassName(AObj: usize) -> *const c_char;
  pub fn Label_InstanceSize(AObj: usize) -> i32;
  pub fn Label_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Label_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Label_GetHashCode(AObj: usize) -> i32;
  pub fn Label_ToString(AObj: usize) -> *const c_char;
  pub fn Label_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Label_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Label_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Label_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Label_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Label_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Label_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Label_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Label_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Label_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Label_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Label_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Label_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Label_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Label_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Label_GetOptimalFill(AObj: usize) -> bool;
  pub fn Label_SetOptimalFill(AObj: usize, AValue: bool);
  pub fn Label_GetAlign(AObj: usize) -> TAlign;
  pub fn Label_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Label_GetAlignment(AObj: usize) -> TAlignment;
  pub fn Label_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn Label_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Label_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Label_GetAutoSize(AObj: usize) -> bool;
  pub fn Label_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Label_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Label_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Label_GetCaption(AObj: usize) -> *const c_char;
  pub fn Label_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn Label_GetColor(AObj: usize) -> TColor;
  pub fn Label_SetColor(AObj: usize, AValue: TColor);
  pub fn Label_GetConstraints(AObj: usize) -> usize;
  pub fn Label_SetConstraints(AObj: usize, AValue: usize);
  pub fn Label_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Label_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Label_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Label_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Label_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Label_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Label_GetEnabled(AObj: usize) -> bool;
  pub fn Label_SetEnabled(AObj: usize, AValue: bool);
  pub fn Label_GetFocusControl(AObj: usize) -> usize;
  pub fn Label_SetFocusControl(AObj: usize, AValue: usize);
  pub fn Label_GetFont(AObj: usize) -> usize;
  pub fn Label_SetFont(AObj: usize, AValue: usize);
  pub fn Label_GetParentColor(AObj: usize) -> bool;
  pub fn Label_SetParentColor(AObj: usize, AValue: bool);
  pub fn Label_GetParentFont(AObj: usize) -> bool;
  pub fn Label_SetParentFont(AObj: usize, AValue: bool);
  pub fn Label_GetParentShowHint(AObj: usize) -> bool;
  pub fn Label_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Label_GetPopupMenu(AObj: usize) -> usize;
  pub fn Label_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Label_GetShowAccelChar(AObj: usize) -> bool;
  pub fn Label_SetShowAccelChar(AObj: usize, AValue: bool);
  pub fn Label_GetShowHint(AObj: usize) -> bool;
  pub fn Label_SetShowHint(AObj: usize, AValue: bool);
  pub fn Label_GetTransparent(AObj: usize) -> bool;
  pub fn Label_SetTransparent(AObj: usize, AValue: bool);
  pub fn Label_GetLayout(AObj: usize) -> TTextLayout;
  pub fn Label_SetLayout(AObj: usize, AValue: TTextLayout);
  pub fn Label_GetVisible(AObj: usize) -> bool;
  pub fn Label_SetVisible(AObj: usize, AValue: bool);
  pub fn Label_GetWordWrap(AObj: usize) -> bool;
  pub fn Label_SetWordWrap(AObj: usize, AValue: bool);
  pub fn Label_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Label_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Label_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Label_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Label_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Label_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Label_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Label_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Label_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Label_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Label_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Label_GetCanvas(AObj: usize) -> usize;
  pub fn Label_GetAction(AObj: usize) -> usize;
  pub fn Label_SetAction(AObj: usize, AValue: usize);
  pub fn Label_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Label_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Label_GetClientHeight(AObj: usize) -> i32;
  pub fn Label_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Label_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Label_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Label_GetClientWidth(AObj: usize) -> i32;
  pub fn Label_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Label_GetControlState(AObj: usize) -> TControlState;
  pub fn Label_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Label_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Label_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Label_GetFloating(AObj: usize) -> bool;
  pub fn Label_GetParent(AObj: usize) -> usize;
  pub fn Label_SetParent(AObj: usize, AValue: usize);
  pub fn Label_GetLeft(AObj: usize) -> i32;
  pub fn Label_SetLeft(AObj: usize, AValue: i32);
  pub fn Label_GetTop(AObj: usize) -> i32;
  pub fn Label_SetTop(AObj: usize, AValue: i32);
  pub fn Label_GetWidth(AObj: usize) -> i32;
  pub fn Label_SetWidth(AObj: usize, AValue: i32);
  pub fn Label_GetHeight(AObj: usize) -> i32;
  pub fn Label_SetHeight(AObj: usize, AValue: i32);
  pub fn Label_GetCursor(AObj: usize) -> TCursor;
  pub fn Label_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Label_GetHint(AObj: usize) -> *const c_char;
  pub fn Label_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Label_GetComponentCount(AObj: usize) -> i32;
  pub fn Label_GetComponentIndex(AObj: usize) -> i32;
  pub fn Label_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Label_GetOwner(AObj: usize) -> usize;
  pub fn Label_GetName(AObj: usize) -> *const c_char;
  pub fn Label_SetName(AObj: usize, AValue: *const c_char);
  pub fn Label_GetTag(AObj: usize) -> isize;
  pub fn Label_SetTag(AObj: usize, AValue: isize);
  pub fn Label_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Label_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Label_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Label_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Label_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Label_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Label_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Label_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Label_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Label_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Label_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Label_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Label_StaticClassType() -> TClass;

  // ----------------- TListBox ----------------------
  pub fn ListBox_Create(AOwner: usize) -> usize;
  pub fn ListBox_Free(AObj: usize);
  pub fn ListBox_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ListBox_Clear(AObj: usize);
  pub fn ListBox_ClearSelection(AObj: usize);
  pub fn ListBox_DeleteSelected(AObj: usize);
  pub fn ListBox_ItemAtPos(AObj: usize, Pos: *mut TPoint, Existing: bool) -> i32;
  pub fn ListBox_ItemRect(AObj: usize, Index: i32, Result: *mut TRect);
  pub fn ListBox_SelectAll(AObj: usize);
  pub fn ListBox_CanFocus(AObj: usize) -> bool;
  pub fn ListBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ListBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ListBox_DisableAlign(AObj: usize);
  pub fn ListBox_EnableAlign(AObj: usize);
  pub fn ListBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ListBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ListBox_Focused(AObj: usize) -> bool;
  pub fn ListBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ListBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ListBox_Invalidate(AObj: usize);
  pub fn ListBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ListBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ListBox_Realign(AObj: usize);
  pub fn ListBox_Repaint(AObj: usize);
  pub fn ListBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ListBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ListBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ListBox_SetFocus(AObj: usize);
  pub fn ListBox_Update(AObj: usize);
  pub fn ListBox_BringToFront(AObj: usize);
  pub fn ListBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ListBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ListBox_Dragging(AObj: usize) -> bool;
  pub fn ListBox_HasParent(AObj: usize) -> bool;
  pub fn ListBox_Hide(AObj: usize);
  pub fn ListBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ListBox_Refresh(AObj: usize);
  pub fn ListBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ListBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ListBox_SendToBack(AObj: usize);
  pub fn ListBox_Show(AObj: usize);
  pub fn ListBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ListBox_GetTextLen(AObj: usize) -> i32;
  pub fn ListBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ListBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ListBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListBox_Assign(AObj: usize, Source: usize);
  pub fn ListBox_ClassType(AObj: usize) -> TClass;
  pub fn ListBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ListBox_InstanceSize(AObj: usize) -> i32;
  pub fn ListBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListBox_GetHashCode(AObj: usize) -> i32;
  pub fn ListBox_ToString(AObj: usize) -> *const c_char;
  pub fn ListBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ListBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ListBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ListBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ListBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ListBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ListBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ListBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ListBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ListBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ListBox_GetClickOnSelChange(AObj: usize) -> bool;
  pub fn ListBox_SetClickOnSelChange(AObj: usize, AValue: bool);
  pub fn ListBox_GetOptions(AObj: usize) -> TListBoxOptions;
  pub fn ListBox_SetOptions(AObj: usize, AValue: TListBoxOptions);
  pub fn ListBox_GetTopIndex(AObj: usize) -> i32;
  pub fn ListBox_SetTopIndex(AObj: usize, AValue: i32);
  pub fn ListBox_GetStyle(AObj: usize) -> TListBoxStyle;
  pub fn ListBox_SetStyle(AObj: usize, AValue: TListBoxStyle);
  pub fn ListBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ListBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ListBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ListBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ListBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ListBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ListBox_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn ListBox_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn ListBox_GetColor(AObj: usize) -> TColor;
  pub fn ListBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ListBox_GetColumns(AObj: usize) -> i32;
  pub fn ListBox_SetColumns(AObj: usize, AValue: i32);
  pub fn ListBox_GetConstraints(AObj: usize) -> usize;
  pub fn ListBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ListBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ListBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ListBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ListBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ListBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ListBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ListBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ListBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ListBox_GetEnabled(AObj: usize) -> bool;
  pub fn ListBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ListBox_GetExtendedSelect(AObj: usize) -> bool;
  pub fn ListBox_SetExtendedSelect(AObj: usize, AValue: bool);
  pub fn ListBox_GetFont(AObj: usize) -> usize;
  pub fn ListBox_SetFont(AObj: usize, AValue: usize);
  pub fn ListBox_GetItemHeight(AObj: usize) -> i32;
  pub fn ListBox_SetItemHeight(AObj: usize, AValue: i32);
  pub fn ListBox_GetItems(AObj: usize) -> usize;
  pub fn ListBox_SetItems(AObj: usize, AValue: usize);
  pub fn ListBox_GetMultiSelect(AObj: usize) -> bool;
  pub fn ListBox_SetMultiSelect(AObj: usize, AValue: bool);
  pub fn ListBox_GetParentColor(AObj: usize) -> bool;
  pub fn ListBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn ListBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ListBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ListBox_GetParentFont(AObj: usize) -> bool;
  pub fn ListBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ListBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ListBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ListBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ListBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ListBox_GetShowHint(AObj: usize) -> bool;
  pub fn ListBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ListBox_GetSorted(AObj: usize) -> bool;
  pub fn ListBox_SetSorted(AObj: usize, AValue: bool);
  pub fn ListBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ListBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ListBox_GetTabStop(AObj: usize) -> bool;
  pub fn ListBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ListBox_GetVisible(AObj: usize) -> bool;
  pub fn ListBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ListBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnDrawItem(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMeasureItem(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ListBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ListBox_GetCanvas(AObj: usize) -> usize;
  pub fn ListBox_GetCount(AObj: usize) -> i32;
  pub fn ListBox_GetSelCount(AObj: usize) -> i32;
  pub fn ListBox_GetItemIndex(AObj: usize) -> i32;
  pub fn ListBox_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ListBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ListBox_GetDockSite(AObj: usize) -> bool;
  pub fn ListBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ListBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ListBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ListBox_GetBrush(AObj: usize) -> usize;
  pub fn ListBox_GetControlCount(AObj: usize) -> i32;
  pub fn ListBox_GetHandle(AObj: usize) -> HWND;
  pub fn ListBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ListBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ListBox_GetShowing(AObj: usize) -> bool;
  pub fn ListBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ListBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ListBox_GetAction(AObj: usize) -> usize;
  pub fn ListBox_SetAction(AObj: usize, AValue: usize);
  pub fn ListBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ListBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ListBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ListBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ListBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ListBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ListBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ListBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ListBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ListBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ListBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ListBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ListBox_GetFloating(AObj: usize) -> bool;
  pub fn ListBox_GetParent(AObj: usize) -> usize;
  pub fn ListBox_SetParent(AObj: usize, AValue: usize);
  pub fn ListBox_GetLeft(AObj: usize) -> i32;
  pub fn ListBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ListBox_GetTop(AObj: usize) -> i32;
  pub fn ListBox_SetTop(AObj: usize, AValue: i32);
  pub fn ListBox_GetWidth(AObj: usize) -> i32;
  pub fn ListBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ListBox_GetHeight(AObj: usize) -> i32;
  pub fn ListBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ListBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ListBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ListBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ListBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ListBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ListBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ListBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ListBox_GetOwner(AObj: usize) -> usize;
  pub fn ListBox_GetName(AObj: usize) -> *const c_char;
  pub fn ListBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ListBox_GetTag(AObj: usize) -> isize;
  pub fn ListBox_SetTag(AObj: usize, AValue: isize);
  pub fn ListBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ListBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ListBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ListBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ListBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ListBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ListBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ListBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ListBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ListBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ListBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ListBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ListBox_GetSelected(AObj: usize, Index: i32) -> bool;
  pub fn ListBox_SetSelected(AObj: usize, Index: i32, AValue: bool);
  pub fn ListBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ListBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ListBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ListBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ListBox_StaticClassType() -> TClass;

  // ----------------- TComboBox ----------------------
  pub fn ComboBox_Create(AOwner: usize) -> usize;
  pub fn ComboBox_Free(AObj: usize);
  pub fn ComboBox_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ComboBox_Clear(AObj: usize);
  pub fn ComboBox_ClearSelection(AObj: usize);
  pub fn ComboBox_DeleteSelected(AObj: usize);
  pub fn ComboBox_Focused(AObj: usize) -> bool;
  pub fn ComboBox_SelectAll(AObj: usize);
  pub fn ComboBox_CanFocus(AObj: usize) -> bool;
  pub fn ComboBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ComboBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ComboBox_DisableAlign(AObj: usize);
  pub fn ComboBox_EnableAlign(AObj: usize);
  pub fn ComboBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ComboBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ComboBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ComboBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ComboBox_Invalidate(AObj: usize);
  pub fn ComboBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ComboBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ComboBox_Realign(AObj: usize);
  pub fn ComboBox_Repaint(AObj: usize);
  pub fn ComboBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ComboBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ComboBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ComboBox_SetFocus(AObj: usize);
  pub fn ComboBox_Update(AObj: usize);
  pub fn ComboBox_BringToFront(AObj: usize);
  pub fn ComboBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ComboBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ComboBox_Dragging(AObj: usize) -> bool;
  pub fn ComboBox_HasParent(AObj: usize) -> bool;
  pub fn ComboBox_Hide(AObj: usize);
  pub fn ComboBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ComboBox_Refresh(AObj: usize);
  pub fn ComboBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ComboBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ComboBox_SendToBack(AObj: usize);
  pub fn ComboBox_Show(AObj: usize);
  pub fn ComboBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ComboBox_GetTextLen(AObj: usize) -> i32;
  pub fn ComboBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ComboBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ComboBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ComboBox_Assign(AObj: usize, Source: usize);
  pub fn ComboBox_ClassType(AObj: usize) -> TClass;
  pub fn ComboBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ComboBox_InstanceSize(AObj: usize) -> i32;
  pub fn ComboBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ComboBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ComboBox_GetHashCode(AObj: usize) -> i32;
  pub fn ComboBox_ToString(AObj: usize) -> *const c_char;
  pub fn ComboBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ComboBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ComboBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ComboBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ComboBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ComboBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ComboBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ComboBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ComboBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ComboBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ComboBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ComboBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ComboBox_GetAutoComplete(AObj: usize) -> bool;
  pub fn ComboBox_SetAutoComplete(AObj: usize, AValue: bool);
  pub fn ComboBox_GetAutoDropDown(AObj: usize) -> bool;
  pub fn ComboBox_SetAutoDropDown(AObj: usize, AValue: bool);
  pub fn ComboBox_GetStyle(AObj: usize) -> TComboBoxStyle;
  pub fn ComboBox_SetStyle(AObj: usize, AValue: TComboBoxStyle);
  pub fn ComboBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ComboBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ComboBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ComboBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ComboBox_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn ComboBox_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn ComboBox_GetColor(AObj: usize) -> TColor;
  pub fn ComboBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ComboBox_GetConstraints(AObj: usize) -> usize;
  pub fn ComboBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ComboBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ComboBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ComboBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ComboBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ComboBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ComboBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ComboBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ComboBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ComboBox_GetDropDownCount(AObj: usize) -> i32;
  pub fn ComboBox_SetDropDownCount(AObj: usize, AValue: i32);
  pub fn ComboBox_GetEnabled(AObj: usize) -> bool;
  pub fn ComboBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ComboBox_GetFont(AObj: usize) -> usize;
  pub fn ComboBox_SetFont(AObj: usize, AValue: usize);
  pub fn ComboBox_GetItemHeight(AObj: usize) -> i32;
  pub fn ComboBox_SetItemHeight(AObj: usize, AValue: i32);
  pub fn ComboBox_GetItemIndex(AObj: usize) -> i32;
  pub fn ComboBox_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ComboBox_GetMaxLength(AObj: usize) -> i32;
  pub fn ComboBox_SetMaxLength(AObj: usize, AValue: i32);
  pub fn ComboBox_GetParentColor(AObj: usize) -> bool;
  pub fn ComboBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn ComboBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ComboBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ComboBox_GetParentFont(AObj: usize) -> bool;
  pub fn ComboBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ComboBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ComboBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ComboBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ComboBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ComboBox_GetShowHint(AObj: usize) -> bool;
  pub fn ComboBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ComboBox_GetSorted(AObj: usize) -> bool;
  pub fn ComboBox_SetSorted(AObj: usize, AValue: bool);
  pub fn ComboBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ComboBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ComboBox_GetTabStop(AObj: usize) -> bool;
  pub fn ComboBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ComboBox_GetText(AObj: usize) -> *const c_char;
  pub fn ComboBox_SetText(AObj: usize, AValue: *const c_char);
  pub fn ComboBox_GetVisible(AObj: usize) -> bool;
  pub fn ComboBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ComboBox_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnDrawItem(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnDropDown(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnMeasureItem(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ComboBox_SetOnSelect(AObj: usize, AEventId: usize);
  pub fn ComboBox_GetItems(AObj: usize) -> usize;
  pub fn ComboBox_SetItems(AObj: usize, AValue: usize);
  pub fn ComboBox_GetSelText(AObj: usize) -> *const c_char;
  pub fn ComboBox_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn ComboBox_GetCanvas(AObj: usize) -> usize;
  pub fn ComboBox_GetDroppedDown(AObj: usize) -> bool;
  pub fn ComboBox_SetDroppedDown(AObj: usize, AValue: bool);
  pub fn ComboBox_GetSelLength(AObj: usize) -> i32;
  pub fn ComboBox_SetSelLength(AObj: usize, AValue: i32);
  pub fn ComboBox_GetSelStart(AObj: usize) -> i32;
  pub fn ComboBox_SetSelStart(AObj: usize, AValue: i32);
  pub fn ComboBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ComboBox_GetDockSite(AObj: usize) -> bool;
  pub fn ComboBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ComboBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ComboBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ComboBox_GetBrush(AObj: usize) -> usize;
  pub fn ComboBox_GetControlCount(AObj: usize) -> i32;
  pub fn ComboBox_GetHandle(AObj: usize) -> HWND;
  pub fn ComboBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ComboBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ComboBox_GetShowing(AObj: usize) -> bool;
  pub fn ComboBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ComboBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ComboBox_GetAction(AObj: usize) -> usize;
  pub fn ComboBox_SetAction(AObj: usize, AValue: usize);
  pub fn ComboBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ComboBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ComboBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ComboBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ComboBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ComboBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ComboBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ComboBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ComboBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ComboBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ComboBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ComboBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ComboBox_GetFloating(AObj: usize) -> bool;
  pub fn ComboBox_GetParent(AObj: usize) -> usize;
  pub fn ComboBox_SetParent(AObj: usize, AValue: usize);
  pub fn ComboBox_GetLeft(AObj: usize) -> i32;
  pub fn ComboBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ComboBox_GetTop(AObj: usize) -> i32;
  pub fn ComboBox_SetTop(AObj: usize, AValue: i32);
  pub fn ComboBox_GetWidth(AObj: usize) -> i32;
  pub fn ComboBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ComboBox_GetHeight(AObj: usize) -> i32;
  pub fn ComboBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ComboBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ComboBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ComboBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ComboBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ComboBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ComboBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ComboBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ComboBox_GetOwner(AObj: usize) -> usize;
  pub fn ComboBox_GetName(AObj: usize) -> *const c_char;
  pub fn ComboBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ComboBox_GetTag(AObj: usize) -> isize;
  pub fn ComboBox_SetTag(AObj: usize, AValue: isize);
  pub fn ComboBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ComboBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ComboBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ComboBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ComboBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ComboBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ComboBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ComboBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ComboBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ComboBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ComboBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ComboBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ComboBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ComboBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ComboBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ComboBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ComboBox_StaticClassType() -> TClass;

  // ----------------- TPanel ----------------------
  pub fn Panel_Create(AOwner: usize) -> usize;
  pub fn Panel_Free(AObj: usize);
  pub fn Panel_CanFocus(AObj: usize) -> bool;
  pub fn Panel_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Panel_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Panel_DisableAlign(AObj: usize);
  pub fn Panel_EnableAlign(AObj: usize);
  pub fn Panel_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Panel_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Panel_Focused(AObj: usize) -> bool;
  pub fn Panel_HandleAllocated(AObj: usize) -> bool;
  pub fn Panel_InsertControl(AObj: usize, AControl: usize);
  pub fn Panel_Invalidate(AObj: usize);
  pub fn Panel_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Panel_RemoveControl(AObj: usize, AControl: usize);
  pub fn Panel_Realign(AObj: usize);
  pub fn Panel_Repaint(AObj: usize);
  pub fn Panel_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Panel_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Panel_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Panel_SetFocus(AObj: usize);
  pub fn Panel_Update(AObj: usize);
  pub fn Panel_BringToFront(AObj: usize);
  pub fn Panel_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Panel_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Panel_Dragging(AObj: usize) -> bool;
  pub fn Panel_HasParent(AObj: usize) -> bool;
  pub fn Panel_Hide(AObj: usize);
  pub fn Panel_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Panel_Refresh(AObj: usize);
  pub fn Panel_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Panel_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Panel_SendToBack(AObj: usize);
  pub fn Panel_Show(AObj: usize);
  pub fn Panel_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Panel_GetTextLen(AObj: usize) -> i32;
  pub fn Panel_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Panel_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Panel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Panel_Assign(AObj: usize, Source: usize);
  pub fn Panel_ClassType(AObj: usize) -> TClass;
  pub fn Panel_ClassName(AObj: usize) -> *const c_char;
  pub fn Panel_InstanceSize(AObj: usize) -> i32;
  pub fn Panel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Panel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Panel_GetHashCode(AObj: usize) -> i32;
  pub fn Panel_ToString(AObj: usize) -> *const c_char;
  pub fn Panel_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Panel_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Panel_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Panel_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Panel_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Panel_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Panel_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Panel_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Panel_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Panel_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Panel_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Panel_GetAlign(AObj: usize) -> TAlign;
  pub fn Panel_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Panel_GetAlignment(AObj: usize) -> TAlignment;
  pub fn Panel_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn Panel_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Panel_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Panel_GetAutoSize(AObj: usize) -> bool;
  pub fn Panel_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Panel_GetBevelInner(AObj: usize) -> TBevelCut;
  pub fn Panel_SetBevelInner(AObj: usize, AValue: TBevelCut);
  pub fn Panel_GetBevelOuter(AObj: usize) -> TBevelCut;
  pub fn Panel_SetBevelOuter(AObj: usize, AValue: TBevelCut);
  pub fn Panel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Panel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Panel_GetBorderWidth(AObj: usize) -> i32;
  pub fn Panel_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn Panel_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn Panel_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn Panel_GetCaption(AObj: usize) -> *const c_char;
  pub fn Panel_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn Panel_GetColor(AObj: usize) -> TColor;
  pub fn Panel_SetColor(AObj: usize, AValue: TColor);
  pub fn Panel_GetConstraints(AObj: usize) -> usize;
  pub fn Panel_SetConstraints(AObj: usize, AValue: usize);
  pub fn Panel_GetUseDockManager(AObj: usize) -> bool;
  pub fn Panel_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Panel_GetDockSite(AObj: usize) -> bool;
  pub fn Panel_SetDockSite(AObj: usize, AValue: bool);
  pub fn Panel_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Panel_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Panel_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Panel_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Panel_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Panel_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Panel_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Panel_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Panel_GetEnabled(AObj: usize) -> bool;
  pub fn Panel_SetEnabled(AObj: usize, AValue: bool);
  pub fn Panel_GetFullRepaint(AObj: usize) -> bool;
  pub fn Panel_SetFullRepaint(AObj: usize, AValue: bool);
  pub fn Panel_GetFont(AObj: usize) -> usize;
  pub fn Panel_SetFont(AObj: usize, AValue: usize);
  pub fn Panel_GetParentBackground(AObj: usize) -> bool;
  pub fn Panel_SetParentBackground(AObj: usize, AValue: bool);
  pub fn Panel_GetParentColor(AObj: usize) -> bool;
  pub fn Panel_SetParentColor(AObj: usize, AValue: bool);
  pub fn Panel_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Panel_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Panel_GetParentFont(AObj: usize) -> bool;
  pub fn Panel_SetParentFont(AObj: usize, AValue: bool);
  pub fn Panel_GetParentShowHint(AObj: usize) -> bool;
  pub fn Panel_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Panel_GetPopupMenu(AObj: usize) -> usize;
  pub fn Panel_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Panel_GetShowHint(AObj: usize) -> bool;
  pub fn Panel_SetShowHint(AObj: usize, AValue: bool);
  pub fn Panel_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Panel_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Panel_GetTabStop(AObj: usize) -> bool;
  pub fn Panel_SetTabStop(AObj: usize, AValue: bool);
  pub fn Panel_GetVisible(AObj: usize) -> bool;
  pub fn Panel_SetVisible(AObj: usize, AValue: bool);
  pub fn Panel_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnExit(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnResize(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn Panel_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn Panel_GetDockClientCount(AObj: usize) -> i32;
  pub fn Panel_GetMouseInClient(AObj: usize) -> bool;
  pub fn Panel_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Panel_GetBrush(AObj: usize) -> usize;
  pub fn Panel_GetControlCount(AObj: usize) -> i32;
  pub fn Panel_GetHandle(AObj: usize) -> HWND;
  pub fn Panel_GetParentWindow(AObj: usize) -> HWND;
  pub fn Panel_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Panel_GetShowing(AObj: usize) -> bool;
  pub fn Panel_GetAction(AObj: usize) -> usize;
  pub fn Panel_SetAction(AObj: usize, AValue: usize);
  pub fn Panel_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Panel_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Panel_GetClientHeight(AObj: usize) -> i32;
  pub fn Panel_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Panel_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Panel_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Panel_GetClientWidth(AObj: usize) -> i32;
  pub fn Panel_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Panel_GetControlState(AObj: usize) -> TControlState;
  pub fn Panel_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Panel_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Panel_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Panel_GetFloating(AObj: usize) -> bool;
  pub fn Panel_GetParent(AObj: usize) -> usize;
  pub fn Panel_SetParent(AObj: usize, AValue: usize);
  pub fn Panel_GetLeft(AObj: usize) -> i32;
  pub fn Panel_SetLeft(AObj: usize, AValue: i32);
  pub fn Panel_GetTop(AObj: usize) -> i32;
  pub fn Panel_SetTop(AObj: usize, AValue: i32);
  pub fn Panel_GetWidth(AObj: usize) -> i32;
  pub fn Panel_SetWidth(AObj: usize, AValue: i32);
  pub fn Panel_GetHeight(AObj: usize) -> i32;
  pub fn Panel_SetHeight(AObj: usize, AValue: i32);
  pub fn Panel_GetCursor(AObj: usize) -> TCursor;
  pub fn Panel_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Panel_GetHint(AObj: usize) -> *const c_char;
  pub fn Panel_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Panel_GetComponentCount(AObj: usize) -> i32;
  pub fn Panel_GetComponentIndex(AObj: usize) -> i32;
  pub fn Panel_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Panel_GetOwner(AObj: usize) -> usize;
  pub fn Panel_GetName(AObj: usize) -> *const c_char;
  pub fn Panel_SetName(AObj: usize, AValue: *const c_char);
  pub fn Panel_GetTag(AObj: usize) -> isize;
  pub fn Panel_SetTag(AObj: usize, AValue: isize);
  pub fn Panel_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Panel_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Panel_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Panel_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Panel_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Panel_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Panel_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Panel_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Panel_GetChildSizing(AObj: usize) -> usize;
  pub fn Panel_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Panel_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Panel_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Panel_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Panel_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Panel_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Panel_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Panel_StaticClassType() -> TClass;

  // ----------------- TImage ----------------------
  pub fn Image_Create(AOwner: usize) -> usize;
  pub fn Image_Free(AObj: usize);
  pub fn Image_BringToFront(AObj: usize);
  pub fn Image_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Image_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Image_Dragging(AObj: usize) -> bool;
  pub fn Image_HasParent(AObj: usize) -> bool;
  pub fn Image_Hide(AObj: usize);
  pub fn Image_Invalidate(AObj: usize);
  pub fn Image_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Image_Refresh(AObj: usize);
  pub fn Image_Repaint(AObj: usize);
  pub fn Image_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Image_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Image_SendToBack(AObj: usize);
  pub fn Image_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Image_Show(AObj: usize);
  pub fn Image_Update(AObj: usize);
  pub fn Image_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Image_GetTextLen(AObj: usize) -> i32;
  pub fn Image_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Image_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Image_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Image_Assign(AObj: usize, Source: usize);
  pub fn Image_ClassType(AObj: usize) -> TClass;
  pub fn Image_ClassName(AObj: usize) -> *const c_char;
  pub fn Image_InstanceSize(AObj: usize) -> i32;
  pub fn Image_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Image_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Image_GetHashCode(AObj: usize) -> i32;
  pub fn Image_ToString(AObj: usize) -> *const c_char;
  pub fn Image_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Image_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Image_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Image_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Image_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Image_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Image_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Image_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Image_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Image_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Image_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Image_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Image_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Image_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Image_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Image_GetAntialiasingMode(AObj: usize) -> TAntialiasingMode;
  pub fn Image_SetAntialiasingMode(AObj: usize, AValue: TAntialiasingMode);
  pub fn Image_GetKeepOriginXWhenClipped(AObj: usize) -> bool;
  pub fn Image_SetKeepOriginXWhenClipped(AObj: usize, AValue: bool);
  pub fn Image_GetKeepOriginYWhenClipped(AObj: usize) -> bool;
  pub fn Image_SetKeepOriginYWhenClipped(AObj: usize, AValue: bool);
  pub fn Image_GetStretchInEnabled(AObj: usize) -> bool;
  pub fn Image_SetStretchInEnabled(AObj: usize, AValue: bool);
  pub fn Image_GetStretchOutEnabled(AObj: usize) -> bool;
  pub fn Image_SetStretchOutEnabled(AObj: usize, AValue: bool);
  pub fn Image_GetCanvas(AObj: usize) -> usize;
  pub fn Image_GetAlign(AObj: usize) -> TAlign;
  pub fn Image_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Image_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Image_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Image_GetAutoSize(AObj: usize) -> bool;
  pub fn Image_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Image_GetCenter(AObj: usize) -> bool;
  pub fn Image_SetCenter(AObj: usize, AValue: bool);
  pub fn Image_GetConstraints(AObj: usize) -> usize;
  pub fn Image_SetConstraints(AObj: usize, AValue: usize);
  pub fn Image_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Image_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Image_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Image_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Image_GetEnabled(AObj: usize) -> bool;
  pub fn Image_SetEnabled(AObj: usize, AValue: bool);
  pub fn Image_GetParentShowHint(AObj: usize) -> bool;
  pub fn Image_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Image_GetPicture(AObj: usize) -> usize;
  pub fn Image_SetPicture(AObj: usize, AValue: usize);
  pub fn Image_GetPopupMenu(AObj: usize) -> usize;
  pub fn Image_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Image_GetProportional(AObj: usize) -> bool;
  pub fn Image_SetProportional(AObj: usize, AValue: bool);
  pub fn Image_GetShowHint(AObj: usize) -> bool;
  pub fn Image_SetShowHint(AObj: usize, AValue: bool);
  pub fn Image_GetStretch(AObj: usize) -> bool;
  pub fn Image_SetStretch(AObj: usize, AValue: bool);
  pub fn Image_GetTransparent(AObj: usize) -> bool;
  pub fn Image_SetTransparent(AObj: usize, AValue: bool);
  pub fn Image_GetVisible(AObj: usize) -> bool;
  pub fn Image_SetVisible(AObj: usize, AValue: bool);
  pub fn Image_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Image_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Image_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Image_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Image_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Image_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Image_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Image_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Image_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Image_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Image_GetAction(AObj: usize) -> usize;
  pub fn Image_SetAction(AObj: usize, AValue: usize);
  pub fn Image_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Image_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Image_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Image_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Image_GetClientHeight(AObj: usize) -> i32;
  pub fn Image_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Image_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Image_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Image_GetClientWidth(AObj: usize) -> i32;
  pub fn Image_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Image_GetControlState(AObj: usize) -> TControlState;
  pub fn Image_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Image_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Image_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Image_GetFloating(AObj: usize) -> bool;
  pub fn Image_GetParent(AObj: usize) -> usize;
  pub fn Image_SetParent(AObj: usize, AValue: usize);
  pub fn Image_GetLeft(AObj: usize) -> i32;
  pub fn Image_SetLeft(AObj: usize, AValue: i32);
  pub fn Image_GetTop(AObj: usize) -> i32;
  pub fn Image_SetTop(AObj: usize, AValue: i32);
  pub fn Image_GetWidth(AObj: usize) -> i32;
  pub fn Image_SetWidth(AObj: usize, AValue: i32);
  pub fn Image_GetHeight(AObj: usize) -> i32;
  pub fn Image_SetHeight(AObj: usize, AValue: i32);
  pub fn Image_GetCursor(AObj: usize) -> TCursor;
  pub fn Image_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Image_GetHint(AObj: usize) -> *const c_char;
  pub fn Image_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Image_GetComponentCount(AObj: usize) -> i32;
  pub fn Image_GetComponentIndex(AObj: usize) -> i32;
  pub fn Image_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Image_GetOwner(AObj: usize) -> usize;
  pub fn Image_GetName(AObj: usize) -> *const c_char;
  pub fn Image_SetName(AObj: usize, AValue: *const c_char);
  pub fn Image_GetTag(AObj: usize) -> isize;
  pub fn Image_SetTag(AObj: usize, AValue: isize);
  pub fn Image_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Image_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Image_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Image_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Image_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Image_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Image_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Image_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Image_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Image_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Image_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Image_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Image_StaticClassType() -> TClass;

  // ----------------- TLinkLabel ----------------------
  pub fn LinkLabel_Create(AOwner: usize) -> usize;
  pub fn LinkLabel_Free(AObj: usize);
  pub fn LinkLabel_Invalidate(AObj: usize);
  pub fn LinkLabel_Repaint(AObj: usize);
  pub fn LinkLabel_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn LinkLabel_Update(AObj: usize);
  pub fn LinkLabel_BringToFront(AObj: usize);
  pub fn LinkLabel_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn LinkLabel_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn LinkLabel_Dragging(AObj: usize) -> bool;
  pub fn LinkLabel_HasParent(AObj: usize) -> bool;
  pub fn LinkLabel_Hide(AObj: usize);
  pub fn LinkLabel_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn LinkLabel_Refresh(AObj: usize);
  pub fn LinkLabel_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn LinkLabel_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn LinkLabel_SendToBack(AObj: usize);
  pub fn LinkLabel_Show(AObj: usize);
  pub fn LinkLabel_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn LinkLabel_GetTextLen(AObj: usize) -> i32;
  pub fn LinkLabel_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn LinkLabel_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn LinkLabel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn LinkLabel_Assign(AObj: usize, Source: usize);
  pub fn LinkLabel_ClassType(AObj: usize) -> TClass;
  pub fn LinkLabel_ClassName(AObj: usize) -> *const c_char;
  pub fn LinkLabel_InstanceSize(AObj: usize) -> i32;
  pub fn LinkLabel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn LinkLabel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn LinkLabel_GetHashCode(AObj: usize) -> i32;
  pub fn LinkLabel_ToString(AObj: usize) -> *const c_char;
  pub fn LinkLabel_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn LinkLabel_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn LinkLabel_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn LinkLabel_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn LinkLabel_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn LinkLabel_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn LinkLabel_AnchorClient(AObj: usize, ASpace: i32);
  pub fn LinkLabel_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LinkLabel_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn LinkLabel_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn LinkLabel_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn LinkLabel_GetAlign(AObj: usize) -> TAlign;
  pub fn LinkLabel_SetAlign(AObj: usize, AValue: TAlign);
  pub fn LinkLabel_GetAlignment(AObj: usize) -> TAlignment;
  pub fn LinkLabel_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn LinkLabel_GetAnchors(AObj: usize) -> TAnchors;
  pub fn LinkLabel_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn LinkLabel_GetAutoSize(AObj: usize) -> bool;
  pub fn LinkLabel_SetAutoSize(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetCaption(AObj: usize) -> *const c_char;
  pub fn LinkLabel_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn LinkLabel_GetColor(AObj: usize) -> TColor;
  pub fn LinkLabel_SetColor(AObj: usize, AValue: TColor);
  pub fn LinkLabel_GetConstraints(AObj: usize) -> usize;
  pub fn LinkLabel_SetConstraints(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetDragCursor(AObj: usize) -> TCursor;
  pub fn LinkLabel_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn LinkLabel_GetDragKind(AObj: usize) -> TDragKind;
  pub fn LinkLabel_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn LinkLabel_GetDragMode(AObj: usize) -> TDragMode;
  pub fn LinkLabel_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn LinkLabel_GetEnabled(AObj: usize) -> bool;
  pub fn LinkLabel_SetEnabled(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetFont(AObj: usize) -> usize;
  pub fn LinkLabel_SetFont(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetParentColor(AObj: usize) -> bool;
  pub fn LinkLabel_SetParentColor(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetParentFont(AObj: usize) -> bool;
  pub fn LinkLabel_SetParentFont(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetParentShowHint(AObj: usize) -> bool;
  pub fn LinkLabel_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetPopupMenu(AObj: usize) -> usize;
  pub fn LinkLabel_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetShowHint(AObj: usize) -> bool;
  pub fn LinkLabel_SetShowHint(AObj: usize, AValue: bool);
  pub fn LinkLabel_GetVisible(AObj: usize) -> bool;
  pub fn LinkLabel_SetVisible(AObj: usize, AValue: bool);
  pub fn LinkLabel_SetOnClick(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn LinkLabel_SetOnLinkClick(AObj: usize, AEventId: usize);
  pub fn LinkLabel_GetMouseInClient(AObj: usize) -> bool;
  pub fn LinkLabel_GetAction(AObj: usize) -> usize;
  pub fn LinkLabel_SetAction(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn LinkLabel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn LinkLabel_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn LinkLabel_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn LinkLabel_GetClientHeight(AObj: usize) -> i32;
  pub fn LinkLabel_SetClientHeight(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn LinkLabel_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn LinkLabel_GetClientWidth(AObj: usize) -> i32;
  pub fn LinkLabel_SetClientWidth(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetControlState(AObj: usize) -> TControlState;
  pub fn LinkLabel_SetControlState(AObj: usize, AValue: TControlState);
  pub fn LinkLabel_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn LinkLabel_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn LinkLabel_GetFloating(AObj: usize) -> bool;
  pub fn LinkLabel_GetParent(AObj: usize) -> usize;
  pub fn LinkLabel_SetParent(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetLeft(AObj: usize) -> i32;
  pub fn LinkLabel_SetLeft(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetTop(AObj: usize) -> i32;
  pub fn LinkLabel_SetTop(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetWidth(AObj: usize) -> i32;
  pub fn LinkLabel_SetWidth(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetHeight(AObj: usize) -> i32;
  pub fn LinkLabel_SetHeight(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetHint(AObj: usize) -> *const c_char;
  pub fn LinkLabel_SetHint(AObj: usize, AValue: *const c_char);
  pub fn LinkLabel_GetComponentCount(AObj: usize) -> i32;
  pub fn LinkLabel_GetComponentIndex(AObj: usize) -> i32;
  pub fn LinkLabel_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn LinkLabel_GetOwner(AObj: usize) -> usize;
  pub fn LinkLabel_GetName(AObj: usize) -> *const c_char;
  pub fn LinkLabel_SetName(AObj: usize, AValue: *const c_char);
  pub fn LinkLabel_GetTag(AObj: usize) -> isize;
  pub fn LinkLabel_SetTag(AObj: usize, AValue: isize);
  pub fn LinkLabel_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn LinkLabel_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn LinkLabel_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn LinkLabel_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn LinkLabel_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetBorderSpacing(AObj: usize) -> usize;
  pub fn LinkLabel_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn LinkLabel_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn LinkLabel_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn LinkLabel_StaticClassType() -> TClass;

  // ----------------- TSpeedButton ----------------------
  pub fn SpeedButton_Create(AOwner: usize) -> usize;
  pub fn SpeedButton_Free(AObj: usize);
  pub fn SpeedButton_Click(AObj: usize);
  pub fn SpeedButton_BringToFront(AObj: usize);
  pub fn SpeedButton_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn SpeedButton_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn SpeedButton_Dragging(AObj: usize) -> bool;
  pub fn SpeedButton_HasParent(AObj: usize) -> bool;
  pub fn SpeedButton_Hide(AObj: usize);
  pub fn SpeedButton_Invalidate(AObj: usize);
  pub fn SpeedButton_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn SpeedButton_Refresh(AObj: usize);
  pub fn SpeedButton_Repaint(AObj: usize);
  pub fn SpeedButton_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn SpeedButton_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn SpeedButton_SendToBack(AObj: usize);
  pub fn SpeedButton_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn SpeedButton_Show(AObj: usize);
  pub fn SpeedButton_Update(AObj: usize);
  pub fn SpeedButton_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn SpeedButton_GetTextLen(AObj: usize) -> i32;
  pub fn SpeedButton_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn SpeedButton_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn SpeedButton_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SpeedButton_Assign(AObj: usize, Source: usize);
  pub fn SpeedButton_ClassType(AObj: usize) -> TClass;
  pub fn SpeedButton_ClassName(AObj: usize) -> *const c_char;
  pub fn SpeedButton_InstanceSize(AObj: usize) -> i32;
  pub fn SpeedButton_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SpeedButton_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SpeedButton_GetHashCode(AObj: usize) -> i32;
  pub fn SpeedButton_ToString(AObj: usize) -> *const c_char;
  pub fn SpeedButton_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn SpeedButton_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn SpeedButton_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn SpeedButton_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn SpeedButton_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn SpeedButton_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn SpeedButton_AnchorClient(AObj: usize, ASpace: i32);
  pub fn SpeedButton_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpeedButton_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn SpeedButton_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn SpeedButton_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn SpeedButton_GetImageIndex(AObj: usize) -> i32;
  pub fn SpeedButton_SetImageIndex(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetImages(AObj: usize) -> usize;
  pub fn SpeedButton_SetImages(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetImageWidth(AObj: usize) -> i32;
  pub fn SpeedButton_SetImageWidth(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetShowCaption(AObj: usize) -> bool;
  pub fn SpeedButton_SetShowCaption(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetAction(AObj: usize) -> usize;
  pub fn SpeedButton_SetAction(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetAlign(AObj: usize) -> TAlign;
  pub fn SpeedButton_SetAlign(AObj: usize, AValue: TAlign);
  pub fn SpeedButton_GetAllowAllUp(AObj: usize) -> bool;
  pub fn SpeedButton_SetAllowAllUp(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetAnchors(AObj: usize) -> TAnchors;
  pub fn SpeedButton_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn SpeedButton_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn SpeedButton_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn SpeedButton_GetConstraints(AObj: usize) -> usize;
  pub fn SpeedButton_SetConstraints(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetGroupIndex(AObj: usize) -> i32;
  pub fn SpeedButton_SetGroupIndex(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetDown(AObj: usize) -> bool;
  pub fn SpeedButton_SetDown(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetCaption(AObj: usize) -> *const c_char;
  pub fn SpeedButton_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn SpeedButton_GetEnabled(AObj: usize) -> bool;
  pub fn SpeedButton_SetEnabled(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetFlat(AObj: usize) -> bool;
  pub fn SpeedButton_SetFlat(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetFont(AObj: usize) -> usize;
  pub fn SpeedButton_SetFont(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetGlyph(AObj: usize) -> usize;
  pub fn SpeedButton_SetGlyph(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetLayout(AObj: usize) -> TButtonLayout;
  pub fn SpeedButton_SetLayout(AObj: usize, AValue: TButtonLayout);
  pub fn SpeedButton_GetNumGlyphs(AObj: usize) -> TNumGlyphs;
  pub fn SpeedButton_SetNumGlyphs(AObj: usize, AValue: TNumGlyphs);
  pub fn SpeedButton_GetParentFont(AObj: usize) -> bool;
  pub fn SpeedButton_SetParentFont(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetParentShowHint(AObj: usize) -> bool;
  pub fn SpeedButton_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetPopupMenu(AObj: usize) -> usize;
  pub fn SpeedButton_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetShowHint(AObj: usize) -> bool;
  pub fn SpeedButton_SetShowHint(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetSpacing(AObj: usize) -> i32;
  pub fn SpeedButton_SetSpacing(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetTransparent(AObj: usize) -> bool;
  pub fn SpeedButton_SetTransparent(AObj: usize, AValue: bool);
  pub fn SpeedButton_GetVisible(AObj: usize) -> bool;
  pub fn SpeedButton_SetVisible(AObj: usize, AValue: bool);
  pub fn SpeedButton_SetOnClick(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn SpeedButton_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn SpeedButton_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn SpeedButton_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn SpeedButton_GetClientHeight(AObj: usize) -> i32;
  pub fn SpeedButton_SetClientHeight(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn SpeedButton_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn SpeedButton_GetClientWidth(AObj: usize) -> i32;
  pub fn SpeedButton_SetClientWidth(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetControlState(AObj: usize) -> TControlState;
  pub fn SpeedButton_SetControlState(AObj: usize, AValue: TControlState);
  pub fn SpeedButton_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn SpeedButton_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn SpeedButton_GetFloating(AObj: usize) -> bool;
  pub fn SpeedButton_GetParent(AObj: usize) -> usize;
  pub fn SpeedButton_SetParent(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetLeft(AObj: usize) -> i32;
  pub fn SpeedButton_SetLeft(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetTop(AObj: usize) -> i32;
  pub fn SpeedButton_SetTop(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetWidth(AObj: usize) -> i32;
  pub fn SpeedButton_SetWidth(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetHeight(AObj: usize) -> i32;
  pub fn SpeedButton_SetHeight(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetCursor(AObj: usize) -> TCursor;
  pub fn SpeedButton_SetCursor(AObj: usize, AValue: TCursor);
  pub fn SpeedButton_GetHint(AObj: usize) -> *const c_char;
  pub fn SpeedButton_SetHint(AObj: usize, AValue: *const c_char);
  pub fn SpeedButton_GetComponentCount(AObj: usize) -> i32;
  pub fn SpeedButton_GetComponentIndex(AObj: usize) -> i32;
  pub fn SpeedButton_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn SpeedButton_GetOwner(AObj: usize) -> usize;
  pub fn SpeedButton_GetName(AObj: usize) -> *const c_char;
  pub fn SpeedButton_SetName(AObj: usize, AValue: *const c_char);
  pub fn SpeedButton_GetTag(AObj: usize) -> isize;
  pub fn SpeedButton_SetTag(AObj: usize, AValue: isize);
  pub fn SpeedButton_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn SpeedButton_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn SpeedButton_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn SpeedButton_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn SpeedButton_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetBorderSpacing(AObj: usize) -> usize;
  pub fn SpeedButton_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn SpeedButton_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn SpeedButton_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn SpeedButton_StaticClassType() -> TClass;

  // ----------------- TSplitter ----------------------
  pub fn Splitter_Create(AOwner: usize) -> usize;
  pub fn Splitter_Free(AObj: usize);
  pub fn Splitter_BringToFront(AObj: usize);
  pub fn Splitter_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Splitter_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Splitter_Dragging(AObj: usize) -> bool;
  pub fn Splitter_HasParent(AObj: usize) -> bool;
  pub fn Splitter_Hide(AObj: usize);
  pub fn Splitter_Invalidate(AObj: usize);
  pub fn Splitter_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Splitter_Refresh(AObj: usize);
  pub fn Splitter_Repaint(AObj: usize);
  pub fn Splitter_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Splitter_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Splitter_SendToBack(AObj: usize);
  pub fn Splitter_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Splitter_Show(AObj: usize);
  pub fn Splitter_Update(AObj: usize);
  pub fn Splitter_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Splitter_GetTextLen(AObj: usize) -> i32;
  pub fn Splitter_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Splitter_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Splitter_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Splitter_Assign(AObj: usize, Source: usize);
  pub fn Splitter_ClassType(AObj: usize) -> TClass;
  pub fn Splitter_ClassName(AObj: usize) -> *const c_char;
  pub fn Splitter_InstanceSize(AObj: usize) -> i32;
  pub fn Splitter_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Splitter_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Splitter_GetHashCode(AObj: usize) -> i32;
  pub fn Splitter_ToString(AObj: usize) -> *const c_char;
  pub fn Splitter_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Splitter_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Splitter_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Splitter_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Splitter_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Splitter_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Splitter_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Splitter_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Splitter_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Splitter_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Splitter_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Splitter_GetResizeAnchor(AObj: usize) -> TAnchorKind;
  pub fn Splitter_SetResizeAnchor(AObj: usize, AValue: TAnchorKind);
  pub fn Splitter_GetCanvas(AObj: usize) -> usize;
  pub fn Splitter_GetAlign(AObj: usize) -> TAlign;
  pub fn Splitter_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Splitter_GetColor(AObj: usize) -> TColor;
  pub fn Splitter_SetColor(AObj: usize, AValue: TColor);
  pub fn Splitter_GetCursor(AObj: usize) -> TCursor;
  pub fn Splitter_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Splitter_GetConstraints(AObj: usize) -> usize;
  pub fn Splitter_SetConstraints(AObj: usize, AValue: usize);
  pub fn Splitter_GetMinSize(AObj: usize) -> i32;
  pub fn Splitter_SetMinSize(AObj: usize, AValue: i32);
  pub fn Splitter_GetParentColor(AObj: usize) -> bool;
  pub fn Splitter_SetParentColor(AObj: usize, AValue: bool);
  pub fn Splitter_GetVisible(AObj: usize) -> bool;
  pub fn Splitter_SetVisible(AObj: usize, AValue: bool);
  pub fn Splitter_GetWidth(AObj: usize) -> i32;
  pub fn Splitter_SetWidth(AObj: usize, AValue: i32);
  pub fn Splitter_SetOnPaint(AObj: usize, AEventId: usize);
  pub fn Splitter_GetEnabled(AObj: usize) -> bool;
  pub fn Splitter_SetEnabled(AObj: usize, AValue: bool);
  pub fn Splitter_GetAction(AObj: usize) -> usize;
  pub fn Splitter_SetAction(AObj: usize, AValue: usize);
  pub fn Splitter_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Splitter_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Splitter_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Splitter_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Splitter_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Splitter_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Splitter_GetClientHeight(AObj: usize) -> i32;
  pub fn Splitter_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Splitter_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Splitter_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Splitter_GetClientWidth(AObj: usize) -> i32;
  pub fn Splitter_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Splitter_GetControlState(AObj: usize) -> TControlState;
  pub fn Splitter_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Splitter_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Splitter_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Splitter_GetFloating(AObj: usize) -> bool;
  pub fn Splitter_GetShowHint(AObj: usize) -> bool;
  pub fn Splitter_SetShowHint(AObj: usize, AValue: bool);
  pub fn Splitter_GetParent(AObj: usize) -> usize;
  pub fn Splitter_SetParent(AObj: usize, AValue: usize);
  pub fn Splitter_GetLeft(AObj: usize) -> i32;
  pub fn Splitter_SetLeft(AObj: usize, AValue: i32);
  pub fn Splitter_GetTop(AObj: usize) -> i32;
  pub fn Splitter_SetTop(AObj: usize, AValue: i32);
  pub fn Splitter_GetHeight(AObj: usize) -> i32;
  pub fn Splitter_SetHeight(AObj: usize, AValue: i32);
  pub fn Splitter_GetHint(AObj: usize) -> *const c_char;
  pub fn Splitter_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Splitter_GetComponentCount(AObj: usize) -> i32;
  pub fn Splitter_GetComponentIndex(AObj: usize) -> i32;
  pub fn Splitter_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Splitter_GetOwner(AObj: usize) -> usize;
  pub fn Splitter_GetName(AObj: usize) -> *const c_char;
  pub fn Splitter_SetName(AObj: usize, AValue: *const c_char);
  pub fn Splitter_GetTag(AObj: usize) -> isize;
  pub fn Splitter_SetTag(AObj: usize, AValue: isize);
  pub fn Splitter_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Splitter_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Splitter_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Splitter_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Splitter_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Splitter_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Splitter_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Splitter_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Splitter_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Splitter_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Splitter_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Splitter_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Splitter_StaticClassType() -> TClass;

  // ----------------- TRadioGroup ----------------------
  pub fn RadioGroup_Create(AOwner: usize) -> usize;
  pub fn RadioGroup_Free(AObj: usize);
  pub fn RadioGroup_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn RadioGroup_CanFocus(AObj: usize) -> bool;
  pub fn RadioGroup_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn RadioGroup_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn RadioGroup_DisableAlign(AObj: usize);
  pub fn RadioGroup_EnableAlign(AObj: usize);
  pub fn RadioGroup_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn RadioGroup_Focused(AObj: usize) -> bool;
  pub fn RadioGroup_HandleAllocated(AObj: usize) -> bool;
  pub fn RadioGroup_InsertControl(AObj: usize, AControl: usize);
  pub fn RadioGroup_Invalidate(AObj: usize);
  pub fn RadioGroup_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn RadioGroup_RemoveControl(AObj: usize, AControl: usize);
  pub fn RadioGroup_Realign(AObj: usize);
  pub fn RadioGroup_Repaint(AObj: usize);
  pub fn RadioGroup_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn RadioGroup_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn RadioGroup_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn RadioGroup_SetFocus(AObj: usize);
  pub fn RadioGroup_Update(AObj: usize);
  pub fn RadioGroup_BringToFront(AObj: usize);
  pub fn RadioGroup_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RadioGroup_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RadioGroup_Dragging(AObj: usize) -> bool;
  pub fn RadioGroup_HasParent(AObj: usize) -> bool;
  pub fn RadioGroup_Hide(AObj: usize);
  pub fn RadioGroup_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn RadioGroup_Refresh(AObj: usize);
  pub fn RadioGroup_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RadioGroup_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RadioGroup_SendToBack(AObj: usize);
  pub fn RadioGroup_Show(AObj: usize);
  pub fn RadioGroup_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn RadioGroup_GetTextLen(AObj: usize) -> i32;
  pub fn RadioGroup_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn RadioGroup_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn RadioGroup_GetNamePath(AObj: usize) -> *const c_char;
  pub fn RadioGroup_Assign(AObj: usize, Source: usize);
  pub fn RadioGroup_ClassType(AObj: usize) -> TClass;
  pub fn RadioGroup_ClassName(AObj: usize) -> *const c_char;
  pub fn RadioGroup_InstanceSize(AObj: usize) -> i32;
  pub fn RadioGroup_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn RadioGroup_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn RadioGroup_GetHashCode(AObj: usize) -> i32;
  pub fn RadioGroup_ToString(AObj: usize) -> *const c_char;
  pub fn RadioGroup_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RadioGroup_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RadioGroup_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn RadioGroup_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn RadioGroup_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn RadioGroup_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn RadioGroup_AnchorClient(AObj: usize, ASpace: i32);
  pub fn RadioGroup_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RadioGroup_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn RadioGroup_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn RadioGroup_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn RadioGroup_GetAlign(AObj: usize) -> TAlign;
  pub fn RadioGroup_SetAlign(AObj: usize, AValue: TAlign);
  pub fn RadioGroup_GetAnchors(AObj: usize) -> TAnchors;
  pub fn RadioGroup_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn RadioGroup_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn RadioGroup_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn RadioGroup_GetCaption(AObj: usize) -> *const c_char;
  pub fn RadioGroup_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn RadioGroup_GetColor(AObj: usize) -> TColor;
  pub fn RadioGroup_SetColor(AObj: usize, AValue: TColor);
  pub fn RadioGroup_GetColumns(AObj: usize) -> i32;
  pub fn RadioGroup_SetColumns(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn RadioGroup_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetDragCursor(AObj: usize) -> TCursor;
  pub fn RadioGroup_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn RadioGroup_GetDragMode(AObj: usize) -> TDragMode;
  pub fn RadioGroup_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn RadioGroup_GetEnabled(AObj: usize) -> bool;
  pub fn RadioGroup_SetEnabled(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetFont(AObj: usize) -> usize;
  pub fn RadioGroup_SetFont(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetItemIndex(AObj: usize) -> i32;
  pub fn RadioGroup_SetItemIndex(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetItems(AObj: usize) -> usize;
  pub fn RadioGroup_SetItems(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetConstraints(AObj: usize) -> usize;
  pub fn RadioGroup_SetConstraints(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetParentColor(AObj: usize) -> bool;
  pub fn RadioGroup_SetParentColor(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn RadioGroup_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetParentFont(AObj: usize) -> bool;
  pub fn RadioGroup_SetParentFont(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetParentShowHint(AObj: usize) -> bool;
  pub fn RadioGroup_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetPopupMenu(AObj: usize) -> usize;
  pub fn RadioGroup_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetShowHint(AObj: usize) -> bool;
  pub fn RadioGroup_SetShowHint(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn RadioGroup_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn RadioGroup_GetTabStop(AObj: usize) -> bool;
  pub fn RadioGroup_SetTabStop(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetVisible(AObj: usize) -> bool;
  pub fn RadioGroup_SetVisible(AObj: usize, AValue: bool);
  pub fn RadioGroup_SetOnClick(AObj: usize, AEventId: usize);
  pub fn RadioGroup_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn RadioGroup_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn RadioGroup_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn RadioGroup_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn RadioGroup_SetOnExit(AObj: usize, AEventId: usize);
  pub fn RadioGroup_GetDockClientCount(AObj: usize) -> i32;
  pub fn RadioGroup_GetDockSite(AObj: usize) -> bool;
  pub fn RadioGroup_SetDockSite(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetMouseInClient(AObj: usize) -> bool;
  pub fn RadioGroup_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn RadioGroup_GetBrush(AObj: usize) -> usize;
  pub fn RadioGroup_GetControlCount(AObj: usize) -> i32;
  pub fn RadioGroup_GetHandle(AObj: usize) -> HWND;
  pub fn RadioGroup_GetParentWindow(AObj: usize) -> HWND;
  pub fn RadioGroup_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn RadioGroup_GetShowing(AObj: usize) -> bool;
  pub fn RadioGroup_GetUseDockManager(AObj: usize) -> bool;
  pub fn RadioGroup_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn RadioGroup_GetAction(AObj: usize) -> usize;
  pub fn RadioGroup_SetAction(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn RadioGroup_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn RadioGroup_GetClientHeight(AObj: usize) -> i32;
  pub fn RadioGroup_SetClientHeight(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn RadioGroup_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn RadioGroup_GetClientWidth(AObj: usize) -> i32;
  pub fn RadioGroup_SetClientWidth(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetControlState(AObj: usize) -> TControlState;
  pub fn RadioGroup_SetControlState(AObj: usize, AValue: TControlState);
  pub fn RadioGroup_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn RadioGroup_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn RadioGroup_GetFloating(AObj: usize) -> bool;
  pub fn RadioGroup_GetParent(AObj: usize) -> usize;
  pub fn RadioGroup_SetParent(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetLeft(AObj: usize) -> i32;
  pub fn RadioGroup_SetLeft(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetTop(AObj: usize) -> i32;
  pub fn RadioGroup_SetTop(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetWidth(AObj: usize) -> i32;
  pub fn RadioGroup_SetWidth(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetHeight(AObj: usize) -> i32;
  pub fn RadioGroup_SetHeight(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetCursor(AObj: usize) -> TCursor;
  pub fn RadioGroup_SetCursor(AObj: usize, AValue: TCursor);
  pub fn RadioGroup_GetHint(AObj: usize) -> *const c_char;
  pub fn RadioGroup_SetHint(AObj: usize, AValue: *const c_char);
  pub fn RadioGroup_GetComponentCount(AObj: usize) -> i32;
  pub fn RadioGroup_GetComponentIndex(AObj: usize) -> i32;
  pub fn RadioGroup_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn RadioGroup_GetOwner(AObj: usize) -> usize;
  pub fn RadioGroup_GetName(AObj: usize) -> *const c_char;
  pub fn RadioGroup_SetName(AObj: usize, AValue: *const c_char);
  pub fn RadioGroup_GetTag(AObj: usize) -> isize;
  pub fn RadioGroup_SetTag(AObj: usize, AValue: isize);
  pub fn RadioGroup_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn RadioGroup_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn RadioGroup_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn RadioGroup_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn RadioGroup_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetChildSizing(AObj: usize) -> usize;
  pub fn RadioGroup_SetChildSizing(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetBorderSpacing(AObj: usize) -> usize;
  pub fn RadioGroup_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn RadioGroup_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn RadioGroup_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn RadioGroup_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn RadioGroup_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn RadioGroup_StaticClassType() -> TClass;

  // ----------------- TStaticText ----------------------
  pub fn StaticText_Create(AOwner: usize) -> usize;
  pub fn StaticText_Free(AObj: usize);
  pub fn StaticText_CanFocus(AObj: usize) -> bool;
  pub fn StaticText_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn StaticText_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn StaticText_DisableAlign(AObj: usize);
  pub fn StaticText_EnableAlign(AObj: usize);
  pub fn StaticText_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn StaticText_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn StaticText_Focused(AObj: usize) -> bool;
  pub fn StaticText_HandleAllocated(AObj: usize) -> bool;
  pub fn StaticText_InsertControl(AObj: usize, AControl: usize);
  pub fn StaticText_Invalidate(AObj: usize);
  pub fn StaticText_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn StaticText_RemoveControl(AObj: usize, AControl: usize);
  pub fn StaticText_Realign(AObj: usize);
  pub fn StaticText_Repaint(AObj: usize);
  pub fn StaticText_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn StaticText_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn StaticText_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn StaticText_SetFocus(AObj: usize);
  pub fn StaticText_Update(AObj: usize);
  pub fn StaticText_BringToFront(AObj: usize);
  pub fn StaticText_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StaticText_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StaticText_Dragging(AObj: usize) -> bool;
  pub fn StaticText_HasParent(AObj: usize) -> bool;
  pub fn StaticText_Hide(AObj: usize);
  pub fn StaticText_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn StaticText_Refresh(AObj: usize);
  pub fn StaticText_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StaticText_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StaticText_SendToBack(AObj: usize);
  pub fn StaticText_Show(AObj: usize);
  pub fn StaticText_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn StaticText_GetTextLen(AObj: usize) -> i32;
  pub fn StaticText_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn StaticText_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn StaticText_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StaticText_Assign(AObj: usize, Source: usize);
  pub fn StaticText_ClassType(AObj: usize) -> TClass;
  pub fn StaticText_ClassName(AObj: usize) -> *const c_char;
  pub fn StaticText_InstanceSize(AObj: usize) -> i32;
  pub fn StaticText_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StaticText_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn StaticText_GetHashCode(AObj: usize) -> i32;
  pub fn StaticText_ToString(AObj: usize) -> *const c_char;
  pub fn StaticText_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StaticText_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StaticText_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn StaticText_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn StaticText_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn StaticText_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn StaticText_AnchorClient(AObj: usize, ASpace: i32);
  pub fn StaticText_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StaticText_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn StaticText_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn StaticText_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn StaticText_GetAlign(AObj: usize) -> TAlign;
  pub fn StaticText_SetAlign(AObj: usize, AValue: TAlign);
  pub fn StaticText_GetAlignment(AObj: usize) -> TAlignment;
  pub fn StaticText_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn StaticText_GetAnchors(AObj: usize) -> TAnchors;
  pub fn StaticText_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn StaticText_GetAutoSize(AObj: usize) -> bool;
  pub fn StaticText_SetAutoSize(AObj: usize, AValue: bool);
  pub fn StaticText_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn StaticText_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn StaticText_GetBorderStyle(AObj: usize) -> TStaticBorderStyle;
  pub fn StaticText_SetBorderStyle(AObj: usize, AValue: TStaticBorderStyle);
  pub fn StaticText_GetCaption(AObj: usize) -> *const c_char;
  pub fn StaticText_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn StaticText_GetColor(AObj: usize) -> TColor;
  pub fn StaticText_SetColor(AObj: usize, AValue: TColor);
  pub fn StaticText_GetConstraints(AObj: usize) -> usize;
  pub fn StaticText_SetConstraints(AObj: usize, AValue: usize);
  pub fn StaticText_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn StaticText_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StaticText_GetDragCursor(AObj: usize) -> TCursor;
  pub fn StaticText_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn StaticText_GetDragKind(AObj: usize) -> TDragKind;
  pub fn StaticText_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn StaticText_GetDragMode(AObj: usize) -> TDragMode;
  pub fn StaticText_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn StaticText_GetEnabled(AObj: usize) -> bool;
  pub fn StaticText_SetEnabled(AObj: usize, AValue: bool);
  pub fn StaticText_GetFocusControl(AObj: usize) -> usize;
  pub fn StaticText_SetFocusControl(AObj: usize, AValue: usize);
  pub fn StaticText_GetFont(AObj: usize) -> usize;
  pub fn StaticText_SetFont(AObj: usize, AValue: usize);
  pub fn StaticText_GetParentColor(AObj: usize) -> bool;
  pub fn StaticText_SetParentColor(AObj: usize, AValue: bool);
  pub fn StaticText_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn StaticText_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StaticText_GetParentFont(AObj: usize) -> bool;
  pub fn StaticText_SetParentFont(AObj: usize, AValue: bool);
  pub fn StaticText_GetParentShowHint(AObj: usize) -> bool;
  pub fn StaticText_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn StaticText_GetPopupMenu(AObj: usize) -> usize;
  pub fn StaticText_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn StaticText_GetShowAccelChar(AObj: usize) -> bool;
  pub fn StaticText_SetShowAccelChar(AObj: usize, AValue: bool);
  pub fn StaticText_GetShowHint(AObj: usize) -> bool;
  pub fn StaticText_SetShowHint(AObj: usize, AValue: bool);
  pub fn StaticText_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn StaticText_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn StaticText_GetTabStop(AObj: usize) -> bool;
  pub fn StaticText_SetTabStop(AObj: usize, AValue: bool);
  pub fn StaticText_GetTransparent(AObj: usize) -> bool;
  pub fn StaticText_SetTransparent(AObj: usize, AValue: bool);
  pub fn StaticText_GetVisible(AObj: usize) -> bool;
  pub fn StaticText_SetVisible(AObj: usize, AValue: bool);
  pub fn StaticText_SetOnClick(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn StaticText_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn StaticText_GetDockClientCount(AObj: usize) -> i32;
  pub fn StaticText_GetDockSite(AObj: usize) -> bool;
  pub fn StaticText_SetDockSite(AObj: usize, AValue: bool);
  pub fn StaticText_GetMouseInClient(AObj: usize) -> bool;
  pub fn StaticText_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn StaticText_GetBrush(AObj: usize) -> usize;
  pub fn StaticText_GetControlCount(AObj: usize) -> i32;
  pub fn StaticText_GetHandle(AObj: usize) -> HWND;
  pub fn StaticText_GetParentWindow(AObj: usize) -> HWND;
  pub fn StaticText_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn StaticText_GetShowing(AObj: usize) -> bool;
  pub fn StaticText_GetUseDockManager(AObj: usize) -> bool;
  pub fn StaticText_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn StaticText_GetAction(AObj: usize) -> usize;
  pub fn StaticText_SetAction(AObj: usize, AValue: usize);
  pub fn StaticText_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn StaticText_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn StaticText_GetClientHeight(AObj: usize) -> i32;
  pub fn StaticText_SetClientHeight(AObj: usize, AValue: i32);
  pub fn StaticText_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn StaticText_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn StaticText_GetClientWidth(AObj: usize) -> i32;
  pub fn StaticText_SetClientWidth(AObj: usize, AValue: i32);
  pub fn StaticText_GetControlState(AObj: usize) -> TControlState;
  pub fn StaticText_SetControlState(AObj: usize, AValue: TControlState);
  pub fn StaticText_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn StaticText_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn StaticText_GetFloating(AObj: usize) -> bool;
  pub fn StaticText_GetParent(AObj: usize) -> usize;
  pub fn StaticText_SetParent(AObj: usize, AValue: usize);
  pub fn StaticText_GetLeft(AObj: usize) -> i32;
  pub fn StaticText_SetLeft(AObj: usize, AValue: i32);
  pub fn StaticText_GetTop(AObj: usize) -> i32;
  pub fn StaticText_SetTop(AObj: usize, AValue: i32);
  pub fn StaticText_GetWidth(AObj: usize) -> i32;
  pub fn StaticText_SetWidth(AObj: usize, AValue: i32);
  pub fn StaticText_GetHeight(AObj: usize) -> i32;
  pub fn StaticText_SetHeight(AObj: usize, AValue: i32);
  pub fn StaticText_GetCursor(AObj: usize) -> TCursor;
  pub fn StaticText_SetCursor(AObj: usize, AValue: TCursor);
  pub fn StaticText_GetHint(AObj: usize) -> *const c_char;
  pub fn StaticText_SetHint(AObj: usize, AValue: *const c_char);
  pub fn StaticText_GetComponentCount(AObj: usize) -> i32;
  pub fn StaticText_GetComponentIndex(AObj: usize) -> i32;
  pub fn StaticText_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn StaticText_GetOwner(AObj: usize) -> usize;
  pub fn StaticText_GetName(AObj: usize) -> *const c_char;
  pub fn StaticText_SetName(AObj: usize, AValue: *const c_char);
  pub fn StaticText_GetTag(AObj: usize) -> isize;
  pub fn StaticText_SetTag(AObj: usize, AValue: isize);
  pub fn StaticText_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn StaticText_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn StaticText_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn StaticText_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn StaticText_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn StaticText_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn StaticText_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn StaticText_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn StaticText_GetChildSizing(AObj: usize) -> usize;
  pub fn StaticText_SetChildSizing(AObj: usize, AValue: usize);
  pub fn StaticText_GetBorderSpacing(AObj: usize) -> usize;
  pub fn StaticText_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn StaticText_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn StaticText_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn StaticText_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn StaticText_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn StaticText_StaticClassType() -> TClass;

  // ----------------- TColorBox ----------------------
  pub fn ColorBox_Create(AOwner: usize) -> usize;
  pub fn ColorBox_Free(AObj: usize);
  pub fn ColorBox_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ColorBox_Clear(AObj: usize);
  pub fn ColorBox_ClearSelection(AObj: usize);
  pub fn ColorBox_DeleteSelected(AObj: usize);
  pub fn ColorBox_Focused(AObj: usize) -> bool;
  pub fn ColorBox_SelectAll(AObj: usize);
  pub fn ColorBox_CanFocus(AObj: usize) -> bool;
  pub fn ColorBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ColorBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ColorBox_DisableAlign(AObj: usize);
  pub fn ColorBox_EnableAlign(AObj: usize);
  pub fn ColorBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ColorBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ColorBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ColorBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ColorBox_Invalidate(AObj: usize);
  pub fn ColorBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ColorBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ColorBox_Realign(AObj: usize);
  pub fn ColorBox_Repaint(AObj: usize);
  pub fn ColorBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ColorBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ColorBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ColorBox_SetFocus(AObj: usize);
  pub fn ColorBox_Update(AObj: usize);
  pub fn ColorBox_BringToFront(AObj: usize);
  pub fn ColorBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ColorBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ColorBox_Dragging(AObj: usize) -> bool;
  pub fn ColorBox_HasParent(AObj: usize) -> bool;
  pub fn ColorBox_Hide(AObj: usize);
  pub fn ColorBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ColorBox_Refresh(AObj: usize);
  pub fn ColorBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ColorBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ColorBox_SendToBack(AObj: usize);
  pub fn ColorBox_Show(AObj: usize);
  pub fn ColorBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ColorBox_GetTextLen(AObj: usize) -> i32;
  pub fn ColorBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ColorBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ColorBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ColorBox_Assign(AObj: usize, Source: usize);
  pub fn ColorBox_ClassType(AObj: usize) -> TClass;
  pub fn ColorBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ColorBox_InstanceSize(AObj: usize) -> i32;
  pub fn ColorBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ColorBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ColorBox_GetHashCode(AObj: usize) -> i32;
  pub fn ColorBox_ToString(AObj: usize) -> *const c_char;
  pub fn ColorBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ColorBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ColorBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ColorBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ColorBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ColorBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ColorBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ColorBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ColorBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ColorBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ColorBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ColorBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ColorBox_GetAutoComplete(AObj: usize) -> bool;
  pub fn ColorBox_SetAutoComplete(AObj: usize, AValue: bool);
  pub fn ColorBox_GetAutoDropDown(AObj: usize) -> bool;
  pub fn ColorBox_SetAutoDropDown(AObj: usize, AValue: bool);
  pub fn ColorBox_GetDefaultColorColor(AObj: usize) -> TColor;
  pub fn ColorBox_SetDefaultColorColor(AObj: usize, AValue: TColor);
  pub fn ColorBox_GetNoneColorColor(AObj: usize) -> TColor;
  pub fn ColorBox_SetNoneColorColor(AObj: usize, AValue: TColor);
  pub fn ColorBox_GetSelected(AObj: usize) -> TColor;
  pub fn ColorBox_SetSelected(AObj: usize, AValue: TColor);
  pub fn ColorBox_GetStyle(AObj: usize) -> TColorBoxStyle;
  pub fn ColorBox_SetStyle(AObj: usize, AValue: TColorBoxStyle);
  pub fn ColorBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ColorBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ColorBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ColorBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ColorBox_GetColor(AObj: usize) -> TColor;
  pub fn ColorBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ColorBox_GetConstraints(AObj: usize) -> usize;
  pub fn ColorBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ColorBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ColorBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ColorBox_GetDropDownCount(AObj: usize) -> i32;
  pub fn ColorBox_SetDropDownCount(AObj: usize, AValue: i32);
  pub fn ColorBox_GetEnabled(AObj: usize) -> bool;
  pub fn ColorBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ColorBox_GetFont(AObj: usize) -> usize;
  pub fn ColorBox_SetFont(AObj: usize, AValue: usize);
  pub fn ColorBox_GetItemHeight(AObj: usize) -> i32;
  pub fn ColorBox_SetItemHeight(AObj: usize, AValue: i32);
  pub fn ColorBox_GetParentColor(AObj: usize) -> bool;
  pub fn ColorBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn ColorBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ColorBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ColorBox_GetParentFont(AObj: usize) -> bool;
  pub fn ColorBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ColorBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ColorBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ColorBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ColorBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ColorBox_GetShowHint(AObj: usize) -> bool;
  pub fn ColorBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ColorBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ColorBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ColorBox_GetTabStop(AObj: usize) -> bool;
  pub fn ColorBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ColorBox_GetVisible(AObj: usize) -> bool;
  pub fn ColorBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ColorBox_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnDropDown(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ColorBox_SetOnSelect(AObj: usize, AEventId: usize);
  pub fn ColorBox_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn ColorBox_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn ColorBox_GetSelText(AObj: usize) -> *const c_char;
  pub fn ColorBox_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn ColorBox_GetCanvas(AObj: usize) -> usize;
  pub fn ColorBox_GetDroppedDown(AObj: usize) -> bool;
  pub fn ColorBox_SetDroppedDown(AObj: usize, AValue: bool);
  pub fn ColorBox_GetItems(AObj: usize) -> usize;
  pub fn ColorBox_SetItems(AObj: usize, AValue: usize);
  pub fn ColorBox_GetSelLength(AObj: usize) -> i32;
  pub fn ColorBox_SetSelLength(AObj: usize, AValue: i32);
  pub fn ColorBox_GetSelStart(AObj: usize) -> i32;
  pub fn ColorBox_SetSelStart(AObj: usize, AValue: i32);
  pub fn ColorBox_GetItemIndex(AObj: usize) -> i32;
  pub fn ColorBox_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ColorBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ColorBox_GetDockSite(AObj: usize) -> bool;
  pub fn ColorBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ColorBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ColorBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ColorBox_GetBrush(AObj: usize) -> usize;
  pub fn ColorBox_GetControlCount(AObj: usize) -> i32;
  pub fn ColorBox_GetHandle(AObj: usize) -> HWND;
  pub fn ColorBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ColorBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ColorBox_GetShowing(AObj: usize) -> bool;
  pub fn ColorBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ColorBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ColorBox_GetAction(AObj: usize) -> usize;
  pub fn ColorBox_SetAction(AObj: usize, AValue: usize);
  pub fn ColorBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ColorBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ColorBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ColorBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ColorBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ColorBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ColorBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ColorBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ColorBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ColorBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ColorBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ColorBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ColorBox_GetFloating(AObj: usize) -> bool;
  pub fn ColorBox_GetParent(AObj: usize) -> usize;
  pub fn ColorBox_SetParent(AObj: usize, AValue: usize);
  pub fn ColorBox_GetLeft(AObj: usize) -> i32;
  pub fn ColorBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ColorBox_GetTop(AObj: usize) -> i32;
  pub fn ColorBox_SetTop(AObj: usize, AValue: i32);
  pub fn ColorBox_GetWidth(AObj: usize) -> i32;
  pub fn ColorBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ColorBox_GetHeight(AObj: usize) -> i32;
  pub fn ColorBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ColorBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ColorBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ColorBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ColorBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ColorBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ColorBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ColorBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ColorBox_GetOwner(AObj: usize) -> usize;
  pub fn ColorBox_GetName(AObj: usize) -> *const c_char;
  pub fn ColorBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ColorBox_GetTag(AObj: usize) -> isize;
  pub fn ColorBox_SetTag(AObj: usize, AValue: isize);
  pub fn ColorBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ColorBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ColorBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ColorBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ColorBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ColorBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ColorBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ColorBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ColorBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ColorBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ColorBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ColorBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ColorBox_GetColors(AObj: usize, Index: i32) -> TColor;
  pub fn ColorBox_GetColorNames(AObj: usize, Index: i32) -> *const c_char;
  pub fn ColorBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ColorBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ColorBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ColorBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ColorBox_StaticClassType() -> TClass;

  // ----------------- TColorListBox ----------------------
  pub fn ColorListBox_Create(AOwner: usize) -> usize;
  pub fn ColorListBox_Free(AObj: usize);
  pub fn ColorListBox_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ColorListBox_Clear(AObj: usize);
  pub fn ColorListBox_ClearSelection(AObj: usize);
  pub fn ColorListBox_DeleteSelected(AObj: usize);
  pub fn ColorListBox_ItemAtPos(AObj: usize, Pos: *mut TPoint, Existing: bool) -> i32;
  pub fn ColorListBox_ItemRect(AObj: usize, Index: i32, Result: *mut TRect);
  pub fn ColorListBox_SelectAll(AObj: usize);
  pub fn ColorListBox_CanFocus(AObj: usize) -> bool;
  pub fn ColorListBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ColorListBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ColorListBox_DisableAlign(AObj: usize);
  pub fn ColorListBox_EnableAlign(AObj: usize);
  pub fn ColorListBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ColorListBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ColorListBox_Focused(AObj: usize) -> bool;
  pub fn ColorListBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ColorListBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ColorListBox_Invalidate(AObj: usize);
  pub fn ColorListBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ColorListBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ColorListBox_Realign(AObj: usize);
  pub fn ColorListBox_Repaint(AObj: usize);
  pub fn ColorListBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ColorListBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ColorListBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ColorListBox_SetFocus(AObj: usize);
  pub fn ColorListBox_Update(AObj: usize);
  pub fn ColorListBox_BringToFront(AObj: usize);
  pub fn ColorListBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ColorListBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ColorListBox_Dragging(AObj: usize) -> bool;
  pub fn ColorListBox_HasParent(AObj: usize) -> bool;
  pub fn ColorListBox_Hide(AObj: usize);
  pub fn ColorListBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ColorListBox_Refresh(AObj: usize);
  pub fn ColorListBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ColorListBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ColorListBox_SendToBack(AObj: usize);
  pub fn ColorListBox_Show(AObj: usize);
  pub fn ColorListBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ColorListBox_GetTextLen(AObj: usize) -> i32;
  pub fn ColorListBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ColorListBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ColorListBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ColorListBox_Assign(AObj: usize, Source: usize);
  pub fn ColorListBox_ClassType(AObj: usize) -> TClass;
  pub fn ColorListBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ColorListBox_InstanceSize(AObj: usize) -> i32;
  pub fn ColorListBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ColorListBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ColorListBox_GetHashCode(AObj: usize) -> i32;
  pub fn ColorListBox_ToString(AObj: usize) -> *const c_char;
  pub fn ColorListBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ColorListBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ColorListBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ColorListBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ColorListBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ColorListBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ColorListBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ColorListBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ColorListBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ColorListBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ColorListBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ColorListBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ColorListBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ColorListBox_GetDefaultColorColor(AObj: usize) -> TColor;
  pub fn ColorListBox_SetDefaultColorColor(AObj: usize, AValue: TColor);
  pub fn ColorListBox_GetNoneColorColor(AObj: usize) -> TColor;
  pub fn ColorListBox_SetNoneColorColor(AObj: usize, AValue: TColor);
  pub fn ColorListBox_GetSelected(AObj: usize) -> TColor;
  pub fn ColorListBox_SetSelected(AObj: usize, AValue: TColor);
  pub fn ColorListBox_GetStyle(AObj: usize) -> TColorBoxStyle;
  pub fn ColorListBox_SetStyle(AObj: usize, AValue: TColorBoxStyle);
  pub fn ColorListBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ColorListBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ColorListBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ColorListBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ColorListBox_GetColor(AObj: usize) -> TColor;
  pub fn ColorListBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ColorListBox_GetConstraints(AObj: usize) -> usize;
  pub fn ColorListBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ColorListBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetEnabled(AObj: usize) -> bool;
  pub fn ColorListBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetFont(AObj: usize) -> usize;
  pub fn ColorListBox_SetFont(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetItemHeight(AObj: usize) -> i32;
  pub fn ColorListBox_SetItemHeight(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetParentColor(AObj: usize) -> bool;
  pub fn ColorListBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ColorListBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetParentFont(AObj: usize) -> bool;
  pub fn ColorListBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ColorListBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ColorListBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetShowHint(AObj: usize) -> bool;
  pub fn ColorListBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ColorListBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ColorListBox_GetTabStop(AObj: usize) -> bool;
  pub fn ColorListBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetVisible(AObj: usize) -> bool;
  pub fn ColorListBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ColorListBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ColorListBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ColorListBox_GetCanvas(AObj: usize) -> usize;
  pub fn ColorListBox_GetCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetItems(AObj: usize) -> usize;
  pub fn ColorListBox_SetItems(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetTopIndex(AObj: usize) -> i32;
  pub fn ColorListBox_SetTopIndex(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetMultiSelect(AObj: usize) -> bool;
  pub fn ColorListBox_SetMultiSelect(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetSelCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetItemIndex(AObj: usize) -> i32;
  pub fn ColorListBox_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetDockSite(AObj: usize) -> bool;
  pub fn ColorListBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ColorListBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetBrush(AObj: usize) -> usize;
  pub fn ColorListBox_GetControlCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetHandle(AObj: usize) -> HWND;
  pub fn ColorListBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ColorListBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ColorListBox_GetShowing(AObj: usize) -> bool;
  pub fn ColorListBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ColorListBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ColorListBox_GetAction(AObj: usize) -> usize;
  pub fn ColorListBox_SetAction(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ColorListBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ColorListBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ColorListBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ColorListBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ColorListBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ColorListBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ColorListBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ColorListBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ColorListBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ColorListBox_GetFloating(AObj: usize) -> bool;
  pub fn ColorListBox_GetParent(AObj: usize) -> usize;
  pub fn ColorListBox_SetParent(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetLeft(AObj: usize) -> i32;
  pub fn ColorListBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetTop(AObj: usize) -> i32;
  pub fn ColorListBox_SetTop(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetWidth(AObj: usize) -> i32;
  pub fn ColorListBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetHeight(AObj: usize) -> i32;
  pub fn ColorListBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ColorListBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ColorListBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ColorListBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ColorListBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ColorListBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ColorListBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ColorListBox_GetOwner(AObj: usize) -> usize;
  pub fn ColorListBox_GetName(AObj: usize) -> *const c_char;
  pub fn ColorListBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ColorListBox_GetTag(AObj: usize) -> isize;
  pub fn ColorListBox_SetTag(AObj: usize, AValue: isize);
  pub fn ColorListBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ColorListBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ColorListBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ColorListBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ColorListBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ColorListBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ColorListBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ColorListBox_GetColors(AObj: usize, Index: i32) -> TColor;
  pub fn ColorListBox_GetColorNames(AObj: usize, Index: i32) -> *const c_char;
  pub fn ColorListBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ColorListBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ColorListBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ColorListBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ColorListBox_StaticClassType() -> TClass;

  // ----------------- TTrayIcon ----------------------
  pub fn TrayIcon_Create(AOwner: usize) -> usize;
  pub fn TrayIcon_Free(AObj: usize);
  pub fn TrayIcon_ShowBalloonHint(AObj: usize);
  pub fn TrayIcon_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn TrayIcon_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TrayIcon_HasParent(AObj: usize) -> bool;
  pub fn TrayIcon_Assign(AObj: usize, Source: usize);
  pub fn TrayIcon_ClassType(AObj: usize) -> TClass;
  pub fn TrayIcon_ClassName(AObj: usize) -> *const c_char;
  pub fn TrayIcon_InstanceSize(AObj: usize) -> i32;
  pub fn TrayIcon_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TrayIcon_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TrayIcon_GetHashCode(AObj: usize) -> i32;
  pub fn TrayIcon_ToString(AObj: usize) -> *const c_char;
  pub fn TrayIcon_GetAnimateInterval(AObj: usize) -> u32;
  pub fn TrayIcon_SetAnimateInterval(AObj: usize, AValue: u32);
  pub fn TrayIcon_GetHint(AObj: usize) -> *const c_char;
  pub fn TrayIcon_SetHint(AObj: usize, AValue: *const c_char);
  pub fn TrayIcon_GetBalloonHint(AObj: usize) -> *const c_char;
  pub fn TrayIcon_SetBalloonHint(AObj: usize, AValue: *const c_char);
  pub fn TrayIcon_GetBalloonTitle(AObj: usize) -> *const c_char;
  pub fn TrayIcon_SetBalloonTitle(AObj: usize, AValue: *const c_char);
  pub fn TrayIcon_GetBalloonTimeout(AObj: usize) -> i32;
  pub fn TrayIcon_SetBalloonTimeout(AObj: usize, AValue: i32);
  pub fn TrayIcon_GetBalloonFlags(AObj: usize) -> TBalloonFlags;
  pub fn TrayIcon_SetBalloonFlags(AObj: usize, AValue: TBalloonFlags);
  pub fn TrayIcon_GetIcon(AObj: usize) -> usize;
  pub fn TrayIcon_SetIcon(AObj: usize, AValue: usize);
  pub fn TrayIcon_GetPopupMenu(AObj: usize) -> usize;
  pub fn TrayIcon_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn TrayIcon_GetVisible(AObj: usize) -> bool;
  pub fn TrayIcon_SetVisible(AObj: usize, AValue: bool);
  pub fn TrayIcon_SetOnClick(AObj: usize, AEventId: usize);
  pub fn TrayIcon_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn TrayIcon_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn TrayIcon_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn TrayIcon_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn TrayIcon_GetComponentCount(AObj: usize) -> i32;
  pub fn TrayIcon_GetComponentIndex(AObj: usize) -> i32;
  pub fn TrayIcon_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn TrayIcon_GetOwner(AObj: usize) -> usize;
  pub fn TrayIcon_GetName(AObj: usize) -> *const c_char;
  pub fn TrayIcon_SetName(AObj: usize, AValue: *const c_char);
  pub fn TrayIcon_GetTag(AObj: usize) -> isize;
  pub fn TrayIcon_SetTag(AObj: usize, AValue: isize);
  pub fn TrayIcon_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn TrayIcon_StaticClassType() -> TClass;

  // ----------------- TOpenDialog ----------------------
  pub fn OpenDialog_Create(AOwner: usize) -> usize;
  pub fn OpenDialog_Free(AObj: usize);
  pub fn OpenDialog_Execute(AObj: usize) -> bool;
  pub fn OpenDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn OpenDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn OpenDialog_HasParent(AObj: usize) -> bool;
  pub fn OpenDialog_Assign(AObj: usize, Source: usize);
  pub fn OpenDialog_ClassType(AObj: usize) -> TClass;
  pub fn OpenDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn OpenDialog_InstanceSize(AObj: usize) -> i32;
  pub fn OpenDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn OpenDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn OpenDialog_GetHashCode(AObj: usize) -> i32;
  pub fn OpenDialog_ToString(AObj: usize) -> *const c_char;
  pub fn OpenDialog_GetFiles(AObj: usize) -> usize;
  pub fn OpenDialog_GetDefaultExt(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetDefaultExt(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetFileName(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetFileName(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetFilter(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetFilter(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetFilterIndex(AObj: usize) -> i32;
  pub fn OpenDialog_SetFilterIndex(AObj: usize, AValue: i32);
  pub fn OpenDialog_GetInitialDir(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetInitialDir(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetOptions(AObj: usize) -> TOpenOptions;
  pub fn OpenDialog_SetOptions(AObj: usize, AValue: TOpenOptions);
  pub fn OpenDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetHandle(AObj: usize) -> HWND;
  pub fn OpenDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn OpenDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn OpenDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn OpenDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn OpenDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn OpenDialog_GetOwner(AObj: usize) -> usize;
  pub fn OpenDialog_GetName(AObj: usize) -> *const c_char;
  pub fn OpenDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn OpenDialog_GetTag(AObj: usize) -> isize;
  pub fn OpenDialog_SetTag(AObj: usize, AValue: isize);
  pub fn OpenDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn OpenDialog_StaticClassType() -> TClass;

  // ----------------- TSaveDialog ----------------------
  pub fn SaveDialog_Create(AOwner: usize) -> usize;
  pub fn SaveDialog_Free(AObj: usize);
  pub fn SaveDialog_Execute(AObj: usize) -> bool;
  pub fn SaveDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn SaveDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SaveDialog_HasParent(AObj: usize) -> bool;
  pub fn SaveDialog_Assign(AObj: usize, Source: usize);
  pub fn SaveDialog_ClassType(AObj: usize) -> TClass;
  pub fn SaveDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn SaveDialog_InstanceSize(AObj: usize) -> i32;
  pub fn SaveDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SaveDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SaveDialog_GetHashCode(AObj: usize) -> i32;
  pub fn SaveDialog_ToString(AObj: usize) -> *const c_char;
  pub fn SaveDialog_GetFiles(AObj: usize) -> usize;
  pub fn SaveDialog_GetDefaultExt(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetDefaultExt(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetFileName(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetFileName(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetFilter(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetFilter(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetFilterIndex(AObj: usize) -> i32;
  pub fn SaveDialog_SetFilterIndex(AObj: usize, AValue: i32);
  pub fn SaveDialog_GetInitialDir(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetInitialDir(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetOptions(AObj: usize) -> TOpenOptions;
  pub fn SaveDialog_SetOptions(AObj: usize, AValue: TOpenOptions);
  pub fn SaveDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetHandle(AObj: usize) -> HWND;
  pub fn SaveDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn SaveDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn SaveDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn SaveDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn SaveDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn SaveDialog_GetOwner(AObj: usize) -> usize;
  pub fn SaveDialog_GetName(AObj: usize) -> *const c_char;
  pub fn SaveDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn SaveDialog_GetTag(AObj: usize) -> isize;
  pub fn SaveDialog_SetTag(AObj: usize, AValue: isize);
  pub fn SaveDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn SaveDialog_StaticClassType() -> TClass;

  // ----------------- TColorDialog ----------------------
  pub fn ColorDialog_Create(AOwner: usize) -> usize;
  pub fn ColorDialog_Free(AObj: usize);
  pub fn ColorDialog_Execute(AObj: usize) -> bool;
  pub fn ColorDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ColorDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ColorDialog_HasParent(AObj: usize) -> bool;
  pub fn ColorDialog_Assign(AObj: usize, Source: usize);
  pub fn ColorDialog_ClassType(AObj: usize) -> TClass;
  pub fn ColorDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn ColorDialog_InstanceSize(AObj: usize) -> i32;
  pub fn ColorDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ColorDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ColorDialog_GetHashCode(AObj: usize) -> i32;
  pub fn ColorDialog_ToString(AObj: usize) -> *const c_char;
  pub fn ColorDialog_GetColor(AObj: usize) -> TColor;
  pub fn ColorDialog_SetColor(AObj: usize, AValue: TColor);
  pub fn ColorDialog_GetCustomColors(AObj: usize) -> usize;
  pub fn ColorDialog_SetCustomColors(AObj: usize, AValue: usize);
  pub fn ColorDialog_GetHandle(AObj: usize) -> HWND;
  pub fn ColorDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn ColorDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn ColorDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn ColorDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn ColorDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ColorDialog_GetOwner(AObj: usize) -> usize;
  pub fn ColorDialog_GetName(AObj: usize) -> *const c_char;
  pub fn ColorDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn ColorDialog_GetTag(AObj: usize) -> isize;
  pub fn ColorDialog_SetTag(AObj: usize, AValue: isize);
  pub fn ColorDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ColorDialog_StaticClassType() -> TClass;

  // ----------------- TFontDialog ----------------------
  pub fn FontDialog_Create(AOwner: usize) -> usize;
  pub fn FontDialog_Free(AObj: usize);
  pub fn FontDialog_Execute(AObj: usize) -> bool;
  pub fn FontDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn FontDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn FontDialog_HasParent(AObj: usize) -> bool;
  pub fn FontDialog_Assign(AObj: usize, Source: usize);
  pub fn FontDialog_ClassType(AObj: usize) -> TClass;
  pub fn FontDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn FontDialog_InstanceSize(AObj: usize) -> i32;
  pub fn FontDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn FontDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn FontDialog_GetHashCode(AObj: usize) -> i32;
  pub fn FontDialog_ToString(AObj: usize) -> *const c_char;
  pub fn FontDialog_GetFont(AObj: usize) -> usize;
  pub fn FontDialog_SetFont(AObj: usize, AValue: usize);
  pub fn FontDialog_GetOptions(AObj: usize) -> TFontDialogOptions;
  pub fn FontDialog_SetOptions(AObj: usize, AValue: TFontDialogOptions);
  pub fn FontDialog_GetHandle(AObj: usize) -> HWND;
  pub fn FontDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn FontDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn FontDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn FontDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn FontDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn FontDialog_GetOwner(AObj: usize) -> usize;
  pub fn FontDialog_GetName(AObj: usize) -> *const c_char;
  pub fn FontDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn FontDialog_GetTag(AObj: usize) -> isize;
  pub fn FontDialog_SetTag(AObj: usize, AValue: isize);
  pub fn FontDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn FontDialog_StaticClassType() -> TClass;

  // ----------------- TPrintDialog ----------------------
  pub fn PrintDialog_Create(AOwner: usize) -> usize;
  pub fn PrintDialog_Free(AObj: usize);
  pub fn PrintDialog_Execute(AObj: usize) -> bool;
  pub fn PrintDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PrintDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PrintDialog_HasParent(AObj: usize) -> bool;
  pub fn PrintDialog_Assign(AObj: usize, Source: usize);
  pub fn PrintDialog_ClassType(AObj: usize) -> TClass;
  pub fn PrintDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn PrintDialog_InstanceSize(AObj: usize) -> i32;
  pub fn PrintDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PrintDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PrintDialog_GetHashCode(AObj: usize) -> i32;
  pub fn PrintDialog_ToString(AObj: usize) -> *const c_char;
  pub fn PrintDialog_GetCollate(AObj: usize) -> bool;
  pub fn PrintDialog_SetCollate(AObj: usize, AValue: bool);
  pub fn PrintDialog_GetCopies(AObj: usize) -> i32;
  pub fn PrintDialog_SetCopies(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetFromPage(AObj: usize) -> i32;
  pub fn PrintDialog_SetFromPage(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetMinPage(AObj: usize) -> i32;
  pub fn PrintDialog_SetMinPage(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetMaxPage(AObj: usize) -> i32;
  pub fn PrintDialog_SetMaxPage(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetOptions(AObj: usize) -> TPrintDialogOptions;
  pub fn PrintDialog_SetOptions(AObj: usize, AValue: TPrintDialogOptions);
  pub fn PrintDialog_GetPrintToFile(AObj: usize) -> bool;
  pub fn PrintDialog_SetPrintToFile(AObj: usize, AValue: bool);
  pub fn PrintDialog_GetPrintRange(AObj: usize) -> TPrintRange;
  pub fn PrintDialog_SetPrintRange(AObj: usize, AValue: TPrintRange);
  pub fn PrintDialog_GetToPage(AObj: usize) -> i32;
  pub fn PrintDialog_SetToPage(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetHandle(AObj: usize) -> HWND;
  pub fn PrintDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn PrintDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn PrintDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn PrintDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn PrintDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PrintDialog_GetOwner(AObj: usize) -> usize;
  pub fn PrintDialog_GetName(AObj: usize) -> *const c_char;
  pub fn PrintDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn PrintDialog_GetTag(AObj: usize) -> isize;
  pub fn PrintDialog_SetTag(AObj: usize, AValue: isize);
  pub fn PrintDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PrintDialog_StaticClassType() -> TClass;

  // ----------------- TOpenPictureDialog ----------------------
  pub fn OpenPictureDialog_Create(AOwner: usize) -> usize;
  pub fn OpenPictureDialog_Free(AObj: usize);
  pub fn OpenPictureDialog_Execute(AObj: usize) -> bool;
  pub fn OpenPictureDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn OpenPictureDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_HasParent(AObj: usize) -> bool;
  pub fn OpenPictureDialog_Assign(AObj: usize, Source: usize);
  pub fn OpenPictureDialog_ClassType(AObj: usize) -> TClass;
  pub fn OpenPictureDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_InstanceSize(AObj: usize) -> i32;
  pub fn OpenPictureDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn OpenPictureDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn OpenPictureDialog_GetHashCode(AObj: usize) -> i32;
  pub fn OpenPictureDialog_ToString(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_GetFilter(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetFilter(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetFiles(AObj: usize) -> usize;
  pub fn OpenPictureDialog_GetDefaultExt(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetDefaultExt(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetFileName(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetFileName(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetFilterIndex(AObj: usize) -> i32;
  pub fn OpenPictureDialog_SetFilterIndex(AObj: usize, AValue: i32);
  pub fn OpenPictureDialog_GetInitialDir(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetInitialDir(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetOptions(AObj: usize) -> TOpenOptions;
  pub fn OpenPictureDialog_SetOptions(AObj: usize, AValue: TOpenOptions);
  pub fn OpenPictureDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetHandle(AObj: usize) -> HWND;
  pub fn OpenPictureDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn OpenPictureDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn OpenPictureDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn OpenPictureDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn OpenPictureDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn OpenPictureDialog_GetOwner(AObj: usize) -> usize;
  pub fn OpenPictureDialog_GetName(AObj: usize) -> *const c_char;
  pub fn OpenPictureDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn OpenPictureDialog_GetTag(AObj: usize) -> isize;
  pub fn OpenPictureDialog_SetTag(AObj: usize, AValue: isize);
  pub fn OpenPictureDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn OpenPictureDialog_StaticClassType() -> TClass;

  // ----------------- TSavePictureDialog ----------------------
  pub fn SavePictureDialog_Create(AOwner: usize) -> usize;
  pub fn SavePictureDialog_Free(AObj: usize);
  pub fn SavePictureDialog_Execute(AObj: usize) -> bool;
  pub fn SavePictureDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn SavePictureDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_HasParent(AObj: usize) -> bool;
  pub fn SavePictureDialog_Assign(AObj: usize, Source: usize);
  pub fn SavePictureDialog_ClassType(AObj: usize) -> TClass;
  pub fn SavePictureDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_InstanceSize(AObj: usize) -> i32;
  pub fn SavePictureDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SavePictureDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SavePictureDialog_GetHashCode(AObj: usize) -> i32;
  pub fn SavePictureDialog_ToString(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_GetFilter(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetFilter(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetFiles(AObj: usize) -> usize;
  pub fn SavePictureDialog_GetDefaultExt(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetDefaultExt(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetFileName(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetFileName(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetFilterIndex(AObj: usize) -> i32;
  pub fn SavePictureDialog_SetFilterIndex(AObj: usize, AValue: i32);
  pub fn SavePictureDialog_GetInitialDir(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetInitialDir(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetOptions(AObj: usize) -> TOpenOptions;
  pub fn SavePictureDialog_SetOptions(AObj: usize, AValue: TOpenOptions);
  pub fn SavePictureDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetHandle(AObj: usize) -> HWND;
  pub fn SavePictureDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn SavePictureDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn SavePictureDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn SavePictureDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn SavePictureDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn SavePictureDialog_GetOwner(AObj: usize) -> usize;
  pub fn SavePictureDialog_GetName(AObj: usize) -> *const c_char;
  pub fn SavePictureDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn SavePictureDialog_GetTag(AObj: usize) -> isize;
  pub fn SavePictureDialog_SetTag(AObj: usize, AValue: isize);
  pub fn SavePictureDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn SavePictureDialog_StaticClassType() -> TClass;

  // ----------------- TSelectDirectoryDialog ----------------------
  pub fn SelectDirectoryDialog_Create(AOwner: usize) -> usize;
  pub fn SelectDirectoryDialog_Free(AObj: usize);
  pub fn SelectDirectoryDialog_Execute(AObj: usize) -> bool;
  pub fn SelectDirectoryDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn SelectDirectoryDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_HasParent(AObj: usize) -> bool;
  pub fn SelectDirectoryDialog_Assign(AObj: usize, Source: usize);
  pub fn SelectDirectoryDialog_ClassType(AObj: usize) -> TClass;
  pub fn SelectDirectoryDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_InstanceSize(AObj: usize) -> i32;
  pub fn SelectDirectoryDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SelectDirectoryDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SelectDirectoryDialog_GetHashCode(AObj: usize) -> i32;
  pub fn SelectDirectoryDialog_ToString(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_GetFiles(AObj: usize) -> usize;
  pub fn SelectDirectoryDialog_GetDefaultExt(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetDefaultExt(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetFileName(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetFileName(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetFilter(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetFilter(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetFilterIndex(AObj: usize) -> i32;
  pub fn SelectDirectoryDialog_SetFilterIndex(AObj: usize, AValue: i32);
  pub fn SelectDirectoryDialog_GetInitialDir(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetInitialDir(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetOptions(AObj: usize) -> TOpenOptions;
  pub fn SelectDirectoryDialog_SetOptions(AObj: usize, AValue: TOpenOptions);
  pub fn SelectDirectoryDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetHandle(AObj: usize) -> HWND;
  pub fn SelectDirectoryDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn SelectDirectoryDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn SelectDirectoryDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn SelectDirectoryDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn SelectDirectoryDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn SelectDirectoryDialog_GetOwner(AObj: usize) -> usize;
  pub fn SelectDirectoryDialog_GetName(AObj: usize) -> *const c_char;
  pub fn SelectDirectoryDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn SelectDirectoryDialog_GetTag(AObj: usize) -> isize;
  pub fn SelectDirectoryDialog_SetTag(AObj: usize, AValue: isize);
  pub fn SelectDirectoryDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn SelectDirectoryDialog_StaticClassType() -> TClass;

  // ----------------- TRichEdit ----------------------
  pub fn RichEdit_Create(AOwner: usize) -> usize;
  pub fn RichEdit_Free(AObj: usize);
  pub fn RichEdit_Clear(AObj: usize);
  pub fn RichEdit_FindText(AObj: usize, SearchStr: *const c_char, StartPos: i32, Length: i32, Options: TSearchTypes) -> i32;
  pub fn RichEdit_ClearSelection(AObj: usize);
  pub fn RichEdit_CopyToClipboard(AObj: usize);
  pub fn RichEdit_CutToClipboard(AObj: usize);
  pub fn RichEdit_PasteFromClipboard(AObj: usize);
  pub fn RichEdit_Undo(AObj: usize);
  pub fn RichEdit_SelectAll(AObj: usize);
  pub fn RichEdit_CanFocus(AObj: usize) -> bool;
  pub fn RichEdit_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn RichEdit_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn RichEdit_DisableAlign(AObj: usize);
  pub fn RichEdit_EnableAlign(AObj: usize);
  pub fn RichEdit_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn RichEdit_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn RichEdit_Focused(AObj: usize) -> bool;
  pub fn RichEdit_HandleAllocated(AObj: usize) -> bool;
  pub fn RichEdit_InsertControl(AObj: usize, AControl: usize);
  pub fn RichEdit_Invalidate(AObj: usize);
  pub fn RichEdit_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn RichEdit_RemoveControl(AObj: usize, AControl: usize);
  pub fn RichEdit_Realign(AObj: usize);
  pub fn RichEdit_Repaint(AObj: usize);
  pub fn RichEdit_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn RichEdit_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn RichEdit_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn RichEdit_SetFocus(AObj: usize);
  pub fn RichEdit_Update(AObj: usize);
  pub fn RichEdit_BringToFront(AObj: usize);
  pub fn RichEdit_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RichEdit_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RichEdit_Dragging(AObj: usize) -> bool;
  pub fn RichEdit_HasParent(AObj: usize) -> bool;
  pub fn RichEdit_Hide(AObj: usize);
  pub fn RichEdit_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn RichEdit_Refresh(AObj: usize);
  pub fn RichEdit_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn RichEdit_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn RichEdit_SendToBack(AObj: usize);
  pub fn RichEdit_Show(AObj: usize);
  pub fn RichEdit_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn RichEdit_GetTextLen(AObj: usize) -> i32;
  pub fn RichEdit_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn RichEdit_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn RichEdit_GetNamePath(AObj: usize) -> *const c_char;
  pub fn RichEdit_Assign(AObj: usize, Source: usize);
  pub fn RichEdit_ClassType(AObj: usize) -> TClass;
  pub fn RichEdit_ClassName(AObj: usize) -> *const c_char;
  pub fn RichEdit_InstanceSize(AObj: usize) -> i32;
  pub fn RichEdit_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn RichEdit_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn RichEdit_GetHashCode(AObj: usize) -> i32;
  pub fn RichEdit_ToString(AObj: usize) -> *const c_char;
  pub fn RichEdit_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RichEdit_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn RichEdit_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn RichEdit_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn RichEdit_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn RichEdit_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn RichEdit_AnchorClient(AObj: usize, ASpace: i32);
  pub fn RichEdit_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn RichEdit_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn RichEdit_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn RichEdit_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn RichEdit_GetAlign(AObj: usize) -> TAlign;
  pub fn RichEdit_SetAlign(AObj: usize, AValue: TAlign);
  pub fn RichEdit_GetAlignment(AObj: usize) -> TAlignment;
  pub fn RichEdit_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn RichEdit_GetAnchors(AObj: usize) -> TAnchors;
  pub fn RichEdit_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn RichEdit_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn RichEdit_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn RichEdit_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn RichEdit_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn RichEdit_GetBorderWidth(AObj: usize) -> i32;
  pub fn RichEdit_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn RichEdit_GetColor(AObj: usize) -> TColor;
  pub fn RichEdit_SetColor(AObj: usize, AValue: TColor);
  pub fn RichEdit_GetDragCursor(AObj: usize) -> TCursor;
  pub fn RichEdit_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn RichEdit_GetDragKind(AObj: usize) -> TDragKind;
  pub fn RichEdit_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn RichEdit_GetDragMode(AObj: usize) -> TDragMode;
  pub fn RichEdit_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn RichEdit_GetEnabled(AObj: usize) -> bool;
  pub fn RichEdit_SetEnabled(AObj: usize, AValue: bool);
  pub fn RichEdit_GetFont(AObj: usize) -> usize;
  pub fn RichEdit_SetFont(AObj: usize, AValue: usize);
  pub fn RichEdit_GetHideSelection(AObj: usize) -> bool;
  pub fn RichEdit_SetHideSelection(AObj: usize, AValue: bool);
  pub fn RichEdit_GetConstraints(AObj: usize) -> usize;
  pub fn RichEdit_SetConstraints(AObj: usize, AValue: usize);
  pub fn RichEdit_GetLines(AObj: usize) -> usize;
  pub fn RichEdit_SetLines(AObj: usize, AValue: usize);
  pub fn RichEdit_GetMaxLength(AObj: usize) -> i32;
  pub fn RichEdit_SetMaxLength(AObj: usize, AValue: i32);
  pub fn RichEdit_GetParentColor(AObj: usize) -> bool;
  pub fn RichEdit_SetParentColor(AObj: usize, AValue: bool);
  pub fn RichEdit_GetParentFont(AObj: usize) -> bool;
  pub fn RichEdit_SetParentFont(AObj: usize, AValue: bool);
  pub fn RichEdit_GetParentShowHint(AObj: usize) -> bool;
  pub fn RichEdit_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn RichEdit_GetPopupMenu(AObj: usize) -> usize;
  pub fn RichEdit_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn RichEdit_GetReadOnly(AObj: usize) -> bool;
  pub fn RichEdit_SetReadOnly(AObj: usize, AValue: bool);
  pub fn RichEdit_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn RichEdit_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn RichEdit_GetShowHint(AObj: usize) -> bool;
  pub fn RichEdit_SetShowHint(AObj: usize, AValue: bool);
  pub fn RichEdit_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn RichEdit_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn RichEdit_GetTabStop(AObj: usize) -> bool;
  pub fn RichEdit_SetTabStop(AObj: usize, AValue: bool);
  pub fn RichEdit_GetVisible(AObj: usize) -> bool;
  pub fn RichEdit_SetVisible(AObj: usize, AValue: bool);
  pub fn RichEdit_GetWantTabs(AObj: usize) -> bool;
  pub fn RichEdit_SetWantTabs(AObj: usize, AValue: bool);
  pub fn RichEdit_GetWantReturns(AObj: usize) -> bool;
  pub fn RichEdit_SetWantReturns(AObj: usize, AValue: bool);
  pub fn RichEdit_GetWordWrap(AObj: usize) -> bool;
  pub fn RichEdit_SetWordWrap(AObj: usize, AValue: bool);
  pub fn RichEdit_GetZoom(AObj: usize) -> i32;
  pub fn RichEdit_SetZoom(AObj: usize, AValue: i32);
  pub fn RichEdit_SetOnChange(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnClick(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnExit(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn RichEdit_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn RichEdit_GetDefAttributes(AObj: usize) -> usize;
  pub fn RichEdit_SetDefAttributes(AObj: usize, AValue: usize);
  pub fn RichEdit_GetSelAttributes(AObj: usize) -> usize;
  pub fn RichEdit_SetSelAttributes(AObj: usize, AValue: usize);
  pub fn RichEdit_GetParagraph(AObj: usize) -> usize;
  pub fn RichEdit_GetCaretPos(AObj: usize, Result: *mut TPoint);
  pub fn RichEdit_SetCaretPos(AObj: usize, AValue: *mut TPoint);
  pub fn RichEdit_GetCanUndo(AObj: usize) -> bool;
  pub fn RichEdit_GetModified(AObj: usize) -> bool;
  pub fn RichEdit_SetModified(AObj: usize, AValue: bool);
  pub fn RichEdit_GetSelLength(AObj: usize) -> i32;
  pub fn RichEdit_SetSelLength(AObj: usize, AValue: i32);
  pub fn RichEdit_GetSelStart(AObj: usize) -> i32;
  pub fn RichEdit_SetSelStart(AObj: usize, AValue: i32);
  pub fn RichEdit_GetSelText(AObj: usize) -> *const c_char;
  pub fn RichEdit_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn RichEdit_GetText(AObj: usize) -> *const c_char;
  pub fn RichEdit_SetText(AObj: usize, AValue: *const c_char);
  pub fn RichEdit_GetTextHint(AObj: usize) -> *const c_char;
  pub fn RichEdit_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn RichEdit_GetDockClientCount(AObj: usize) -> i32;
  pub fn RichEdit_GetDockSite(AObj: usize) -> bool;
  pub fn RichEdit_SetDockSite(AObj: usize, AValue: bool);
  pub fn RichEdit_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn RichEdit_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RichEdit_GetMouseInClient(AObj: usize) -> bool;
  pub fn RichEdit_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn RichEdit_GetBrush(AObj: usize) -> usize;
  pub fn RichEdit_GetControlCount(AObj: usize) -> i32;
  pub fn RichEdit_GetHandle(AObj: usize) -> HWND;
  pub fn RichEdit_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn RichEdit_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn RichEdit_GetParentWindow(AObj: usize) -> HWND;
  pub fn RichEdit_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn RichEdit_GetShowing(AObj: usize) -> bool;
  pub fn RichEdit_GetUseDockManager(AObj: usize) -> bool;
  pub fn RichEdit_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn RichEdit_GetAction(AObj: usize) -> usize;
  pub fn RichEdit_SetAction(AObj: usize, AValue: usize);
  pub fn RichEdit_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn RichEdit_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn RichEdit_GetClientHeight(AObj: usize) -> i32;
  pub fn RichEdit_SetClientHeight(AObj: usize, AValue: i32);
  pub fn RichEdit_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn RichEdit_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn RichEdit_GetClientWidth(AObj: usize) -> i32;
  pub fn RichEdit_SetClientWidth(AObj: usize, AValue: i32);
  pub fn RichEdit_GetControlState(AObj: usize) -> TControlState;
  pub fn RichEdit_SetControlState(AObj: usize, AValue: TControlState);
  pub fn RichEdit_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn RichEdit_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn RichEdit_GetFloating(AObj: usize) -> bool;
  pub fn RichEdit_GetParent(AObj: usize) -> usize;
  pub fn RichEdit_SetParent(AObj: usize, AValue: usize);
  pub fn RichEdit_GetLeft(AObj: usize) -> i32;
  pub fn RichEdit_SetLeft(AObj: usize, AValue: i32);
  pub fn RichEdit_GetTop(AObj: usize) -> i32;
  pub fn RichEdit_SetTop(AObj: usize, AValue: i32);
  pub fn RichEdit_GetWidth(AObj: usize) -> i32;
  pub fn RichEdit_SetWidth(AObj: usize, AValue: i32);
  pub fn RichEdit_GetHeight(AObj: usize) -> i32;
  pub fn RichEdit_SetHeight(AObj: usize, AValue: i32);
  pub fn RichEdit_GetCursor(AObj: usize) -> TCursor;
  pub fn RichEdit_SetCursor(AObj: usize, AValue: TCursor);
  pub fn RichEdit_GetHint(AObj: usize) -> *const c_char;
  pub fn RichEdit_SetHint(AObj: usize, AValue: *const c_char);
  pub fn RichEdit_GetComponentCount(AObj: usize) -> i32;
  pub fn RichEdit_GetComponentIndex(AObj: usize) -> i32;
  pub fn RichEdit_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn RichEdit_GetOwner(AObj: usize) -> usize;
  pub fn RichEdit_GetName(AObj: usize) -> *const c_char;
  pub fn RichEdit_SetName(AObj: usize, AValue: *const c_char);
  pub fn RichEdit_GetTag(AObj: usize) -> isize;
  pub fn RichEdit_SetTag(AObj: usize, AValue: isize);
  pub fn RichEdit_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn RichEdit_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn RichEdit_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn RichEdit_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn RichEdit_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn RichEdit_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn RichEdit_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn RichEdit_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn RichEdit_GetChildSizing(AObj: usize) -> usize;
  pub fn RichEdit_SetChildSizing(AObj: usize, AValue: usize);
  pub fn RichEdit_GetBorderSpacing(AObj: usize) -> usize;
  pub fn RichEdit_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn RichEdit_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn RichEdit_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn RichEdit_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn RichEdit_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn RichEdit_StaticClassType() -> TClass;

  // ----------------- TTrackBar ----------------------
  pub fn TrackBar_Create(AOwner: usize) -> usize;
  pub fn TrackBar_Free(AObj: usize);
  pub fn TrackBar_SetTick(AObj: usize, Value: i32);
  pub fn TrackBar_CanFocus(AObj: usize) -> bool;
  pub fn TrackBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn TrackBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn TrackBar_DisableAlign(AObj: usize);
  pub fn TrackBar_EnableAlign(AObj: usize);
  pub fn TrackBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn TrackBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn TrackBar_Focused(AObj: usize) -> bool;
  pub fn TrackBar_HandleAllocated(AObj: usize) -> bool;
  pub fn TrackBar_InsertControl(AObj: usize, AControl: usize);
  pub fn TrackBar_Invalidate(AObj: usize);
  pub fn TrackBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn TrackBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn TrackBar_Realign(AObj: usize);
  pub fn TrackBar_Repaint(AObj: usize);
  pub fn TrackBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn TrackBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn TrackBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn TrackBar_SetFocus(AObj: usize);
  pub fn TrackBar_Update(AObj: usize);
  pub fn TrackBar_BringToFront(AObj: usize);
  pub fn TrackBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TrackBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TrackBar_Dragging(AObj: usize) -> bool;
  pub fn TrackBar_HasParent(AObj: usize) -> bool;
  pub fn TrackBar_Hide(AObj: usize);
  pub fn TrackBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn TrackBar_Refresh(AObj: usize);
  pub fn TrackBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TrackBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TrackBar_SendToBack(AObj: usize);
  pub fn TrackBar_Show(AObj: usize);
  pub fn TrackBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn TrackBar_GetTextLen(AObj: usize) -> i32;
  pub fn TrackBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn TrackBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn TrackBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TrackBar_Assign(AObj: usize, Source: usize);
  pub fn TrackBar_ClassType(AObj: usize) -> TClass;
  pub fn TrackBar_ClassName(AObj: usize) -> *const c_char;
  pub fn TrackBar_InstanceSize(AObj: usize) -> i32;
  pub fn TrackBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TrackBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TrackBar_GetHashCode(AObj: usize) -> i32;
  pub fn TrackBar_ToString(AObj: usize) -> *const c_char;
  pub fn TrackBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TrackBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TrackBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn TrackBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn TrackBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn TrackBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn TrackBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn TrackBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TrackBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn TrackBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn TrackBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn TrackBar_GetAlign(AObj: usize) -> TAlign;
  pub fn TrackBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn TrackBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn TrackBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn TrackBar_GetBorderWidth(AObj: usize) -> i32;
  pub fn TrackBar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn TrackBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn TrackBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TrackBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn TrackBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn TrackBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn TrackBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn TrackBar_GetEnabled(AObj: usize) -> bool;
  pub fn TrackBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn TrackBar_GetConstraints(AObj: usize) -> usize;
  pub fn TrackBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn TrackBar_GetLineSize(AObj: usize) -> i32;
  pub fn TrackBar_SetLineSize(AObj: usize, AValue: i32);
  pub fn TrackBar_GetMax(AObj: usize) -> i32;
  pub fn TrackBar_SetMax(AObj: usize, AValue: i32);
  pub fn TrackBar_GetMin(AObj: usize) -> i32;
  pub fn TrackBar_SetMin(AObj: usize, AValue: i32);
  pub fn TrackBar_GetOrientation(AObj: usize) -> TTrackBarOrientation;
  pub fn TrackBar_SetOrientation(AObj: usize, AValue: TTrackBarOrientation);
  pub fn TrackBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn TrackBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TrackBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn TrackBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn TrackBar_GetPageSize(AObj: usize) -> i32;
  pub fn TrackBar_SetPageSize(AObj: usize, AValue: i32);
  pub fn TrackBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn TrackBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn TrackBar_GetFrequency(AObj: usize) -> i32;
  pub fn TrackBar_SetFrequency(AObj: usize, AValue: i32);
  pub fn TrackBar_GetPosition(AObj: usize) -> i32;
  pub fn TrackBar_SetPosition(AObj: usize, AValue: i32);
  pub fn TrackBar_GetSelEnd(AObj: usize) -> i32;
  pub fn TrackBar_SetSelEnd(AObj: usize, AValue: i32);
  pub fn TrackBar_GetSelStart(AObj: usize) -> i32;
  pub fn TrackBar_SetSelStart(AObj: usize, AValue: i32);
  pub fn TrackBar_GetShowHint(AObj: usize) -> bool;
  pub fn TrackBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn TrackBar_GetShowSelRange(AObj: usize) -> bool;
  pub fn TrackBar_SetShowSelRange(AObj: usize, AValue: bool);
  pub fn TrackBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn TrackBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn TrackBar_GetTabStop(AObj: usize) -> bool;
  pub fn TrackBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn TrackBar_GetTickMarks(AObj: usize) -> TTickMark;
  pub fn TrackBar_SetTickMarks(AObj: usize, AValue: TTickMark);
  pub fn TrackBar_GetTickStyle(AObj: usize) -> TTickStyle;
  pub fn TrackBar_SetTickStyle(AObj: usize, AValue: TTickStyle);
  pub fn TrackBar_GetVisible(AObj: usize) -> bool;
  pub fn TrackBar_SetVisible(AObj: usize, AValue: bool);
  pub fn TrackBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnChange(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnExit(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn TrackBar_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn TrackBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn TrackBar_GetDockSite(AObj: usize) -> bool;
  pub fn TrackBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn TrackBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn TrackBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn TrackBar_GetBrush(AObj: usize) -> usize;
  pub fn TrackBar_GetControlCount(AObj: usize) -> i32;
  pub fn TrackBar_GetHandle(AObj: usize) -> HWND;
  pub fn TrackBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn TrackBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn TrackBar_GetShowing(AObj: usize) -> bool;
  pub fn TrackBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn TrackBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn TrackBar_GetAction(AObj: usize) -> usize;
  pub fn TrackBar_SetAction(AObj: usize, AValue: usize);
  pub fn TrackBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn TrackBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn TrackBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn TrackBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn TrackBar_GetClientHeight(AObj: usize) -> i32;
  pub fn TrackBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn TrackBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn TrackBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn TrackBar_GetClientWidth(AObj: usize) -> i32;
  pub fn TrackBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn TrackBar_GetControlState(AObj: usize) -> TControlState;
  pub fn TrackBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn TrackBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn TrackBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn TrackBar_GetFloating(AObj: usize) -> bool;
  pub fn TrackBar_GetParent(AObj: usize) -> usize;
  pub fn TrackBar_SetParent(AObj: usize, AValue: usize);
  pub fn TrackBar_GetLeft(AObj: usize) -> i32;
  pub fn TrackBar_SetLeft(AObj: usize, AValue: i32);
  pub fn TrackBar_GetTop(AObj: usize) -> i32;
  pub fn TrackBar_SetTop(AObj: usize, AValue: i32);
  pub fn TrackBar_GetWidth(AObj: usize) -> i32;
  pub fn TrackBar_SetWidth(AObj: usize, AValue: i32);
  pub fn TrackBar_GetHeight(AObj: usize) -> i32;
  pub fn TrackBar_SetHeight(AObj: usize, AValue: i32);
  pub fn TrackBar_GetCursor(AObj: usize) -> TCursor;
  pub fn TrackBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn TrackBar_GetHint(AObj: usize) -> *const c_char;
  pub fn TrackBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn TrackBar_GetComponentCount(AObj: usize) -> i32;
  pub fn TrackBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn TrackBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn TrackBar_GetOwner(AObj: usize) -> usize;
  pub fn TrackBar_GetName(AObj: usize) -> *const c_char;
  pub fn TrackBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn TrackBar_GetTag(AObj: usize) -> isize;
  pub fn TrackBar_SetTag(AObj: usize, AValue: isize);
  pub fn TrackBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn TrackBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn TrackBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn TrackBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn TrackBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn TrackBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn TrackBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn TrackBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn TrackBar_GetChildSizing(AObj: usize) -> usize;
  pub fn TrackBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn TrackBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn TrackBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn TrackBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn TrackBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn TrackBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn TrackBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn TrackBar_StaticClassType() -> TClass;

  // ----------------- TImageList ----------------------
  pub fn ImageList_Create(AOwner: usize) -> usize;
  pub fn ImageList_Free(AObj: usize);
  pub fn ImageList_StretchDraw(AObj: usize, ACanvas: usize, AIndex: i32, ARect: *mut TRect, AEnabled: bool);
  pub fn ImageList_AddSliced(AObj: usize, Image: usize, AHorizontalCount: i32, AVerticalCount: i32) -> i32;
  pub fn ImageList_GetHotSpot(AObj: usize, Result: *mut TPoint);
  pub fn ImageList_HideDragImage(AObj: usize);
  pub fn ImageList_ShowDragImage(AObj: usize);
  pub fn ImageList_Assign(AObj: usize, Source: usize);
  pub fn ImageList_Add(AObj: usize, Image: usize, Mask: usize) -> i32;
  pub fn ImageList_AddIcon(AObj: usize, Image: usize) -> i32;
  pub fn ImageList_AddImages(AObj: usize, Value: usize);
  pub fn ImageList_AddMasked(AObj: usize, Image: usize, MaskColor: TColor) -> i32;
  pub fn ImageList_Clear(AObj: usize);
  pub fn ImageList_Delete(AObj: usize, Index: i32);
  pub fn ImageList_Insert(AObj: usize, Index: i32, Image: usize, Mask: usize);
  pub fn ImageList_InsertIcon(AObj: usize, Index: i32, Image: usize);
  pub fn ImageList_InsertMasked(AObj: usize, Index: i32, Image: usize, MaskColor: TColor);
  pub fn ImageList_Move(AObj: usize, CurIndex: i32, NewIndex: i32);
  pub fn ImageList_Replace(AObj: usize, Index: i32, Image: usize, Mask: usize);
  pub fn ImageList_ReplaceMasked(AObj: usize, Index: i32, NewImage: usize, MaskColor: TColor);
  pub fn ImageList_BeginUpdate(AObj: usize);
  pub fn ImageList_EndUpdate(AObj: usize);
  pub fn ImageList_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ImageList_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ImageList_HasParent(AObj: usize) -> bool;
  pub fn ImageList_ClassType(AObj: usize) -> TClass;
  pub fn ImageList_ClassName(AObj: usize) -> *const c_char;
  pub fn ImageList_InstanceSize(AObj: usize) -> i32;
  pub fn ImageList_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ImageList_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ImageList_GetHashCode(AObj: usize) -> i32;
  pub fn ImageList_ToString(AObj: usize) -> *const c_char;
  pub fn ImageList_GetBlendColor(AObj: usize) -> TColor;
  pub fn ImageList_SetBlendColor(AObj: usize, AValue: TColor);
  pub fn ImageList_GetBkColor(AObj: usize) -> TColor;
  pub fn ImageList_SetBkColor(AObj: usize, AValue: TColor);
  pub fn ImageList_GetAllocBy(AObj: usize) -> i32;
  pub fn ImageList_SetAllocBy(AObj: usize, AValue: i32);
  pub fn ImageList_GetDrawingStyle(AObj: usize) -> TDrawingStyle;
  pub fn ImageList_SetDrawingStyle(AObj: usize, AValue: TDrawingStyle);
  pub fn ImageList_GetHeight(AObj: usize) -> i32;
  pub fn ImageList_SetHeight(AObj: usize, AValue: i32);
  pub fn ImageList_GetImageType(AObj: usize) -> TImageType;
  pub fn ImageList_SetImageType(AObj: usize, AValue: TImageType);
  pub fn ImageList_GetMasked(AObj: usize) -> bool;
  pub fn ImageList_SetMasked(AObj: usize, AValue: bool);
  pub fn ImageList_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ImageList_GetShareImages(AObj: usize) -> bool;
  pub fn ImageList_SetShareImages(AObj: usize, AValue: bool);
  pub fn ImageList_GetWidth(AObj: usize) -> i32;
  pub fn ImageList_SetWidth(AObj: usize, AValue: i32);
  pub fn ImageList_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ImageList_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ImageList_GetDragging(AObj: usize) -> bool;
  pub fn ImageList_GetCount(AObj: usize) -> i32;
  pub fn ImageList_GetComponentCount(AObj: usize) -> i32;
  pub fn ImageList_GetComponentIndex(AObj: usize) -> i32;
  pub fn ImageList_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ImageList_GetOwner(AObj: usize) -> usize;
  pub fn ImageList_GetName(AObj: usize) -> *const c_char;
  pub fn ImageList_SetName(AObj: usize, AValue: *const c_char);
  pub fn ImageList_GetTag(AObj: usize) -> isize;
  pub fn ImageList_SetTag(AObj: usize, AValue: isize);
  pub fn ImageList_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ImageList_StaticClassType() -> TClass;
  pub fn ImageList_Draw1(AObj: usize, Canvas: usize, X: i32, Y: i32, Index: i32, Enabled: bool);
  pub fn ImageList_DrawOverlay1(AObj: usize, Canvas: usize, X: i32, Y: i32, ImageIndex: i32, Overlay: u8, Enabled: bool);
  pub fn ImageList_GetIcon1(AObj: usize, Index: i32, Image: usize);

  // ----------------- TUpDown ----------------------
  pub fn UpDown_Create(AOwner: usize) -> usize;
  pub fn UpDown_Free(AObj: usize);
  pub fn UpDown_CanFocus(AObj: usize) -> bool;
  pub fn UpDown_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn UpDown_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn UpDown_DisableAlign(AObj: usize);
  pub fn UpDown_EnableAlign(AObj: usize);
  pub fn UpDown_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn UpDown_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn UpDown_Focused(AObj: usize) -> bool;
  pub fn UpDown_HandleAllocated(AObj: usize) -> bool;
  pub fn UpDown_InsertControl(AObj: usize, AControl: usize);
  pub fn UpDown_Invalidate(AObj: usize);
  pub fn UpDown_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn UpDown_RemoveControl(AObj: usize, AControl: usize);
  pub fn UpDown_Realign(AObj: usize);
  pub fn UpDown_Repaint(AObj: usize);
  pub fn UpDown_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn UpDown_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn UpDown_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn UpDown_SetFocus(AObj: usize);
  pub fn UpDown_Update(AObj: usize);
  pub fn UpDown_BringToFront(AObj: usize);
  pub fn UpDown_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn UpDown_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn UpDown_Dragging(AObj: usize) -> bool;
  pub fn UpDown_HasParent(AObj: usize) -> bool;
  pub fn UpDown_Hide(AObj: usize);
  pub fn UpDown_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn UpDown_Refresh(AObj: usize);
  pub fn UpDown_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn UpDown_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn UpDown_SendToBack(AObj: usize);
  pub fn UpDown_Show(AObj: usize);
  pub fn UpDown_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn UpDown_GetTextLen(AObj: usize) -> i32;
  pub fn UpDown_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn UpDown_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn UpDown_GetNamePath(AObj: usize) -> *const c_char;
  pub fn UpDown_Assign(AObj: usize, Source: usize);
  pub fn UpDown_ClassType(AObj: usize) -> TClass;
  pub fn UpDown_ClassName(AObj: usize) -> *const c_char;
  pub fn UpDown_InstanceSize(AObj: usize) -> i32;
  pub fn UpDown_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn UpDown_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn UpDown_GetHashCode(AObj: usize) -> i32;
  pub fn UpDown_ToString(AObj: usize) -> *const c_char;
  pub fn UpDown_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn UpDown_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn UpDown_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn UpDown_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn UpDown_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn UpDown_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn UpDown_AnchorClient(AObj: usize, ASpace: i32);
  pub fn UpDown_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn UpDown_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn UpDown_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn UpDown_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn UpDown_GetAnchors(AObj: usize) -> TAnchors;
  pub fn UpDown_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn UpDown_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn UpDown_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn UpDown_GetEnabled(AObj: usize) -> bool;
  pub fn UpDown_SetEnabled(AObj: usize, AValue: bool);
  pub fn UpDown_GetHint(AObj: usize) -> *const c_char;
  pub fn UpDown_SetHint(AObj: usize, AValue: *const c_char);
  pub fn UpDown_GetMin(AObj: usize) -> i32;
  pub fn UpDown_SetMin(AObj: usize, AValue: i32);
  pub fn UpDown_GetMax(AObj: usize) -> i32;
  pub fn UpDown_SetMax(AObj: usize, AValue: i32);
  pub fn UpDown_GetIncrement(AObj: usize) -> i32;
  pub fn UpDown_SetIncrement(AObj: usize, AValue: i32);
  pub fn UpDown_GetConstraints(AObj: usize) -> usize;
  pub fn UpDown_SetConstraints(AObj: usize, AValue: usize);
  pub fn UpDown_GetOrientation(AObj: usize) -> TUDOrientation;
  pub fn UpDown_SetOrientation(AObj: usize, AValue: TUDOrientation);
  pub fn UpDown_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn UpDown_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn UpDown_GetParentShowHint(AObj: usize) -> bool;
  pub fn UpDown_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn UpDown_GetPopupMenu(AObj: usize) -> usize;
  pub fn UpDown_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn UpDown_GetPosition(AObj: usize) -> i32;
  pub fn UpDown_SetPosition(AObj: usize, AValue: i32);
  pub fn UpDown_GetShowHint(AObj: usize) -> bool;
  pub fn UpDown_SetShowHint(AObj: usize, AValue: bool);
  pub fn UpDown_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn UpDown_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn UpDown_GetTabStop(AObj: usize) -> bool;
  pub fn UpDown_SetTabStop(AObj: usize, AValue: bool);
  pub fn UpDown_GetVisible(AObj: usize) -> bool;
  pub fn UpDown_SetVisible(AObj: usize, AValue: bool);
  pub fn UpDown_GetWrap(AObj: usize) -> bool;
  pub fn UpDown_SetWrap(AObj: usize, AValue: bool);
  pub fn UpDown_SetOnChanging(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnClick(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnExit(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn UpDown_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn UpDown_GetDockClientCount(AObj: usize) -> i32;
  pub fn UpDown_GetDockSite(AObj: usize) -> bool;
  pub fn UpDown_SetDockSite(AObj: usize, AValue: bool);
  pub fn UpDown_GetMouseInClient(AObj: usize) -> bool;
  pub fn UpDown_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn UpDown_GetBrush(AObj: usize) -> usize;
  pub fn UpDown_GetControlCount(AObj: usize) -> i32;
  pub fn UpDown_GetHandle(AObj: usize) -> HWND;
  pub fn UpDown_GetParentWindow(AObj: usize) -> HWND;
  pub fn UpDown_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn UpDown_GetShowing(AObj: usize) -> bool;
  pub fn UpDown_GetUseDockManager(AObj: usize) -> bool;
  pub fn UpDown_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn UpDown_GetAction(AObj: usize) -> usize;
  pub fn UpDown_SetAction(AObj: usize, AValue: usize);
  pub fn UpDown_GetAlign(AObj: usize) -> TAlign;
  pub fn UpDown_SetAlign(AObj: usize, AValue: TAlign);
  pub fn UpDown_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn UpDown_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn UpDown_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn UpDown_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn UpDown_GetClientHeight(AObj: usize) -> i32;
  pub fn UpDown_SetClientHeight(AObj: usize, AValue: i32);
  pub fn UpDown_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn UpDown_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn UpDown_GetClientWidth(AObj: usize) -> i32;
  pub fn UpDown_SetClientWidth(AObj: usize, AValue: i32);
  pub fn UpDown_GetControlState(AObj: usize) -> TControlState;
  pub fn UpDown_SetControlState(AObj: usize, AValue: TControlState);
  pub fn UpDown_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn UpDown_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn UpDown_GetFloating(AObj: usize) -> bool;
  pub fn UpDown_GetParent(AObj: usize) -> usize;
  pub fn UpDown_SetParent(AObj: usize, AValue: usize);
  pub fn UpDown_GetLeft(AObj: usize) -> i32;
  pub fn UpDown_SetLeft(AObj: usize, AValue: i32);
  pub fn UpDown_GetTop(AObj: usize) -> i32;
  pub fn UpDown_SetTop(AObj: usize, AValue: i32);
  pub fn UpDown_GetWidth(AObj: usize) -> i32;
  pub fn UpDown_SetWidth(AObj: usize, AValue: i32);
  pub fn UpDown_GetHeight(AObj: usize) -> i32;
  pub fn UpDown_SetHeight(AObj: usize, AValue: i32);
  pub fn UpDown_GetCursor(AObj: usize) -> TCursor;
  pub fn UpDown_SetCursor(AObj: usize, AValue: TCursor);
  pub fn UpDown_GetComponentCount(AObj: usize) -> i32;
  pub fn UpDown_GetComponentIndex(AObj: usize) -> i32;
  pub fn UpDown_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn UpDown_GetOwner(AObj: usize) -> usize;
  pub fn UpDown_GetName(AObj: usize) -> *const c_char;
  pub fn UpDown_SetName(AObj: usize, AValue: *const c_char);
  pub fn UpDown_GetTag(AObj: usize) -> isize;
  pub fn UpDown_SetTag(AObj: usize, AValue: isize);
  pub fn UpDown_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn UpDown_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn UpDown_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn UpDown_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn UpDown_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn UpDown_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn UpDown_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn UpDown_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn UpDown_GetChildSizing(AObj: usize) -> usize;
  pub fn UpDown_SetChildSizing(AObj: usize, AValue: usize);
  pub fn UpDown_GetBorderSpacing(AObj: usize) -> usize;
  pub fn UpDown_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn UpDown_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn UpDown_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn UpDown_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn UpDown_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn UpDown_StaticClassType() -> TClass;

  // ----------------- TProgressBar ----------------------
  pub fn ProgressBar_Create(AOwner: usize) -> usize;
  pub fn ProgressBar_Free(AObj: usize);
  pub fn ProgressBar_StepIt(AObj: usize);
  pub fn ProgressBar_StepBy(AObj: usize, Delta: i32);
  pub fn ProgressBar_CanFocus(AObj: usize) -> bool;
  pub fn ProgressBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ProgressBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ProgressBar_DisableAlign(AObj: usize);
  pub fn ProgressBar_EnableAlign(AObj: usize);
  pub fn ProgressBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ProgressBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ProgressBar_Focused(AObj: usize) -> bool;
  pub fn ProgressBar_HandleAllocated(AObj: usize) -> bool;
  pub fn ProgressBar_InsertControl(AObj: usize, AControl: usize);
  pub fn ProgressBar_Invalidate(AObj: usize);
  pub fn ProgressBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ProgressBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn ProgressBar_Realign(AObj: usize);
  pub fn ProgressBar_Repaint(AObj: usize);
  pub fn ProgressBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ProgressBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ProgressBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ProgressBar_SetFocus(AObj: usize);
  pub fn ProgressBar_Update(AObj: usize);
  pub fn ProgressBar_BringToFront(AObj: usize);
  pub fn ProgressBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ProgressBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ProgressBar_Dragging(AObj: usize) -> bool;
  pub fn ProgressBar_HasParent(AObj: usize) -> bool;
  pub fn ProgressBar_Hide(AObj: usize);
  pub fn ProgressBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ProgressBar_Refresh(AObj: usize);
  pub fn ProgressBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ProgressBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ProgressBar_SendToBack(AObj: usize);
  pub fn ProgressBar_Show(AObj: usize);
  pub fn ProgressBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ProgressBar_GetTextLen(AObj: usize) -> i32;
  pub fn ProgressBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ProgressBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ProgressBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ProgressBar_Assign(AObj: usize, Source: usize);
  pub fn ProgressBar_ClassType(AObj: usize) -> TClass;
  pub fn ProgressBar_ClassName(AObj: usize) -> *const c_char;
  pub fn ProgressBar_InstanceSize(AObj: usize) -> i32;
  pub fn ProgressBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ProgressBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ProgressBar_GetHashCode(AObj: usize) -> i32;
  pub fn ProgressBar_ToString(AObj: usize) -> *const c_char;
  pub fn ProgressBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ProgressBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ProgressBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ProgressBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ProgressBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ProgressBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ProgressBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ProgressBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ProgressBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ProgressBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ProgressBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ProgressBar_GetAlign(AObj: usize) -> TAlign;
  pub fn ProgressBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ProgressBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ProgressBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ProgressBar_GetBorderWidth(AObj: usize) -> i32;
  pub fn ProgressBar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ProgressBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ProgressBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ProgressBar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ProgressBar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ProgressBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ProgressBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ProgressBar_GetEnabled(AObj: usize) -> bool;
  pub fn ProgressBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetHint(AObj: usize) -> *const c_char;
  pub fn ProgressBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ProgressBar_GetConstraints(AObj: usize) -> usize;
  pub fn ProgressBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetMin(AObj: usize) -> i32;
  pub fn ProgressBar_SetMin(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetMax(AObj: usize) -> i32;
  pub fn ProgressBar_SetMax(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetOrientation(AObj: usize) -> TProgressBarOrientation;
  pub fn ProgressBar_SetOrientation(AObj: usize, AValue: TProgressBarOrientation);
  pub fn ProgressBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ProgressBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn ProgressBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn ProgressBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetPosition(AObj: usize) -> i32;
  pub fn ProgressBar_SetPosition(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetSmooth(AObj: usize) -> bool;
  pub fn ProgressBar_SetSmooth(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetStyle(AObj: usize) -> TProgressBarStyle;
  pub fn ProgressBar_SetStyle(AObj: usize, AValue: TProgressBarStyle);
  pub fn ProgressBar_GetStep(AObj: usize) -> i32;
  pub fn ProgressBar_SetStep(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetShowHint(AObj: usize) -> bool;
  pub fn ProgressBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ProgressBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ProgressBar_GetTabStop(AObj: usize) -> bool;
  pub fn ProgressBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetVisible(AObj: usize) -> bool;
  pub fn ProgressBar_SetVisible(AObj: usize, AValue: bool);
  pub fn ProgressBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ProgressBar_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ProgressBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn ProgressBar_GetDockSite(AObj: usize) -> bool;
  pub fn ProgressBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn ProgressBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ProgressBar_GetBrush(AObj: usize) -> usize;
  pub fn ProgressBar_GetControlCount(AObj: usize) -> i32;
  pub fn ProgressBar_GetHandle(AObj: usize) -> HWND;
  pub fn ProgressBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn ProgressBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ProgressBar_GetShowing(AObj: usize) -> bool;
  pub fn ProgressBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn ProgressBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ProgressBar_GetAction(AObj: usize) -> usize;
  pub fn ProgressBar_SetAction(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ProgressBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ProgressBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ProgressBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ProgressBar_GetClientHeight(AObj: usize) -> i32;
  pub fn ProgressBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ProgressBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ProgressBar_GetClientWidth(AObj: usize) -> i32;
  pub fn ProgressBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetControlState(AObj: usize) -> TControlState;
  pub fn ProgressBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ProgressBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ProgressBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ProgressBar_GetFloating(AObj: usize) -> bool;
  pub fn ProgressBar_GetParent(AObj: usize) -> usize;
  pub fn ProgressBar_SetParent(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetLeft(AObj: usize) -> i32;
  pub fn ProgressBar_SetLeft(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetTop(AObj: usize) -> i32;
  pub fn ProgressBar_SetTop(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetWidth(AObj: usize) -> i32;
  pub fn ProgressBar_SetWidth(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetHeight(AObj: usize) -> i32;
  pub fn ProgressBar_SetHeight(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetCursor(AObj: usize) -> TCursor;
  pub fn ProgressBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ProgressBar_GetComponentCount(AObj: usize) -> i32;
  pub fn ProgressBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn ProgressBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ProgressBar_GetOwner(AObj: usize) -> usize;
  pub fn ProgressBar_GetName(AObj: usize) -> *const c_char;
  pub fn ProgressBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn ProgressBar_GetTag(AObj: usize) -> isize;
  pub fn ProgressBar_SetTag(AObj: usize, AValue: isize);
  pub fn ProgressBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ProgressBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ProgressBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ProgressBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ProgressBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetChildSizing(AObj: usize) -> usize;
  pub fn ProgressBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ProgressBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ProgressBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ProgressBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ProgressBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ProgressBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ProgressBar_StaticClassType() -> TClass;

  // ----------------- TDateTimePicker ----------------------
  pub fn DateTimePicker_Create(AOwner: usize) -> usize;
  pub fn DateTimePicker_Free(AObj: usize);
  pub fn DateTimePicker_DateIsNull(AObj: usize) -> bool;
  pub fn DateTimePicker_SelectDate(AObj: usize);
  pub fn DateTimePicker_SelectTime(AObj: usize);
  pub fn DateTimePicker_CanFocus(AObj: usize) -> bool;
  pub fn DateTimePicker_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn DateTimePicker_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn DateTimePicker_DisableAlign(AObj: usize);
  pub fn DateTimePicker_EnableAlign(AObj: usize);
  pub fn DateTimePicker_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn DateTimePicker_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn DateTimePicker_Focused(AObj: usize) -> bool;
  pub fn DateTimePicker_HandleAllocated(AObj: usize) -> bool;
  pub fn DateTimePicker_InsertControl(AObj: usize, AControl: usize);
  pub fn DateTimePicker_Invalidate(AObj: usize);
  pub fn DateTimePicker_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn DateTimePicker_RemoveControl(AObj: usize, AControl: usize);
  pub fn DateTimePicker_Realign(AObj: usize);
  pub fn DateTimePicker_Repaint(AObj: usize);
  pub fn DateTimePicker_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn DateTimePicker_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn DateTimePicker_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn DateTimePicker_SetFocus(AObj: usize);
  pub fn DateTimePicker_Update(AObj: usize);
  pub fn DateTimePicker_BringToFront(AObj: usize);
  pub fn DateTimePicker_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn DateTimePicker_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn DateTimePicker_Dragging(AObj: usize) -> bool;
  pub fn DateTimePicker_HasParent(AObj: usize) -> bool;
  pub fn DateTimePicker_Hide(AObj: usize);
  pub fn DateTimePicker_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn DateTimePicker_Refresh(AObj: usize);
  pub fn DateTimePicker_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn DateTimePicker_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn DateTimePicker_SendToBack(AObj: usize);
  pub fn DateTimePicker_Show(AObj: usize);
  pub fn DateTimePicker_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn DateTimePicker_GetTextLen(AObj: usize) -> i32;
  pub fn DateTimePicker_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn DateTimePicker_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn DateTimePicker_GetNamePath(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_Assign(AObj: usize, Source: usize);
  pub fn DateTimePicker_ClassType(AObj: usize) -> TClass;
  pub fn DateTimePicker_ClassName(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_InstanceSize(AObj: usize) -> i32;
  pub fn DateTimePicker_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn DateTimePicker_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn DateTimePicker_GetHashCode(AObj: usize) -> i32;
  pub fn DateTimePicker_ToString(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn DateTimePicker_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn DateTimePicker_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn DateTimePicker_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn DateTimePicker_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn DateTimePicker_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn DateTimePicker_AnchorClient(AObj: usize, ASpace: i32);
  pub fn DateTimePicker_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DateTimePicker_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn DateTimePicker_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn DateTimePicker_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn DateTimePicker_GetArrowShape(AObj: usize) -> TArrowShape;
  pub fn DateTimePicker_SetArrowShape(AObj: usize, AValue: TArrowShape);
  pub fn DateTimePicker_GetAutoAdvance(AObj: usize) -> bool;
  pub fn DateTimePicker_SetAutoAdvance(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetAutoButtonSize(AObj: usize) -> bool;
  pub fn DateTimePicker_SetAutoButtonSize(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetCascade(AObj: usize) -> bool;
  pub fn DateTimePicker_SetCascade(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetCenturyFrom(AObj: usize) -> u16;
  pub fn DateTimePicker_SetCenturyFrom(AObj: usize, AValue: u16);
  pub fn DateTimePicker_GetDateDisplayOrder(AObj: usize) -> TDateDisplayOrder;
  pub fn DateTimePicker_SetDateDisplayOrder(AObj: usize, AValue: TDateDisplayOrder);
  pub fn DateTimePicker_GetDateSeparator(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetDateSeparator(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetLeadingZeros(AObj: usize) -> bool;
  pub fn DateTimePicker_SetLeadingZeros(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetMonthNames(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetMonthNames(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetShowMonthNames(AObj: usize) -> bool;
  pub fn DateTimePicker_SetShowMonthNames(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetNullInputAllowed(AObj: usize) -> bool;
  pub fn DateTimePicker_SetNullInputAllowed(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetOptions(AObj: usize) -> TDateTimePickerOptions;
  pub fn DateTimePicker_SetOptions(AObj: usize, AValue: TDateTimePickerOptions);
  pub fn DateTimePicker_GetShowCheckBox(AObj: usize) -> bool;
  pub fn DateTimePicker_SetShowCheckBox(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetReadOnly(AObj: usize) -> bool;
  pub fn DateTimePicker_SetReadOnly(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetTextForNullDate(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetTextForNullDate(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetTimeDisplay(AObj: usize) -> TTimeDisplay;
  pub fn DateTimePicker_SetTimeDisplay(AObj: usize, AValue: TTimeDisplay);
  pub fn DateTimePicker_GetTimeSeparator(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetTimeSeparator(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetTrailingSeparator(AObj: usize) -> bool;
  pub fn DateTimePicker_SetTrailingSeparator(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetUseDefaultSeparators(AObj: usize) -> bool;
  pub fn DateTimePicker_SetUseDefaultSeparators(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetDroppedDown(AObj: usize) -> bool;
  pub fn DateTimePicker_GetDateTime(AObj: usize) -> u32;
  pub fn DateTimePicker_SetDateTime(AObj: usize, AValue: u32);
  pub fn DateTimePicker_GetAlign(AObj: usize) -> TAlign;
  pub fn DateTimePicker_SetAlign(AObj: usize, AValue: TAlign);
  pub fn DateTimePicker_GetAnchors(AObj: usize) -> TAnchors;
  pub fn DateTimePicker_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn DateTimePicker_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn DateTimePicker_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn DateTimePicker_GetCalAlignment(AObj: usize) -> TDTCalAlignment;
  pub fn DateTimePicker_SetCalAlignment(AObj: usize, AValue: TDTCalAlignment);
  pub fn DateTimePicker_GetConstraints(AObj: usize) -> usize;
  pub fn DateTimePicker_SetConstraints(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetDate(AObj: usize) -> u32;
  pub fn DateTimePicker_SetDate(AObj: usize, AValue: u32);
  pub fn DateTimePicker_GetTime(AObj: usize) -> u32;
  pub fn DateTimePicker_SetTime(AObj: usize, AValue: u32);
  pub fn DateTimePicker_GetChecked(AObj: usize) -> bool;
  pub fn DateTimePicker_SetChecked(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetColor(AObj: usize) -> TColor;
  pub fn DateTimePicker_SetColor(AObj: usize, AValue: TColor);
  pub fn DateTimePicker_GetDateMode(AObj: usize) -> TDTDateMode;
  pub fn DateTimePicker_SetDateMode(AObj: usize, AValue: TDTDateMode);
  pub fn DateTimePicker_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn DateTimePicker_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetEnabled(AObj: usize) -> bool;
  pub fn DateTimePicker_SetEnabled(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetFont(AObj: usize) -> usize;
  pub fn DateTimePicker_SetFont(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetMaxDate(AObj: usize) -> u32;
  pub fn DateTimePicker_SetMaxDate(AObj: usize, AValue: u32);
  pub fn DateTimePicker_GetMinDate(AObj: usize) -> u32;
  pub fn DateTimePicker_SetMinDate(AObj: usize, AValue: u32);
  pub fn DateTimePicker_GetParentColor(AObj: usize) -> bool;
  pub fn DateTimePicker_SetParentColor(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn DateTimePicker_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetParentFont(AObj: usize) -> bool;
  pub fn DateTimePicker_SetParentFont(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetParentShowHint(AObj: usize) -> bool;
  pub fn DateTimePicker_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetPopupMenu(AObj: usize) -> usize;
  pub fn DateTimePicker_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetShowHint(AObj: usize) -> bool;
  pub fn DateTimePicker_SetShowHint(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn DateTimePicker_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn DateTimePicker_GetTabStop(AObj: usize) -> bool;
  pub fn DateTimePicker_SetTabStop(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetVisible(AObj: usize) -> bool;
  pub fn DateTimePicker_SetVisible(AObj: usize, AValue: bool);
  pub fn DateTimePicker_SetOnClick(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnChange(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnDropDown(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnExit(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn DateTimePicker_GetDockClientCount(AObj: usize) -> i32;
  pub fn DateTimePicker_GetDockSite(AObj: usize) -> bool;
  pub fn DateTimePicker_SetDockSite(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetMouseInClient(AObj: usize) -> bool;
  pub fn DateTimePicker_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn DateTimePicker_GetBrush(AObj: usize) -> usize;
  pub fn DateTimePicker_GetControlCount(AObj: usize) -> i32;
  pub fn DateTimePicker_GetHandle(AObj: usize) -> HWND;
  pub fn DateTimePicker_GetParentWindow(AObj: usize) -> HWND;
  pub fn DateTimePicker_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn DateTimePicker_GetShowing(AObj: usize) -> bool;
  pub fn DateTimePicker_GetUseDockManager(AObj: usize) -> bool;
  pub fn DateTimePicker_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn DateTimePicker_GetAction(AObj: usize) -> usize;
  pub fn DateTimePicker_SetAction(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn DateTimePicker_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn DateTimePicker_GetClientHeight(AObj: usize) -> i32;
  pub fn DateTimePicker_SetClientHeight(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn DateTimePicker_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn DateTimePicker_GetClientWidth(AObj: usize) -> i32;
  pub fn DateTimePicker_SetClientWidth(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetControlState(AObj: usize) -> TControlState;
  pub fn DateTimePicker_SetControlState(AObj: usize, AValue: TControlState);
  pub fn DateTimePicker_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn DateTimePicker_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn DateTimePicker_GetFloating(AObj: usize) -> bool;
  pub fn DateTimePicker_GetParent(AObj: usize) -> usize;
  pub fn DateTimePicker_SetParent(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetLeft(AObj: usize) -> i32;
  pub fn DateTimePicker_SetLeft(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetTop(AObj: usize) -> i32;
  pub fn DateTimePicker_SetTop(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetWidth(AObj: usize) -> i32;
  pub fn DateTimePicker_SetWidth(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetHeight(AObj: usize) -> i32;
  pub fn DateTimePicker_SetHeight(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetCursor(AObj: usize) -> TCursor;
  pub fn DateTimePicker_SetCursor(AObj: usize, AValue: TCursor);
  pub fn DateTimePicker_GetHint(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetHint(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetComponentCount(AObj: usize) -> i32;
  pub fn DateTimePicker_GetComponentIndex(AObj: usize) -> i32;
  pub fn DateTimePicker_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn DateTimePicker_GetOwner(AObj: usize) -> usize;
  pub fn DateTimePicker_GetName(AObj: usize) -> *const c_char;
  pub fn DateTimePicker_SetName(AObj: usize, AValue: *const c_char);
  pub fn DateTimePicker_GetTag(AObj: usize) -> isize;
  pub fn DateTimePicker_SetTag(AObj: usize, AValue: isize);
  pub fn DateTimePicker_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn DateTimePicker_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn DateTimePicker_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn DateTimePicker_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn DateTimePicker_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetChildSizing(AObj: usize) -> usize;
  pub fn DateTimePicker_SetChildSizing(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetBorderSpacing(AObj: usize) -> usize;
  pub fn DateTimePicker_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn DateTimePicker_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn DateTimePicker_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn DateTimePicker_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn DateTimePicker_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn DateTimePicker_StaticClassType() -> TClass;

  // ----------------- TMonthCalendar ----------------------
  pub fn MonthCalendar_Create(AOwner: usize) -> usize;
  pub fn MonthCalendar_Free(AObj: usize);
  pub fn MonthCalendar_CanFocus(AObj: usize) -> bool;
  pub fn MonthCalendar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn MonthCalendar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn MonthCalendar_DisableAlign(AObj: usize);
  pub fn MonthCalendar_EnableAlign(AObj: usize);
  pub fn MonthCalendar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn MonthCalendar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn MonthCalendar_Focused(AObj: usize) -> bool;
  pub fn MonthCalendar_HandleAllocated(AObj: usize) -> bool;
  pub fn MonthCalendar_InsertControl(AObj: usize, AControl: usize);
  pub fn MonthCalendar_Invalidate(AObj: usize);
  pub fn MonthCalendar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn MonthCalendar_RemoveControl(AObj: usize, AControl: usize);
  pub fn MonthCalendar_Realign(AObj: usize);
  pub fn MonthCalendar_Repaint(AObj: usize);
  pub fn MonthCalendar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn MonthCalendar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn MonthCalendar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn MonthCalendar_SetFocus(AObj: usize);
  pub fn MonthCalendar_Update(AObj: usize);
  pub fn MonthCalendar_BringToFront(AObj: usize);
  pub fn MonthCalendar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MonthCalendar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MonthCalendar_Dragging(AObj: usize) -> bool;
  pub fn MonthCalendar_HasParent(AObj: usize) -> bool;
  pub fn MonthCalendar_Hide(AObj: usize);
  pub fn MonthCalendar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn MonthCalendar_Refresh(AObj: usize);
  pub fn MonthCalendar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MonthCalendar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MonthCalendar_SendToBack(AObj: usize);
  pub fn MonthCalendar_Show(AObj: usize);
  pub fn MonthCalendar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn MonthCalendar_GetTextLen(AObj: usize) -> i32;
  pub fn MonthCalendar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn MonthCalendar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn MonthCalendar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn MonthCalendar_Assign(AObj: usize, Source: usize);
  pub fn MonthCalendar_ClassType(AObj: usize) -> TClass;
  pub fn MonthCalendar_ClassName(AObj: usize) -> *const c_char;
  pub fn MonthCalendar_InstanceSize(AObj: usize) -> i32;
  pub fn MonthCalendar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MonthCalendar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MonthCalendar_GetHashCode(AObj: usize) -> i32;
  pub fn MonthCalendar_ToString(AObj: usize) -> *const c_char;
  pub fn MonthCalendar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MonthCalendar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MonthCalendar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn MonthCalendar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn MonthCalendar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn MonthCalendar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn MonthCalendar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn MonthCalendar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MonthCalendar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn MonthCalendar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn MonthCalendar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn MonthCalendar_GetDateTime(AObj: usize) -> u32;
  pub fn MonthCalendar_SetDateTime(AObj: usize, AValue: u32);
  pub fn MonthCalendar_GetAlign(AObj: usize) -> TAlign;
  pub fn MonthCalendar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn MonthCalendar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn MonthCalendar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn MonthCalendar_GetAutoSize(AObj: usize) -> bool;
  pub fn MonthCalendar_SetAutoSize(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetBorderWidth(AObj: usize) -> i32;
  pub fn MonthCalendar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn MonthCalendar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn MonthCalendar_GetConstraints(AObj: usize) -> usize;
  pub fn MonthCalendar_SetConstraints(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetDate(AObj: usize) -> u32;
  pub fn MonthCalendar_SetDate(AObj: usize, AValue: u32);
  pub fn MonthCalendar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn MonthCalendar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn MonthCalendar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn MonthCalendar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn MonthCalendar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn MonthCalendar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn MonthCalendar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn MonthCalendar_GetEnabled(AObj: usize) -> bool;
  pub fn MonthCalendar_SetEnabled(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetFont(AObj: usize) -> usize;
  pub fn MonthCalendar_SetFont(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn MonthCalendar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetPopupMenu(AObj: usize) -> usize;
  pub fn MonthCalendar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetShowHint(AObj: usize) -> bool;
  pub fn MonthCalendar_SetShowHint(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn MonthCalendar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn MonthCalendar_GetTabStop(AObj: usize) -> bool;
  pub fn MonthCalendar_SetTabStop(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetVisible(AObj: usize) -> bool;
  pub fn MonthCalendar_SetVisible(AObj: usize, AValue: bool);
  pub fn MonthCalendar_SetOnClick(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnExit(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn MonthCalendar_GetDockClientCount(AObj: usize) -> i32;
  pub fn MonthCalendar_GetDockSite(AObj: usize) -> bool;
  pub fn MonthCalendar_SetDockSite(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetMouseInClient(AObj: usize) -> bool;
  pub fn MonthCalendar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn MonthCalendar_GetBrush(AObj: usize) -> usize;
  pub fn MonthCalendar_GetControlCount(AObj: usize) -> i32;
  pub fn MonthCalendar_GetHandle(AObj: usize) -> HWND;
  pub fn MonthCalendar_GetParentWindow(AObj: usize) -> HWND;
  pub fn MonthCalendar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn MonthCalendar_GetShowing(AObj: usize) -> bool;
  pub fn MonthCalendar_GetUseDockManager(AObj: usize) -> bool;
  pub fn MonthCalendar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn MonthCalendar_GetAction(AObj: usize) -> usize;
  pub fn MonthCalendar_SetAction(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn MonthCalendar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn MonthCalendar_GetClientHeight(AObj: usize) -> i32;
  pub fn MonthCalendar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn MonthCalendar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn MonthCalendar_GetClientWidth(AObj: usize) -> i32;
  pub fn MonthCalendar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetControlState(AObj: usize) -> TControlState;
  pub fn MonthCalendar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn MonthCalendar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn MonthCalendar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn MonthCalendar_GetFloating(AObj: usize) -> bool;
  pub fn MonthCalendar_GetParent(AObj: usize) -> usize;
  pub fn MonthCalendar_SetParent(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetLeft(AObj: usize) -> i32;
  pub fn MonthCalendar_SetLeft(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetTop(AObj: usize) -> i32;
  pub fn MonthCalendar_SetTop(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetWidth(AObj: usize) -> i32;
  pub fn MonthCalendar_SetWidth(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetHeight(AObj: usize) -> i32;
  pub fn MonthCalendar_SetHeight(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetCursor(AObj: usize) -> TCursor;
  pub fn MonthCalendar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn MonthCalendar_GetHint(AObj: usize) -> *const c_char;
  pub fn MonthCalendar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn MonthCalendar_GetComponentCount(AObj: usize) -> i32;
  pub fn MonthCalendar_GetComponentIndex(AObj: usize) -> i32;
  pub fn MonthCalendar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn MonthCalendar_GetOwner(AObj: usize) -> usize;
  pub fn MonthCalendar_GetName(AObj: usize) -> *const c_char;
  pub fn MonthCalendar_SetName(AObj: usize, AValue: *const c_char);
  pub fn MonthCalendar_GetTag(AObj: usize) -> isize;
  pub fn MonthCalendar_SetTag(AObj: usize, AValue: isize);
  pub fn MonthCalendar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn MonthCalendar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn MonthCalendar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn MonthCalendar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn MonthCalendar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetChildSizing(AObj: usize) -> usize;
  pub fn MonthCalendar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn MonthCalendar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn MonthCalendar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn MonthCalendar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn MonthCalendar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn MonthCalendar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn MonthCalendar_StaticClassType() -> TClass;

  // ----------------- TListView ----------------------
  pub fn ListView_Create(AOwner: usize) -> usize;
  pub fn ListView_Free(AObj: usize);
  pub fn ListView_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ListView_AlphaSort(AObj: usize) -> bool;
  pub fn ListView_Clear(AObj: usize);
  pub fn ListView_ClearSelection(AObj: usize);
  pub fn ListView_DeleteSelected(AObj: usize);
  pub fn ListView_IsEditing(AObj: usize) -> bool;
  pub fn ListView_SelectAll(AObj: usize);
  pub fn ListView_CustomSort(AObj: usize, SortProc: PFNLVCOMPARE, lParam: isize) -> bool;
  pub fn ListView_CanFocus(AObj: usize) -> bool;
  pub fn ListView_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ListView_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ListView_DisableAlign(AObj: usize);
  pub fn ListView_EnableAlign(AObj: usize);
  pub fn ListView_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ListView_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ListView_Focused(AObj: usize) -> bool;
  pub fn ListView_HandleAllocated(AObj: usize) -> bool;
  pub fn ListView_InsertControl(AObj: usize, AControl: usize);
  pub fn ListView_Invalidate(AObj: usize);
  pub fn ListView_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ListView_RemoveControl(AObj: usize, AControl: usize);
  pub fn ListView_Realign(AObj: usize);
  pub fn ListView_Repaint(AObj: usize);
  pub fn ListView_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ListView_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ListView_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ListView_SetFocus(AObj: usize);
  pub fn ListView_Update(AObj: usize);
  pub fn ListView_BringToFront(AObj: usize);
  pub fn ListView_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ListView_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ListView_Dragging(AObj: usize) -> bool;
  pub fn ListView_HasParent(AObj: usize) -> bool;
  pub fn ListView_Hide(AObj: usize);
  pub fn ListView_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ListView_Refresh(AObj: usize);
  pub fn ListView_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ListView_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ListView_SendToBack(AObj: usize);
  pub fn ListView_Show(AObj: usize);
  pub fn ListView_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ListView_GetTextLen(AObj: usize) -> i32;
  pub fn ListView_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ListView_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ListView_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListView_Assign(AObj: usize, Source: usize);
  pub fn ListView_ClassType(AObj: usize) -> TClass;
  pub fn ListView_ClassName(AObj: usize) -> *const c_char;
  pub fn ListView_InstanceSize(AObj: usize) -> i32;
  pub fn ListView_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListView_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListView_GetHashCode(AObj: usize) -> i32;
  pub fn ListView_ToString(AObj: usize) -> *const c_char;
  pub fn ListView_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ListView_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ListView_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ListView_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ListView_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ListView_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ListView_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ListView_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ListView_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ListView_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ListView_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ListView_GetAutoSort(AObj: usize) -> bool;
  pub fn ListView_SetAutoSort(AObj: usize, AValue: bool);
  pub fn ListView_GetAutoSortIndicator(AObj: usize) -> bool;
  pub fn ListView_SetAutoSortIndicator(AObj: usize, AValue: bool);
  pub fn ListView_GetAutoWidthLastColumn(AObj: usize) -> bool;
  pub fn ListView_SetAutoWidthLastColumn(AObj: usize, AValue: bool);
  pub fn ListView_GetSmallImagesWidth(AObj: usize) -> i32;
  pub fn ListView_SetSmallImagesWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetSortColumn(AObj: usize) -> i32;
  pub fn ListView_SetSortColumn(AObj: usize, AValue: i32);
  pub fn ListView_GetSortDirection(AObj: usize) -> TSortDirection;
  pub fn ListView_SetSortDirection(AObj: usize, AValue: TSortDirection);
  pub fn ListView_GetLargeImagesWidth(AObj: usize) -> i32;
  pub fn ListView_SetLargeImagesWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetStateImagesWidth(AObj: usize) -> i32;
  pub fn ListView_SetStateImagesWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetToolTips(AObj: usize) -> bool;
  pub fn ListView_SetToolTips(AObj: usize, AValue: bool);
  pub fn ListView_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn ListView_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn ListView_GetAction(AObj: usize) -> usize;
  pub fn ListView_SetAction(AObj: usize, AValue: usize);
  pub fn ListView_GetAlign(AObj: usize) -> TAlign;
  pub fn ListView_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ListView_GetAllocBy(AObj: usize) -> i32;
  pub fn ListView_SetAllocBy(AObj: usize, AValue: i32);
  pub fn ListView_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ListView_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ListView_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ListView_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ListView_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn ListView_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn ListView_GetBorderWidth(AObj: usize) -> i32;
  pub fn ListView_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetCheckboxes(AObj: usize) -> bool;
  pub fn ListView_SetCheckboxes(AObj: usize, AValue: bool);
  pub fn ListView_GetColor(AObj: usize) -> TColor;
  pub fn ListView_SetColor(AObj: usize, AValue: TColor);
  pub fn ListView_GetColumns(AObj: usize) -> usize;
  pub fn ListView_SetColumns(AObj: usize, AValue: usize);
  pub fn ListView_GetColumnClick(AObj: usize) -> bool;
  pub fn ListView_SetColumnClick(AObj: usize, AValue: bool);
  pub fn ListView_GetConstraints(AObj: usize) -> usize;
  pub fn ListView_SetConstraints(AObj: usize, AValue: usize);
  pub fn ListView_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ListView_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ListView_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ListView_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ListView_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ListView_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ListView_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ListView_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ListView_GetEnabled(AObj: usize) -> bool;
  pub fn ListView_SetEnabled(AObj: usize, AValue: bool);
  pub fn ListView_GetFont(AObj: usize) -> usize;
  pub fn ListView_SetFont(AObj: usize, AValue: usize);
  pub fn ListView_GetFlatScrollBars(AObj: usize) -> bool;
  pub fn ListView_SetFlatScrollBars(AObj: usize, AValue: bool);
  pub fn ListView_GetFullDrag(AObj: usize) -> bool;
  pub fn ListView_SetFullDrag(AObj: usize, AValue: bool);
  pub fn ListView_GetGridLines(AObj: usize) -> bool;
  pub fn ListView_SetGridLines(AObj: usize, AValue: bool);
  pub fn ListView_GetHideSelection(AObj: usize) -> bool;
  pub fn ListView_SetHideSelection(AObj: usize, AValue: bool);
  pub fn ListView_GetHotTrack(AObj: usize) -> bool;
  pub fn ListView_SetHotTrack(AObj: usize, AValue: bool);
  pub fn ListView_GetIconOptions(AObj: usize) -> usize;
  pub fn ListView_SetIconOptions(AObj: usize, AValue: usize);
  pub fn ListView_GetItems(AObj: usize) -> usize;
  pub fn ListView_SetItems(AObj: usize, AValue: usize);
  pub fn ListView_GetLargeImages(AObj: usize) -> usize;
  pub fn ListView_SetLargeImages(AObj: usize, AValue: usize);
  pub fn ListView_GetMultiSelect(AObj: usize) -> bool;
  pub fn ListView_SetMultiSelect(AObj: usize, AValue: bool);
  pub fn ListView_GetOwnerData(AObj: usize) -> bool;
  pub fn ListView_SetOwnerData(AObj: usize, AValue: bool);
  pub fn ListView_GetOwnerDraw(AObj: usize) -> bool;
  pub fn ListView_SetOwnerDraw(AObj: usize, AValue: bool);
  pub fn ListView_GetReadOnly(AObj: usize) -> bool;
  pub fn ListView_SetReadOnly(AObj: usize, AValue: bool);
  pub fn ListView_GetRowSelect(AObj: usize) -> bool;
  pub fn ListView_SetRowSelect(AObj: usize, AValue: bool);
  pub fn ListView_GetParentColor(AObj: usize) -> bool;
  pub fn ListView_SetParentColor(AObj: usize, AValue: bool);
  pub fn ListView_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ListView_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ListView_GetParentFont(AObj: usize) -> bool;
  pub fn ListView_SetParentFont(AObj: usize, AValue: bool);
  pub fn ListView_GetParentShowHint(AObj: usize) -> bool;
  pub fn ListView_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ListView_GetPopupMenu(AObj: usize) -> usize;
  pub fn ListView_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ListView_GetShowColumnHeaders(AObj: usize) -> bool;
  pub fn ListView_SetShowColumnHeaders(AObj: usize, AValue: bool);
  pub fn ListView_GetShowHint(AObj: usize) -> bool;
  pub fn ListView_SetShowHint(AObj: usize, AValue: bool);
  pub fn ListView_GetSmallImages(AObj: usize) -> usize;
  pub fn ListView_SetSmallImages(AObj: usize, AValue: usize);
  pub fn ListView_GetSortType(AObj: usize) -> TSortType;
  pub fn ListView_SetSortType(AObj: usize, AValue: TSortType);
  pub fn ListView_GetStateImages(AObj: usize) -> usize;
  pub fn ListView_SetStateImages(AObj: usize, AValue: usize);
  pub fn ListView_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ListView_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ListView_GetTabStop(AObj: usize) -> bool;
  pub fn ListView_SetTabStop(AObj: usize, AValue: bool);
  pub fn ListView_GetViewStyle(AObj: usize) -> TViewStyle;
  pub fn ListView_SetViewStyle(AObj: usize, AValue: TViewStyle);
  pub fn ListView_GetVisible(AObj: usize) -> bool;
  pub fn ListView_SetVisible(AObj: usize, AValue: bool);
  pub fn ListView_SetOnAdvancedCustomDraw(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnAdvancedCustomDrawItem(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnAdvancedCustomDrawSubItem(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnColumnClick(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnCompare(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnCustomDraw(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnCustomDrawItem(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnCustomDrawSubItem(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnData(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDataFind(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDataHint(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDeletion(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnEdited(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnEditing(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnInsert(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnResize(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnSelectItem(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnItemChecked(AObj: usize, AEventId: usize);
  pub fn ListView_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn ListView_GetCanvas(AObj: usize) -> usize;
  pub fn ListView_GetDropTarget(AObj: usize) -> usize;
  pub fn ListView_SetDropTarget(AObj: usize, AValue: usize);
  pub fn ListView_GetItemFocused(AObj: usize) -> usize;
  pub fn ListView_SetItemFocused(AObj: usize, AValue: usize);
  pub fn ListView_GetSelCount(AObj: usize) -> i32;
  pub fn ListView_GetSelected(AObj: usize) -> usize;
  pub fn ListView_SetSelected(AObj: usize, AValue: usize);
  pub fn ListView_GetTopItem(AObj: usize) -> usize;
  pub fn ListView_GetVisibleRowCount(AObj: usize) -> i32;
  pub fn ListView_GetItemIndex(AObj: usize) -> i32;
  pub fn ListView_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ListView_GetDockClientCount(AObj: usize) -> i32;
  pub fn ListView_GetDockSite(AObj: usize) -> bool;
  pub fn ListView_SetDockSite(AObj: usize, AValue: bool);
  pub fn ListView_GetMouseInClient(AObj: usize) -> bool;
  pub fn ListView_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ListView_GetBrush(AObj: usize) -> usize;
  pub fn ListView_GetControlCount(AObj: usize) -> i32;
  pub fn ListView_GetHandle(AObj: usize) -> HWND;
  pub fn ListView_GetParentWindow(AObj: usize) -> HWND;
  pub fn ListView_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ListView_GetShowing(AObj: usize) -> bool;
  pub fn ListView_GetUseDockManager(AObj: usize) -> bool;
  pub fn ListView_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ListView_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ListView_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ListView_GetClientHeight(AObj: usize) -> i32;
  pub fn ListView_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ListView_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ListView_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ListView_GetClientWidth(AObj: usize) -> i32;
  pub fn ListView_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetControlState(AObj: usize) -> TControlState;
  pub fn ListView_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ListView_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ListView_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ListView_GetFloating(AObj: usize) -> bool;
  pub fn ListView_GetParent(AObj: usize) -> usize;
  pub fn ListView_SetParent(AObj: usize, AValue: usize);
  pub fn ListView_GetLeft(AObj: usize) -> i32;
  pub fn ListView_SetLeft(AObj: usize, AValue: i32);
  pub fn ListView_GetTop(AObj: usize) -> i32;
  pub fn ListView_SetTop(AObj: usize, AValue: i32);
  pub fn ListView_GetWidth(AObj: usize) -> i32;
  pub fn ListView_SetWidth(AObj: usize, AValue: i32);
  pub fn ListView_GetHeight(AObj: usize) -> i32;
  pub fn ListView_SetHeight(AObj: usize, AValue: i32);
  pub fn ListView_GetCursor(AObj: usize) -> TCursor;
  pub fn ListView_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ListView_GetHint(AObj: usize) -> *const c_char;
  pub fn ListView_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ListView_GetComponentCount(AObj: usize) -> i32;
  pub fn ListView_GetComponentIndex(AObj: usize) -> i32;
  pub fn ListView_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ListView_GetOwner(AObj: usize) -> usize;
  pub fn ListView_GetName(AObj: usize) -> *const c_char;
  pub fn ListView_SetName(AObj: usize, AValue: *const c_char);
  pub fn ListView_GetTag(AObj: usize) -> isize;
  pub fn ListView_SetTag(AObj: usize, AValue: isize);
  pub fn ListView_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ListView_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ListView_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ListView_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ListView_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ListView_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ListView_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ListView_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ListView_GetChildSizing(AObj: usize) -> usize;
  pub fn ListView_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ListView_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ListView_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ListView_GetColumn(AObj: usize, Index: i32) -> usize;
  pub fn ListView_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ListView_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ListView_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ListView_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ListView_StaticClassType() -> TClass;

  // ----------------- TTreeView ----------------------
  pub fn TreeView_Create(AOwner: usize) -> usize;
  pub fn TreeView_Free(AObj: usize);
  pub fn TreeView_AlphaSort(AObj: usize, ARecurse: bool) -> bool;
  pub fn TreeView_FullCollapse(AObj: usize);
  pub fn TreeView_FullExpand(AObj: usize);
  pub fn TreeView_GetNodeAt(AObj: usize, X: i32, Y: i32) -> usize;
  pub fn TreeView_IsEditing(AObj: usize) -> bool;
  pub fn TreeView_LoadFromFile(AObj: usize, FileName: *const c_char);
  pub fn TreeView_LoadFromStream(AObj: usize, Stream: usize);
  pub fn TreeView_SaveToFile(AObj: usize, FileName: *const c_char);
  pub fn TreeView_SaveToStream(AObj: usize, Stream: usize);
  pub fn TreeView_ClearSelection(AObj: usize, KeepPrimary: bool);
  pub fn TreeView_CustomSort(AObj: usize, SortProc: PFNTVCOMPARE, Data: isize, ARecurse: bool) -> bool;
  pub fn TreeView_CanFocus(AObj: usize) -> bool;
  pub fn TreeView_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn TreeView_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn TreeView_DisableAlign(AObj: usize);
  pub fn TreeView_EnableAlign(AObj: usize);
  pub fn TreeView_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn TreeView_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn TreeView_Focused(AObj: usize) -> bool;
  pub fn TreeView_HandleAllocated(AObj: usize) -> bool;
  pub fn TreeView_InsertControl(AObj: usize, AControl: usize);
  pub fn TreeView_Invalidate(AObj: usize);
  pub fn TreeView_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn TreeView_RemoveControl(AObj: usize, AControl: usize);
  pub fn TreeView_Realign(AObj: usize);
  pub fn TreeView_Repaint(AObj: usize);
  pub fn TreeView_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn TreeView_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn TreeView_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn TreeView_SetFocus(AObj: usize);
  pub fn TreeView_Update(AObj: usize);
  pub fn TreeView_BringToFront(AObj: usize);
  pub fn TreeView_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TreeView_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TreeView_Dragging(AObj: usize) -> bool;
  pub fn TreeView_HasParent(AObj: usize) -> bool;
  pub fn TreeView_Hide(AObj: usize);
  pub fn TreeView_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn TreeView_Refresh(AObj: usize);
  pub fn TreeView_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TreeView_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TreeView_SendToBack(AObj: usize);
  pub fn TreeView_Show(AObj: usize);
  pub fn TreeView_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn TreeView_GetTextLen(AObj: usize) -> i32;
  pub fn TreeView_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn TreeView_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn TreeView_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TreeView_Assign(AObj: usize, Source: usize);
  pub fn TreeView_ClassType(AObj: usize) -> TClass;
  pub fn TreeView_ClassName(AObj: usize) -> *const c_char;
  pub fn TreeView_InstanceSize(AObj: usize) -> i32;
  pub fn TreeView_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TreeView_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TreeView_GetHashCode(AObj: usize) -> i32;
  pub fn TreeView_ToString(AObj: usize) -> *const c_char;
  pub fn TreeView_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TreeView_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TreeView_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn TreeView_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn TreeView_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn TreeView_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn TreeView_AnchorClient(AObj: usize, ASpace: i32);
  pub fn TreeView_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TreeView_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn TreeView_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn TreeView_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn TreeView_GetDefaultItemHeight(AObj: usize) -> i32;
  pub fn TreeView_SetDefaultItemHeight(AObj: usize, AValue: i32);
  pub fn TreeView_GetExpandSignColor(AObj: usize) -> TColor;
  pub fn TreeView_SetExpandSignColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetExpandSignSize(AObj: usize) -> i32;
  pub fn TreeView_SetExpandSignSize(AObj: usize, AValue: i32);
  pub fn TreeView_GetExpandSignType(AObj: usize) -> TTreeViewExpandSignType;
  pub fn TreeView_SetExpandSignType(AObj: usize, AValue: TTreeViewExpandSignType);
  pub fn TreeView_GetHotTrackColor(AObj: usize) -> TColor;
  pub fn TreeView_SetHotTrackColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetImagesWidth(AObj: usize) -> i32;
  pub fn TreeView_SetImagesWidth(AObj: usize, AValue: i32);
  pub fn TreeView_GetOptions(AObj: usize) -> TTreeViewOptions;
  pub fn TreeView_SetOptions(AObj: usize, AValue: TTreeViewOptions);
  pub fn TreeView_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn TreeView_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn TreeView_GetSelectionColor(AObj: usize) -> TColor;
  pub fn TreeView_SetSelectionColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetSelectionFontColor(AObj: usize) -> TColor;
  pub fn TreeView_SetSelectionFontColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetSelectionFontColorUsed(AObj: usize) -> bool;
  pub fn TreeView_SetSelectionFontColorUsed(AObj: usize, AValue: bool);
  pub fn TreeView_GetSeparatorColor(AObj: usize) -> TColor;
  pub fn TreeView_SetSeparatorColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetStateImagesWidth(AObj: usize) -> i32;
  pub fn TreeView_SetStateImagesWidth(AObj: usize, AValue: i32);
  pub fn TreeView_GetToolTips(AObj: usize) -> bool;
  pub fn TreeView_SetToolTips(AObj: usize, AValue: bool);
  pub fn TreeView_GetTreeLineColor(AObj: usize) -> TColor;
  pub fn TreeView_SetTreeLineColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetTreeLinePenStyle(AObj: usize) -> TPenStyle;
  pub fn TreeView_SetTreeLinePenStyle(AObj: usize, AValue: TPenStyle);
  pub fn TreeView_GetAlign(AObj: usize) -> TAlign;
  pub fn TreeView_SetAlign(AObj: usize, AValue: TAlign);
  pub fn TreeView_GetAnchors(AObj: usize) -> TAnchors;
  pub fn TreeView_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn TreeView_GetAutoExpand(AObj: usize) -> bool;
  pub fn TreeView_SetAutoExpand(AObj: usize, AValue: bool);
  pub fn TreeView_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn TreeView_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn TreeView_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn TreeView_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn TreeView_GetBorderWidth(AObj: usize) -> i32;
  pub fn TreeView_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn TreeView_GetColor(AObj: usize) -> TColor;
  pub fn TreeView_SetColor(AObj: usize, AValue: TColor);
  pub fn TreeView_GetConstraints(AObj: usize) -> usize;
  pub fn TreeView_SetConstraints(AObj: usize, AValue: usize);
  pub fn TreeView_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn TreeView_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TreeView_GetDragKind(AObj: usize) -> TDragKind;
  pub fn TreeView_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn TreeView_GetDragCursor(AObj: usize) -> TCursor;
  pub fn TreeView_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn TreeView_GetDragMode(AObj: usize) -> TDragMode;
  pub fn TreeView_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn TreeView_GetEnabled(AObj: usize) -> bool;
  pub fn TreeView_SetEnabled(AObj: usize, AValue: bool);
  pub fn TreeView_GetFont(AObj: usize) -> usize;
  pub fn TreeView_SetFont(AObj: usize, AValue: usize);
  pub fn TreeView_GetHideSelection(AObj: usize) -> bool;
  pub fn TreeView_SetHideSelection(AObj: usize, AValue: bool);
  pub fn TreeView_GetHotTrack(AObj: usize) -> bool;
  pub fn TreeView_SetHotTrack(AObj: usize, AValue: bool);
  pub fn TreeView_GetImages(AObj: usize) -> usize;
  pub fn TreeView_SetImages(AObj: usize, AValue: usize);
  pub fn TreeView_GetIndent(AObj: usize) -> i32;
  pub fn TreeView_SetIndent(AObj: usize, AValue: i32);
  pub fn TreeView_GetMultiSelect(AObj: usize) -> bool;
  pub fn TreeView_SetMultiSelect(AObj: usize, AValue: bool);
  pub fn TreeView_GetMultiSelectStyle(AObj: usize) -> TMultiSelectStyle;
  pub fn TreeView_SetMultiSelectStyle(AObj: usize, AValue: TMultiSelectStyle);
  pub fn TreeView_GetParentColor(AObj: usize) -> bool;
  pub fn TreeView_SetParentColor(AObj: usize, AValue: bool);
  pub fn TreeView_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn TreeView_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TreeView_GetParentFont(AObj: usize) -> bool;
  pub fn TreeView_SetParentFont(AObj: usize, AValue: bool);
  pub fn TreeView_GetParentShowHint(AObj: usize) -> bool;
  pub fn TreeView_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn TreeView_GetPopupMenu(AObj: usize) -> usize;
  pub fn TreeView_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn TreeView_GetReadOnly(AObj: usize) -> bool;
  pub fn TreeView_SetReadOnly(AObj: usize, AValue: bool);
  pub fn TreeView_GetRightClickSelect(AObj: usize) -> bool;
  pub fn TreeView_SetRightClickSelect(AObj: usize, AValue: bool);
  pub fn TreeView_GetRowSelect(AObj: usize) -> bool;
  pub fn TreeView_SetRowSelect(AObj: usize, AValue: bool);
  pub fn TreeView_GetShowButtons(AObj: usize) -> bool;
  pub fn TreeView_SetShowButtons(AObj: usize, AValue: bool);
  pub fn TreeView_GetShowHint(AObj: usize) -> bool;
  pub fn TreeView_SetShowHint(AObj: usize, AValue: bool);
  pub fn TreeView_GetShowLines(AObj: usize) -> bool;
  pub fn TreeView_SetShowLines(AObj: usize, AValue: bool);
  pub fn TreeView_GetShowRoot(AObj: usize) -> bool;
  pub fn TreeView_SetShowRoot(AObj: usize, AValue: bool);
  pub fn TreeView_GetSortType(AObj: usize) -> TSortType;
  pub fn TreeView_SetSortType(AObj: usize, AValue: TSortType);
  pub fn TreeView_GetStateImages(AObj: usize) -> usize;
  pub fn TreeView_SetStateImages(AObj: usize, AValue: usize);
  pub fn TreeView_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn TreeView_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn TreeView_GetTabStop(AObj: usize) -> bool;
  pub fn TreeView_SetTabStop(AObj: usize, AValue: bool);
  pub fn TreeView_GetVisible(AObj: usize) -> bool;
  pub fn TreeView_SetVisible(AObj: usize, AValue: bool);
  pub fn TreeView_SetOnAddition(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnAdvancedCustomDraw(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnAdvancedCustomDrawItem(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnChange(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnChanging(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnClick(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnCollapsed(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnCollapsing(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnCompare(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnCustomDraw(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnCustomDrawItem(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnDeletion(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnEdited(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnEditing(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnExit(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnExpanding(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnExpanded(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnGetSelectedIndex(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn TreeView_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn TreeView_GetItems(AObj: usize) -> usize;
  pub fn TreeView_SetItems(AObj: usize, AValue: usize);
  pub fn TreeView_GetCanvas(AObj: usize) -> usize;
  pub fn TreeView_GetDropTarget(AObj: usize) -> usize;
  pub fn TreeView_SetDropTarget(AObj: usize, AValue: usize);
  pub fn TreeView_GetSelected(AObj: usize) -> usize;
  pub fn TreeView_SetSelected(AObj: usize, AValue: usize);
  pub fn TreeView_GetTopItem(AObj: usize) -> usize;
  pub fn TreeView_SetTopItem(AObj: usize, AValue: usize);
  pub fn TreeView_GetSelectionCount(AObj: usize) -> u32;
  pub fn TreeView_GetDockClientCount(AObj: usize) -> i32;
  pub fn TreeView_GetDockSite(AObj: usize) -> bool;
  pub fn TreeView_SetDockSite(AObj: usize, AValue: bool);
  pub fn TreeView_GetMouseInClient(AObj: usize) -> bool;
  pub fn TreeView_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn TreeView_GetBrush(AObj: usize) -> usize;
  pub fn TreeView_GetControlCount(AObj: usize) -> i32;
  pub fn TreeView_GetHandle(AObj: usize) -> HWND;
  pub fn TreeView_GetParentWindow(AObj: usize) -> HWND;
  pub fn TreeView_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn TreeView_GetShowing(AObj: usize) -> bool;
  pub fn TreeView_GetUseDockManager(AObj: usize) -> bool;
  pub fn TreeView_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn TreeView_GetAction(AObj: usize) -> usize;
  pub fn TreeView_SetAction(AObj: usize, AValue: usize);
  pub fn TreeView_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn TreeView_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn TreeView_GetClientHeight(AObj: usize) -> i32;
  pub fn TreeView_SetClientHeight(AObj: usize, AValue: i32);
  pub fn TreeView_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn TreeView_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn TreeView_GetClientWidth(AObj: usize) -> i32;
  pub fn TreeView_SetClientWidth(AObj: usize, AValue: i32);
  pub fn TreeView_GetControlState(AObj: usize) -> TControlState;
  pub fn TreeView_SetControlState(AObj: usize, AValue: TControlState);
  pub fn TreeView_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn TreeView_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn TreeView_GetFloating(AObj: usize) -> bool;
  pub fn TreeView_GetParent(AObj: usize) -> usize;
  pub fn TreeView_SetParent(AObj: usize, AValue: usize);
  pub fn TreeView_GetLeft(AObj: usize) -> i32;
  pub fn TreeView_SetLeft(AObj: usize, AValue: i32);
  pub fn TreeView_GetTop(AObj: usize) -> i32;
  pub fn TreeView_SetTop(AObj: usize, AValue: i32);
  pub fn TreeView_GetWidth(AObj: usize) -> i32;
  pub fn TreeView_SetWidth(AObj: usize, AValue: i32);
  pub fn TreeView_GetHeight(AObj: usize) -> i32;
  pub fn TreeView_SetHeight(AObj: usize, AValue: i32);
  pub fn TreeView_GetCursor(AObj: usize) -> TCursor;
  pub fn TreeView_SetCursor(AObj: usize, AValue: TCursor);
  pub fn TreeView_GetHint(AObj: usize) -> *const c_char;
  pub fn TreeView_SetHint(AObj: usize, AValue: *const c_char);
  pub fn TreeView_GetComponentCount(AObj: usize) -> i32;
  pub fn TreeView_GetComponentIndex(AObj: usize) -> i32;
  pub fn TreeView_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn TreeView_GetOwner(AObj: usize) -> usize;
  pub fn TreeView_GetName(AObj: usize) -> *const c_char;
  pub fn TreeView_SetName(AObj: usize, AValue: *const c_char);
  pub fn TreeView_GetTag(AObj: usize) -> isize;
  pub fn TreeView_SetTag(AObj: usize, AValue: isize);
  pub fn TreeView_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn TreeView_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn TreeView_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn TreeView_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn TreeView_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn TreeView_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn TreeView_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn TreeView_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn TreeView_GetChildSizing(AObj: usize) -> usize;
  pub fn TreeView_SetChildSizing(AObj: usize, AValue: usize);
  pub fn TreeView_GetBorderSpacing(AObj: usize) -> usize;
  pub fn TreeView_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn TreeView_GetSelections(AObj: usize, Index: i32) -> usize;
  pub fn TreeView_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn TreeView_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn TreeView_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn TreeView_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn TreeView_StaticClassType() -> TClass;

  // ----------------- TStatusBar ----------------------
  pub fn StatusBar_Create(AOwner: usize) -> usize;
  pub fn StatusBar_Free(AObj: usize);
  pub fn StatusBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn StatusBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn StatusBar_CanFocus(AObj: usize) -> bool;
  pub fn StatusBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn StatusBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn StatusBar_DisableAlign(AObj: usize);
  pub fn StatusBar_EnableAlign(AObj: usize);
  pub fn StatusBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn StatusBar_Focused(AObj: usize) -> bool;
  pub fn StatusBar_HandleAllocated(AObj: usize) -> bool;
  pub fn StatusBar_InsertControl(AObj: usize, AControl: usize);
  pub fn StatusBar_Invalidate(AObj: usize);
  pub fn StatusBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn StatusBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn StatusBar_Realign(AObj: usize);
  pub fn StatusBar_Repaint(AObj: usize);
  pub fn StatusBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn StatusBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn StatusBar_SetFocus(AObj: usize);
  pub fn StatusBar_Update(AObj: usize);
  pub fn StatusBar_BringToFront(AObj: usize);
  pub fn StatusBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StatusBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StatusBar_Dragging(AObj: usize) -> bool;
  pub fn StatusBar_HasParent(AObj: usize) -> bool;
  pub fn StatusBar_Hide(AObj: usize);
  pub fn StatusBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn StatusBar_Refresh(AObj: usize);
  pub fn StatusBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StatusBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StatusBar_SendToBack(AObj: usize);
  pub fn StatusBar_Show(AObj: usize);
  pub fn StatusBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn StatusBar_GetTextLen(AObj: usize) -> i32;
  pub fn StatusBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn StatusBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn StatusBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StatusBar_Assign(AObj: usize, Source: usize);
  pub fn StatusBar_ClassType(AObj: usize) -> TClass;
  pub fn StatusBar_ClassName(AObj: usize) -> *const c_char;
  pub fn StatusBar_InstanceSize(AObj: usize) -> i32;
  pub fn StatusBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StatusBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn StatusBar_GetHashCode(AObj: usize) -> i32;
  pub fn StatusBar_ToString(AObj: usize) -> *const c_char;
  pub fn StatusBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StatusBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StatusBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn StatusBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn StatusBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn StatusBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn StatusBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn StatusBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StatusBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn StatusBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn StatusBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn StatusBar_GetAction(AObj: usize) -> usize;
  pub fn StatusBar_SetAction(AObj: usize, AValue: usize);
  pub fn StatusBar_GetAutoHint(AObj: usize) -> bool;
  pub fn StatusBar_SetAutoHint(AObj: usize, AValue: bool);
  pub fn StatusBar_GetAlign(AObj: usize) -> TAlign;
  pub fn StatusBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn StatusBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn StatusBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn StatusBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn StatusBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn StatusBar_GetBorderWidth(AObj: usize) -> i32;
  pub fn StatusBar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn StatusBar_GetColor(AObj: usize) -> TColor;
  pub fn StatusBar_SetColor(AObj: usize, AValue: TColor);
  pub fn StatusBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn StatusBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StatusBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn StatusBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn StatusBar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn StatusBar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn StatusBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn StatusBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn StatusBar_GetEnabled(AObj: usize) -> bool;
  pub fn StatusBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn StatusBar_GetFont(AObj: usize) -> usize;
  pub fn StatusBar_SetFont(AObj: usize, AValue: usize);
  pub fn StatusBar_GetConstraints(AObj: usize) -> usize;
  pub fn StatusBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn StatusBar_GetPanels(AObj: usize) -> usize;
  pub fn StatusBar_SetPanels(AObj: usize, AValue: usize);
  pub fn StatusBar_GetParentColor(AObj: usize) -> bool;
  pub fn StatusBar_SetParentColor(AObj: usize, AValue: bool);
  pub fn StatusBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn StatusBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StatusBar_GetParentFont(AObj: usize) -> bool;
  pub fn StatusBar_SetParentFont(AObj: usize, AValue: bool);
  pub fn StatusBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn StatusBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn StatusBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn StatusBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn StatusBar_GetShowHint(AObj: usize) -> bool;
  pub fn StatusBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn StatusBar_GetSimplePanel(AObj: usize) -> bool;
  pub fn StatusBar_SetSimplePanel(AObj: usize, AValue: bool);
  pub fn StatusBar_GetSimpleText(AObj: usize) -> *const c_char;
  pub fn StatusBar_SetSimpleText(AObj: usize, AValue: *const c_char);
  pub fn StatusBar_GetSizeGrip(AObj: usize) -> bool;
  pub fn StatusBar_SetSizeGrip(AObj: usize, AValue: bool);
  pub fn StatusBar_GetUseSystemFont(AObj: usize) -> bool;
  pub fn StatusBar_SetUseSystemFont(AObj: usize, AValue: bool);
  pub fn StatusBar_GetVisible(AObj: usize) -> bool;
  pub fn StatusBar_SetVisible(AObj: usize, AValue: bool);
  pub fn StatusBar_SetOnClick(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnHint(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnResize(AObj: usize, AEventId: usize);
  pub fn StatusBar_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn StatusBar_GetCanvas(AObj: usize) -> usize;
  pub fn StatusBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn StatusBar_GetDockSite(AObj: usize) -> bool;
  pub fn StatusBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn StatusBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn StatusBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn StatusBar_GetBrush(AObj: usize) -> usize;
  pub fn StatusBar_GetControlCount(AObj: usize) -> i32;
  pub fn StatusBar_GetHandle(AObj: usize) -> HWND;
  pub fn StatusBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn StatusBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn StatusBar_GetShowing(AObj: usize) -> bool;
  pub fn StatusBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn StatusBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn StatusBar_GetTabStop(AObj: usize) -> bool;
  pub fn StatusBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn StatusBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn StatusBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn StatusBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn StatusBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn StatusBar_GetClientHeight(AObj: usize) -> i32;
  pub fn StatusBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn StatusBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn StatusBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn StatusBar_GetClientWidth(AObj: usize) -> i32;
  pub fn StatusBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn StatusBar_GetControlState(AObj: usize) -> TControlState;
  pub fn StatusBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn StatusBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn StatusBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn StatusBar_GetFloating(AObj: usize) -> bool;
  pub fn StatusBar_GetParent(AObj: usize) -> usize;
  pub fn StatusBar_SetParent(AObj: usize, AValue: usize);
  pub fn StatusBar_GetLeft(AObj: usize) -> i32;
  pub fn StatusBar_SetLeft(AObj: usize, AValue: i32);
  pub fn StatusBar_GetTop(AObj: usize) -> i32;
  pub fn StatusBar_SetTop(AObj: usize, AValue: i32);
  pub fn StatusBar_GetWidth(AObj: usize) -> i32;
  pub fn StatusBar_SetWidth(AObj: usize, AValue: i32);
  pub fn StatusBar_GetHeight(AObj: usize) -> i32;
  pub fn StatusBar_SetHeight(AObj: usize, AValue: i32);
  pub fn StatusBar_GetCursor(AObj: usize) -> TCursor;
  pub fn StatusBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn StatusBar_GetHint(AObj: usize) -> *const c_char;
  pub fn StatusBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn StatusBar_GetComponentCount(AObj: usize) -> i32;
  pub fn StatusBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn StatusBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn StatusBar_GetOwner(AObj: usize) -> usize;
  pub fn StatusBar_GetName(AObj: usize) -> *const c_char;
  pub fn StatusBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn StatusBar_GetTag(AObj: usize) -> isize;
  pub fn StatusBar_SetTag(AObj: usize, AValue: isize);
  pub fn StatusBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn StatusBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn StatusBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn StatusBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn StatusBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn StatusBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn StatusBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn StatusBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn StatusBar_GetChildSizing(AObj: usize) -> usize;
  pub fn StatusBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn StatusBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn StatusBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn StatusBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn StatusBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn StatusBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn StatusBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn StatusBar_StaticClassType() -> TClass;

  // ----------------- TToolBar ----------------------
  pub fn ToolBar_Create(AOwner: usize) -> usize;
  pub fn ToolBar_Free(AObj: usize);
  pub fn ToolBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ToolBar_CanFocus(AObj: usize) -> bool;
  pub fn ToolBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ToolBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ToolBar_DisableAlign(AObj: usize);
  pub fn ToolBar_EnableAlign(AObj: usize);
  pub fn ToolBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ToolBar_Focused(AObj: usize) -> bool;
  pub fn ToolBar_HandleAllocated(AObj: usize) -> bool;
  pub fn ToolBar_InsertControl(AObj: usize, AControl: usize);
  pub fn ToolBar_Invalidate(AObj: usize);
  pub fn ToolBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ToolBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn ToolBar_Realign(AObj: usize);
  pub fn ToolBar_Repaint(AObj: usize);
  pub fn ToolBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ToolBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ToolBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ToolBar_SetFocus(AObj: usize);
  pub fn ToolBar_Update(AObj: usize);
  pub fn ToolBar_BringToFront(AObj: usize);
  pub fn ToolBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToolBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToolBar_Dragging(AObj: usize) -> bool;
  pub fn ToolBar_HasParent(AObj: usize) -> bool;
  pub fn ToolBar_Hide(AObj: usize);
  pub fn ToolBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ToolBar_Refresh(AObj: usize);
  pub fn ToolBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToolBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToolBar_SendToBack(AObj: usize);
  pub fn ToolBar_Show(AObj: usize);
  pub fn ToolBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ToolBar_GetTextLen(AObj: usize) -> i32;
  pub fn ToolBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ToolBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ToolBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ToolBar_Assign(AObj: usize, Source: usize);
  pub fn ToolBar_ClassType(AObj: usize) -> TClass;
  pub fn ToolBar_ClassName(AObj: usize) -> *const c_char;
  pub fn ToolBar_InstanceSize(AObj: usize) -> i32;
  pub fn ToolBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ToolBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ToolBar_GetHashCode(AObj: usize) -> i32;
  pub fn ToolBar_ToString(AObj: usize) -> *const c_char;
  pub fn ToolBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToolBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToolBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToolBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToolBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ToolBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ToolBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ToolBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ToolBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ToolBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ToolBar_GetButtonCount(AObj: usize) -> i32;
  pub fn ToolBar_GetCanvas(AObj: usize) -> usize;
  pub fn ToolBar_GetRowCount(AObj: usize) -> i32;
  pub fn ToolBar_GetAlign(AObj: usize) -> TAlign;
  pub fn ToolBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ToolBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ToolBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ToolBar_GetAutoSize(AObj: usize) -> bool;
  pub fn ToolBar_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ToolBar_GetBorderWidth(AObj: usize) -> i32;
  pub fn ToolBar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn ToolBar_GetButtonHeight(AObj: usize) -> i32;
  pub fn ToolBar_SetButtonHeight(AObj: usize, AValue: i32);
  pub fn ToolBar_GetButtonWidth(AObj: usize) -> i32;
  pub fn ToolBar_SetButtonWidth(AObj: usize, AValue: i32);
  pub fn ToolBar_GetCaption(AObj: usize) -> *const c_char;
  pub fn ToolBar_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ToolBar_GetColor(AObj: usize) -> TColor;
  pub fn ToolBar_SetColor(AObj: usize, AValue: TColor);
  pub fn ToolBar_GetConstraints(AObj: usize) -> usize;
  pub fn ToolBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn ToolBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ToolBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ToolBar_GetDockSite(AObj: usize) -> bool;
  pub fn ToolBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn ToolBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ToolBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ToolBar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ToolBar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ToolBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ToolBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ToolBar_GetEdgeBorders(AObj: usize) -> TEdgeBorders;
  pub fn ToolBar_SetEdgeBorders(AObj: usize, AValue: TEdgeBorders);
  pub fn ToolBar_GetEdgeInner(AObj: usize) -> TEdgeStyle;
  pub fn ToolBar_SetEdgeInner(AObj: usize, AValue: TEdgeStyle);
  pub fn ToolBar_GetEdgeOuter(AObj: usize) -> TEdgeStyle;
  pub fn ToolBar_SetEdgeOuter(AObj: usize, AValue: TEdgeStyle);
  pub fn ToolBar_GetEnabled(AObj: usize) -> bool;
  pub fn ToolBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn ToolBar_GetFlat(AObj: usize) -> bool;
  pub fn ToolBar_SetFlat(AObj: usize, AValue: bool);
  pub fn ToolBar_GetFont(AObj: usize) -> usize;
  pub fn ToolBar_SetFont(AObj: usize, AValue: usize);
  pub fn ToolBar_GetHeight(AObj: usize) -> i32;
  pub fn ToolBar_SetHeight(AObj: usize, AValue: i32);
  pub fn ToolBar_GetHotImages(AObj: usize) -> usize;
  pub fn ToolBar_SetHotImages(AObj: usize, AValue: usize);
  pub fn ToolBar_GetImages(AObj: usize) -> usize;
  pub fn ToolBar_SetImages(AObj: usize, AValue: usize);
  pub fn ToolBar_GetIndent(AObj: usize) -> i32;
  pub fn ToolBar_SetIndent(AObj: usize, AValue: i32);
  pub fn ToolBar_GetList(AObj: usize) -> bool;
  pub fn ToolBar_SetList(AObj: usize, AValue: bool);
  pub fn ToolBar_GetParentColor(AObj: usize) -> bool;
  pub fn ToolBar_SetParentColor(AObj: usize, AValue: bool);
  pub fn ToolBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ToolBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ToolBar_GetParentFont(AObj: usize) -> bool;
  pub fn ToolBar_SetParentFont(AObj: usize, AValue: bool);
  pub fn ToolBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn ToolBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ToolBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn ToolBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ToolBar_GetShowCaptions(AObj: usize) -> bool;
  pub fn ToolBar_SetShowCaptions(AObj: usize, AValue: bool);
  pub fn ToolBar_GetShowHint(AObj: usize) -> bool;
  pub fn ToolBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn ToolBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ToolBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ToolBar_GetTabStop(AObj: usize) -> bool;
  pub fn ToolBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn ToolBar_GetTransparent(AObj: usize) -> bool;
  pub fn ToolBar_SetTransparent(AObj: usize, AValue: bool);
  pub fn ToolBar_GetVisible(AObj: usize) -> bool;
  pub fn ToolBar_SetVisible(AObj: usize, AValue: bool);
  pub fn ToolBar_GetWrapable(AObj: usize) -> bool;
  pub fn ToolBar_SetWrapable(AObj: usize, AValue: bool);
  pub fn ToolBar_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnResize(AObj: usize, AEventId: usize);
  pub fn ToolBar_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn ToolBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn ToolBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn ToolBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ToolBar_GetBrush(AObj: usize) -> usize;
  pub fn ToolBar_GetControlCount(AObj: usize) -> i32;
  pub fn ToolBar_GetHandle(AObj: usize) -> HWND;
  pub fn ToolBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn ToolBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ToolBar_GetShowing(AObj: usize) -> bool;
  pub fn ToolBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn ToolBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ToolBar_GetAction(AObj: usize) -> usize;
  pub fn ToolBar_SetAction(AObj: usize, AValue: usize);
  pub fn ToolBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ToolBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ToolBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ToolBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ToolBar_GetClientHeight(AObj: usize) -> i32;
  pub fn ToolBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ToolBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ToolBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ToolBar_GetClientWidth(AObj: usize) -> i32;
  pub fn ToolBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ToolBar_GetControlState(AObj: usize) -> TControlState;
  pub fn ToolBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ToolBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ToolBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ToolBar_GetFloating(AObj: usize) -> bool;
  pub fn ToolBar_GetParent(AObj: usize) -> usize;
  pub fn ToolBar_SetParent(AObj: usize, AValue: usize);
  pub fn ToolBar_GetLeft(AObj: usize) -> i32;
  pub fn ToolBar_SetLeft(AObj: usize, AValue: i32);
  pub fn ToolBar_GetTop(AObj: usize) -> i32;
  pub fn ToolBar_SetTop(AObj: usize, AValue: i32);
  pub fn ToolBar_GetWidth(AObj: usize) -> i32;
  pub fn ToolBar_SetWidth(AObj: usize, AValue: i32);
  pub fn ToolBar_GetCursor(AObj: usize) -> TCursor;
  pub fn ToolBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ToolBar_GetHint(AObj: usize) -> *const c_char;
  pub fn ToolBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ToolBar_GetComponentCount(AObj: usize) -> i32;
  pub fn ToolBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn ToolBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ToolBar_GetOwner(AObj: usize) -> usize;
  pub fn ToolBar_GetName(AObj: usize) -> *const c_char;
  pub fn ToolBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn ToolBar_GetTag(AObj: usize) -> isize;
  pub fn ToolBar_SetTag(AObj: usize, AValue: isize);
  pub fn ToolBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ToolBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ToolBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ToolBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ToolBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ToolBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ToolBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ToolBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ToolBar_GetChildSizing(AObj: usize) -> usize;
  pub fn ToolBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ToolBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ToolBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ToolBar_GetButtons(AObj: usize, Index: i32) -> usize;
  pub fn ToolBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ToolBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ToolBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ToolBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ToolBar_StaticClassType() -> TClass;

  // ----------------- TBitBtn ----------------------
  pub fn BitBtn_Create(AOwner: usize) -> usize;
  pub fn BitBtn_Free(AObj: usize);
  pub fn BitBtn_Click(AObj: usize);
  pub fn BitBtn_CanFocus(AObj: usize) -> bool;
  pub fn BitBtn_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn BitBtn_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn BitBtn_DisableAlign(AObj: usize);
  pub fn BitBtn_EnableAlign(AObj: usize);
  pub fn BitBtn_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn BitBtn_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn BitBtn_Focused(AObj: usize) -> bool;
  pub fn BitBtn_HandleAllocated(AObj: usize) -> bool;
  pub fn BitBtn_InsertControl(AObj: usize, AControl: usize);
  pub fn BitBtn_Invalidate(AObj: usize);
  pub fn BitBtn_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn BitBtn_RemoveControl(AObj: usize, AControl: usize);
  pub fn BitBtn_Realign(AObj: usize);
  pub fn BitBtn_Repaint(AObj: usize);
  pub fn BitBtn_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn BitBtn_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn BitBtn_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn BitBtn_SetFocus(AObj: usize);
  pub fn BitBtn_Update(AObj: usize);
  pub fn BitBtn_BringToFront(AObj: usize);
  pub fn BitBtn_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn BitBtn_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn BitBtn_Dragging(AObj: usize) -> bool;
  pub fn BitBtn_HasParent(AObj: usize) -> bool;
  pub fn BitBtn_Hide(AObj: usize);
  pub fn BitBtn_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn BitBtn_Refresh(AObj: usize);
  pub fn BitBtn_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn BitBtn_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn BitBtn_SendToBack(AObj: usize);
  pub fn BitBtn_Show(AObj: usize);
  pub fn BitBtn_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn BitBtn_GetTextLen(AObj: usize) -> i32;
  pub fn BitBtn_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn BitBtn_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn BitBtn_GetNamePath(AObj: usize) -> *const c_char;
  pub fn BitBtn_Assign(AObj: usize, Source: usize);
  pub fn BitBtn_ClassType(AObj: usize) -> TClass;
  pub fn BitBtn_ClassName(AObj: usize) -> *const c_char;
  pub fn BitBtn_InstanceSize(AObj: usize) -> i32;
  pub fn BitBtn_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn BitBtn_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn BitBtn_GetHashCode(AObj: usize) -> i32;
  pub fn BitBtn_ToString(AObj: usize) -> *const c_char;
  pub fn BitBtn_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn BitBtn_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn BitBtn_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn BitBtn_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn BitBtn_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn BitBtn_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn BitBtn_AnchorClient(AObj: usize, ASpace: i32);
  pub fn BitBtn_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BitBtn_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn BitBtn_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn BitBtn_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn BitBtn_GetDefaultCaption(AObj: usize) -> bool;
  pub fn BitBtn_SetDefaultCaption(AObj: usize, AValue: bool);
  pub fn BitBtn_GetGlyphShowMode(AObj: usize) -> TGlyphShowMode;
  pub fn BitBtn_SetGlyphShowMode(AObj: usize, AValue: TGlyphShowMode);
  pub fn BitBtn_GetImageWidth(AObj: usize) -> i32;
  pub fn BitBtn_SetImageWidth(AObj: usize, AValue: i32);
  pub fn BitBtn_GetAction(AObj: usize) -> usize;
  pub fn BitBtn_SetAction(AObj: usize, AValue: usize);
  pub fn BitBtn_GetAlign(AObj: usize) -> TAlign;
  pub fn BitBtn_SetAlign(AObj: usize, AValue: TAlign);
  pub fn BitBtn_GetAnchors(AObj: usize) -> TAnchors;
  pub fn BitBtn_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn BitBtn_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn BitBtn_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn BitBtn_GetCancel(AObj: usize) -> bool;
  pub fn BitBtn_SetCancel(AObj: usize, AValue: bool);
  pub fn BitBtn_GetCaption(AObj: usize) -> *const c_char;
  pub fn BitBtn_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn BitBtn_GetConstraints(AObj: usize) -> usize;
  pub fn BitBtn_SetConstraints(AObj: usize, AValue: usize);
  pub fn BitBtn_GetDefault(AObj: usize) -> bool;
  pub fn BitBtn_SetDefault(AObj: usize, AValue: bool);
  pub fn BitBtn_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn BitBtn_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn BitBtn_GetEnabled(AObj: usize) -> bool;
  pub fn BitBtn_SetEnabled(AObj: usize, AValue: bool);
  pub fn BitBtn_GetFont(AObj: usize) -> usize;
  pub fn BitBtn_SetFont(AObj: usize, AValue: usize);
  pub fn BitBtn_GetGlyph(AObj: usize) -> usize;
  pub fn BitBtn_SetGlyph(AObj: usize, AValue: usize);
  pub fn BitBtn_GetLayout(AObj: usize) -> TButtonLayout;
  pub fn BitBtn_SetLayout(AObj: usize, AValue: TButtonLayout);
  pub fn BitBtn_GetModalResult(AObj: usize) -> TModalResult;
  pub fn BitBtn_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn BitBtn_GetNumGlyphs(AObj: usize) -> TNumGlyphs;
  pub fn BitBtn_SetNumGlyphs(AObj: usize, AValue: TNumGlyphs);
  pub fn BitBtn_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn BitBtn_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn BitBtn_GetParentFont(AObj: usize) -> bool;
  pub fn BitBtn_SetParentFont(AObj: usize, AValue: bool);
  pub fn BitBtn_GetParentShowHint(AObj: usize) -> bool;
  pub fn BitBtn_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn BitBtn_GetPopupMenu(AObj: usize) -> usize;
  pub fn BitBtn_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn BitBtn_GetShowHint(AObj: usize) -> bool;
  pub fn BitBtn_SetShowHint(AObj: usize, AValue: bool);
  pub fn BitBtn_GetSpacing(AObj: usize) -> i32;
  pub fn BitBtn_SetSpacing(AObj: usize, AValue: i32);
  pub fn BitBtn_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn BitBtn_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn BitBtn_GetTabStop(AObj: usize) -> bool;
  pub fn BitBtn_SetTabStop(AObj: usize, AValue: bool);
  pub fn BitBtn_GetVisible(AObj: usize) -> bool;
  pub fn BitBtn_SetVisible(AObj: usize, AValue: bool);
  pub fn BitBtn_SetOnClick(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnExit(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn BitBtn_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn BitBtn_GetDockClientCount(AObj: usize) -> i32;
  pub fn BitBtn_GetDockSite(AObj: usize) -> bool;
  pub fn BitBtn_SetDockSite(AObj: usize, AValue: bool);
  pub fn BitBtn_GetMouseInClient(AObj: usize) -> bool;
  pub fn BitBtn_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn BitBtn_GetBrush(AObj: usize) -> usize;
  pub fn BitBtn_GetControlCount(AObj: usize) -> i32;
  pub fn BitBtn_GetHandle(AObj: usize) -> HWND;
  pub fn BitBtn_GetParentWindow(AObj: usize) -> HWND;
  pub fn BitBtn_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn BitBtn_GetShowing(AObj: usize) -> bool;
  pub fn BitBtn_GetUseDockManager(AObj: usize) -> bool;
  pub fn BitBtn_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn BitBtn_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn BitBtn_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn BitBtn_GetClientHeight(AObj: usize) -> i32;
  pub fn BitBtn_SetClientHeight(AObj: usize, AValue: i32);
  pub fn BitBtn_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn BitBtn_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn BitBtn_GetClientWidth(AObj: usize) -> i32;
  pub fn BitBtn_SetClientWidth(AObj: usize, AValue: i32);
  pub fn BitBtn_GetControlState(AObj: usize) -> TControlState;
  pub fn BitBtn_SetControlState(AObj: usize, AValue: TControlState);
  pub fn BitBtn_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn BitBtn_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn BitBtn_GetFloating(AObj: usize) -> bool;
  pub fn BitBtn_GetParent(AObj: usize) -> usize;
  pub fn BitBtn_SetParent(AObj: usize, AValue: usize);
  pub fn BitBtn_GetLeft(AObj: usize) -> i32;
  pub fn BitBtn_SetLeft(AObj: usize, AValue: i32);
  pub fn BitBtn_GetTop(AObj: usize) -> i32;
  pub fn BitBtn_SetTop(AObj: usize, AValue: i32);
  pub fn BitBtn_GetWidth(AObj: usize) -> i32;
  pub fn BitBtn_SetWidth(AObj: usize, AValue: i32);
  pub fn BitBtn_GetHeight(AObj: usize) -> i32;
  pub fn BitBtn_SetHeight(AObj: usize, AValue: i32);
  pub fn BitBtn_GetCursor(AObj: usize) -> TCursor;
  pub fn BitBtn_SetCursor(AObj: usize, AValue: TCursor);
  pub fn BitBtn_GetHint(AObj: usize) -> *const c_char;
  pub fn BitBtn_SetHint(AObj: usize, AValue: *const c_char);
  pub fn BitBtn_GetComponentCount(AObj: usize) -> i32;
  pub fn BitBtn_GetComponentIndex(AObj: usize) -> i32;
  pub fn BitBtn_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn BitBtn_GetOwner(AObj: usize) -> usize;
  pub fn BitBtn_GetName(AObj: usize) -> *const c_char;
  pub fn BitBtn_SetName(AObj: usize, AValue: *const c_char);
  pub fn BitBtn_GetTag(AObj: usize) -> isize;
  pub fn BitBtn_SetTag(AObj: usize, AValue: isize);
  pub fn BitBtn_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn BitBtn_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn BitBtn_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn BitBtn_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn BitBtn_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn BitBtn_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn BitBtn_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn BitBtn_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn BitBtn_GetChildSizing(AObj: usize) -> usize;
  pub fn BitBtn_SetChildSizing(AObj: usize, AValue: usize);
  pub fn BitBtn_GetBorderSpacing(AObj: usize) -> usize;
  pub fn BitBtn_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn BitBtn_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn BitBtn_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn BitBtn_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn BitBtn_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn BitBtn_StaticClassType() -> TClass;

  // ----------------- TIcon ----------------------
  pub fn Icon_Create() -> usize;
  pub fn Icon_Free(AObj: usize);
  pub fn Icon_Assign(AObj: usize, Source: usize);
  pub fn Icon_HandleAllocated(AObj: usize) -> bool;
  pub fn Icon_LoadFromStream(AObj: usize, Stream: usize);
  pub fn Icon_SaveToStream(AObj: usize, Stream: usize);
  pub fn Icon_SetSize(AObj: usize, AWidth: i32, AHeight: i32);
  pub fn Icon_LoadFromResourceName(AObj: usize, Instance: usize, ResName: *const c_char);
  pub fn Icon_LoadFromResourceID(AObj: usize, Instance: usize, ResID: i32);
  pub fn Icon_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Icon_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn Icon_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn Icon_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Icon_ClassType(AObj: usize) -> TClass;
  pub fn Icon_ClassName(AObj: usize) -> *const c_char;
  pub fn Icon_InstanceSize(AObj: usize) -> i32;
  pub fn Icon_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Icon_GetHashCode(AObj: usize) -> i32;
  pub fn Icon_ToString(AObj: usize) -> *const c_char;
  pub fn Icon_GetHandle(AObj: usize) -> HICON;
  pub fn Icon_SetHandle(AObj: usize, AValue: HICON);
  pub fn Icon_GetEmpty(AObj: usize) -> bool;
  pub fn Icon_GetHeight(AObj: usize) -> i32;
  pub fn Icon_SetHeight(AObj: usize, AValue: i32);
  pub fn Icon_GetModified(AObj: usize) -> bool;
  pub fn Icon_SetModified(AObj: usize, AValue: bool);
  pub fn Icon_GetPalette(AObj: usize) -> HPALETTE;
  pub fn Icon_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn Icon_GetPaletteModified(AObj: usize) -> bool;
  pub fn Icon_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn Icon_GetTransparent(AObj: usize) -> bool;
  pub fn Icon_SetTransparent(AObj: usize, AValue: bool);
  pub fn Icon_GetWidth(AObj: usize) -> i32;
  pub fn Icon_SetWidth(AObj: usize, AValue: i32);
  pub fn Icon_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Icon_StaticClassType() -> TClass;

  // ----------------- TBitmap ----------------------
  pub fn Bitmap_Create() -> usize;
  pub fn Bitmap_Free(AObj: usize);
  pub fn Bitmap_Assign(AObj: usize, Source: usize);
  pub fn Bitmap_FreeImage(AObj: usize);
  pub fn Bitmap_HandleAllocated(AObj: usize) -> bool;
  pub fn Bitmap_LoadFromStream(AObj: usize, Stream: usize);
  pub fn Bitmap_SaveToStream(AObj: usize, Stream: usize);
  pub fn Bitmap_SetSize(AObj: usize, AWidth: i32, AHeight: i32);
  pub fn Bitmap_LoadFromResourceName(AObj: usize, Instance: usize, ResName: *const c_char);
  pub fn Bitmap_LoadFromResourceID(AObj: usize, Instance: usize, ResID: i32);
  pub fn Bitmap_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Bitmap_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn Bitmap_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn Bitmap_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Bitmap_ClassType(AObj: usize) -> TClass;
  pub fn Bitmap_ClassName(AObj: usize) -> *const c_char;
  pub fn Bitmap_InstanceSize(AObj: usize) -> i32;
  pub fn Bitmap_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Bitmap_GetHashCode(AObj: usize) -> i32;
  pub fn Bitmap_ToString(AObj: usize) -> *const c_char;
  pub fn Bitmap_GetCanvas(AObj: usize) -> usize;
  pub fn Bitmap_GetHandle(AObj: usize) -> HBITMAP;
  pub fn Bitmap_SetHandle(AObj: usize, AValue: HBITMAP);
  pub fn Bitmap_GetHandleType(AObj: usize) -> TBitmapHandleType;
  pub fn Bitmap_SetHandleType(AObj: usize, AValue: TBitmapHandleType);
  pub fn Bitmap_GetMaskHandle(AObj: usize) -> HBITMAP;
  pub fn Bitmap_SetMaskHandle(AObj: usize, AValue: HBITMAP);
  pub fn Bitmap_GetPixelFormat(AObj: usize) -> TPixelFormat;
  pub fn Bitmap_SetPixelFormat(AObj: usize, AValue: TPixelFormat);
  pub fn Bitmap_GetTransparentMode(AObj: usize) -> TTransparentMode;
  pub fn Bitmap_SetTransparentMode(AObj: usize, AValue: TTransparentMode);
  pub fn Bitmap_GetEmpty(AObj: usize) -> bool;
  pub fn Bitmap_GetHeight(AObj: usize) -> i32;
  pub fn Bitmap_SetHeight(AObj: usize, AValue: i32);
  pub fn Bitmap_GetModified(AObj: usize) -> bool;
  pub fn Bitmap_SetModified(AObj: usize, AValue: bool);
  pub fn Bitmap_GetPalette(AObj: usize) -> HPALETTE;
  pub fn Bitmap_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn Bitmap_GetPaletteModified(AObj: usize) -> bool;
  pub fn Bitmap_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn Bitmap_GetTransparent(AObj: usize) -> bool;
  pub fn Bitmap_SetTransparent(AObj: usize, AValue: bool);
  pub fn Bitmap_GetWidth(AObj: usize) -> i32;
  pub fn Bitmap_SetWidth(AObj: usize, AValue: i32);
  pub fn Bitmap_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Bitmap_GetScanLine(AObj: usize, Row: i32) -> usize;
  pub fn Bitmap_StaticClassType() -> TClass;
  pub fn Bitmap_Clear(AObj: usize);
  pub fn Bitmap_BeginUpdate(AObj: usize, ACanvasOnly: bool);
  pub fn Bitmap_EndUpdate(AObj: usize, AStreamIsValid: bool);
  pub fn Bitmap_LoadFromDevice(AObj: usize, ADc: HDC);

  // ----------------- TMemo ----------------------
  pub fn Memo_Create(AOwner: usize) -> usize;
  pub fn Memo_Free(AObj: usize);
  pub fn Memo_Append(AObj: usize, Value: *const c_char);
  pub fn Memo_Clear(AObj: usize);
  pub fn Memo_ClearSelection(AObj: usize);
  pub fn Memo_CopyToClipboard(AObj: usize);
  pub fn Memo_CutToClipboard(AObj: usize);
  pub fn Memo_PasteFromClipboard(AObj: usize);
  pub fn Memo_Undo(AObj: usize);
  pub fn Memo_SelectAll(AObj: usize);
  pub fn Memo_CanFocus(AObj: usize) -> bool;
  pub fn Memo_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Memo_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Memo_DisableAlign(AObj: usize);
  pub fn Memo_EnableAlign(AObj: usize);
  pub fn Memo_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Memo_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Memo_Focused(AObj: usize) -> bool;
  pub fn Memo_HandleAllocated(AObj: usize) -> bool;
  pub fn Memo_InsertControl(AObj: usize, AControl: usize);
  pub fn Memo_Invalidate(AObj: usize);
  pub fn Memo_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Memo_RemoveControl(AObj: usize, AControl: usize);
  pub fn Memo_Realign(AObj: usize);
  pub fn Memo_Repaint(AObj: usize);
  pub fn Memo_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Memo_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Memo_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Memo_SetFocus(AObj: usize);
  pub fn Memo_Update(AObj: usize);
  pub fn Memo_BringToFront(AObj: usize);
  pub fn Memo_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Memo_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Memo_Dragging(AObj: usize) -> bool;
  pub fn Memo_HasParent(AObj: usize) -> bool;
  pub fn Memo_Hide(AObj: usize);
  pub fn Memo_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Memo_Refresh(AObj: usize);
  pub fn Memo_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Memo_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Memo_SendToBack(AObj: usize);
  pub fn Memo_Show(AObj: usize);
  pub fn Memo_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Memo_GetTextLen(AObj: usize) -> i32;
  pub fn Memo_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Memo_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Memo_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Memo_Assign(AObj: usize, Source: usize);
  pub fn Memo_ClassType(AObj: usize) -> TClass;
  pub fn Memo_ClassName(AObj: usize) -> *const c_char;
  pub fn Memo_InstanceSize(AObj: usize) -> i32;
  pub fn Memo_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Memo_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Memo_GetHashCode(AObj: usize) -> i32;
  pub fn Memo_ToString(AObj: usize) -> *const c_char;
  pub fn Memo_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Memo_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Memo_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Memo_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Memo_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Memo_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Memo_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Memo_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Memo_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Memo_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Memo_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Memo_GetAlign(AObj: usize) -> TAlign;
  pub fn Memo_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Memo_GetAlignment(AObj: usize) -> TAlignment;
  pub fn Memo_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn Memo_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Memo_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Memo_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Memo_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Memo_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn Memo_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn Memo_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn Memo_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn Memo_GetColor(AObj: usize) -> TColor;
  pub fn Memo_SetColor(AObj: usize, AValue: TColor);
  pub fn Memo_GetConstraints(AObj: usize) -> usize;
  pub fn Memo_SetConstraints(AObj: usize, AValue: usize);
  pub fn Memo_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Memo_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Memo_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Memo_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Memo_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Memo_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Memo_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Memo_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Memo_GetEnabled(AObj: usize) -> bool;
  pub fn Memo_SetEnabled(AObj: usize, AValue: bool);
  pub fn Memo_GetFont(AObj: usize) -> usize;
  pub fn Memo_SetFont(AObj: usize, AValue: usize);
  pub fn Memo_GetHideSelection(AObj: usize) -> bool;
  pub fn Memo_SetHideSelection(AObj: usize, AValue: bool);
  pub fn Memo_GetLines(AObj: usize) -> usize;
  pub fn Memo_SetLines(AObj: usize, AValue: usize);
  pub fn Memo_GetMaxLength(AObj: usize) -> i32;
  pub fn Memo_SetMaxLength(AObj: usize, AValue: i32);
  pub fn Memo_GetParentColor(AObj: usize) -> bool;
  pub fn Memo_SetParentColor(AObj: usize, AValue: bool);
  pub fn Memo_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Memo_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Memo_GetParentFont(AObj: usize) -> bool;
  pub fn Memo_SetParentFont(AObj: usize, AValue: bool);
  pub fn Memo_GetParentShowHint(AObj: usize) -> bool;
  pub fn Memo_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Memo_GetPopupMenu(AObj: usize) -> usize;
  pub fn Memo_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Memo_GetReadOnly(AObj: usize) -> bool;
  pub fn Memo_SetReadOnly(AObj: usize, AValue: bool);
  pub fn Memo_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn Memo_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn Memo_GetShowHint(AObj: usize) -> bool;
  pub fn Memo_SetShowHint(AObj: usize, AValue: bool);
  pub fn Memo_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Memo_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Memo_GetTabStop(AObj: usize) -> bool;
  pub fn Memo_SetTabStop(AObj: usize, AValue: bool);
  pub fn Memo_GetVisible(AObj: usize) -> bool;
  pub fn Memo_SetVisible(AObj: usize, AValue: bool);
  pub fn Memo_GetWantReturns(AObj: usize) -> bool;
  pub fn Memo_SetWantReturns(AObj: usize, AValue: bool);
  pub fn Memo_GetWantTabs(AObj: usize) -> bool;
  pub fn Memo_SetWantTabs(AObj: usize, AValue: bool);
  pub fn Memo_GetWordWrap(AObj: usize) -> bool;
  pub fn Memo_SetWordWrap(AObj: usize, AValue: bool);
  pub fn Memo_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnExit(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Memo_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Memo_GetCaretPos(AObj: usize, Result: *mut TPoint);
  pub fn Memo_SetCaretPos(AObj: usize, AValue: *mut TPoint);
  pub fn Memo_GetCanUndo(AObj: usize) -> bool;
  pub fn Memo_GetModified(AObj: usize) -> bool;
  pub fn Memo_SetModified(AObj: usize, AValue: bool);
  pub fn Memo_GetSelLength(AObj: usize) -> i32;
  pub fn Memo_SetSelLength(AObj: usize, AValue: i32);
  pub fn Memo_GetSelStart(AObj: usize) -> i32;
  pub fn Memo_SetSelStart(AObj: usize, AValue: i32);
  pub fn Memo_GetSelText(AObj: usize) -> *const c_char;
  pub fn Memo_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn Memo_GetText(AObj: usize) -> *const c_char;
  pub fn Memo_SetText(AObj: usize, AValue: *const c_char);
  pub fn Memo_GetTextHint(AObj: usize) -> *const c_char;
  pub fn Memo_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn Memo_GetDockClientCount(AObj: usize) -> i32;
  pub fn Memo_GetDockSite(AObj: usize) -> bool;
  pub fn Memo_SetDockSite(AObj: usize, AValue: bool);
  pub fn Memo_GetMouseInClient(AObj: usize) -> bool;
  pub fn Memo_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Memo_GetBrush(AObj: usize) -> usize;
  pub fn Memo_GetControlCount(AObj: usize) -> i32;
  pub fn Memo_GetHandle(AObj: usize) -> HWND;
  pub fn Memo_GetParentWindow(AObj: usize) -> HWND;
  pub fn Memo_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Memo_GetShowing(AObj: usize) -> bool;
  pub fn Memo_GetUseDockManager(AObj: usize) -> bool;
  pub fn Memo_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Memo_GetAction(AObj: usize) -> usize;
  pub fn Memo_SetAction(AObj: usize, AValue: usize);
  pub fn Memo_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Memo_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Memo_GetClientHeight(AObj: usize) -> i32;
  pub fn Memo_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Memo_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Memo_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Memo_GetClientWidth(AObj: usize) -> i32;
  pub fn Memo_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Memo_GetControlState(AObj: usize) -> TControlState;
  pub fn Memo_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Memo_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Memo_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Memo_GetFloating(AObj: usize) -> bool;
  pub fn Memo_GetParent(AObj: usize) -> usize;
  pub fn Memo_SetParent(AObj: usize, AValue: usize);
  pub fn Memo_GetLeft(AObj: usize) -> i32;
  pub fn Memo_SetLeft(AObj: usize, AValue: i32);
  pub fn Memo_GetTop(AObj: usize) -> i32;
  pub fn Memo_SetTop(AObj: usize, AValue: i32);
  pub fn Memo_GetWidth(AObj: usize) -> i32;
  pub fn Memo_SetWidth(AObj: usize, AValue: i32);
  pub fn Memo_GetHeight(AObj: usize) -> i32;
  pub fn Memo_SetHeight(AObj: usize, AValue: i32);
  pub fn Memo_GetCursor(AObj: usize) -> TCursor;
  pub fn Memo_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Memo_GetHint(AObj: usize) -> *const c_char;
  pub fn Memo_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Memo_GetComponentCount(AObj: usize) -> i32;
  pub fn Memo_GetComponentIndex(AObj: usize) -> i32;
  pub fn Memo_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Memo_GetOwner(AObj: usize) -> usize;
  pub fn Memo_GetName(AObj: usize) -> *const c_char;
  pub fn Memo_SetName(AObj: usize, AValue: *const c_char);
  pub fn Memo_GetTag(AObj: usize) -> isize;
  pub fn Memo_SetTag(AObj: usize, AValue: isize);
  pub fn Memo_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Memo_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Memo_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Memo_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Memo_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Memo_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Memo_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Memo_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Memo_GetChildSizing(AObj: usize) -> usize;
  pub fn Memo_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Memo_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Memo_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Memo_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Memo_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Memo_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Memo_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Memo_StaticClassType() -> TClass;

  // ----------------- TMemoryStream ----------------------
  pub fn MemoryStream_Create() -> usize;
  pub fn MemoryStream_Free(AObj: usize);
  pub fn MemoryStream_Clear(AObj: usize);
  pub fn MemoryStream_LoadFromStream(AObj: usize, Stream: usize);
  pub fn MemoryStream_LoadFromFile(AObj: usize, FileName: *const c_char);
  pub fn MemoryStream_Seek(AObj: usize, Offset: *mut i64, Origin: TSeekOrigin, Result: *mut i64);
  pub fn MemoryStream_SaveToStream(AObj: usize, Stream: usize);
  pub fn MemoryStream_SaveToFile(AObj: usize, FileName: *const c_char);
  pub fn MemoryStream_CopyFrom(AObj: usize, Source: usize, Count: *mut i64, Result: *mut i64);
  pub fn MemoryStream_ClassType(AObj: usize) -> TClass;
  pub fn MemoryStream_ClassName(AObj: usize) -> *const c_char;
  pub fn MemoryStream_InstanceSize(AObj: usize) -> i32;
  pub fn MemoryStream_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MemoryStream_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MemoryStream_GetHashCode(AObj: usize) -> i32;
  pub fn MemoryStream_ToString(AObj: usize) -> *const c_char;
  pub fn MemoryStream_GetMemory(AObj: usize) -> usize;
  pub fn MemoryStream_GetPosition(AObj: usize, Result: *mut i64);
  pub fn MemoryStream_SetPosition(AObj: usize, AValue: *mut i64);
  pub fn MemoryStream_GetSize(AObj: usize, Result: *mut i64);
  pub fn MemoryStream_SetSize(AObj: usize, AValue: *mut i64);
  pub fn MemoryStream_StaticClassType() -> TClass;
  pub fn MemoryStream_Write(AObj: usize, Buffer: usize, Count: i32) -> i32;
  pub fn MemoryStream_Read(AObj: usize, Buffer: usize, Count: i32) -> i32;

  // ----------------- TFont ----------------------
  pub fn Font_Create() -> usize;
  pub fn Font_Free(AObj: usize);
  pub fn Font_Assign(AObj: usize, Source: usize);
  pub fn Font_HandleAllocated(AObj: usize) -> bool;
  pub fn Font_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Font_ClassType(AObj: usize) -> TClass;
  pub fn Font_ClassName(AObj: usize) -> *const c_char;
  pub fn Font_InstanceSize(AObj: usize) -> i32;
  pub fn Font_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Font_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Font_GetHashCode(AObj: usize) -> i32;
  pub fn Font_ToString(AObj: usize) -> *const c_char;
  pub fn Font_GetHandle(AObj: usize) -> HFONT;
  pub fn Font_SetHandle(AObj: usize, AValue: HFONT);
  pub fn Font_GetPixelsPerInch(AObj: usize) -> i32;
  pub fn Font_SetPixelsPerInch(AObj: usize, AValue: i32);
  pub fn Font_GetCharset(AObj: usize) -> TFontCharset;
  pub fn Font_SetCharset(AObj: usize, AValue: TFontCharset);
  pub fn Font_GetColor(AObj: usize) -> TColor;
  pub fn Font_SetColor(AObj: usize, AValue: TColor);
  pub fn Font_GetHeight(AObj: usize) -> i32;
  pub fn Font_SetHeight(AObj: usize, AValue: i32);
  pub fn Font_GetName(AObj: usize) -> *const c_char;
  pub fn Font_SetName(AObj: usize, AValue: *const c_char);
  pub fn Font_GetOrientation(AObj: usize) -> i32;
  pub fn Font_SetOrientation(AObj: usize, AValue: i32);
  pub fn Font_GetPitch(AObj: usize) -> TFontPitch;
  pub fn Font_SetPitch(AObj: usize, AValue: TFontPitch);
  pub fn Font_GetSize(AObj: usize) -> i32;
  pub fn Font_SetSize(AObj: usize, AValue: i32);
  pub fn Font_GetStyle(AObj: usize) -> TFontStyles;
  pub fn Font_SetStyle(AObj: usize, AValue: TFontStyles);
  pub fn Font_GetQuality(AObj: usize) -> TFontQuality;
  pub fn Font_SetQuality(AObj: usize, AValue: TFontQuality);
  pub fn Font_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Font_StaticClassType() -> TClass;

  // ----------------- TPopupMenu ----------------------
  pub fn PopupMenu_Create(AOwner: usize) -> usize;
  pub fn PopupMenu_Free(AObj: usize);
  pub fn PopupMenu_CloseMenu(AObj: usize);
  pub fn PopupMenu_Popup(AObj: usize, X: i32, Y: i32);
  pub fn PopupMenu_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PopupMenu_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PopupMenu_HasParent(AObj: usize) -> bool;
  pub fn PopupMenu_Assign(AObj: usize, Source: usize);
  pub fn PopupMenu_ClassType(AObj: usize) -> TClass;
  pub fn PopupMenu_ClassName(AObj: usize) -> *const c_char;
  pub fn PopupMenu_InstanceSize(AObj: usize) -> i32;
  pub fn PopupMenu_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PopupMenu_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PopupMenu_GetHashCode(AObj: usize) -> i32;
  pub fn PopupMenu_ToString(AObj: usize) -> *const c_char;
  pub fn PopupMenu_GetImagesWidth(AObj: usize) -> i32;
  pub fn PopupMenu_SetImagesWidth(AObj: usize, AValue: i32);
  pub fn PopupMenu_GetPopupComponent(AObj: usize) -> usize;
  pub fn PopupMenu_SetPopupComponent(AObj: usize, AValue: usize);
  pub fn PopupMenu_GetPopupPoint(AObj: usize, Result: *mut TPoint);
  pub fn PopupMenu_GetAlignment(AObj: usize) -> TPopupAlignment;
  pub fn PopupMenu_SetAlignment(AObj: usize, AValue: TPopupAlignment);
  pub fn PopupMenu_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn PopupMenu_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn PopupMenu_GetImages(AObj: usize) -> usize;
  pub fn PopupMenu_SetImages(AObj: usize, AValue: usize);
  pub fn PopupMenu_GetOwnerDraw(AObj: usize) -> bool;
  pub fn PopupMenu_SetOwnerDraw(AObj: usize, AValue: bool);
  pub fn PopupMenu_SetOnPopup(AObj: usize, AEventId: usize);
  pub fn PopupMenu_GetHandle(AObj: usize) -> HMENU;
  pub fn PopupMenu_GetItems(AObj: usize) -> usize;
  pub fn PopupMenu_GetComponentCount(AObj: usize) -> i32;
  pub fn PopupMenu_GetComponentIndex(AObj: usize) -> i32;
  pub fn PopupMenu_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PopupMenu_GetOwner(AObj: usize) -> usize;
  pub fn PopupMenu_GetName(AObj: usize) -> *const c_char;
  pub fn PopupMenu_SetName(AObj: usize, AValue: *const c_char);
  pub fn PopupMenu_GetTag(AObj: usize) -> isize;
  pub fn PopupMenu_SetTag(AObj: usize, AValue: isize);
  pub fn PopupMenu_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PopupMenu_StaticClassType() -> TClass;

  // ----------------- TStringList ----------------------
  pub fn StringList_Create() -> usize;
  pub fn StringList_Free(AObj: usize);
  pub fn StringList_Add(AObj: usize, S: *const c_char) -> i32;
  pub fn StringList_AddObject(AObj: usize, S: *const c_char, AObject: usize) -> i32;
  pub fn StringList_Assign(AObj: usize, Source: usize);
  pub fn StringList_Clear(AObj: usize);
  pub fn StringList_Delete(AObj: usize, Index: i32);
  pub fn StringList_IndexOf(AObj: usize, S: *const c_char) -> i32;
  pub fn StringList_Insert(AObj: usize, Index: i32, S: *const c_char);
  pub fn StringList_InsertObject(AObj: usize, Index: i32, S: *const c_char, AObject: usize);
  pub fn StringList_Append(AObj: usize, S: *const c_char);
  pub fn StringList_BeginUpdate(AObj: usize);
  pub fn StringList_EndUpdate(AObj: usize);
  pub fn StringList_Equals(AObj: usize, Strings: usize) -> bool;
  pub fn StringList_IndexOfName(AObj: usize, Name: *const c_char) -> i32;
  pub fn StringList_IndexOfObject(AObj: usize, AObject: usize) -> i32;
  pub fn StringList_LoadFromFile(AObj: usize, FileName: *const c_char);
  pub fn StringList_LoadFromStream(AObj: usize, Stream: usize);
  pub fn StringList_Move(AObj: usize, CurIndex: i32, NewIndex: i32);
  pub fn StringList_SaveToFile(AObj: usize, FileName: *const c_char);
  pub fn StringList_SaveToStream(AObj: usize, Stream: usize);
  pub fn StringList_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StringList_ClassType(AObj: usize) -> TClass;
  pub fn StringList_ClassName(AObj: usize) -> *const c_char;
  pub fn StringList_InstanceSize(AObj: usize) -> i32;
  pub fn StringList_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StringList_GetHashCode(AObj: usize) -> i32;
  pub fn StringList_ToString(AObj: usize) -> *const c_char;
  pub fn StringList_GetSorted(AObj: usize) -> bool;
  pub fn StringList_SetSorted(AObj: usize, AValue: bool);
  pub fn StringList_SetOnChange(AObj: usize, AEventId: usize);
  pub fn StringList_SetOnChanging(AObj: usize, AEventId: usize);
  pub fn StringList_GetCapacity(AObj: usize) -> i32;
  pub fn StringList_SetCapacity(AObj: usize, AValue: i32);
  pub fn StringList_GetCommaText(AObj: usize) -> *const c_char;
  pub fn StringList_SetCommaText(AObj: usize, AValue: *const c_char);
  pub fn StringList_GetCount(AObj: usize) -> i32;
  pub fn StringList_GetDelimiter(AObj: usize) -> Char;
  pub fn StringList_SetDelimiter(AObj: usize, AValue: Char);
  pub fn StringList_GetNameValueSeparator(AObj: usize) -> Char;
  pub fn StringList_SetNameValueSeparator(AObj: usize, AValue: Char);
  pub fn StringList_GetText(AObj: usize) -> *const c_char;
  pub fn StringList_SetText(AObj: usize, AValue: *const c_char);
  pub fn StringList_GetObjects(AObj: usize, Index: i32) -> usize;
  pub fn StringList_SetObjects(AObj: usize, Index: i32, AValue: usize);
  pub fn StringList_GetValues(AObj: usize, Name: *const c_char) -> *const c_char;
  pub fn StringList_SetValues(AObj: usize, Name: *const c_char, AValue: *const c_char);
  pub fn StringList_GetValueFromIndex(AObj: usize, Index: i32) -> *const c_char;
  pub fn StringList_SetValueFromIndex(AObj: usize, Index: i32, AValue: *const c_char);
  pub fn StringList_GetStrings(AObj: usize, Index: i32) -> *const c_char;
  pub fn StringList_SetStrings(AObj: usize, Index: i32, AValue: *const c_char);
  pub fn StringList_StaticClassType() -> TClass;

  // ----------------- TBrush ----------------------
  pub fn Brush_Create() -> usize;
  pub fn Brush_Free(AObj: usize);
  pub fn Brush_Assign(AObj: usize, Source: usize);
  pub fn Brush_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Brush_ClassType(AObj: usize) -> TClass;
  pub fn Brush_ClassName(AObj: usize) -> *const c_char;
  pub fn Brush_InstanceSize(AObj: usize) -> i32;
  pub fn Brush_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Brush_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Brush_GetHashCode(AObj: usize) -> i32;
  pub fn Brush_ToString(AObj: usize) -> *const c_char;
  pub fn Brush_GetBitmap(AObj: usize) -> usize;
  pub fn Brush_SetBitmap(AObj: usize, AValue: usize);
  pub fn Brush_GetHandle(AObj: usize) -> HBRUSH;
  pub fn Brush_SetHandle(AObj: usize, AValue: HBRUSH);
  pub fn Brush_GetColor(AObj: usize) -> TColor;
  pub fn Brush_SetColor(AObj: usize, AValue: TColor);
  pub fn Brush_GetStyle(AObj: usize) -> TBrushStyle;
  pub fn Brush_SetStyle(AObj: usize, AValue: TBrushStyle);
  pub fn Brush_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Brush_StaticClassType() -> TClass;

  // ----------------- TPen ----------------------
  pub fn Pen_Create() -> usize;
  pub fn Pen_Free(AObj: usize);
  pub fn Pen_Assign(AObj: usize, Source: usize);
  pub fn Pen_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Pen_ClassType(AObj: usize) -> TClass;
  pub fn Pen_ClassName(AObj: usize) -> *const c_char;
  pub fn Pen_InstanceSize(AObj: usize) -> i32;
  pub fn Pen_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Pen_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Pen_GetHashCode(AObj: usize) -> i32;
  pub fn Pen_ToString(AObj: usize) -> *const c_char;
  pub fn Pen_GetHandle(AObj: usize) -> HPEN;
  pub fn Pen_SetHandle(AObj: usize, AValue: HPEN);
  pub fn Pen_GetColor(AObj: usize) -> TColor;
  pub fn Pen_SetColor(AObj: usize, AValue: TColor);
  pub fn Pen_GetMode(AObj: usize) -> TPenMode;
  pub fn Pen_SetMode(AObj: usize, AValue: TPenMode);
  pub fn Pen_GetStyle(AObj: usize) -> TPenStyle;
  pub fn Pen_SetStyle(AObj: usize, AValue: TPenStyle);
  pub fn Pen_GetWidth(AObj: usize) -> i32;
  pub fn Pen_SetWidth(AObj: usize, AValue: i32);
  pub fn Pen_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Pen_StaticClassType() -> TClass;

  // ----------------- TMenuItem ----------------------
  pub fn MenuItem_Create(AOwner: usize) -> usize;
  pub fn MenuItem_Free(AObj: usize);
  pub fn MenuItem_Insert(AObj: usize, Index: i32, Item: usize);
  pub fn MenuItem_Delete(AObj: usize, Index: i32);
  pub fn MenuItem_Clear(AObj: usize);
  pub fn MenuItem_Click(AObj: usize);
  pub fn MenuItem_IndexOf(AObj: usize, Item: usize) -> i32;
  pub fn MenuItem_HasParent(AObj: usize) -> bool;
  pub fn MenuItem_Add(AObj: usize, Item: usize);
  pub fn MenuItem_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn MenuItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn MenuItem_Assign(AObj: usize, Source: usize);
  pub fn MenuItem_ClassType(AObj: usize) -> TClass;
  pub fn MenuItem_ClassName(AObj: usize) -> *const c_char;
  pub fn MenuItem_InstanceSize(AObj: usize) -> i32;
  pub fn MenuItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MenuItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MenuItem_GetHashCode(AObj: usize) -> i32;
  pub fn MenuItem_ToString(AObj: usize) -> *const c_char;
  pub fn MenuItem_GetHandle(AObj: usize) -> HMENU;
  pub fn MenuItem_GetCount(AObj: usize) -> i32;
  pub fn MenuItem_GetParent(AObj: usize) -> usize;
  pub fn MenuItem_GetAction(AObj: usize) -> usize;
  pub fn MenuItem_SetAction(AObj: usize, AValue: usize);
  pub fn MenuItem_GetAutoCheck(AObj: usize) -> bool;
  pub fn MenuItem_SetAutoCheck(AObj: usize, AValue: bool);
  pub fn MenuItem_GetBitmap(AObj: usize) -> usize;
  pub fn MenuItem_SetBitmap(AObj: usize, AValue: usize);
  pub fn MenuItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn MenuItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn MenuItem_GetChecked(AObj: usize) -> bool;
  pub fn MenuItem_SetChecked(AObj: usize, AValue: bool);
  pub fn MenuItem_GetDefault(AObj: usize) -> bool;
  pub fn MenuItem_SetDefault(AObj: usize, AValue: bool);
  pub fn MenuItem_GetEnabled(AObj: usize) -> bool;
  pub fn MenuItem_SetEnabled(AObj: usize, AValue: bool);
  pub fn MenuItem_GetGroupIndex(AObj: usize) -> i8;
  pub fn MenuItem_SetGroupIndex(AObj: usize, AValue: i8);
  pub fn MenuItem_GetHint(AObj: usize) -> *const c_char;
  pub fn MenuItem_SetHint(AObj: usize, AValue: *const c_char);
  pub fn MenuItem_GetImageIndex(AObj: usize) -> i32;
  pub fn MenuItem_SetImageIndex(AObj: usize, AValue: i32);
  pub fn MenuItem_GetRadioItem(AObj: usize) -> bool;
  pub fn MenuItem_SetRadioItem(AObj: usize, AValue: bool);
  pub fn MenuItem_GetShortCut(AObj: usize) -> TShortCut;
  pub fn MenuItem_SetShortCut(AObj: usize, AValue: TShortCut);
  pub fn MenuItem_GetVisible(AObj: usize) -> bool;
  pub fn MenuItem_SetVisible(AObj: usize, AValue: bool);
  pub fn MenuItem_SetOnClick(AObj: usize, AEventId: usize);
  pub fn MenuItem_SetOnMeasureItem(AObj: usize, AEventId: usize);
  pub fn MenuItem_GetComponentCount(AObj: usize) -> i32;
  pub fn MenuItem_GetComponentIndex(AObj: usize) -> i32;
  pub fn MenuItem_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn MenuItem_GetOwner(AObj: usize) -> usize;
  pub fn MenuItem_GetName(AObj: usize) -> *const c_char;
  pub fn MenuItem_SetName(AObj: usize, AValue: *const c_char);
  pub fn MenuItem_GetTag(AObj: usize) -> isize;
  pub fn MenuItem_SetTag(AObj: usize, AValue: isize);
  pub fn MenuItem_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn MenuItem_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn MenuItem_StaticClassType() -> TClass;
  pub fn MenuItem_GetShortCutText(AObj: usize) -> *const c_char;
  pub fn MenuItem_SetShortCutText(AObj: usize, Value: *const c_char);

  // ----------------- TPicture ----------------------
  pub fn Picture_Create() -> usize;
  pub fn Picture_Free(AObj: usize);
  pub fn Picture_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn Picture_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn Picture_LoadFromStream(AObj: usize, Stream: usize);
  pub fn Picture_SaveToStream(AObj: usize, Stream: usize);
  pub fn Picture_Assign(AObj: usize, Source: usize);
  pub fn Picture_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Picture_ClassType(AObj: usize) -> TClass;
  pub fn Picture_ClassName(AObj: usize) -> *const c_char;
  pub fn Picture_InstanceSize(AObj: usize) -> i32;
  pub fn Picture_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Picture_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Picture_GetHashCode(AObj: usize) -> i32;
  pub fn Picture_ToString(AObj: usize) -> *const c_char;
  pub fn Picture_GetBitmap(AObj: usize) -> usize;
  pub fn Picture_SetBitmap(AObj: usize, AValue: usize);
  pub fn Picture_GetGraphic(AObj: usize) -> usize;
  pub fn Picture_SetGraphic(AObj: usize, AValue: usize);
  pub fn Picture_GetHeight(AObj: usize) -> i32;
  pub fn Picture_GetIcon(AObj: usize) -> usize;
  pub fn Picture_SetIcon(AObj: usize, AValue: usize);
  pub fn Picture_GetWidth(AObj: usize) -> i32;
  pub fn Picture_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Picture_StaticClassType() -> TClass;

  // ----------------- TListColumns ----------------------
  pub fn ListColumns_Create(AOwner: usize) -> usize;
  pub fn ListColumns_Free(AObj: usize);
  pub fn ListColumns_Add(AObj: usize) -> usize;
  pub fn ListColumns_Owner(AObj: usize) -> usize;
  pub fn ListColumns_Assign(AObj: usize, Source: usize);
  pub fn ListColumns_BeginUpdate(AObj: usize);
  pub fn ListColumns_Clear(AObj: usize);
  pub fn ListColumns_Delete(AObj: usize, Index: i32);
  pub fn ListColumns_EndUpdate(AObj: usize);
  pub fn ListColumns_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn ListColumns_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListColumns_Insert(AObj: usize, Index: i32) -> usize;
  pub fn ListColumns_ClassType(AObj: usize) -> TClass;
  pub fn ListColumns_ClassName(AObj: usize) -> *const c_char;
  pub fn ListColumns_InstanceSize(AObj: usize) -> i32;
  pub fn ListColumns_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListColumns_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListColumns_GetHashCode(AObj: usize) -> i32;
  pub fn ListColumns_ToString(AObj: usize) -> *const c_char;
  pub fn ListColumns_GetCount(AObj: usize) -> i32;
  pub fn ListColumns_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn ListColumns_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn ListColumns_StaticClassType() -> TClass;

  // ----------------- TListItems ----------------------
  pub fn ListItems_Create(AOwner: usize) -> usize;
  pub fn ListItems_Free(AObj: usize);
  pub fn ListItems_Add(AObj: usize) -> usize;
  pub fn ListItems_Assign(AObj: usize, Source: usize);
  pub fn ListItems_BeginUpdate(AObj: usize);
  pub fn ListItems_Clear(AObj: usize);
  pub fn ListItems_Delete(AObj: usize, Index: i32);
  pub fn ListItems_EndUpdate(AObj: usize);
  pub fn ListItems_IndexOf(AObj: usize, Value: usize) -> i32;
  pub fn ListItems_Insert(AObj: usize, Index: i32) -> usize;
  pub fn ListItems_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListItems_ClassType(AObj: usize) -> TClass;
  pub fn ListItems_ClassName(AObj: usize) -> *const c_char;
  pub fn ListItems_InstanceSize(AObj: usize) -> i32;
  pub fn ListItems_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListItems_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListItems_GetHashCode(AObj: usize) -> i32;
  pub fn ListItems_ToString(AObj: usize) -> *const c_char;
  pub fn ListItems_GetCount(AObj: usize) -> i32;
  pub fn ListItems_SetCount(AObj: usize, AValue: i32);
  pub fn ListItems_GetOwner(AObj: usize) -> usize;
  pub fn ListItems_GetItem(AObj: usize, Index: i32) -> usize;
  pub fn ListItems_SetItem(AObj: usize, Index: i32, AValue: usize);
  pub fn ListItems_StaticClassType() -> TClass;

  // ----------------- TTreeNodes ----------------------
  pub fn TreeNodes_Create(AOwner: usize) -> usize;
  pub fn TreeNodes_Free(AObj: usize);
  pub fn TreeNodes_AddChildFirst(AObj: usize, Parent: usize, S: *const c_char) -> usize;
  pub fn TreeNodes_AddChild(AObj: usize, Parent: usize, S: *const c_char) -> usize;
  pub fn TreeNodes_AddChildObjectFirst(AObj: usize, Parent: usize, S: *const c_char, Ptr: usize) -> usize;
  pub fn TreeNodes_AddChildObject(AObj: usize, Parent: usize, S: *const c_char, Ptr: usize) -> usize;
  pub fn TreeNodes_AddObjectFirst(AObj: usize, Sibling: usize, S: *const c_char, Ptr: usize) -> usize;
  pub fn TreeNodes_AddObject(AObj: usize, Sibling: usize, S: *const c_char, Ptr: usize) -> usize;
  pub fn TreeNodes_AddNode(AObj: usize, Node: usize, Relative: usize, S: *const c_char, Ptr: usize, Method: TNodeAttachMode) -> usize;
  pub fn TreeNodes_AddFirst(AObj: usize, Sibling: usize, S: *const c_char) -> usize;
  pub fn TreeNodes_Add(AObj: usize, Sibling: usize, S: *const c_char) -> usize;
  pub fn TreeNodes_Assign(AObj: usize, Source: usize);
  pub fn TreeNodes_BeginUpdate(AObj: usize);
  pub fn TreeNodes_Clear(AObj: usize);
  pub fn TreeNodes_Delete(AObj: usize, Node: usize);
  pub fn TreeNodes_EndUpdate(AObj: usize);
  pub fn TreeNodes_GetFirstNode(AObj: usize) -> usize;
  pub fn TreeNodes_Insert(AObj: usize, Sibling: usize, S: *const c_char) -> usize;
  pub fn TreeNodes_InsertObject(AObj: usize, Sibling: usize, S: *const c_char, Ptr: usize) -> usize;
  pub fn TreeNodes_CustomSort(AObj: usize, SortProc: PFNTVCOMPARE, Data: isize, ARecurse: bool) -> bool;
  pub fn TreeNodes_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TreeNodes_ClassType(AObj: usize) -> TClass;
  pub fn TreeNodes_ClassName(AObj: usize) -> *const c_char;
  pub fn TreeNodes_InstanceSize(AObj: usize) -> i32;
  pub fn TreeNodes_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TreeNodes_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TreeNodes_GetHashCode(AObj: usize) -> i32;
  pub fn TreeNodes_ToString(AObj: usize) -> *const c_char;
  pub fn TreeNodes_GetCount(AObj: usize) -> i32;
  pub fn TreeNodes_GetOwner(AObj: usize) -> usize;
  pub fn TreeNodes_GetItem(AObj: usize, Index: i32) -> usize;
  pub fn TreeNodes_StaticClassType() -> TClass;

  // ----------------- TListItem ----------------------
  pub fn ListItem_Create(AOwner: usize) -> usize;
  pub fn ListItem_Free(AObj: usize);
  pub fn ListItem_DisplayRectSubItem(AObj: usize, subItem: i32, Code: TDisplayCode, Result: *mut TRect);
  pub fn ListItem_Assign(AObj: usize, Source: usize);
  pub fn ListItem_Delete(AObj: usize);
  pub fn ListItem_DisplayRect(AObj: usize, Code: TDisplayCode, Result: *mut TRect);
  pub fn ListItem_EditCaption(AObj: usize) -> bool;
  pub fn ListItem_MakeVisible(AObj: usize, PartialOK: bool);
  pub fn ListItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListItem_ClassType(AObj: usize) -> TClass;
  pub fn ListItem_ClassName(AObj: usize) -> *const c_char;
  pub fn ListItem_InstanceSize(AObj: usize) -> i32;
  pub fn ListItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListItem_GetHashCode(AObj: usize) -> i32;
  pub fn ListItem_ToString(AObj: usize) -> *const c_char;
  pub fn ListItem_GetDropTarget(AObj: usize) -> bool;
  pub fn ListItem_SetDropTarget(AObj: usize, AValue: bool);
  pub fn ListItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn ListItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ListItem_GetChecked(AObj: usize) -> bool;
  pub fn ListItem_SetChecked(AObj: usize, AValue: bool);
  pub fn ListItem_GetCut(AObj: usize) -> bool;
  pub fn ListItem_SetCut(AObj: usize, AValue: bool);
  pub fn ListItem_GetData(AObj: usize) -> usize;
  pub fn ListItem_SetData(AObj: usize, AValue: usize);
  pub fn ListItem_GetFocused(AObj: usize) -> bool;
  pub fn ListItem_SetFocused(AObj: usize, AValue: bool);
  pub fn ListItem_GetImageIndex(AObj: usize) -> i32;
  pub fn ListItem_SetImageIndex(AObj: usize, AValue: i32);
  pub fn ListItem_GetIndex(AObj: usize) -> i32;
  pub fn ListItem_GetLeft(AObj: usize) -> i32;
  pub fn ListItem_SetLeft(AObj: usize, AValue: i32);
  pub fn ListItem_GetListView(AObj: usize) -> usize;
  pub fn ListItem_GetOwner(AObj: usize) -> usize;
  pub fn ListItem_GetPosition(AObj: usize, Result: *mut TPoint);
  pub fn ListItem_SetPosition(AObj: usize, AValue: *mut TPoint);
  pub fn ListItem_GetSelected(AObj: usize) -> bool;
  pub fn ListItem_SetSelected(AObj: usize, AValue: bool);
  pub fn ListItem_GetStateIndex(AObj: usize) -> i32;
  pub fn ListItem_SetStateIndex(AObj: usize, AValue: i32);
  pub fn ListItem_GetSubItems(AObj: usize) -> usize;
  pub fn ListItem_SetSubItems(AObj: usize, AValue: usize);
  pub fn ListItem_GetTop(AObj: usize) -> i32;
  pub fn ListItem_SetTop(AObj: usize, AValue: i32);
  pub fn ListItem_GetSubItemImages(AObj: usize, Index: i32) -> i32;
  pub fn ListItem_SetSubItemImages(AObj: usize, Index: i32, AValue: i32);
  pub fn ListItem_StaticClassType() -> TClass;

  // ----------------- TTreeNode ----------------------
  pub fn TreeNode_Create(AOwner: usize) -> usize;
  pub fn TreeNode_Free(AObj: usize);
  pub fn TreeNode_Assign(AObj: usize, Source: usize);
  pub fn TreeNode_Collapse(AObj: usize, Recurse: bool);
  pub fn TreeNode_Delete(AObj: usize);
  pub fn TreeNode_DisplayRect(AObj: usize, TextOnly: bool, Result: *mut TRect);
  pub fn TreeNode_EditText(AObj: usize) -> bool;
  pub fn TreeNode_Expand(AObj: usize, Recurse: bool);
  pub fn TreeNode_IndexOf(AObj: usize, Value: usize) -> i32;
  pub fn TreeNode_MakeVisible(AObj: usize);
  pub fn TreeNode_MoveTo(AObj: usize, Destination: usize, Mode: TNodeAttachMode);
  pub fn TreeNode_CustomSort(AObj: usize, SortProc: PFNTVCOMPARE, Data: isize, ARecurse: bool) -> bool;
  pub fn TreeNode_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TreeNode_ClassType(AObj: usize) -> TClass;
  pub fn TreeNode_ClassName(AObj: usize) -> *const c_char;
  pub fn TreeNode_InstanceSize(AObj: usize) -> i32;
  pub fn TreeNode_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TreeNode_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TreeNode_GetHashCode(AObj: usize) -> i32;
  pub fn TreeNode_ToString(AObj: usize) -> *const c_char;
  pub fn TreeNode_GetAbsoluteIndex(AObj: usize) -> i32;
  pub fn TreeNode_GetCount(AObj: usize) -> i32;
  pub fn TreeNode_GetCut(AObj: usize) -> bool;
  pub fn TreeNode_SetCut(AObj: usize, AValue: bool);
  pub fn TreeNode_GetData(AObj: usize) -> usize;
  pub fn TreeNode_SetData(AObj: usize, AValue: usize);
  pub fn TreeNode_GetDeleting(AObj: usize) -> bool;
  pub fn TreeNode_GetFocused(AObj: usize) -> bool;
  pub fn TreeNode_SetFocused(AObj: usize, AValue: bool);
  pub fn TreeNode_GetDropTarget(AObj: usize) -> bool;
  pub fn TreeNode_SetDropTarget(AObj: usize, AValue: bool);
  pub fn TreeNode_GetSelected(AObj: usize) -> bool;
  pub fn TreeNode_SetSelected(AObj: usize, AValue: bool);
  pub fn TreeNode_GetExpanded(AObj: usize) -> bool;
  pub fn TreeNode_SetExpanded(AObj: usize, AValue: bool);
  pub fn TreeNode_GetHandle(AObj: usize) -> HWND;
  pub fn TreeNode_GetHasChildren(AObj: usize) -> bool;
  pub fn TreeNode_SetHasChildren(AObj: usize, AValue: bool);
  pub fn TreeNode_GetImageIndex(AObj: usize) -> i32;
  pub fn TreeNode_SetImageIndex(AObj: usize, AValue: i32);
  pub fn TreeNode_GetIndex(AObj: usize) -> i32;
  pub fn TreeNode_GetIsVisible(AObj: usize) -> bool;
  pub fn TreeNode_GetLevel(AObj: usize) -> i32;
  pub fn TreeNode_GetOwner(AObj: usize) -> usize;
  pub fn TreeNode_GetParent(AObj: usize) -> usize;
  pub fn TreeNode_GetSelectedIndex(AObj: usize) -> i32;
  pub fn TreeNode_SetSelectedIndex(AObj: usize, AValue: i32);
  pub fn TreeNode_GetStateIndex(AObj: usize) -> i32;
  pub fn TreeNode_SetStateIndex(AObj: usize, AValue: i32);
  pub fn TreeNode_GetText(AObj: usize) -> *const c_char;
  pub fn TreeNode_SetText(AObj: usize, AValue: *const c_char);
  pub fn TreeNode_GetTreeView(AObj: usize) -> usize;
  pub fn TreeNode_GetItem(AObj: usize, Index: i32) -> usize;
  pub fn TreeNode_SetItem(AObj: usize, Index: i32, AValue: usize);
  pub fn TreeNode_StaticClassType() -> TClass;

  // ----------------- TPageControl ----------------------
  pub fn PageControl_Create(AOwner: usize) -> usize;
  pub fn PageControl_Free(AObj: usize);
  pub fn PageControl_SelectNextPage(AObj: usize, GoForward: bool, CheckTabVisible: bool);
  pub fn PageControl_TabRect(AObj: usize, Index: i32, Result: *mut TRect);
  pub fn PageControl_CanFocus(AObj: usize) -> bool;
  pub fn PageControl_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn PageControl_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn PageControl_DisableAlign(AObj: usize);
  pub fn PageControl_EnableAlign(AObj: usize);
  pub fn PageControl_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn PageControl_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn PageControl_Focused(AObj: usize) -> bool;
  pub fn PageControl_HandleAllocated(AObj: usize) -> bool;
  pub fn PageControl_InsertControl(AObj: usize, AControl: usize);
  pub fn PageControl_Invalidate(AObj: usize);
  pub fn PageControl_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn PageControl_RemoveControl(AObj: usize, AControl: usize);
  pub fn PageControl_Realign(AObj: usize);
  pub fn PageControl_Repaint(AObj: usize);
  pub fn PageControl_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn PageControl_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn PageControl_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn PageControl_SetFocus(AObj: usize);
  pub fn PageControl_Update(AObj: usize);
  pub fn PageControl_BringToFront(AObj: usize);
  pub fn PageControl_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn PageControl_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn PageControl_Dragging(AObj: usize) -> bool;
  pub fn PageControl_HasParent(AObj: usize) -> bool;
  pub fn PageControl_Hide(AObj: usize);
  pub fn PageControl_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn PageControl_Refresh(AObj: usize);
  pub fn PageControl_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn PageControl_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn PageControl_SendToBack(AObj: usize);
  pub fn PageControl_Show(AObj: usize);
  pub fn PageControl_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn PageControl_GetTextLen(AObj: usize) -> i32;
  pub fn PageControl_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn PageControl_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PageControl_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PageControl_Assign(AObj: usize, Source: usize);
  pub fn PageControl_ClassType(AObj: usize) -> TClass;
  pub fn PageControl_ClassName(AObj: usize) -> *const c_char;
  pub fn PageControl_InstanceSize(AObj: usize) -> i32;
  pub fn PageControl_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PageControl_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PageControl_GetHashCode(AObj: usize) -> i32;
  pub fn PageControl_ToString(AObj: usize) -> *const c_char;
  pub fn PageControl_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn PageControl_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn PageControl_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn PageControl_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn PageControl_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn PageControl_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn PageControl_AnchorClient(AObj: usize, ASpace: i32);
  pub fn PageControl_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PageControl_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn PageControl_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn PageControl_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn PageControl_GetOptions(AObj: usize) -> TCTabControlOptions;
  pub fn PageControl_SetOptions(AObj: usize, AValue: TCTabControlOptions);
  pub fn PageControl_GetActivePageIndex(AObj: usize) -> i32;
  pub fn PageControl_SetActivePageIndex(AObj: usize, AValue: i32);
  pub fn PageControl_GetPageCount(AObj: usize) -> i32;
  pub fn PageControl_GetAlign(AObj: usize) -> TAlign;
  pub fn PageControl_SetAlign(AObj: usize, AValue: TAlign);
  pub fn PageControl_GetAnchors(AObj: usize) -> TAnchors;
  pub fn PageControl_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn PageControl_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn PageControl_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn PageControl_GetConstraints(AObj: usize) -> usize;
  pub fn PageControl_SetConstraints(AObj: usize, AValue: usize);
  pub fn PageControl_GetDockSite(AObj: usize) -> bool;
  pub fn PageControl_SetDockSite(AObj: usize, AValue: bool);
  pub fn PageControl_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn PageControl_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn PageControl_GetDragCursor(AObj: usize) -> TCursor;
  pub fn PageControl_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn PageControl_GetDragKind(AObj: usize) -> TDragKind;
  pub fn PageControl_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn PageControl_GetDragMode(AObj: usize) -> TDragMode;
  pub fn PageControl_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn PageControl_GetEnabled(AObj: usize) -> bool;
  pub fn PageControl_SetEnabled(AObj: usize, AValue: bool);
  pub fn PageControl_GetFont(AObj: usize) -> usize;
  pub fn PageControl_SetFont(AObj: usize, AValue: usize);
  pub fn PageControl_GetImages(AObj: usize) -> usize;
  pub fn PageControl_SetImages(AObj: usize, AValue: usize);
  pub fn PageControl_GetMultiLine(AObj: usize) -> bool;
  pub fn PageControl_SetMultiLine(AObj: usize, AValue: bool);
  pub fn PageControl_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn PageControl_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn PageControl_GetParentFont(AObj: usize) -> bool;
  pub fn PageControl_SetParentFont(AObj: usize, AValue: bool);
  pub fn PageControl_GetParentShowHint(AObj: usize) -> bool;
  pub fn PageControl_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn PageControl_GetPopupMenu(AObj: usize) -> usize;
  pub fn PageControl_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn PageControl_GetShowHint(AObj: usize) -> bool;
  pub fn PageControl_SetShowHint(AObj: usize, AValue: bool);
  pub fn PageControl_GetTabHeight(AObj: usize) -> i16;
  pub fn PageControl_SetTabHeight(AObj: usize, AValue: i16);
  pub fn PageControl_GetTabIndex(AObj: usize) -> i32;
  pub fn PageControl_SetTabIndex(AObj: usize, AValue: i32);
  pub fn PageControl_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn PageControl_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn PageControl_GetTabPosition(AObj: usize) -> TTabPosition;
  pub fn PageControl_SetTabPosition(AObj: usize, AValue: TTabPosition);
  pub fn PageControl_GetTabStop(AObj: usize) -> bool;
  pub fn PageControl_SetTabStop(AObj: usize, AValue: bool);
  pub fn PageControl_GetTabWidth(AObj: usize) -> i16;
  pub fn PageControl_SetTabWidth(AObj: usize, AValue: i16);
  pub fn PageControl_GetVisible(AObj: usize) -> bool;
  pub fn PageControl_SetVisible(AObj: usize, AValue: bool);
  pub fn PageControl_SetOnChange(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnChanging(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnExit(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnResize(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn PageControl_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn PageControl_GetDockClientCount(AObj: usize) -> i32;
  pub fn PageControl_GetMouseInClient(AObj: usize) -> bool;
  pub fn PageControl_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn PageControl_GetBrush(AObj: usize) -> usize;
  pub fn PageControl_GetControlCount(AObj: usize) -> i32;
  pub fn PageControl_GetHandle(AObj: usize) -> HWND;
  pub fn PageControl_GetParentWindow(AObj: usize) -> HWND;
  pub fn PageControl_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn PageControl_GetShowing(AObj: usize) -> bool;
  pub fn PageControl_GetUseDockManager(AObj: usize) -> bool;
  pub fn PageControl_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn PageControl_GetAction(AObj: usize) -> usize;
  pub fn PageControl_SetAction(AObj: usize, AValue: usize);
  pub fn PageControl_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn PageControl_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn PageControl_GetClientHeight(AObj: usize) -> i32;
  pub fn PageControl_SetClientHeight(AObj: usize, AValue: i32);
  pub fn PageControl_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn PageControl_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn PageControl_GetClientWidth(AObj: usize) -> i32;
  pub fn PageControl_SetClientWidth(AObj: usize, AValue: i32);
  pub fn PageControl_GetControlState(AObj: usize) -> TControlState;
  pub fn PageControl_SetControlState(AObj: usize, AValue: TControlState);
  pub fn PageControl_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn PageControl_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn PageControl_GetFloating(AObj: usize) -> bool;
  pub fn PageControl_GetParent(AObj: usize) -> usize;
  pub fn PageControl_SetParent(AObj: usize, AValue: usize);
  pub fn PageControl_GetLeft(AObj: usize) -> i32;
  pub fn PageControl_SetLeft(AObj: usize, AValue: i32);
  pub fn PageControl_GetTop(AObj: usize) -> i32;
  pub fn PageControl_SetTop(AObj: usize, AValue: i32);
  pub fn PageControl_GetWidth(AObj: usize) -> i32;
  pub fn PageControl_SetWidth(AObj: usize, AValue: i32);
  pub fn PageControl_GetHeight(AObj: usize) -> i32;
  pub fn PageControl_SetHeight(AObj: usize, AValue: i32);
  pub fn PageControl_GetCursor(AObj: usize) -> TCursor;
  pub fn PageControl_SetCursor(AObj: usize, AValue: TCursor);
  pub fn PageControl_GetHint(AObj: usize) -> *const c_char;
  pub fn PageControl_SetHint(AObj: usize, AValue: *const c_char);
  pub fn PageControl_GetComponentCount(AObj: usize) -> i32;
  pub fn PageControl_GetComponentIndex(AObj: usize) -> i32;
  pub fn PageControl_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PageControl_GetOwner(AObj: usize) -> usize;
  pub fn PageControl_GetName(AObj: usize) -> *const c_char;
  pub fn PageControl_SetName(AObj: usize, AValue: *const c_char);
  pub fn PageControl_GetTag(AObj: usize) -> isize;
  pub fn PageControl_SetTag(AObj: usize, AValue: isize);
  pub fn PageControl_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn PageControl_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn PageControl_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn PageControl_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn PageControl_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn PageControl_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn PageControl_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn PageControl_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn PageControl_GetChildSizing(AObj: usize) -> usize;
  pub fn PageControl_SetChildSizing(AObj: usize, AValue: usize);
  pub fn PageControl_GetBorderSpacing(AObj: usize) -> usize;
  pub fn PageControl_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn PageControl_GetPages(AObj: usize, Index: i32) -> usize;
  pub fn PageControl_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn PageControl_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn PageControl_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PageControl_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn PageControl_StaticClassType() -> TClass;

  // ----------------- TTabSheet ----------------------
  pub fn TabSheet_Create(AOwner: usize) -> usize;
  pub fn TabSheet_Free(AObj: usize);
  pub fn TabSheet_CanFocus(AObj: usize) -> bool;
  pub fn TabSheet_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn TabSheet_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn TabSheet_DisableAlign(AObj: usize);
  pub fn TabSheet_EnableAlign(AObj: usize);
  pub fn TabSheet_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn TabSheet_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn TabSheet_Focused(AObj: usize) -> bool;
  pub fn TabSheet_HandleAllocated(AObj: usize) -> bool;
  pub fn TabSheet_InsertControl(AObj: usize, AControl: usize);
  pub fn TabSheet_Invalidate(AObj: usize);
  pub fn TabSheet_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn TabSheet_RemoveControl(AObj: usize, AControl: usize);
  pub fn TabSheet_Realign(AObj: usize);
  pub fn TabSheet_Repaint(AObj: usize);
  pub fn TabSheet_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn TabSheet_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn TabSheet_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn TabSheet_SetFocus(AObj: usize);
  pub fn TabSheet_Update(AObj: usize);
  pub fn TabSheet_BringToFront(AObj: usize);
  pub fn TabSheet_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TabSheet_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TabSheet_Dragging(AObj: usize) -> bool;
  pub fn TabSheet_HasParent(AObj: usize) -> bool;
  pub fn TabSheet_Hide(AObj: usize);
  pub fn TabSheet_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn TabSheet_Refresh(AObj: usize);
  pub fn TabSheet_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn TabSheet_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn TabSheet_SendToBack(AObj: usize);
  pub fn TabSheet_Show(AObj: usize);
  pub fn TabSheet_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn TabSheet_GetTextLen(AObj: usize) -> i32;
  pub fn TabSheet_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn TabSheet_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn TabSheet_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TabSheet_Assign(AObj: usize, Source: usize);
  pub fn TabSheet_ClassType(AObj: usize) -> TClass;
  pub fn TabSheet_ClassName(AObj: usize) -> *const c_char;
  pub fn TabSheet_InstanceSize(AObj: usize) -> i32;
  pub fn TabSheet_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TabSheet_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TabSheet_GetHashCode(AObj: usize) -> i32;
  pub fn TabSheet_ToString(AObj: usize) -> *const c_char;
  pub fn TabSheet_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TabSheet_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn TabSheet_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn TabSheet_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn TabSheet_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn TabSheet_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn TabSheet_AnchorClient(AObj: usize, ASpace: i32);
  pub fn TabSheet_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn TabSheet_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn TabSheet_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn TabSheet_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn TabSheet_GetPageControl(AObj: usize) -> usize;
  pub fn TabSheet_SetPageControl(AObj: usize, AValue: usize);
  pub fn TabSheet_GetTabIndex(AObj: usize) -> i32;
  pub fn TabSheet_GetBorderWidth(AObj: usize) -> i32;
  pub fn TabSheet_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn TabSheet_GetCaption(AObj: usize) -> *const c_char;
  pub fn TabSheet_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn TabSheet_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn TabSheet_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TabSheet_GetEnabled(AObj: usize) -> bool;
  pub fn TabSheet_SetEnabled(AObj: usize, AValue: bool);
  pub fn TabSheet_GetFont(AObj: usize) -> usize;
  pub fn TabSheet_SetFont(AObj: usize, AValue: usize);
  pub fn TabSheet_GetHeight(AObj: usize) -> i32;
  pub fn TabSheet_SetHeight(AObj: usize, AValue: i32);
  pub fn TabSheet_GetImageIndex(AObj: usize) -> i32;
  pub fn TabSheet_SetImageIndex(AObj: usize, AValue: i32);
  pub fn TabSheet_GetLeft(AObj: usize) -> i32;
  pub fn TabSheet_SetLeft(AObj: usize, AValue: i32);
  pub fn TabSheet_GetConstraints(AObj: usize) -> usize;
  pub fn TabSheet_SetConstraints(AObj: usize, AValue: usize);
  pub fn TabSheet_GetPageIndex(AObj: usize) -> i32;
  pub fn TabSheet_SetPageIndex(AObj: usize, AValue: i32);
  pub fn TabSheet_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn TabSheet_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn TabSheet_GetParentFont(AObj: usize) -> bool;
  pub fn TabSheet_SetParentFont(AObj: usize, AValue: bool);
  pub fn TabSheet_GetParentShowHint(AObj: usize) -> bool;
  pub fn TabSheet_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn TabSheet_GetPopupMenu(AObj: usize) -> usize;
  pub fn TabSheet_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn TabSheet_GetShowHint(AObj: usize) -> bool;
  pub fn TabSheet_SetShowHint(AObj: usize, AValue: bool);
  pub fn TabSheet_GetTabVisible(AObj: usize) -> bool;
  pub fn TabSheet_SetTabVisible(AObj: usize, AValue: bool);
  pub fn TabSheet_GetTop(AObj: usize) -> i32;
  pub fn TabSheet_SetTop(AObj: usize, AValue: i32);
  pub fn TabSheet_GetVisible(AObj: usize) -> bool;
  pub fn TabSheet_SetVisible(AObj: usize, AValue: bool);
  pub fn TabSheet_GetWidth(AObj: usize) -> i32;
  pub fn TabSheet_SetWidth(AObj: usize, AValue: i32);
  pub fn TabSheet_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnExit(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnHide(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnResize(AObj: usize, AEventId: usize);
  pub fn TabSheet_SetOnShow(AObj: usize, AEventId: usize);
  pub fn TabSheet_GetDockClientCount(AObj: usize) -> i32;
  pub fn TabSheet_GetDockSite(AObj: usize) -> bool;
  pub fn TabSheet_SetDockSite(AObj: usize, AValue: bool);
  pub fn TabSheet_GetMouseInClient(AObj: usize) -> bool;
  pub fn TabSheet_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn TabSheet_GetBrush(AObj: usize) -> usize;
  pub fn TabSheet_GetControlCount(AObj: usize) -> i32;
  pub fn TabSheet_GetHandle(AObj: usize) -> HWND;
  pub fn TabSheet_GetParentWindow(AObj: usize) -> HWND;
  pub fn TabSheet_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn TabSheet_GetShowing(AObj: usize) -> bool;
  pub fn TabSheet_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn TabSheet_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn TabSheet_GetTabStop(AObj: usize) -> bool;
  pub fn TabSheet_SetTabStop(AObj: usize, AValue: bool);
  pub fn TabSheet_GetUseDockManager(AObj: usize) -> bool;
  pub fn TabSheet_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn TabSheet_GetAction(AObj: usize) -> usize;
  pub fn TabSheet_SetAction(AObj: usize, AValue: usize);
  pub fn TabSheet_GetAlign(AObj: usize) -> TAlign;
  pub fn TabSheet_SetAlign(AObj: usize, AValue: TAlign);
  pub fn TabSheet_GetAnchors(AObj: usize) -> TAnchors;
  pub fn TabSheet_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn TabSheet_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn TabSheet_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn TabSheet_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn TabSheet_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn TabSheet_GetClientHeight(AObj: usize) -> i32;
  pub fn TabSheet_SetClientHeight(AObj: usize, AValue: i32);
  pub fn TabSheet_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn TabSheet_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn TabSheet_GetClientWidth(AObj: usize) -> i32;
  pub fn TabSheet_SetClientWidth(AObj: usize, AValue: i32);
  pub fn TabSheet_GetControlState(AObj: usize) -> TControlState;
  pub fn TabSheet_SetControlState(AObj: usize, AValue: TControlState);
  pub fn TabSheet_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn TabSheet_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn TabSheet_GetFloating(AObj: usize) -> bool;
  pub fn TabSheet_GetParent(AObj: usize) -> usize;
  pub fn TabSheet_SetParent(AObj: usize, AValue: usize);
  pub fn TabSheet_GetCursor(AObj: usize) -> TCursor;
  pub fn TabSheet_SetCursor(AObj: usize, AValue: TCursor);
  pub fn TabSheet_GetHint(AObj: usize) -> *const c_char;
  pub fn TabSheet_SetHint(AObj: usize, AValue: *const c_char);
  pub fn TabSheet_GetComponentCount(AObj: usize) -> i32;
  pub fn TabSheet_GetComponentIndex(AObj: usize) -> i32;
  pub fn TabSheet_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn TabSheet_GetOwner(AObj: usize) -> usize;
  pub fn TabSheet_GetName(AObj: usize) -> *const c_char;
  pub fn TabSheet_SetName(AObj: usize, AValue: *const c_char);
  pub fn TabSheet_GetTag(AObj: usize) -> isize;
  pub fn TabSheet_SetTag(AObj: usize, AValue: isize);
  pub fn TabSheet_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn TabSheet_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn TabSheet_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn TabSheet_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn TabSheet_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn TabSheet_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn TabSheet_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn TabSheet_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn TabSheet_GetChildSizing(AObj: usize) -> usize;
  pub fn TabSheet_SetChildSizing(AObj: usize, AValue: usize);
  pub fn TabSheet_GetBorderSpacing(AObj: usize) -> usize;
  pub fn TabSheet_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn TabSheet_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn TabSheet_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn TabSheet_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn TabSheet_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn TabSheet_StaticClassType() -> TClass;

  // ----------------- TButton ----------------------
  pub fn Button_Create(AOwner: usize) -> usize;
  pub fn Button_Free(AObj: usize);
  pub fn Button_Click(AObj: usize);
  pub fn Button_CanFocus(AObj: usize) -> bool;
  pub fn Button_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Button_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Button_DisableAlign(AObj: usize);
  pub fn Button_EnableAlign(AObj: usize);
  pub fn Button_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Button_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Button_Focused(AObj: usize) -> bool;
  pub fn Button_HandleAllocated(AObj: usize) -> bool;
  pub fn Button_InsertControl(AObj: usize, AControl: usize);
  pub fn Button_Invalidate(AObj: usize);
  pub fn Button_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Button_RemoveControl(AObj: usize, AControl: usize);
  pub fn Button_Realign(AObj: usize);
  pub fn Button_Repaint(AObj: usize);
  pub fn Button_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Button_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Button_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Button_SetFocus(AObj: usize);
  pub fn Button_Update(AObj: usize);
  pub fn Button_BringToFront(AObj: usize);
  pub fn Button_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Button_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Button_Dragging(AObj: usize) -> bool;
  pub fn Button_HasParent(AObj: usize) -> bool;
  pub fn Button_Hide(AObj: usize);
  pub fn Button_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Button_Refresh(AObj: usize);
  pub fn Button_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Button_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Button_SendToBack(AObj: usize);
  pub fn Button_Show(AObj: usize);
  pub fn Button_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Button_GetTextLen(AObj: usize) -> i32;
  pub fn Button_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Button_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Button_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Button_Assign(AObj: usize, Source: usize);
  pub fn Button_ClassType(AObj: usize) -> TClass;
  pub fn Button_ClassName(AObj: usize) -> *const c_char;
  pub fn Button_InstanceSize(AObj: usize) -> i32;
  pub fn Button_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Button_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Button_GetHashCode(AObj: usize) -> i32;
  pub fn Button_ToString(AObj: usize) -> *const c_char;
  pub fn Button_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Button_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Button_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Button_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Button_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Button_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Button_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Button_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Button_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Button_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Button_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Button_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Button_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Button_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Button_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Button_GetAction(AObj: usize) -> usize;
  pub fn Button_SetAction(AObj: usize, AValue: usize);
  pub fn Button_GetAlign(AObj: usize) -> TAlign;
  pub fn Button_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Button_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Button_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Button_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Button_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Button_GetCancel(AObj: usize) -> bool;
  pub fn Button_SetCancel(AObj: usize, AValue: bool);
  pub fn Button_GetCaption(AObj: usize) -> *const c_char;
  pub fn Button_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn Button_GetConstraints(AObj: usize) -> usize;
  pub fn Button_SetConstraints(AObj: usize, AValue: usize);
  pub fn Button_GetDefault(AObj: usize) -> bool;
  pub fn Button_SetDefault(AObj: usize, AValue: bool);
  pub fn Button_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Button_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Button_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Button_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Button_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Button_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Button_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Button_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Button_GetEnabled(AObj: usize) -> bool;
  pub fn Button_SetEnabled(AObj: usize, AValue: bool);
  pub fn Button_GetFont(AObj: usize) -> usize;
  pub fn Button_SetFont(AObj: usize, AValue: usize);
  pub fn Button_GetModalResult(AObj: usize) -> TModalResult;
  pub fn Button_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn Button_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Button_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Button_GetParentFont(AObj: usize) -> bool;
  pub fn Button_SetParentFont(AObj: usize, AValue: bool);
  pub fn Button_GetParentShowHint(AObj: usize) -> bool;
  pub fn Button_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Button_GetPopupMenu(AObj: usize) -> usize;
  pub fn Button_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Button_GetShowHint(AObj: usize) -> bool;
  pub fn Button_SetShowHint(AObj: usize, AValue: bool);
  pub fn Button_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Button_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Button_GetTabStop(AObj: usize) -> bool;
  pub fn Button_SetTabStop(AObj: usize, AValue: bool);
  pub fn Button_GetVisible(AObj: usize) -> bool;
  pub fn Button_SetVisible(AObj: usize, AValue: bool);
  pub fn Button_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Button_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Button_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Button_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Button_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Button_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn Button_SetOnExit(AObj: usize, AEventId: usize);
  pub fn Button_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn Button_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn Button_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn Button_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Button_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Button_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Button_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Button_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Button_GetDockClientCount(AObj: usize) -> i32;
  pub fn Button_GetDockSite(AObj: usize) -> bool;
  pub fn Button_SetDockSite(AObj: usize, AValue: bool);
  pub fn Button_GetMouseInClient(AObj: usize) -> bool;
  pub fn Button_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Button_GetBrush(AObj: usize) -> usize;
  pub fn Button_GetControlCount(AObj: usize) -> i32;
  pub fn Button_GetHandle(AObj: usize) -> HWND;
  pub fn Button_GetParentWindow(AObj: usize) -> HWND;
  pub fn Button_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Button_GetShowing(AObj: usize) -> bool;
  pub fn Button_GetUseDockManager(AObj: usize) -> bool;
  pub fn Button_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Button_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Button_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Button_GetClientHeight(AObj: usize) -> i32;
  pub fn Button_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Button_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Button_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Button_GetClientWidth(AObj: usize) -> i32;
  pub fn Button_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Button_GetControlState(AObj: usize) -> TControlState;
  pub fn Button_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Button_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Button_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Button_GetFloating(AObj: usize) -> bool;
  pub fn Button_GetParent(AObj: usize) -> usize;
  pub fn Button_SetParent(AObj: usize, AValue: usize);
  pub fn Button_GetLeft(AObj: usize) -> i32;
  pub fn Button_SetLeft(AObj: usize, AValue: i32);
  pub fn Button_GetTop(AObj: usize) -> i32;
  pub fn Button_SetTop(AObj: usize, AValue: i32);
  pub fn Button_GetWidth(AObj: usize) -> i32;
  pub fn Button_SetWidth(AObj: usize, AValue: i32);
  pub fn Button_GetHeight(AObj: usize) -> i32;
  pub fn Button_SetHeight(AObj: usize, AValue: i32);
  pub fn Button_GetCursor(AObj: usize) -> TCursor;
  pub fn Button_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Button_GetHint(AObj: usize) -> *const c_char;
  pub fn Button_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Button_GetComponentCount(AObj: usize) -> i32;
  pub fn Button_GetComponentIndex(AObj: usize) -> i32;
  pub fn Button_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Button_GetOwner(AObj: usize) -> usize;
  pub fn Button_GetName(AObj: usize) -> *const c_char;
  pub fn Button_SetName(AObj: usize, AValue: *const c_char);
  pub fn Button_GetTag(AObj: usize) -> isize;
  pub fn Button_SetTag(AObj: usize, AValue: isize);
  pub fn Button_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Button_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Button_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Button_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Button_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Button_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Button_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Button_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Button_GetChildSizing(AObj: usize) -> usize;
  pub fn Button_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Button_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Button_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Button_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Button_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Button_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Button_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Button_StaticClassType() -> TClass;

  // ----------------- TEdit ----------------------
  pub fn Edit_Create(AOwner: usize) -> usize;
  pub fn Edit_Free(AObj: usize);
  pub fn Edit_Clear(AObj: usize);
  pub fn Edit_ClearSelection(AObj: usize);
  pub fn Edit_CopyToClipboard(AObj: usize);
  pub fn Edit_CutToClipboard(AObj: usize);
  pub fn Edit_PasteFromClipboard(AObj: usize);
  pub fn Edit_Undo(AObj: usize);
  pub fn Edit_SelectAll(AObj: usize);
  pub fn Edit_CanFocus(AObj: usize) -> bool;
  pub fn Edit_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Edit_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Edit_DisableAlign(AObj: usize);
  pub fn Edit_EnableAlign(AObj: usize);
  pub fn Edit_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Edit_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Edit_Focused(AObj: usize) -> bool;
  pub fn Edit_HandleAllocated(AObj: usize) -> bool;
  pub fn Edit_InsertControl(AObj: usize, AControl: usize);
  pub fn Edit_Invalidate(AObj: usize);
  pub fn Edit_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Edit_RemoveControl(AObj: usize, AControl: usize);
  pub fn Edit_Realign(AObj: usize);
  pub fn Edit_Repaint(AObj: usize);
  pub fn Edit_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Edit_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Edit_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Edit_SetFocus(AObj: usize);
  pub fn Edit_Update(AObj: usize);
  pub fn Edit_BringToFront(AObj: usize);
  pub fn Edit_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Edit_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Edit_Dragging(AObj: usize) -> bool;
  pub fn Edit_HasParent(AObj: usize) -> bool;
  pub fn Edit_Hide(AObj: usize);
  pub fn Edit_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Edit_Refresh(AObj: usize);
  pub fn Edit_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Edit_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Edit_SendToBack(AObj: usize);
  pub fn Edit_Show(AObj: usize);
  pub fn Edit_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Edit_GetTextLen(AObj: usize) -> i32;
  pub fn Edit_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Edit_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Edit_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Edit_Assign(AObj: usize, Source: usize);
  pub fn Edit_ClassType(AObj: usize) -> TClass;
  pub fn Edit_ClassName(AObj: usize) -> *const c_char;
  pub fn Edit_InstanceSize(AObj: usize) -> i32;
  pub fn Edit_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Edit_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Edit_GetHashCode(AObj: usize) -> i32;
  pub fn Edit_ToString(AObj: usize) -> *const c_char;
  pub fn Edit_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Edit_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Edit_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Edit_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Edit_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Edit_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Edit_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Edit_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Edit_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Edit_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Edit_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Edit_GetAlign(AObj: usize) -> TAlign;
  pub fn Edit_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Edit_GetAlignment(AObj: usize) -> TAlignment;
  pub fn Edit_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn Edit_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Edit_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Edit_GetAutoSelect(AObj: usize) -> bool;
  pub fn Edit_SetAutoSelect(AObj: usize, AValue: bool);
  pub fn Edit_GetAutoSize(AObj: usize) -> bool;
  pub fn Edit_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Edit_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Edit_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Edit_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn Edit_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn Edit_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn Edit_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn Edit_GetColor(AObj: usize) -> TColor;
  pub fn Edit_SetColor(AObj: usize, AValue: TColor);
  pub fn Edit_GetConstraints(AObj: usize) -> usize;
  pub fn Edit_SetConstraints(AObj: usize, AValue: usize);
  pub fn Edit_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Edit_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Edit_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Edit_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Edit_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Edit_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Edit_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Edit_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Edit_GetEnabled(AObj: usize) -> bool;
  pub fn Edit_SetEnabled(AObj: usize, AValue: bool);
  pub fn Edit_GetFont(AObj: usize) -> usize;
  pub fn Edit_SetFont(AObj: usize, AValue: usize);
  pub fn Edit_GetHideSelection(AObj: usize) -> bool;
  pub fn Edit_SetHideSelection(AObj: usize, AValue: bool);
  pub fn Edit_GetMaxLength(AObj: usize) -> i32;
  pub fn Edit_SetMaxLength(AObj: usize, AValue: i32);
  pub fn Edit_GetNumbersOnly(AObj: usize) -> bool;
  pub fn Edit_SetNumbersOnly(AObj: usize, AValue: bool);
  pub fn Edit_GetParentColor(AObj: usize) -> bool;
  pub fn Edit_SetParentColor(AObj: usize, AValue: bool);
  pub fn Edit_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Edit_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Edit_GetParentFont(AObj: usize) -> bool;
  pub fn Edit_SetParentFont(AObj: usize, AValue: bool);
  pub fn Edit_GetParentShowHint(AObj: usize) -> bool;
  pub fn Edit_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Edit_GetPasswordChar(AObj: usize) -> Char;
  pub fn Edit_SetPasswordChar(AObj: usize, AValue: Char);
  pub fn Edit_GetPopupMenu(AObj: usize) -> usize;
  pub fn Edit_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Edit_GetReadOnly(AObj: usize) -> bool;
  pub fn Edit_SetReadOnly(AObj: usize, AValue: bool);
  pub fn Edit_GetShowHint(AObj: usize) -> bool;
  pub fn Edit_SetShowHint(AObj: usize, AValue: bool);
  pub fn Edit_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Edit_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Edit_GetTabStop(AObj: usize) -> bool;
  pub fn Edit_SetTabStop(AObj: usize, AValue: bool);
  pub fn Edit_GetText(AObj: usize) -> *const c_char;
  pub fn Edit_SetText(AObj: usize, AValue: *const c_char);
  pub fn Edit_GetTextHint(AObj: usize) -> *const c_char;
  pub fn Edit_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn Edit_GetVisible(AObj: usize) -> bool;
  pub fn Edit_SetVisible(AObj: usize, AValue: bool);
  pub fn Edit_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnExit(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Edit_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Edit_GetCanUndo(AObj: usize) -> bool;
  pub fn Edit_GetModified(AObj: usize) -> bool;
  pub fn Edit_SetModified(AObj: usize, AValue: bool);
  pub fn Edit_GetSelLength(AObj: usize) -> i32;
  pub fn Edit_SetSelLength(AObj: usize, AValue: i32);
  pub fn Edit_GetSelStart(AObj: usize) -> i32;
  pub fn Edit_SetSelStart(AObj: usize, AValue: i32);
  pub fn Edit_GetSelText(AObj: usize) -> *const c_char;
  pub fn Edit_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn Edit_GetDockClientCount(AObj: usize) -> i32;
  pub fn Edit_GetDockSite(AObj: usize) -> bool;
  pub fn Edit_SetDockSite(AObj: usize, AValue: bool);
  pub fn Edit_GetMouseInClient(AObj: usize) -> bool;
  pub fn Edit_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Edit_GetBrush(AObj: usize) -> usize;
  pub fn Edit_GetControlCount(AObj: usize) -> i32;
  pub fn Edit_GetHandle(AObj: usize) -> HWND;
  pub fn Edit_GetParentWindow(AObj: usize) -> HWND;
  pub fn Edit_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Edit_GetShowing(AObj: usize) -> bool;
  pub fn Edit_GetUseDockManager(AObj: usize) -> bool;
  pub fn Edit_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Edit_GetAction(AObj: usize) -> usize;
  pub fn Edit_SetAction(AObj: usize, AValue: usize);
  pub fn Edit_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Edit_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Edit_GetClientHeight(AObj: usize) -> i32;
  pub fn Edit_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Edit_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Edit_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Edit_GetClientWidth(AObj: usize) -> i32;
  pub fn Edit_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Edit_GetControlState(AObj: usize) -> TControlState;
  pub fn Edit_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Edit_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Edit_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Edit_GetFloating(AObj: usize) -> bool;
  pub fn Edit_GetParent(AObj: usize) -> usize;
  pub fn Edit_SetParent(AObj: usize, AValue: usize);
  pub fn Edit_GetLeft(AObj: usize) -> i32;
  pub fn Edit_SetLeft(AObj: usize, AValue: i32);
  pub fn Edit_GetTop(AObj: usize) -> i32;
  pub fn Edit_SetTop(AObj: usize, AValue: i32);
  pub fn Edit_GetWidth(AObj: usize) -> i32;
  pub fn Edit_SetWidth(AObj: usize, AValue: i32);
  pub fn Edit_GetHeight(AObj: usize) -> i32;
  pub fn Edit_SetHeight(AObj: usize, AValue: i32);
  pub fn Edit_GetCursor(AObj: usize) -> TCursor;
  pub fn Edit_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Edit_GetHint(AObj: usize) -> *const c_char;
  pub fn Edit_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Edit_GetComponentCount(AObj: usize) -> i32;
  pub fn Edit_GetComponentIndex(AObj: usize) -> i32;
  pub fn Edit_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Edit_GetOwner(AObj: usize) -> usize;
  pub fn Edit_GetName(AObj: usize) -> *const c_char;
  pub fn Edit_SetName(AObj: usize, AValue: *const c_char);
  pub fn Edit_GetTag(AObj: usize) -> isize;
  pub fn Edit_SetTag(AObj: usize, AValue: isize);
  pub fn Edit_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Edit_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Edit_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Edit_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Edit_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Edit_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Edit_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Edit_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Edit_GetChildSizing(AObj: usize) -> usize;
  pub fn Edit_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Edit_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Edit_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Edit_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Edit_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Edit_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Edit_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Edit_StaticClassType() -> TClass;

  // ----------------- TScreen ----------------------
  pub fn Screen_Create(AOwner: usize) -> usize;
  pub fn Screen_Free(AObj: usize);
  pub fn Screen_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Screen_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Screen_HasParent(AObj: usize) -> bool;
  pub fn Screen_Assign(AObj: usize, Source: usize);
  pub fn Screen_ClassType(AObj: usize) -> TClass;
  pub fn Screen_ClassName(AObj: usize) -> *const c_char;
  pub fn Screen_InstanceSize(AObj: usize) -> i32;
  pub fn Screen_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Screen_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Screen_GetHashCode(AObj: usize) -> i32;
  pub fn Screen_ToString(AObj: usize) -> *const c_char;
  pub fn Screen_GetActiveControl(AObj: usize) -> usize;
  pub fn Screen_GetActiveForm(AObj: usize) -> usize;
  pub fn Screen_GetCustomFormCount(AObj: usize) -> i32;
  pub fn Screen_GetCursor(AObj: usize) -> TCursor;
  pub fn Screen_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Screen_GetFocusedForm(AObj: usize) -> usize;
  pub fn Screen_GetMonitorCount(AObj: usize) -> i32;
  pub fn Screen_GetDesktopRect(AObj: usize, Result: *mut TRect);
  pub fn Screen_GetDesktopHeight(AObj: usize) -> i32;
  pub fn Screen_GetDesktopLeft(AObj: usize) -> i32;
  pub fn Screen_GetDesktopTop(AObj: usize) -> i32;
  pub fn Screen_GetDesktopWidth(AObj: usize) -> i32;
  pub fn Screen_GetWorkAreaRect(AObj: usize, Result: *mut TRect);
  pub fn Screen_GetWorkAreaHeight(AObj: usize) -> i32;
  pub fn Screen_GetWorkAreaLeft(AObj: usize) -> i32;
  pub fn Screen_GetWorkAreaTop(AObj: usize) -> i32;
  pub fn Screen_GetWorkAreaWidth(AObj: usize) -> i32;
  pub fn Screen_GetFonts(AObj: usize) -> usize;
  pub fn Screen_GetFormCount(AObj: usize) -> i32;
  pub fn Screen_GetHeight(AObj: usize) -> i32;
  pub fn Screen_GetPixelsPerInch(AObj: usize) -> i32;
  pub fn Screen_GetPrimaryMonitor(AObj: usize) -> usize;
  pub fn Screen_GetWidth(AObj: usize) -> i32;
  pub fn Screen_GetComponentCount(AObj: usize) -> i32;
  pub fn Screen_GetComponentIndex(AObj: usize) -> i32;
  pub fn Screen_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Screen_GetOwner(AObj: usize) -> usize;
  pub fn Screen_GetName(AObj: usize) -> *const c_char;
  pub fn Screen_SetName(AObj: usize, AValue: *const c_char);
  pub fn Screen_GetTag(AObj: usize) -> isize;
  pub fn Screen_SetTag(AObj: usize, AValue: isize);
  pub fn Screen_GetCursors(AObj: usize, Index: i32) -> HICON;
  pub fn Screen_SetCursors(AObj: usize, Index: i32, AValue: HICON);
  pub fn Screen_GetMonitors(AObj: usize, Index: i32) -> usize;
  pub fn Screen_GetForms(AObj: usize, Index: i32) -> usize;
  pub fn Screen_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Screen_StaticClassType() -> TClass;

  // ----------------- TMouse ----------------------
  pub fn Mouse_Create() -> usize;
  pub fn Mouse_Free(AObj: usize);
  pub fn Mouse_ClassType(AObj: usize) -> TClass;
  pub fn Mouse_ClassName(AObj: usize) -> *const c_char;
  pub fn Mouse_InstanceSize(AObj: usize) -> i32;
  pub fn Mouse_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Mouse_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Mouse_GetHashCode(AObj: usize) -> i32;
  pub fn Mouse_ToString(AObj: usize) -> *const c_char;
  pub fn Mouse_GetCapture(AObj: usize) -> HWND;
  pub fn Mouse_SetCapture(AObj: usize, AValue: HWND);
  pub fn Mouse_GetCursorPos(AObj: usize, Result: *mut TPoint);
  pub fn Mouse_SetCursorPos(AObj: usize, AValue: *mut TPoint);
  pub fn Mouse_GetIsDragging(AObj: usize) -> bool;
  pub fn Mouse_GetWheelScrollLines(AObj: usize) -> i32;
  pub fn Mouse_StaticClassType() -> TClass;

  // ----------------- TListColumn ----------------------
  pub fn ListColumn_Create(AOwner: usize) -> usize;
  pub fn ListColumn_Free(AObj: usize);
  pub fn ListColumn_Assign(AObj: usize, Source: usize);
  pub fn ListColumn_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ListColumn_ClassType(AObj: usize) -> TClass;
  pub fn ListColumn_ClassName(AObj: usize) -> *const c_char;
  pub fn ListColumn_InstanceSize(AObj: usize) -> i32;
  pub fn ListColumn_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ListColumn_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ListColumn_GetHashCode(AObj: usize) -> i32;
  pub fn ListColumn_ToString(AObj: usize) -> *const c_char;
  pub fn ListColumn_GetSortIndicator(AObj: usize) -> TSortIndicator;
  pub fn ListColumn_SetSortIndicator(AObj: usize, AValue: TSortIndicator);
  pub fn ListColumn_GetAlignment(AObj: usize) -> TAlignment;
  pub fn ListColumn_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn ListColumn_GetAutoSize(AObj: usize) -> bool;
  pub fn ListColumn_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ListColumn_GetCaption(AObj: usize) -> *const c_char;
  pub fn ListColumn_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ListColumn_GetImageIndex(AObj: usize) -> i32;
  pub fn ListColumn_SetImageIndex(AObj: usize, AValue: i32);
  pub fn ListColumn_GetMaxWidth(AObj: usize) -> i32;
  pub fn ListColumn_SetMaxWidth(AObj: usize, AValue: i32);
  pub fn ListColumn_GetMinWidth(AObj: usize) -> i32;
  pub fn ListColumn_SetMinWidth(AObj: usize, AValue: i32);
  pub fn ListColumn_GetTag(AObj: usize) -> i32;
  pub fn ListColumn_SetTag(AObj: usize, AValue: i32);
  pub fn ListColumn_GetWidth(AObj: usize) -> i32;
  pub fn ListColumn_SetWidth(AObj: usize, AValue: i32);
  pub fn ListColumn_GetCollection(AObj: usize) -> usize;
  pub fn ListColumn_SetCollection(AObj: usize, AValue: usize);
  pub fn ListColumn_GetIndex(AObj: usize) -> i32;
  pub fn ListColumn_SetIndex(AObj: usize, AValue: i32);
  pub fn ListColumn_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn ListColumn_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn ListColumn_StaticClassType() -> TClass;

  // ----------------- TCollectionItem ----------------------
  pub fn CollectionItem_Create(AOwner: usize) -> usize;
  pub fn CollectionItem_Free(AObj: usize);
  pub fn CollectionItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CollectionItem_Assign(AObj: usize, Source: usize);
  pub fn CollectionItem_ClassType(AObj: usize) -> TClass;
  pub fn CollectionItem_ClassName(AObj: usize) -> *const c_char;
  pub fn CollectionItem_InstanceSize(AObj: usize) -> i32;
  pub fn CollectionItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CollectionItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CollectionItem_GetHashCode(AObj: usize) -> i32;
  pub fn CollectionItem_ToString(AObj: usize) -> *const c_char;
  pub fn CollectionItem_GetCollection(AObj: usize) -> usize;
  pub fn CollectionItem_SetCollection(AObj: usize, AValue: usize);
  pub fn CollectionItem_GetIndex(AObj: usize) -> i32;
  pub fn CollectionItem_SetIndex(AObj: usize, AValue: i32);
  pub fn CollectionItem_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn CollectionItem_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn CollectionItem_StaticClassType() -> TClass;

  // ----------------- TStatusPanels ----------------------
  pub fn StatusPanels_Create(AOwner: usize) -> usize;
  pub fn StatusPanels_Free(AObj: usize);
  pub fn StatusPanels_Add(AObj: usize) -> usize;
  pub fn StatusPanels_Insert(AObj: usize, Index: i32) -> usize;
  pub fn StatusPanels_Owner(AObj: usize) -> usize;
  pub fn StatusPanels_Assign(AObj: usize, Source: usize);
  pub fn StatusPanels_BeginUpdate(AObj: usize);
  pub fn StatusPanels_Clear(AObj: usize);
  pub fn StatusPanels_Delete(AObj: usize, Index: i32);
  pub fn StatusPanels_EndUpdate(AObj: usize);
  pub fn StatusPanels_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn StatusPanels_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StatusPanels_ClassType(AObj: usize) -> TClass;
  pub fn StatusPanels_ClassName(AObj: usize) -> *const c_char;
  pub fn StatusPanels_InstanceSize(AObj: usize) -> i32;
  pub fn StatusPanels_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StatusPanels_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn StatusPanels_GetHashCode(AObj: usize) -> i32;
  pub fn StatusPanels_ToString(AObj: usize) -> *const c_char;
  pub fn StatusPanels_GetCapacity(AObj: usize) -> i32;
  pub fn StatusPanels_SetCapacity(AObj: usize, AValue: i32);
  pub fn StatusPanels_GetCount(AObj: usize) -> i32;
  pub fn StatusPanels_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn StatusPanels_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn StatusPanels_StaticClassType() -> TClass;

  // ----------------- TStatusPanel ----------------------
  pub fn StatusPanel_Create(AOwner: usize) -> usize;
  pub fn StatusPanel_Free(AObj: usize);
  pub fn StatusPanel_Assign(AObj: usize, Source: usize);
  pub fn StatusPanel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StatusPanel_ClassType(AObj: usize) -> TClass;
  pub fn StatusPanel_ClassName(AObj: usize) -> *const c_char;
  pub fn StatusPanel_InstanceSize(AObj: usize) -> i32;
  pub fn StatusPanel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StatusPanel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn StatusPanel_GetHashCode(AObj: usize) -> i32;
  pub fn StatusPanel_ToString(AObj: usize) -> *const c_char;
  pub fn StatusPanel_GetAlignment(AObj: usize) -> TAlignment;
  pub fn StatusPanel_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn StatusPanel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn StatusPanel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn StatusPanel_GetStyle(AObj: usize) -> TStatusPanelStyle;
  pub fn StatusPanel_SetStyle(AObj: usize, AValue: TStatusPanelStyle);
  pub fn StatusPanel_GetText(AObj: usize) -> *const c_char;
  pub fn StatusPanel_SetText(AObj: usize, AValue: *const c_char);
  pub fn StatusPanel_GetWidth(AObj: usize) -> i32;
  pub fn StatusPanel_SetWidth(AObj: usize, AValue: i32);
  pub fn StatusPanel_GetCollection(AObj: usize) -> usize;
  pub fn StatusPanel_SetCollection(AObj: usize, AValue: usize);
  pub fn StatusPanel_GetIndex(AObj: usize) -> i32;
  pub fn StatusPanel_SetIndex(AObj: usize, AValue: i32);
  pub fn StatusPanel_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn StatusPanel_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn StatusPanel_StaticClassType() -> TClass;

  // ----------------- TSpinEdit ----------------------
  pub fn SpinEdit_Create(AOwner: usize) -> usize;
  pub fn SpinEdit_Free(AObj: usize);
  pub fn SpinEdit_Clear(AObj: usize);
  pub fn SpinEdit_ClearSelection(AObj: usize);
  pub fn SpinEdit_CopyToClipboard(AObj: usize);
  pub fn SpinEdit_CutToClipboard(AObj: usize);
  pub fn SpinEdit_PasteFromClipboard(AObj: usize);
  pub fn SpinEdit_Undo(AObj: usize);
  pub fn SpinEdit_SelectAll(AObj: usize);
  pub fn SpinEdit_CanFocus(AObj: usize) -> bool;
  pub fn SpinEdit_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn SpinEdit_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn SpinEdit_DisableAlign(AObj: usize);
  pub fn SpinEdit_EnableAlign(AObj: usize);
  pub fn SpinEdit_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn SpinEdit_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn SpinEdit_Focused(AObj: usize) -> bool;
  pub fn SpinEdit_HandleAllocated(AObj: usize) -> bool;
  pub fn SpinEdit_InsertControl(AObj: usize, AControl: usize);
  pub fn SpinEdit_Invalidate(AObj: usize);
  pub fn SpinEdit_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn SpinEdit_RemoveControl(AObj: usize, AControl: usize);
  pub fn SpinEdit_Realign(AObj: usize);
  pub fn SpinEdit_Repaint(AObj: usize);
  pub fn SpinEdit_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn SpinEdit_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn SpinEdit_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn SpinEdit_SetFocus(AObj: usize);
  pub fn SpinEdit_Update(AObj: usize);
  pub fn SpinEdit_BringToFront(AObj: usize);
  pub fn SpinEdit_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn SpinEdit_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn SpinEdit_Dragging(AObj: usize) -> bool;
  pub fn SpinEdit_HasParent(AObj: usize) -> bool;
  pub fn SpinEdit_Hide(AObj: usize);
  pub fn SpinEdit_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn SpinEdit_Refresh(AObj: usize);
  pub fn SpinEdit_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn SpinEdit_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn SpinEdit_SendToBack(AObj: usize);
  pub fn SpinEdit_Show(AObj: usize);
  pub fn SpinEdit_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn SpinEdit_GetTextLen(AObj: usize) -> i32;
  pub fn SpinEdit_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn SpinEdit_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn SpinEdit_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SpinEdit_Assign(AObj: usize, Source: usize);
  pub fn SpinEdit_ClassType(AObj: usize) -> TClass;
  pub fn SpinEdit_ClassName(AObj: usize) -> *const c_char;
  pub fn SpinEdit_InstanceSize(AObj: usize) -> i32;
  pub fn SpinEdit_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SpinEdit_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SpinEdit_GetHashCode(AObj: usize) -> i32;
  pub fn SpinEdit_ToString(AObj: usize) -> *const c_char;
  pub fn SpinEdit_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn SpinEdit_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn SpinEdit_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn SpinEdit_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn SpinEdit_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn SpinEdit_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn SpinEdit_AnchorClient(AObj: usize, ASpace: i32);
  pub fn SpinEdit_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn SpinEdit_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn SpinEdit_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn SpinEdit_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn SpinEdit_GetAnchors(AObj: usize) -> TAnchors;
  pub fn SpinEdit_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn SpinEdit_GetAutoSelect(AObj: usize) -> bool;
  pub fn SpinEdit_SetAutoSelect(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetAutoSize(AObj: usize) -> bool;
  pub fn SpinEdit_SetAutoSize(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetColor(AObj: usize) -> TColor;
  pub fn SpinEdit_SetColor(AObj: usize, AValue: TColor);
  pub fn SpinEdit_GetConstraints(AObj: usize) -> usize;
  pub fn SpinEdit_SetConstraints(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetEnabled(AObj: usize) -> bool;
  pub fn SpinEdit_SetEnabled(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetFont(AObj: usize) -> usize;
  pub fn SpinEdit_SetFont(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetIncrement(AObj: usize) -> i32;
  pub fn SpinEdit_SetIncrement(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetMaxLength(AObj: usize) -> i32;
  pub fn SpinEdit_SetMaxLength(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetMaxValue(AObj: usize) -> i32;
  pub fn SpinEdit_SetMaxValue(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetMinValue(AObj: usize) -> i32;
  pub fn SpinEdit_SetMinValue(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetParentColor(AObj: usize) -> bool;
  pub fn SpinEdit_SetParentColor(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetParentFont(AObj: usize) -> bool;
  pub fn SpinEdit_SetParentFont(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetParentShowHint(AObj: usize) -> bool;
  pub fn SpinEdit_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetPopupMenu(AObj: usize) -> usize;
  pub fn SpinEdit_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetReadOnly(AObj: usize) -> bool;
  pub fn SpinEdit_SetReadOnly(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetShowHint(AObj: usize) -> bool;
  pub fn SpinEdit_SetShowHint(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn SpinEdit_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn SpinEdit_GetTabStop(AObj: usize) -> bool;
  pub fn SpinEdit_SetTabStop(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetValue(AObj: usize) -> i32;
  pub fn SpinEdit_SetValue(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetVisible(AObj: usize) -> bool;
  pub fn SpinEdit_SetVisible(AObj: usize, AValue: bool);
  pub fn SpinEdit_SetOnChange(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnClick(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnExit(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn SpinEdit_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn SpinEdit_GetAlignment(AObj: usize) -> TAlignment;
  pub fn SpinEdit_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn SpinEdit_GetCanUndo(AObj: usize) -> bool;
  pub fn SpinEdit_GetModified(AObj: usize) -> bool;
  pub fn SpinEdit_SetModified(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetSelLength(AObj: usize) -> i32;
  pub fn SpinEdit_SetSelLength(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetSelStart(AObj: usize) -> i32;
  pub fn SpinEdit_SetSelStart(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetSelText(AObj: usize) -> *const c_char;
  pub fn SpinEdit_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn SpinEdit_GetText(AObj: usize) -> *const c_char;
  pub fn SpinEdit_SetText(AObj: usize, AValue: *const c_char);
  pub fn SpinEdit_GetTextHint(AObj: usize) -> *const c_char;
  pub fn SpinEdit_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn SpinEdit_GetDockClientCount(AObj: usize) -> i32;
  pub fn SpinEdit_GetDockSite(AObj: usize) -> bool;
  pub fn SpinEdit_SetDockSite(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn SpinEdit_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetMouseInClient(AObj: usize) -> bool;
  pub fn SpinEdit_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn SpinEdit_GetBrush(AObj: usize) -> usize;
  pub fn SpinEdit_GetControlCount(AObj: usize) -> i32;
  pub fn SpinEdit_GetHandle(AObj: usize) -> HWND;
  pub fn SpinEdit_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn SpinEdit_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetParentWindow(AObj: usize) -> HWND;
  pub fn SpinEdit_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn SpinEdit_GetShowing(AObj: usize) -> bool;
  pub fn SpinEdit_GetUseDockManager(AObj: usize) -> bool;
  pub fn SpinEdit_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn SpinEdit_GetAction(AObj: usize) -> usize;
  pub fn SpinEdit_SetAction(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetAlign(AObj: usize) -> TAlign;
  pub fn SpinEdit_SetAlign(AObj: usize, AValue: TAlign);
  pub fn SpinEdit_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn SpinEdit_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn SpinEdit_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn SpinEdit_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn SpinEdit_GetClientHeight(AObj: usize) -> i32;
  pub fn SpinEdit_SetClientHeight(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn SpinEdit_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn SpinEdit_GetClientWidth(AObj: usize) -> i32;
  pub fn SpinEdit_SetClientWidth(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetControlState(AObj: usize) -> TControlState;
  pub fn SpinEdit_SetControlState(AObj: usize, AValue: TControlState);
  pub fn SpinEdit_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn SpinEdit_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn SpinEdit_GetFloating(AObj: usize) -> bool;
  pub fn SpinEdit_GetParent(AObj: usize) -> usize;
  pub fn SpinEdit_SetParent(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetLeft(AObj: usize) -> i32;
  pub fn SpinEdit_SetLeft(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetTop(AObj: usize) -> i32;
  pub fn SpinEdit_SetTop(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetWidth(AObj: usize) -> i32;
  pub fn SpinEdit_SetWidth(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetHeight(AObj: usize) -> i32;
  pub fn SpinEdit_SetHeight(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetCursor(AObj: usize) -> TCursor;
  pub fn SpinEdit_SetCursor(AObj: usize, AValue: TCursor);
  pub fn SpinEdit_GetHint(AObj: usize) -> *const c_char;
  pub fn SpinEdit_SetHint(AObj: usize, AValue: *const c_char);
  pub fn SpinEdit_GetComponentCount(AObj: usize) -> i32;
  pub fn SpinEdit_GetComponentIndex(AObj: usize) -> i32;
  pub fn SpinEdit_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn SpinEdit_GetOwner(AObj: usize) -> usize;
  pub fn SpinEdit_GetName(AObj: usize) -> *const c_char;
  pub fn SpinEdit_SetName(AObj: usize, AValue: *const c_char);
  pub fn SpinEdit_GetTag(AObj: usize) -> isize;
  pub fn SpinEdit_SetTag(AObj: usize, AValue: isize);
  pub fn SpinEdit_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn SpinEdit_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn SpinEdit_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn SpinEdit_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn SpinEdit_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetChildSizing(AObj: usize) -> usize;
  pub fn SpinEdit_SetChildSizing(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetBorderSpacing(AObj: usize) -> usize;
  pub fn SpinEdit_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn SpinEdit_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn SpinEdit_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn SpinEdit_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn SpinEdit_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn SpinEdit_StaticClassType() -> TClass;

  // ----------------- TMiniWebview ----------------------
  pub fn MiniWebview_Create(AOwner: usize) -> usize;
  pub fn MiniWebview_Free(AObj: usize);
  pub fn MiniWebview_Navigate(AObj: usize, AURL: *const c_char);
  pub fn MiniWebview_GoBack(AObj: usize);
  pub fn MiniWebview_GoForward(AObj: usize);
  pub fn MiniWebview_GoHome(AObj: usize);
  pub fn MiniWebview_GoSearch(AObj: usize);
  pub fn MiniWebview_Refresh(AObj: usize);
  pub fn MiniWebview_Stop(AObj: usize);
  pub fn MiniWebview_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn MiniWebview_ExecuteScript(AObj: usize, AScriptText: *const c_char, AScriptType: *const c_char) -> *const c_char;
  pub fn MiniWebview_ExecuteJS(AObj: usize, AScriptText: *const c_char) -> *const c_char;
  pub fn MiniWebview_LoadHTML(AObj: usize, AStr: *const c_char);
  pub fn MiniWebview_CanFocus(AObj: usize) -> bool;
  pub fn MiniWebview_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn MiniWebview_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn MiniWebview_DisableAlign(AObj: usize);
  pub fn MiniWebview_EnableAlign(AObj: usize);
  pub fn MiniWebview_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn MiniWebview_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn MiniWebview_Focused(AObj: usize) -> bool;
  pub fn MiniWebview_HandleAllocated(AObj: usize) -> bool;
  pub fn MiniWebview_InsertControl(AObj: usize, AControl: usize);
  pub fn MiniWebview_Invalidate(AObj: usize);
  pub fn MiniWebview_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn MiniWebview_RemoveControl(AObj: usize, AControl: usize);
  pub fn MiniWebview_Realign(AObj: usize);
  pub fn MiniWebview_Repaint(AObj: usize);
  pub fn MiniWebview_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn MiniWebview_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn MiniWebview_SetFocus(AObj: usize);
  pub fn MiniWebview_Update(AObj: usize);
  pub fn MiniWebview_BringToFront(AObj: usize);
  pub fn MiniWebview_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MiniWebview_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MiniWebview_Dragging(AObj: usize) -> bool;
  pub fn MiniWebview_HasParent(AObj: usize) -> bool;
  pub fn MiniWebview_Hide(AObj: usize);
  pub fn MiniWebview_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn MiniWebview_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MiniWebview_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MiniWebview_SendToBack(AObj: usize);
  pub fn MiniWebview_Show(AObj: usize);
  pub fn MiniWebview_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn MiniWebview_GetTextLen(AObj: usize) -> i32;
  pub fn MiniWebview_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn MiniWebview_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn MiniWebview_GetNamePath(AObj: usize) -> *const c_char;
  pub fn MiniWebview_Assign(AObj: usize, Source: usize);
  pub fn MiniWebview_ClassType(AObj: usize) -> TClass;
  pub fn MiniWebview_ClassName(AObj: usize) -> *const c_char;
  pub fn MiniWebview_InstanceSize(AObj: usize) -> i32;
  pub fn MiniWebview_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MiniWebview_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MiniWebview_GetHashCode(AObj: usize) -> i32;
  pub fn MiniWebview_ToString(AObj: usize) -> *const c_char;
  pub fn MiniWebview_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MiniWebview_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MiniWebview_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn MiniWebview_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn MiniWebview_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn MiniWebview_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn MiniWebview_AnchorClient(AObj: usize, ASpace: i32);
  pub fn MiniWebview_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MiniWebview_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn MiniWebview_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn MiniWebview_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn MiniWebview_GetReadyState(AObj: usize) -> TReadyState;
  pub fn MiniWebview_GetAlign(AObj: usize) -> TAlign;
  pub fn MiniWebview_SetAlign(AObj: usize, AValue: TAlign);
  pub fn MiniWebview_GetAnchors(AObj: usize) -> TAnchors;
  pub fn MiniWebview_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn MiniWebview_GetConstraints(AObj: usize) -> usize;
  pub fn MiniWebview_SetConstraints(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetEnabled(AObj: usize) -> bool;
  pub fn MiniWebview_SetEnabled(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetVisible(AObj: usize) -> bool;
  pub fn MiniWebview_SetVisible(AObj: usize, AValue: bool);
  pub fn MiniWebview_SetOnTitleChange(AObj: usize, AEventId: usize);
  pub fn MiniWebview_SetOnJSExternal(AObj: usize, AEventId: usize);
  pub fn MiniWebview_GetDockClientCount(AObj: usize) -> i32;
  pub fn MiniWebview_GetDockSite(AObj: usize) -> bool;
  pub fn MiniWebview_SetDockSite(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn MiniWebview_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetMouseInClient(AObj: usize) -> bool;
  pub fn MiniWebview_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn MiniWebview_GetBrush(AObj: usize) -> usize;
  pub fn MiniWebview_GetControlCount(AObj: usize) -> i32;
  pub fn MiniWebview_GetHandle(AObj: usize) -> HWND;
  pub fn MiniWebview_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn MiniWebview_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetParentWindow(AObj: usize) -> HWND;
  pub fn MiniWebview_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn MiniWebview_GetShowing(AObj: usize) -> bool;
  pub fn MiniWebview_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn MiniWebview_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn MiniWebview_GetTabStop(AObj: usize) -> bool;
  pub fn MiniWebview_SetTabStop(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetUseDockManager(AObj: usize) -> bool;
  pub fn MiniWebview_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetAction(AObj: usize) -> usize;
  pub fn MiniWebview_SetAction(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn MiniWebview_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn MiniWebview_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn MiniWebview_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn MiniWebview_GetClientHeight(AObj: usize) -> i32;
  pub fn MiniWebview_SetClientHeight(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn MiniWebview_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn MiniWebview_GetClientWidth(AObj: usize) -> i32;
  pub fn MiniWebview_SetClientWidth(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetControlState(AObj: usize) -> TControlState;
  pub fn MiniWebview_SetControlState(AObj: usize, AValue: TControlState);
  pub fn MiniWebview_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn MiniWebview_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn MiniWebview_GetFloating(AObj: usize) -> bool;
  pub fn MiniWebview_GetShowHint(AObj: usize) -> bool;
  pub fn MiniWebview_SetShowHint(AObj: usize, AValue: bool);
  pub fn MiniWebview_GetParent(AObj: usize) -> usize;
  pub fn MiniWebview_SetParent(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetLeft(AObj: usize) -> i32;
  pub fn MiniWebview_SetLeft(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetTop(AObj: usize) -> i32;
  pub fn MiniWebview_SetTop(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetWidth(AObj: usize) -> i32;
  pub fn MiniWebview_SetWidth(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetHeight(AObj: usize) -> i32;
  pub fn MiniWebview_SetHeight(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetCursor(AObj: usize) -> TCursor;
  pub fn MiniWebview_SetCursor(AObj: usize, AValue: TCursor);
  pub fn MiniWebview_GetHint(AObj: usize) -> *const c_char;
  pub fn MiniWebview_SetHint(AObj: usize, AValue: *const c_char);
  pub fn MiniWebview_GetComponentCount(AObj: usize) -> i32;
  pub fn MiniWebview_GetComponentIndex(AObj: usize) -> i32;
  pub fn MiniWebview_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn MiniWebview_GetOwner(AObj: usize) -> usize;
  pub fn MiniWebview_GetName(AObj: usize) -> *const c_char;
  pub fn MiniWebview_SetName(AObj: usize, AValue: *const c_char);
  pub fn MiniWebview_GetTag(AObj: usize) -> isize;
  pub fn MiniWebview_SetTag(AObj: usize, AValue: isize);
  pub fn MiniWebview_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn MiniWebview_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn MiniWebview_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn MiniWebview_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn MiniWebview_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetChildSizing(AObj: usize) -> usize;
  pub fn MiniWebview_SetChildSizing(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetBorderSpacing(AObj: usize) -> usize;
  pub fn MiniWebview_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn MiniWebview_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn MiniWebview_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn MiniWebview_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn MiniWebview_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn MiniWebview_StaticClassType() -> TClass;

  // ----------------- TCanvas ----------------------
  pub fn Canvas_Create() -> usize;
  pub fn Canvas_Free(AObj: usize);
  pub fn Canvas_Arc(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32, X3: i32, Y3: i32, X4: i32, Y4: i32);
  pub fn Canvas_ArcTo(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32, X3: i32, Y3: i32, X4: i32, Y4: i32);
  pub fn Canvas_AngleArc(AObj: usize, X: i32, Y: i32, Radius: u32, StartAngle: *mut f32, SweepAngle: *mut f32);
  pub fn Canvas_Chord(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32, X3: i32, Y3: i32, X4: i32, Y4: i32);
  pub fn Canvas_Ellipse(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32);
  pub fn Canvas_FloodFill(AObj: usize, X: i32, Y: i32, Color: TColor, FillStyle: TFillStyle);
  pub fn Canvas_HandleAllocated(AObj: usize) -> bool;
  pub fn Canvas_LineTo(AObj: usize, X: i32, Y: i32);
  pub fn Canvas_MoveTo(AObj: usize, X: i32, Y: i32);
  pub fn Canvas_Pie(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32, X3: i32, Y3: i32, X4: i32, Y4: i32);
  pub fn Canvas_Rectangle(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32);
  pub fn Canvas_Refresh(AObj: usize);
  pub fn Canvas_RoundRect(AObj: usize, X1: i32, Y1: i32, X2: i32, Y2: i32, X3: i32, Y3: i32);
  pub fn Canvas_StretchDraw(AObj: usize, Rect: *mut TRect, Graphic: usize);
  pub fn Canvas_TextExtent(AObj: usize, Text: *const c_char, Result: *mut TSize);
  pub fn Canvas_TextOut(AObj: usize, X: i32, Y: i32, Text: *const c_char);
  pub fn Canvas_Lock(AObj: usize);
  pub fn Canvas_TextHeight(AObj: usize, Text: *const c_char) -> i32;
  pub fn Canvas_TextWidth(AObj: usize, Text: *const c_char) -> i32;
  pub fn Canvas_Assign(AObj: usize, Source: usize);
  pub fn Canvas_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Canvas_ClassType(AObj: usize) -> TClass;
  pub fn Canvas_ClassName(AObj: usize) -> *const c_char;
  pub fn Canvas_InstanceSize(AObj: usize) -> i32;
  pub fn Canvas_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Canvas_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Canvas_GetHashCode(AObj: usize) -> i32;
  pub fn Canvas_ToString(AObj: usize) -> *const c_char;
  pub fn Canvas_GetHandle(AObj: usize) -> HDC;
  pub fn Canvas_SetHandle(AObj: usize, AValue: HDC);
  pub fn Canvas_GetBrush(AObj: usize) -> usize;
  pub fn Canvas_SetBrush(AObj: usize, AValue: usize);
  pub fn Canvas_GetCopyMode(AObj: usize) -> i32;
  pub fn Canvas_SetCopyMode(AObj: usize, AValue: i32);
  pub fn Canvas_GetFont(AObj: usize) -> usize;
  pub fn Canvas_SetFont(AObj: usize, AValue: usize);
  pub fn Canvas_GetPen(AObj: usize) -> usize;
  pub fn Canvas_SetPen(AObj: usize, AValue: usize);
  pub fn Canvas_SetOnChange(AObj: usize, AEventId: usize);
  pub fn Canvas_SetOnChanging(AObj: usize, AEventId: usize);
  pub fn Canvas_GetPixels(AObj: usize, X: i32, Y: i32) -> TColor;
  pub fn Canvas_SetPixels(AObj: usize, X: i32, Y: i32, AValue: TColor);
  pub fn Canvas_StaticClassType() -> TClass;
  pub fn Canvas_BrushCopy(AObj: usize, Dest: *mut TRect, Bitmap: usize, Source: *mut TRect, Color: TColor);
  pub fn Canvas_CopyRect(AObj: usize, Dest: *mut TRect, Canvas: usize, Source: *mut TRect);
  pub fn Canvas_Draw1(AObj: usize, X: i32, Y: i32, Graphic: usize);
  pub fn Canvas_Draw2(AObj: usize, X: i32, Y: i32, Graphic: usize, Opacity: i8);
  pub fn Canvas_DrawFocusRect(AObj: usize, ARect: *mut TRect);
  pub fn Canvas_FillRect(AObj: usize, Rect: *mut TRect);
  pub fn Canvas_FrameRect(AObj: usize, Rect: *mut TRect);
  pub fn Canvas_TextRect1(AObj: usize, Rect: *mut TRect, X: i32, Y: i32, Text: *const c_char);
  pub fn Canvas_TextRect2(AObj: usize, Rect: *mut TRect, Text: *const c_char, TextFormat: TTextFormat) -> i32;
  pub fn Canvas_Polygon(AObj: usize, APoints: *mut TPoint, ALen: i32);
  pub fn Canvas_Polyline(AObj: usize, APoints: *mut TPoint, ALen: i32);
  pub fn Canvas_PolyBezier(AObj: usize, APoints: *mut TPoint, ALen: i32);

  // ----------------- TApplication ----------------------
  pub fn Application_Create(AOwner: usize) -> usize;
  pub fn Application_Free(AObj: usize);
  pub fn Application_ActivateHint(AObj: usize, CursorPos: *mut TPoint);
  pub fn Application_BringToFront(AObj: usize);
  pub fn Application_CancelHint(AObj: usize);
  pub fn Application_HandleMessage(AObj: usize);
  pub fn Application_HideHint(AObj: usize);
  pub fn Application_Minimize(AObj: usize);
  pub fn Application_ModalStarted(AObj: usize);
  pub fn Application_ModalFinished(AObj: usize);
  pub fn Application_ProcessMessages(AObj: usize);
  pub fn Application_Restore(AObj: usize);
  pub fn Application_RestoreTopMosts(AObj: usize);
  pub fn Application_Terminate(AObj: usize);
  pub fn Application_MessageBox(AObj: usize, Text: *const c_char, Caption: *const c_char, Flags: i32) -> i32;
  pub fn Application_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Application_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Application_HasParent(AObj: usize) -> bool;
  pub fn Application_Assign(AObj: usize, Source: usize);
  pub fn Application_ClassType(AObj: usize) -> TClass;
  pub fn Application_ClassName(AObj: usize) -> *const c_char;
  pub fn Application_InstanceSize(AObj: usize) -> i32;
  pub fn Application_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Application_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Application_GetHashCode(AObj: usize) -> i32;
  pub fn Application_ToString(AObj: usize) -> *const c_char;
  pub fn Application_GetScaled(AObj: usize) -> bool;
  pub fn Application_SetScaled(AObj: usize, AValue: bool);
  pub fn Application_GetSingleInstanceEnabled(AObj: usize) -> bool;
  pub fn Application_SetSingleInstanceEnabled(AObj: usize, AValue: bool);
  pub fn Application_GetLocation(AObj: usize) -> *const c_char;
  pub fn Application_GetStopOnException(AObj: usize) -> bool;
  pub fn Application_SetStopOnException(AObj: usize, AValue: bool);
  pub fn Application_GetExceptionExitCode(AObj: usize) -> i32;
  pub fn Application_SetExceptionExitCode(AObj: usize, AValue: i32);
  pub fn Application_GetExeName(AObj: usize) -> *const c_char;
  pub fn Application_GetHint(AObj: usize) -> *const c_char;
  pub fn Application_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Application_GetHintColor(AObj: usize) -> TColor;
  pub fn Application_SetHintColor(AObj: usize, AValue: TColor);
  pub fn Application_GetHintHidePause(AObj: usize) -> i32;
  pub fn Application_SetHintHidePause(AObj: usize, AValue: i32);
  pub fn Application_GetHintPause(AObj: usize) -> i32;
  pub fn Application_SetHintPause(AObj: usize, AValue: i32);
  pub fn Application_GetHintShortCuts(AObj: usize) -> bool;
  pub fn Application_SetHintShortCuts(AObj: usize, AValue: bool);
  pub fn Application_GetHintShortPause(AObj: usize) -> i32;
  pub fn Application_SetHintShortPause(AObj: usize, AValue: i32);
  pub fn Application_GetIcon(AObj: usize) -> usize;
  pub fn Application_SetIcon(AObj: usize, AValue: usize);
  pub fn Application_GetMainForm(AObj: usize) -> usize;
  pub fn Application_GetMainFormHandle(AObj: usize) -> HWND;
  pub fn Application_GetMainFormOnTaskBar(AObj: usize) -> bool;
  pub fn Application_SetMainFormOnTaskBar(AObj: usize, AValue: bool);
  pub fn Application_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Application_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Application_GetShowHint(AObj: usize) -> bool;
  pub fn Application_SetShowHint(AObj: usize, AValue: bool);
  pub fn Application_GetShowMainForm(AObj: usize) -> bool;
  pub fn Application_SetShowMainForm(AObj: usize, AValue: bool);
  pub fn Application_GetTitle(AObj: usize) -> *const c_char;
  pub fn Application_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn Application_SetOnActivate(AObj: usize, AEventId: usize);
  pub fn Application_SetOnDeactivate(AObj: usize, AEventId: usize);
  pub fn Application_SetOnException(AObj: usize, AEventId: usize);
  pub fn Application_SetOnHelp(AObj: usize, AEventId: usize);
  pub fn Application_SetOnHint(AObj: usize, AEventId: usize);
  pub fn Application_SetOnMinimize(AObj: usize, AEventId: usize);
  pub fn Application_SetOnRestore(AObj: usize, AEventId: usize);
  pub fn Application_SetOnShortCut(AObj: usize, AEventId: usize);
  pub fn Application_GetHandle(AObj: usize) -> HWND;
  pub fn Application_SetHandle(AObj: usize, AValue: HWND);
  pub fn Application_GetComponentCount(AObj: usize) -> i32;
  pub fn Application_GetComponentIndex(AObj: usize) -> i32;
  pub fn Application_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Application_GetOwner(AObj: usize) -> usize;
  pub fn Application_GetName(AObj: usize) -> *const c_char;
  pub fn Application_SetName(AObj: usize, AValue: *const c_char);
  pub fn Application_GetTag(AObj: usize) -> isize;
  pub fn Application_SetTag(AObj: usize, AValue: isize);
  pub fn Application_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Application_StaticClassType() -> TClass;
  pub fn Application_Initialize(AObj: usize);
  pub fn Application_CreateForm(App: usize, AInitScale: bool) -> usize;
  pub fn Application_Run(AObj: usize);

  // ----------------- TMainMenu ----------------------
  pub fn MainMenu_Create(AOwner: usize) -> usize;
  pub fn MainMenu_Free(AObj: usize);
  pub fn MainMenu_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn MainMenu_GetNamePath(AObj: usize) -> *const c_char;
  pub fn MainMenu_HasParent(AObj: usize) -> bool;
  pub fn MainMenu_Assign(AObj: usize, Source: usize);
  pub fn MainMenu_ClassType(AObj: usize) -> TClass;
  pub fn MainMenu_ClassName(AObj: usize) -> *const c_char;
  pub fn MainMenu_InstanceSize(AObj: usize) -> i32;
  pub fn MainMenu_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MainMenu_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MainMenu_GetHashCode(AObj: usize) -> i32;
  pub fn MainMenu_ToString(AObj: usize) -> *const c_char;
  pub fn MainMenu_GetImagesWidth(AObj: usize) -> i32;
  pub fn MainMenu_SetImagesWidth(AObj: usize, AValue: i32);
  pub fn MainMenu_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn MainMenu_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn MainMenu_GetImages(AObj: usize) -> usize;
  pub fn MainMenu_SetImages(AObj: usize, AValue: usize);
  pub fn MainMenu_GetOwnerDraw(AObj: usize) -> bool;
  pub fn MainMenu_SetOwnerDraw(AObj: usize, AValue: bool);
  pub fn MainMenu_SetOnChange(AObj: usize, AEventId: usize);
  pub fn MainMenu_GetHandle(AObj: usize) -> HMENU;
  pub fn MainMenu_GetItems(AObj: usize) -> usize;
  pub fn MainMenu_GetComponentCount(AObj: usize) -> i32;
  pub fn MainMenu_GetComponentIndex(AObj: usize) -> i32;
  pub fn MainMenu_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn MainMenu_GetOwner(AObj: usize) -> usize;
  pub fn MainMenu_GetName(AObj: usize) -> *const c_char;
  pub fn MainMenu_SetName(AObj: usize, AValue: *const c_char);
  pub fn MainMenu_GetTag(AObj: usize) -> isize;
  pub fn MainMenu_SetTag(AObj: usize, AValue: isize);
  pub fn MainMenu_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn MainMenu_StaticClassType() -> TClass;

  // ----------------- TPngImage ----------------------
  pub fn PngImage_Create() -> usize;
  pub fn PngImage_Free(AObj: usize);
  pub fn PngImage_Assign(AObj: usize, Source: usize);
  pub fn PngImage_LoadFromStream(AObj: usize, Stream: usize);
  pub fn PngImage_SaveToStream(AObj: usize, Stream: usize);
  pub fn PngImage_LoadFromResourceName(AObj: usize, Instance: usize, Name: *const c_char);
  pub fn PngImage_LoadFromResourceID(AObj: usize, Instance: usize, ResID: i32);
  pub fn PngImage_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PngImage_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn PngImage_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn PngImage_SetSize(AObj: usize, AWidth: i32, AHeight: i32);
  pub fn PngImage_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PngImage_ClassType(AObj: usize) -> TClass;
  pub fn PngImage_ClassName(AObj: usize) -> *const c_char;
  pub fn PngImage_InstanceSize(AObj: usize) -> i32;
  pub fn PngImage_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PngImage_GetHashCode(AObj: usize) -> i32;
  pub fn PngImage_ToString(AObj: usize) -> *const c_char;
  pub fn PngImage_GetCanvas(AObj: usize) -> usize;
  pub fn PngImage_GetWidth(AObj: usize) -> i32;
  pub fn PngImage_GetHeight(AObj: usize) -> i32;
  pub fn PngImage_GetEmpty(AObj: usize) -> bool;
  pub fn PngImage_GetModified(AObj: usize) -> bool;
  pub fn PngImage_SetModified(AObj: usize, AValue: bool);
  pub fn PngImage_GetPalette(AObj: usize) -> HPALETTE;
  pub fn PngImage_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn PngImage_GetPaletteModified(AObj: usize) -> bool;
  pub fn PngImage_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn PngImage_GetTransparent(AObj: usize) -> bool;
  pub fn PngImage_SetTransparent(AObj: usize, AValue: bool);
  pub fn PngImage_SetOnChange(AObj: usize, AEventId: usize);
  pub fn PngImage_StaticClassType() -> TClass;

  // ----------------- TJPEGImage ----------------------
  pub fn JPEGImage_Create() -> usize;
  pub fn JPEGImage_Free(AObj: usize);
  pub fn JPEGImage_Assign(AObj: usize, Source: usize);
  pub fn JPEGImage_LoadFromStream(AObj: usize, Stream: usize);
  pub fn JPEGImage_SaveToStream(AObj: usize, Stream: usize);
  pub fn JPEGImage_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn JPEGImage_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn JPEGImage_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn JPEGImage_SetSize(AObj: usize, AWidth: i32, AHeight: i32);
  pub fn JPEGImage_GetNamePath(AObj: usize) -> *const c_char;
  pub fn JPEGImage_ClassType(AObj: usize) -> TClass;
  pub fn JPEGImage_ClassName(AObj: usize) -> *const c_char;
  pub fn JPEGImage_InstanceSize(AObj: usize) -> i32;
  pub fn JPEGImage_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn JPEGImage_GetHashCode(AObj: usize) -> i32;
  pub fn JPEGImage_ToString(AObj: usize) -> *const c_char;
  pub fn JPEGImage_GetPixelFormat(AObj: usize) -> TPixelFormat;
  pub fn JPEGImage_SetPixelFormat(AObj: usize, AValue: TJPEGPixelFormat);
  pub fn JPEGImage_GetPerformance(AObj: usize) -> TJPEGPerformance;
  pub fn JPEGImage_SetPerformance(AObj: usize, AValue: TJPEGPerformance);
  pub fn JPEGImage_GetCanvas(AObj: usize) -> usize;
  pub fn JPEGImage_GetEmpty(AObj: usize) -> bool;
  pub fn JPEGImage_GetHeight(AObj: usize) -> i32;
  pub fn JPEGImage_SetHeight(AObj: usize, AValue: i32);
  pub fn JPEGImage_GetModified(AObj: usize) -> bool;
  pub fn JPEGImage_SetModified(AObj: usize, AValue: bool);
  pub fn JPEGImage_GetPalette(AObj: usize) -> HPALETTE;
  pub fn JPEGImage_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn JPEGImage_GetPaletteModified(AObj: usize) -> bool;
  pub fn JPEGImage_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn JPEGImage_GetTransparent(AObj: usize) -> bool;
  pub fn JPEGImage_SetTransparent(AObj: usize, AValue: bool);
  pub fn JPEGImage_GetWidth(AObj: usize) -> i32;
  pub fn JPEGImage_SetWidth(AObj: usize, AValue: i32);
  pub fn JPEGImage_SetOnChange(AObj: usize, AEventId: usize);
  pub fn JPEGImage_StaticClassType() -> TClass;

  // ----------------- TGIFImage ----------------------
  pub fn GIFImage_Create() -> usize;
  pub fn GIFImage_Free(AObj: usize);
  pub fn GIFImage_SaveToStream(AObj: usize, Stream: usize);
  pub fn GIFImage_LoadFromStream(AObj: usize, Stream: usize);
  pub fn GIFImage_Clear(AObj: usize);
  pub fn GIFImage_Assign(AObj: usize, Source: usize);
  pub fn GIFImage_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn GIFImage_LoadFromFile(AObj: usize, Filename: *const c_char);
  pub fn GIFImage_SaveToFile(AObj: usize, Filename: *const c_char);
  pub fn GIFImage_SetSize(AObj: usize, AWidth: i32, AHeight: i32);
  pub fn GIFImage_GetNamePath(AObj: usize) -> *const c_char;
  pub fn GIFImage_ClassType(AObj: usize) -> TClass;
  pub fn GIFImage_ClassName(AObj: usize) -> *const c_char;
  pub fn GIFImage_InstanceSize(AObj: usize) -> i32;
  pub fn GIFImage_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn GIFImage_GetHashCode(AObj: usize) -> i32;
  pub fn GIFImage_ToString(AObj: usize) -> *const c_char;
  pub fn GIFImage_GetBitsPerPixel(AObj: usize) -> i32;
  pub fn GIFImage_GetEmpty(AObj: usize) -> bool;
  pub fn GIFImage_GetHeight(AObj: usize) -> i32;
  pub fn GIFImage_SetHeight(AObj: usize, AValue: i32);
  pub fn GIFImage_GetModified(AObj: usize) -> bool;
  pub fn GIFImage_SetModified(AObj: usize, AValue: bool);
  pub fn GIFImage_GetPalette(AObj: usize) -> HPALETTE;
  pub fn GIFImage_SetPalette(AObj: usize, AValue: HPALETTE);
  pub fn GIFImage_GetPaletteModified(AObj: usize) -> bool;
  pub fn GIFImage_SetPaletteModified(AObj: usize, AValue: bool);
  pub fn GIFImage_GetTransparent(AObj: usize) -> bool;
  pub fn GIFImage_GetWidth(AObj: usize) -> i32;
  pub fn GIFImage_SetWidth(AObj: usize, AValue: i32);
  pub fn GIFImage_SetOnChange(AObj: usize, AEventId: usize);
  pub fn GIFImage_StaticClassType() -> TClass;

  // ----------------- TActionList ----------------------
  pub fn ActionList_Create(AOwner: usize) -> usize;
  pub fn ActionList_Free(AObj: usize);
  pub fn ActionList_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ActionList_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ActionList_HasParent(AObj: usize) -> bool;
  pub fn ActionList_Assign(AObj: usize, Source: usize);
  pub fn ActionList_ClassType(AObj: usize) -> TClass;
  pub fn ActionList_ClassName(AObj: usize) -> *const c_char;
  pub fn ActionList_InstanceSize(AObj: usize) -> i32;
  pub fn ActionList_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ActionList_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ActionList_GetHashCode(AObj: usize) -> i32;
  pub fn ActionList_ToString(AObj: usize) -> *const c_char;
  pub fn ActionList_GetImages(AObj: usize) -> usize;
  pub fn ActionList_SetImages(AObj: usize, AValue: usize);
  pub fn ActionList_GetState(AObj: usize) -> TActionListState;
  pub fn ActionList_SetState(AObj: usize, AValue: TActionListState);
  pub fn ActionList_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ActionList_GetComponentCount(AObj: usize) -> i32;
  pub fn ActionList_GetComponentIndex(AObj: usize) -> i32;
  pub fn ActionList_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ActionList_GetOwner(AObj: usize) -> usize;
  pub fn ActionList_GetName(AObj: usize) -> *const c_char;
  pub fn ActionList_SetName(AObj: usize, AValue: *const c_char);
  pub fn ActionList_GetTag(AObj: usize) -> isize;
  pub fn ActionList_SetTag(AObj: usize, AValue: isize);
  pub fn ActionList_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ActionList_StaticClassType() -> TClass;

  // ----------------- TAction ----------------------
  pub fn Action_Create(AOwner: usize) -> usize;
  pub fn Action_Free(AObj: usize);
  pub fn Action_Execute(AObj: usize) -> bool;
  pub fn Action_Update(AObj: usize) -> bool;
  pub fn Action_HasParent(AObj: usize) -> bool;
  pub fn Action_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Action_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Action_Assign(AObj: usize, Source: usize);
  pub fn Action_ClassType(AObj: usize) -> TClass;
  pub fn Action_ClassName(AObj: usize) -> *const c_char;
  pub fn Action_InstanceSize(AObj: usize) -> i32;
  pub fn Action_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Action_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Action_GetHashCode(AObj: usize) -> i32;
  pub fn Action_ToString(AObj: usize) -> *const c_char;
  pub fn Action_GetAutoCheck(AObj: usize) -> bool;
  pub fn Action_SetAutoCheck(AObj: usize, AValue: bool);
  pub fn Action_GetCaption(AObj: usize) -> *const c_char;
  pub fn Action_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn Action_GetChecked(AObj: usize) -> bool;
  pub fn Action_SetChecked(AObj: usize, AValue: bool);
  pub fn Action_GetEnabled(AObj: usize) -> bool;
  pub fn Action_SetEnabled(AObj: usize, AValue: bool);
  pub fn Action_GetGroupIndex(AObj: usize) -> i32;
  pub fn Action_SetGroupIndex(AObj: usize, AValue: i32);
  pub fn Action_GetHint(AObj: usize) -> *const c_char;
  pub fn Action_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Action_GetImageIndex(AObj: usize) -> i32;
  pub fn Action_SetImageIndex(AObj: usize, AValue: i32);
  pub fn Action_GetShortCut(AObj: usize) -> TShortCut;
  pub fn Action_SetShortCut(AObj: usize, AValue: TShortCut);
  pub fn Action_GetVisible(AObj: usize) -> bool;
  pub fn Action_SetVisible(AObj: usize, AValue: bool);
  pub fn Action_SetOnExecute(AObj: usize, AEventId: usize);
  pub fn Action_SetOnUpdate(AObj: usize, AEventId: usize);
  pub fn Action_GetIndex(AObj: usize) -> i32;
  pub fn Action_SetIndex(AObj: usize, AValue: i32);
  pub fn Action_GetComponentCount(AObj: usize) -> i32;
  pub fn Action_GetComponentIndex(AObj: usize) -> i32;
  pub fn Action_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Action_GetOwner(AObj: usize) -> usize;
  pub fn Action_GetName(AObj: usize) -> *const c_char;
  pub fn Action_SetName(AObj: usize, AValue: *const c_char);
  pub fn Action_GetTag(AObj: usize) -> isize;
  pub fn Action_SetTag(AObj: usize, AValue: isize);
  pub fn Action_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Action_StaticClassType() -> TClass;

  // ----------------- TToolButton ----------------------
  pub fn ToolButton_Create(AOwner: usize) -> usize;
  pub fn ToolButton_Free(AObj: usize);
  pub fn ToolButton_CheckMenuDropdown(AObj: usize) -> bool;
  pub fn ToolButton_Click(AObj: usize);
  pub fn ToolButton_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ToolButton_BringToFront(AObj: usize);
  pub fn ToolButton_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToolButton_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToolButton_Dragging(AObj: usize) -> bool;
  pub fn ToolButton_HasParent(AObj: usize) -> bool;
  pub fn ToolButton_Hide(AObj: usize);
  pub fn ToolButton_Invalidate(AObj: usize);
  pub fn ToolButton_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ToolButton_Refresh(AObj: usize);
  pub fn ToolButton_Repaint(AObj: usize);
  pub fn ToolButton_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToolButton_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToolButton_SendToBack(AObj: usize);
  pub fn ToolButton_Show(AObj: usize);
  pub fn ToolButton_Update(AObj: usize);
  pub fn ToolButton_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ToolButton_GetTextLen(AObj: usize) -> i32;
  pub fn ToolButton_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ToolButton_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ToolButton_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ToolButton_Assign(AObj: usize, Source: usize);
  pub fn ToolButton_ClassType(AObj: usize) -> TClass;
  pub fn ToolButton_ClassName(AObj: usize) -> *const c_char;
  pub fn ToolButton_InstanceSize(AObj: usize) -> i32;
  pub fn ToolButton_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ToolButton_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ToolButton_GetHashCode(AObj: usize) -> i32;
  pub fn ToolButton_ToString(AObj: usize) -> *const c_char;
  pub fn ToolButton_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToolButton_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToolButton_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToolButton_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToolButton_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ToolButton_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ToolButton_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ToolButton_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToolButton_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ToolButton_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ToolButton_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ToolButton_GetIndex(AObj: usize) -> i32;
  pub fn ToolButton_GetAction(AObj: usize) -> usize;
  pub fn ToolButton_SetAction(AObj: usize, AValue: usize);
  pub fn ToolButton_GetAllowAllUp(AObj: usize) -> bool;
  pub fn ToolButton_SetAllowAllUp(AObj: usize, AValue: bool);
  pub fn ToolButton_GetAutoSize(AObj: usize) -> bool;
  pub fn ToolButton_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ToolButton_GetCaption(AObj: usize) -> *const c_char;
  pub fn ToolButton_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ToolButton_GetDown(AObj: usize) -> bool;
  pub fn ToolButton_SetDown(AObj: usize, AValue: bool);
  pub fn ToolButton_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ToolButton_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ToolButton_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ToolButton_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ToolButton_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ToolButton_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ToolButton_GetDropdownMenu(AObj: usize) -> usize;
  pub fn ToolButton_SetDropdownMenu(AObj: usize, AValue: usize);
  pub fn ToolButton_GetEnabled(AObj: usize) -> bool;
  pub fn ToolButton_SetEnabled(AObj: usize, AValue: bool);
  pub fn ToolButton_GetGrouped(AObj: usize) -> bool;
  pub fn ToolButton_SetGrouped(AObj: usize, AValue: bool);
  pub fn ToolButton_GetHeight(AObj: usize) -> i32;
  pub fn ToolButton_SetHeight(AObj: usize, AValue: i32);
  pub fn ToolButton_GetImageIndex(AObj: usize) -> i32;
  pub fn ToolButton_SetImageIndex(AObj: usize, AValue: i32);
  pub fn ToolButton_GetIndeterminate(AObj: usize) -> bool;
  pub fn ToolButton_SetIndeterminate(AObj: usize, AValue: bool);
  pub fn ToolButton_GetMarked(AObj: usize) -> bool;
  pub fn ToolButton_SetMarked(AObj: usize, AValue: bool);
  pub fn ToolButton_GetParentShowHint(AObj: usize) -> bool;
  pub fn ToolButton_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ToolButton_GetPopupMenu(AObj: usize) -> usize;
  pub fn ToolButton_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ToolButton_GetWrap(AObj: usize) -> bool;
  pub fn ToolButton_SetWrap(AObj: usize, AValue: bool);
  pub fn ToolButton_GetShowHint(AObj: usize) -> bool;
  pub fn ToolButton_SetShowHint(AObj: usize, AValue: bool);
  pub fn ToolButton_GetStyle(AObj: usize) -> TToolButtonStyle;
  pub fn ToolButton_SetStyle(AObj: usize, AValue: TToolButtonStyle);
  pub fn ToolButton_GetVisible(AObj: usize) -> bool;
  pub fn ToolButton_SetVisible(AObj: usize, AValue: bool);
  pub fn ToolButton_GetWidth(AObj: usize) -> i32;
  pub fn ToolButton_SetWidth(AObj: usize, AValue: i32);
  pub fn ToolButton_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ToolButton_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn ToolButton_GetAlign(AObj: usize) -> TAlign;
  pub fn ToolButton_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ToolButton_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ToolButton_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ToolButton_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ToolButton_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ToolButton_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ToolButton_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ToolButton_GetClientHeight(AObj: usize) -> i32;
  pub fn ToolButton_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ToolButton_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ToolButton_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ToolButton_GetClientWidth(AObj: usize) -> i32;
  pub fn ToolButton_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ToolButton_GetConstraints(AObj: usize) -> usize;
  pub fn ToolButton_SetConstraints(AObj: usize, AValue: usize);
  pub fn ToolButton_GetControlState(AObj: usize) -> TControlState;
  pub fn ToolButton_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ToolButton_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ToolButton_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ToolButton_GetFloating(AObj: usize) -> bool;
  pub fn ToolButton_GetParent(AObj: usize) -> usize;
  pub fn ToolButton_SetParent(AObj: usize, AValue: usize);
  pub fn ToolButton_GetLeft(AObj: usize) -> i32;
  pub fn ToolButton_SetLeft(AObj: usize, AValue: i32);
  pub fn ToolButton_GetTop(AObj: usize) -> i32;
  pub fn ToolButton_SetTop(AObj: usize, AValue: i32);
  pub fn ToolButton_GetCursor(AObj: usize) -> TCursor;
  pub fn ToolButton_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ToolButton_GetHint(AObj: usize) -> *const c_char;
  pub fn ToolButton_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ToolButton_GetComponentCount(AObj: usize) -> i32;
  pub fn ToolButton_GetComponentIndex(AObj: usize) -> i32;
  pub fn ToolButton_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ToolButton_GetOwner(AObj: usize) -> usize;
  pub fn ToolButton_GetName(AObj: usize) -> *const c_char;
  pub fn ToolButton_SetName(AObj: usize, AValue: *const c_char);
  pub fn ToolButton_GetTag(AObj: usize) -> isize;
  pub fn ToolButton_SetTag(AObj: usize, AValue: isize);
  pub fn ToolButton_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ToolButton_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ToolButton_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ToolButton_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ToolButton_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ToolButton_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ToolButton_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ToolButton_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ToolButton_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ToolButton_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ToolButton_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ToolButton_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ToolButton_StaticClassType() -> TClass;

  // ----------------- TIniFile ----------------------
  pub fn IniFile_Create(AFileName: *const c_char) -> usize;
  pub fn IniFile_Free(AObj: usize);
  pub fn IniFile_ReadString(AObj: usize, Section: *const c_char, Ident: *const c_char, Default: *const c_char) -> *const c_char;
  pub fn IniFile_WriteString(AObj: usize, Section: *const c_char, Ident: *const c_char, Value: *const c_char);
  pub fn IniFile_ReadSections(AObj: usize, Strings: usize);
  pub fn IniFile_ReadSectionValues(AObj: usize, Section: *const c_char, Strings: usize);
  pub fn IniFile_EraseSection(AObj: usize, Section: *const c_char);
  pub fn IniFile_DeleteKey(AObj: usize, Section: *const c_char, Ident: *const c_char);
  pub fn IniFile_UpdateFile(AObj: usize);
  pub fn IniFile_SectionExists(AObj: usize, Section: *const c_char) -> bool;
  pub fn IniFile_ReadInteger(AObj: usize, Section: *const c_char, Ident: *const c_char, Default: i32) -> i32;
  pub fn IniFile_WriteInteger(AObj: usize, Section: *const c_char, Ident: *const c_char, Value: i32);
  pub fn IniFile_ReadBool(AObj: usize, Section: *const c_char, Ident: *const c_char, Default: bool) -> bool;
  pub fn IniFile_WriteBool(AObj: usize, Section: *const c_char, Ident: *const c_char, Value: bool);
  pub fn IniFile_ReadDate(AObj: usize, Section: *const c_char, Name: *const c_char, Default: u32) -> u32;
  pub fn IniFile_ReadDateTime(AObj: usize, Section: *const c_char, Name: *const c_char, Default: u32) -> u32;
  pub fn IniFile_ReadFloat(AObj: usize, Section: *const c_char, Name: *const c_char, Default: *mut f64, Result: *mut f64);
  pub fn IniFile_ReadTime(AObj: usize, Section: *const c_char, Name: *const c_char, Default: u32) -> u32;
  pub fn IniFile_WriteDate(AObj: usize, Section: *const c_char, Name: *const c_char, Value: u32);
  pub fn IniFile_WriteDateTime(AObj: usize, Section: *const c_char, Name: *const c_char, Value: u32);
  pub fn IniFile_WriteFloat(AObj: usize, Section: *const c_char, Name: *const c_char, Value: *mut f64);
  pub fn IniFile_WriteTime(AObj: usize, Section: *const c_char, Name: *const c_char, Value: u32);
  pub fn IniFile_ValueExists(AObj: usize, Section: *const c_char, Ident: *const c_char) -> bool;
  pub fn IniFile_ClassType(AObj: usize) -> TClass;
  pub fn IniFile_ClassName(AObj: usize) -> *const c_char;
  pub fn IniFile_InstanceSize(AObj: usize) -> i32;
  pub fn IniFile_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn IniFile_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn IniFile_GetHashCode(AObj: usize) -> i32;
  pub fn IniFile_ToString(AObj: usize) -> *const c_char;
  pub fn IniFile_GetFileName(AObj: usize) -> *const c_char;
  pub fn IniFile_StaticClassType() -> TClass;

  // ----------------- TRegistry ----------------------
  pub fn Registry_Create(AAccess: u32) -> usize;
  pub fn Registry_Free(AObj: usize);
  pub fn Registry_CloseKey(AObj: usize);
  pub fn Registry_CreateKey(AObj: usize, Key: *const c_char) -> bool;
  pub fn Registry_DeleteKey(AObj: usize, Key: *const c_char) -> bool;
  pub fn Registry_DeleteValue(AObj: usize, Name: *const c_char) -> bool;
  pub fn Registry_HasSubKeys(AObj: usize) -> bool;
  pub fn Registry_KeyExists(AObj: usize, Key: *const c_char) -> bool;
  pub fn Registry_LoadKey(AObj: usize, Key: *const c_char, FileName: *const c_char) -> bool;
  pub fn Registry_MoveKey(AObj: usize, OldName: *const c_char, NewName: *const c_char, Delete: bool);
  pub fn Registry_OpenKey(AObj: usize, Key: *const c_char, CanCreate: bool) -> bool;
  pub fn Registry_OpenKeyReadOnly(AObj: usize, Key: *const c_char) -> bool;
  pub fn Registry_ReadBool(AObj: usize, Name: *const c_char) -> bool;
  pub fn Registry_ReadDate(AObj: usize, Name: *const c_char) -> u32;
  pub fn Registry_ReadDateTime(AObj: usize, Name: *const c_char) -> u32;
  pub fn Registry_ReadFloat(AObj: usize, Name: *const c_char, Result: *mut f64);
  pub fn Registry_ReadInteger(AObj: usize, Name: *const c_char) -> i32;
  pub fn Registry_ReadString(AObj: usize, Name: *const c_char) -> *const c_char;
  pub fn Registry_ReadTime(AObj: usize, Name: *const c_char) -> u32;
  pub fn Registry_RegistryConnect(AObj: usize, UNCName: *const c_char) -> bool;
  pub fn Registry_RenameValue(AObj: usize, OldName: *const c_char, NewName: *const c_char);
  pub fn Registry_ReplaceKey(AObj: usize, Key: *const c_char, FileName: *const c_char, BackUpFileName: *const c_char) -> bool;
  pub fn Registry_RestoreKey(AObj: usize, Key: *const c_char, FileName: *const c_char) -> bool;
  pub fn Registry_SaveKey(AObj: usize, Key: *const c_char, FileName: *const c_char) -> bool;
  pub fn Registry_UnLoadKey(AObj: usize, Key: *const c_char) -> bool;
  pub fn Registry_ValueExists(AObj: usize, Name: *const c_char) -> bool;
  pub fn Registry_WriteBool(AObj: usize, Name: *const c_char, Value: bool);
  pub fn Registry_WriteDate(AObj: usize, Name: *const c_char, Value: u32);
  pub fn Registry_WriteDateTime(AObj: usize, Name: *const c_char, Value: u32);
  pub fn Registry_WriteFloat(AObj: usize, Name: *const c_char, Value: *mut f64);
  pub fn Registry_WriteInteger(AObj: usize, Name: *const c_char, Value: i32);
  pub fn Registry_WriteString(AObj: usize, Name: *const c_char, Value: *const c_char);
  pub fn Registry_WriteExpandString(AObj: usize, Name: *const c_char, Value: *const c_char);
  pub fn Registry_WriteTime(AObj: usize, Name: *const c_char, Value: u32);
  pub fn Registry_ClassType(AObj: usize) -> TClass;
  pub fn Registry_ClassName(AObj: usize) -> *const c_char;
  pub fn Registry_InstanceSize(AObj: usize) -> i32;
  pub fn Registry_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Registry_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Registry_GetHashCode(AObj: usize) -> i32;
  pub fn Registry_ToString(AObj: usize) -> *const c_char;
  pub fn Registry_GetCurrentKey(AObj: usize) -> HKEY;
  pub fn Registry_GetCurrentPath(AObj: usize) -> *const c_char;
  pub fn Registry_GetLazyWrite(AObj: usize) -> bool;
  pub fn Registry_SetLazyWrite(AObj: usize, AValue: bool);
  pub fn Registry_GetLastError(AObj: usize) -> i32;
  pub fn Registry_GetLastErrorMsg(AObj: usize) -> *const c_char;
  pub fn Registry_GetRootKey(AObj: usize) -> HKEY;
  pub fn Registry_SetRootKey(AObj: usize, AValue: HKEY);
  pub fn Registry_GetAccess(AObj: usize) -> u32;
  pub fn Registry_SetAccess(AObj: usize, AValue: u32);
  pub fn Registry_StaticClassType() -> TClass;

  // ----------------- TClipboard ----------------------
  pub fn Clipboard_Create() -> usize;
  pub fn Clipboard_Free(AObj: usize);
  pub fn Clipboard_FindPictureFormatID(AObj: usize) -> TClipboardFormat;
  pub fn Clipboard_FindFormatID(AObj: usize, FormatName: *const c_char) -> TClipboardFormat;
  pub fn Clipboard_GetAsHtml(AObj: usize, ExtractFragmentOnly: bool) -> *const c_char;
  pub fn Clipboard_SupportedFormats(AObj: usize, List: usize);
  pub fn Clipboard_HasFormatName(AObj: usize, FormatName: *const c_char) -> bool;
  pub fn Clipboard_HasPictureFormat(AObj: usize) -> bool;
  pub fn Clipboard_SetAsHtml(AObj: usize, Html: *const c_char, PlainText: *const c_char);
  pub fn Clipboard_Assign(AObj: usize, Source: usize);
  pub fn Clipboard_Clear(AObj: usize);
  pub fn Clipboard_Close(AObj: usize);
  pub fn Clipboard_Open(AObj: usize);
  pub fn Clipboard_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Clipboard_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Clipboard_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Clipboard_ClassType(AObj: usize) -> TClass;
  pub fn Clipboard_ClassName(AObj: usize) -> *const c_char;
  pub fn Clipboard_InstanceSize(AObj: usize) -> i32;
  pub fn Clipboard_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Clipboard_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Clipboard_GetHashCode(AObj: usize) -> i32;
  pub fn Clipboard_ToString(AObj: usize) -> *const c_char;
  pub fn Clipboard_GetAsText(AObj: usize) -> *const c_char;
  pub fn Clipboard_SetAsText(AObj: usize, AValue: *const c_char);
  pub fn Clipboard_GetFormatCount(AObj: usize) -> i32;
  pub fn Clipboard_GetFormats(AObj: usize, Index: i32) -> TClipboardFormat;
  pub fn Clipboard_StaticClassType() -> TClass;
  pub fn Clipboard_HasFormat(AObj: usize, AFormatID: TClipboardFormat) -> bool;

  // ----------------- TMonitor ----------------------
  pub fn Monitor_Create() -> usize;
  pub fn Monitor_Free(AObj: usize);
  pub fn Monitor_ClassType(AObj: usize) -> TClass;
  pub fn Monitor_ClassName(AObj: usize) -> *const c_char;
  pub fn Monitor_InstanceSize(AObj: usize) -> i32;
  pub fn Monitor_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Monitor_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Monitor_GetHashCode(AObj: usize) -> i32;
  pub fn Monitor_ToString(AObj: usize) -> *const c_char;
  pub fn Monitor_GetHandle(AObj: usize) -> HMONITOR;
  pub fn Monitor_GetMonitorNum(AObj: usize) -> i32;
  pub fn Monitor_GetLeft(AObj: usize) -> i32;
  pub fn Monitor_GetHeight(AObj: usize) -> i32;
  pub fn Monitor_GetTop(AObj: usize) -> i32;
  pub fn Monitor_GetWidth(AObj: usize) -> i32;
  pub fn Monitor_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Monitor_GetWorkareaRect(AObj: usize, Result: *mut TRect);
  pub fn Monitor_GetPrimary(AObj: usize) -> bool;
  pub fn Monitor_GetPixelsPerInch(AObj: usize) -> i32;
  pub fn Monitor_StaticClassType() -> TClass;

  // ----------------- TPaintBox ----------------------
  pub fn PaintBox_Create(AOwner: usize) -> usize;
  pub fn PaintBox_Free(AObj: usize);
  pub fn PaintBox_BringToFront(AObj: usize);
  pub fn PaintBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn PaintBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn PaintBox_Dragging(AObj: usize) -> bool;
  pub fn PaintBox_HasParent(AObj: usize) -> bool;
  pub fn PaintBox_Hide(AObj: usize);
  pub fn PaintBox_Invalidate(AObj: usize);
  pub fn PaintBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn PaintBox_Refresh(AObj: usize);
  pub fn PaintBox_Repaint(AObj: usize);
  pub fn PaintBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn PaintBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn PaintBox_SendToBack(AObj: usize);
  pub fn PaintBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn PaintBox_Show(AObj: usize);
  pub fn PaintBox_Update(AObj: usize);
  pub fn PaintBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn PaintBox_GetTextLen(AObj: usize) -> i32;
  pub fn PaintBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn PaintBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PaintBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PaintBox_Assign(AObj: usize, Source: usize);
  pub fn PaintBox_ClassType(AObj: usize) -> TClass;
  pub fn PaintBox_ClassName(AObj: usize) -> *const c_char;
  pub fn PaintBox_InstanceSize(AObj: usize) -> i32;
  pub fn PaintBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PaintBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PaintBox_GetHashCode(AObj: usize) -> i32;
  pub fn PaintBox_ToString(AObj: usize) -> *const c_char;
  pub fn PaintBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn PaintBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn PaintBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn PaintBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn PaintBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn PaintBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn PaintBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn PaintBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn PaintBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn PaintBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn PaintBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn PaintBox_GetCanvas(AObj: usize) -> usize;
  pub fn PaintBox_GetAlign(AObj: usize) -> TAlign;
  pub fn PaintBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn PaintBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn PaintBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn PaintBox_GetColor(AObj: usize) -> TColor;
  pub fn PaintBox_SetColor(AObj: usize, AValue: TColor);
  pub fn PaintBox_GetConstraints(AObj: usize) -> usize;
  pub fn PaintBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn PaintBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn PaintBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn PaintBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn PaintBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn PaintBox_GetEnabled(AObj: usize) -> bool;
  pub fn PaintBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn PaintBox_GetFont(AObj: usize) -> usize;
  pub fn PaintBox_SetFont(AObj: usize, AValue: usize);
  pub fn PaintBox_GetParentColor(AObj: usize) -> bool;
  pub fn PaintBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn PaintBox_GetParentFont(AObj: usize) -> bool;
  pub fn PaintBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn PaintBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn PaintBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn PaintBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn PaintBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn PaintBox_GetShowHint(AObj: usize) -> bool;
  pub fn PaintBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn PaintBox_GetVisible(AObj: usize) -> bool;
  pub fn PaintBox_SetVisible(AObj: usize, AValue: bool);
  pub fn PaintBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn PaintBox_SetOnPaint(AObj: usize, AEventId: usize);
  pub fn PaintBox_GetAction(AObj: usize) -> usize;
  pub fn PaintBox_SetAction(AObj: usize, AValue: usize);
  pub fn PaintBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn PaintBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn PaintBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn PaintBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn PaintBox_GetClientHeight(AObj: usize) -> i32;
  pub fn PaintBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn PaintBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn PaintBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn PaintBox_GetClientWidth(AObj: usize) -> i32;
  pub fn PaintBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn PaintBox_GetControlState(AObj: usize) -> TControlState;
  pub fn PaintBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn PaintBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn PaintBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn PaintBox_GetFloating(AObj: usize) -> bool;
  pub fn PaintBox_GetParent(AObj: usize) -> usize;
  pub fn PaintBox_SetParent(AObj: usize, AValue: usize);
  pub fn PaintBox_GetLeft(AObj: usize) -> i32;
  pub fn PaintBox_SetLeft(AObj: usize, AValue: i32);
  pub fn PaintBox_GetTop(AObj: usize) -> i32;
  pub fn PaintBox_SetTop(AObj: usize, AValue: i32);
  pub fn PaintBox_GetWidth(AObj: usize) -> i32;
  pub fn PaintBox_SetWidth(AObj: usize, AValue: i32);
  pub fn PaintBox_GetHeight(AObj: usize) -> i32;
  pub fn PaintBox_SetHeight(AObj: usize, AValue: i32);
  pub fn PaintBox_GetCursor(AObj: usize) -> TCursor;
  pub fn PaintBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn PaintBox_GetHint(AObj: usize) -> *const c_char;
  pub fn PaintBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn PaintBox_GetComponentCount(AObj: usize) -> i32;
  pub fn PaintBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn PaintBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PaintBox_GetOwner(AObj: usize) -> usize;
  pub fn PaintBox_GetName(AObj: usize) -> *const c_char;
  pub fn PaintBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn PaintBox_GetTag(AObj: usize) -> isize;
  pub fn PaintBox_SetTag(AObj: usize, AValue: isize);
  pub fn PaintBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn PaintBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn PaintBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn PaintBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn PaintBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn PaintBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn PaintBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn PaintBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn PaintBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn PaintBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn PaintBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PaintBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn PaintBox_StaticClassType() -> TClass;

  // ----------------- TTimer ----------------------
  pub fn Timer_Create(AOwner: usize) -> usize;
  pub fn Timer_Free(AObj: usize);
  pub fn Timer_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Timer_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Timer_HasParent(AObj: usize) -> bool;
  pub fn Timer_Assign(AObj: usize, Source: usize);
  pub fn Timer_ClassType(AObj: usize) -> TClass;
  pub fn Timer_ClassName(AObj: usize) -> *const c_char;
  pub fn Timer_InstanceSize(AObj: usize) -> i32;
  pub fn Timer_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Timer_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Timer_GetHashCode(AObj: usize) -> i32;
  pub fn Timer_ToString(AObj: usize) -> *const c_char;
  pub fn Timer_GetEnabled(AObj: usize) -> bool;
  pub fn Timer_SetEnabled(AObj: usize, AValue: bool);
  pub fn Timer_GetInterval(AObj: usize) -> u32;
  pub fn Timer_SetInterval(AObj: usize, AValue: u32);
  pub fn Timer_SetOnTimer(AObj: usize, AEventId: usize);
  pub fn Timer_GetComponentCount(AObj: usize) -> i32;
  pub fn Timer_GetComponentIndex(AObj: usize) -> i32;
  pub fn Timer_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Timer_GetOwner(AObj: usize) -> usize;
  pub fn Timer_GetName(AObj: usize) -> *const c_char;
  pub fn Timer_SetName(AObj: usize, AValue: *const c_char);
  pub fn Timer_GetTag(AObj: usize) -> isize;
  pub fn Timer_SetTag(AObj: usize, AValue: isize);
  pub fn Timer_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Timer_StaticClassType() -> TClass;

  // ----------------- TList ----------------------
  pub fn List_Create() -> usize;
  pub fn List_Free(AObj: usize);
  pub fn List_Add(AObj: usize, Item: usize) -> i32;
  pub fn List_Clear(AObj: usize);
  pub fn List_Delete(AObj: usize, Index: i32);
  pub fn List_Expand(AObj: usize) -> usize;
  pub fn List_IndexOf(AObj: usize, Item: usize) -> i32;
  pub fn List_Insert(AObj: usize, Index: i32, Item: usize);
  pub fn List_Move(AObj: usize, CurIndex: i32, NewIndex: i32);
  pub fn List_ClassType(AObj: usize) -> TClass;
  pub fn List_ClassName(AObj: usize) -> *const c_char;
  pub fn List_InstanceSize(AObj: usize) -> i32;
  pub fn List_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn List_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn List_GetHashCode(AObj: usize) -> i32;
  pub fn List_ToString(AObj: usize) -> *const c_char;
  pub fn List_GetCapacity(AObj: usize) -> i32;
  pub fn List_SetCapacity(AObj: usize, AValue: i32);
  pub fn List_GetCount(AObj: usize) -> i32;
  pub fn List_SetCount(AObj: usize, AValue: i32);
  pub fn List_GetList(AObj: usize) -> usize;
  pub fn List_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn List_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn List_StaticClassType() -> TClass;

  // ----------------- TForm ----------------------
  pub fn Form_Create(AOwner: usize) -> usize;
  pub fn Form_Free(AObj: usize);
  pub fn Form_Cascade(AObj: usize);
  pub fn Form_Close(AObj: usize);
  pub fn Form_FocusControl(AObj: usize, Control: usize);
  pub fn Form_Hide(AObj: usize);
  pub fn Form_SetFocus(AObj: usize);
  pub fn Form_Show(AObj: usize);
  pub fn Form_ShowModal(AObj: usize) -> i32;
  pub fn Form_ScrollInView(AObj: usize, AControl: usize);
  pub fn Form_CanFocus(AObj: usize) -> bool;
  pub fn Form_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Form_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Form_DisableAlign(AObj: usize);
  pub fn Form_EnableAlign(AObj: usize);
  pub fn Form_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Form_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Form_Focused(AObj: usize) -> bool;
  pub fn Form_HandleAllocated(AObj: usize) -> bool;
  pub fn Form_InsertControl(AObj: usize, AControl: usize);
  pub fn Form_Invalidate(AObj: usize);
  pub fn Form_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Form_RemoveControl(AObj: usize, AControl: usize);
  pub fn Form_Realign(AObj: usize);
  pub fn Form_Repaint(AObj: usize);
  pub fn Form_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Form_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Form_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Form_Update(AObj: usize);
  pub fn Form_BringToFront(AObj: usize);
  pub fn Form_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Form_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Form_Dragging(AObj: usize) -> bool;
  pub fn Form_HasParent(AObj: usize) -> bool;
  pub fn Form_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Form_Refresh(AObj: usize);
  pub fn Form_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Form_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Form_SendToBack(AObj: usize);
  pub fn Form_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Form_GetTextLen(AObj: usize) -> i32;
  pub fn Form_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Form_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Form_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Form_Assign(AObj: usize, Source: usize);
  pub fn Form_ClassType(AObj: usize) -> TClass;
  pub fn Form_ClassName(AObj: usize) -> *const c_char;
  pub fn Form_InstanceSize(AObj: usize) -> i32;
  pub fn Form_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Form_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Form_GetHashCode(AObj: usize) -> i32;
  pub fn Form_ToString(AObj: usize) -> *const c_char;
  pub fn Form_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Form_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Form_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Form_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Form_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Form_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Form_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Form_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Form_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Form_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Form_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Form_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Form_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Form_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Form_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Form_GetAllowDropFiles(AObj: usize) -> bool;
  pub fn Form_SetAllowDropFiles(AObj: usize, AValue: bool);
  pub fn Form_SetOnDropFiles(AObj: usize, AEventId: usize);
  pub fn Form_GetShowInTaskBar(AObj: usize) -> TShowInTaskbar;
  pub fn Form_SetShowInTaskBar(AObj: usize, AValue: TShowInTaskbar);
  pub fn Form_GetDesignTimePPI(AObj: usize) -> i32;
  pub fn Form_SetDesignTimePPI(AObj: usize, AValue: i32);
  pub fn Form_GetAction(AObj: usize) -> usize;
  pub fn Form_SetAction(AObj: usize, AValue: usize);
  pub fn Form_GetActiveControl(AObj: usize) -> usize;
  pub fn Form_SetActiveControl(AObj: usize, AValue: usize);
  pub fn Form_GetAlign(AObj: usize) -> TAlign;
  pub fn Form_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Form_GetAlphaBlend(AObj: usize) -> bool;
  pub fn Form_SetAlphaBlend(AObj: usize, AValue: bool);
  pub fn Form_GetAlphaBlendValue(AObj: usize) -> i8;
  pub fn Form_SetAlphaBlendValue(AObj: usize, AValue: i8);
  pub fn Form_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Form_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Form_GetAutoScroll(AObj: usize) -> bool;
  pub fn Form_SetAutoScroll(AObj: usize, AValue: bool);
  pub fn Form_GetAutoSize(AObj: usize) -> bool;
  pub fn Form_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Form_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Form_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Form_GetBorderIcons(AObj: usize) -> TBorderIcons;
  pub fn Form_SetBorderIcons(AObj: usize, AValue: TBorderIcons);
  pub fn Form_GetBorderStyle(AObj: usize) -> TFormBorderStyle;
  pub fn Form_SetBorderStyle(AObj: usize, AValue: TFormBorderStyle);
  pub fn Form_GetBorderWidth(AObj: usize) -> i32;
  pub fn Form_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn Form_GetCaption(AObj: usize) -> *const c_char;
  pub fn Form_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn Form_GetClientHeight(AObj: usize) -> i32;
  pub fn Form_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Form_GetClientWidth(AObj: usize) -> i32;
  pub fn Form_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Form_GetColor(AObj: usize) -> TColor;
  pub fn Form_SetColor(AObj: usize, AValue: TColor);
  pub fn Form_GetConstraints(AObj: usize) -> usize;
  pub fn Form_SetConstraints(AObj: usize, AValue: usize);
  pub fn Form_GetUseDockManager(AObj: usize) -> bool;
  pub fn Form_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Form_GetDefaultMonitor(AObj: usize) -> TDefaultMonitor;
  pub fn Form_SetDefaultMonitor(AObj: usize, AValue: TDefaultMonitor);
  pub fn Form_GetDockSite(AObj: usize) -> bool;
  pub fn Form_SetDockSite(AObj: usize, AValue: bool);
  pub fn Form_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Form_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Form_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Form_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Form_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Form_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Form_GetEnabled(AObj: usize) -> bool;
  pub fn Form_SetEnabled(AObj: usize, AValue: bool);
  pub fn Form_GetParentFont(AObj: usize) -> bool;
  pub fn Form_SetParentFont(AObj: usize, AValue: bool);
  pub fn Form_GetFont(AObj: usize) -> usize;
  pub fn Form_SetFont(AObj: usize, AValue: usize);
  pub fn Form_GetFormStyle(AObj: usize) -> TFormStyle;
  pub fn Form_SetFormStyle(AObj: usize, AValue: TFormStyle);
  pub fn Form_GetHeight(AObj: usize) -> i32;
  pub fn Form_SetHeight(AObj: usize, AValue: i32);
  pub fn Form_GetHorzScrollBar(AObj: usize) -> usize;
  pub fn Form_SetHorzScrollBar(AObj: usize, AValue: usize);
  pub fn Form_GetIcon(AObj: usize) -> usize;
  pub fn Form_SetIcon(AObj: usize, AValue: usize);
  pub fn Form_GetKeyPreview(AObj: usize) -> bool;
  pub fn Form_SetKeyPreview(AObj: usize, AValue: bool);
  pub fn Form_GetMenu(AObj: usize) -> usize;
  pub fn Form_SetMenu(AObj: usize, AValue: usize);
  pub fn Form_GetPixelsPerInch(AObj: usize) -> i32;
  pub fn Form_SetPixelsPerInch(AObj: usize, AValue: i32);
  pub fn Form_GetPopupMenu(AObj: usize) -> usize;
  pub fn Form_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Form_GetPosition(AObj: usize) -> TPosition;
  pub fn Form_SetPosition(AObj: usize, AValue: TPosition);
  pub fn Form_GetScaled(AObj: usize) -> bool;
  pub fn Form_SetScaled(AObj: usize, AValue: bool);
  pub fn Form_GetShowHint(AObj: usize) -> bool;
  pub fn Form_SetShowHint(AObj: usize, AValue: bool);
  pub fn Form_GetVertScrollBar(AObj: usize) -> usize;
  pub fn Form_SetVertScrollBar(AObj: usize, AValue: usize);
  pub fn Form_GetVisible(AObj: usize) -> bool;
  pub fn Form_SetVisible(AObj: usize, AValue: bool);
  pub fn Form_GetWidth(AObj: usize) -> i32;
  pub fn Form_SetWidth(AObj: usize, AValue: i32);
  pub fn Form_GetWindowState(AObj: usize) -> TWindowState;
  pub fn Form_SetWindowState(AObj: usize, AValue: TWindowState);
  pub fn Form_SetOnActivate(AObj: usize, AEventId: usize);
  pub fn Form_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn Form_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Form_SetOnClose(AObj: usize, AEventId: usize);
  pub fn Form_SetOnCloseQuery(AObj: usize, AEventId: usize);
  pub fn Form_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Form_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Form_SetOnDeactivate(AObj: usize, AEventId: usize);
  pub fn Form_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn Form_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Form_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Form_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn Form_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn Form_SetOnHide(AObj: usize, AEventId: usize);
  pub fn Form_SetOnHelp(AObj: usize, AEventId: usize);
  pub fn Form_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn Form_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn Form_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn Form_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn Form_SetOnPaint(AObj: usize, AEventId: usize);
  pub fn Form_SetOnResize(AObj: usize, AEventId: usize);
  pub fn Form_SetOnShortCut(AObj: usize, AEventId: usize);
  pub fn Form_SetOnShow(AObj: usize, AEventId: usize);
  pub fn Form_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn Form_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn Form_GetCanvas(AObj: usize) -> usize;
  pub fn Form_GetModalResult(AObj: usize) -> TModalResult;
  pub fn Form_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn Form_GetMonitor(AObj: usize) -> usize;
  pub fn Form_GetLeft(AObj: usize) -> i32;
  pub fn Form_SetLeft(AObj: usize, AValue: i32);
  pub fn Form_GetTop(AObj: usize) -> i32;
  pub fn Form_SetTop(AObj: usize, AValue: i32);
  pub fn Form_GetDockClientCount(AObj: usize) -> i32;
  pub fn Form_GetMouseInClient(AObj: usize) -> bool;
  pub fn Form_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Form_GetBrush(AObj: usize) -> usize;
  pub fn Form_GetControlCount(AObj: usize) -> i32;
  pub fn Form_GetHandle(AObj: usize) -> HWND;
  pub fn Form_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Form_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Form_GetParentWindow(AObj: usize) -> HWND;
  pub fn Form_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Form_GetShowing(AObj: usize) -> bool;
  pub fn Form_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Form_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Form_GetTabStop(AObj: usize) -> bool;
  pub fn Form_SetTabStop(AObj: usize, AValue: bool);
  pub fn Form_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Form_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Form_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Form_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Form_GetControlState(AObj: usize) -> TControlState;
  pub fn Form_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Form_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Form_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Form_GetFloating(AObj: usize) -> bool;
  pub fn Form_GetParent(AObj: usize) -> usize;
  pub fn Form_SetParent(AObj: usize, AValue: usize);
  pub fn Form_GetCursor(AObj: usize) -> TCursor;
  pub fn Form_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Form_GetHint(AObj: usize) -> *const c_char;
  pub fn Form_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Form_GetComponentCount(AObj: usize) -> i32;
  pub fn Form_GetComponentIndex(AObj: usize) -> i32;
  pub fn Form_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Form_GetOwner(AObj: usize) -> usize;
  pub fn Form_GetName(AObj: usize) -> *const c_char;
  pub fn Form_SetName(AObj: usize, AValue: *const c_char);
  pub fn Form_GetTag(AObj: usize) -> isize;
  pub fn Form_SetTag(AObj: usize, AValue: isize);
  pub fn Form_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Form_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Form_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Form_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Form_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Form_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Form_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Form_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Form_GetChildSizing(AObj: usize) -> usize;
  pub fn Form_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Form_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Form_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Form_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Form_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Form_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Form_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Form_StaticClassType() -> TClass;
  pub fn Form_Create2(AOwner: usize, AInitScale: bool) -> usize;
  pub fn Form_EnabledMaximize(AObj: usize, AValue: bool);
  pub fn Form_EnabledMinimize(AObj: usize, AValue: bool);
  pub fn Form_EnabledSystemMenu(AObj: usize, AValue: bool);
  pub fn Form_SetOnDestroy(AObj: usize, AEventId: usize);
  pub fn Form_SetOnConstrainedResize(AObj: usize, AEventId: usize);
  pub fn Form_SetOnWndProc(AObj: usize, AEventId: usize);
  pub fn Form_ScaleForPPI(AObj: usize, ANewPPI: i32);
  pub fn Form_ScaleControlsForDpi(AObj: usize, ANewPPI: i32);
  pub fn Form_ScaleForCurrentDpi(AObj: usize);
  pub fn Form_InheritedWndProc(AObj: usize, AMsg: *mut TMessage);

  // ----------------- TParaAttributes ----------------------
  pub fn ParaAttributes_Assign(AObj: usize, Source: usize);
  pub fn ParaAttributes_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ParaAttributes_ClassType(AObj: usize) -> TClass;
  pub fn ParaAttributes_ClassName(AObj: usize) -> *const c_char;
  pub fn ParaAttributes_InstanceSize(AObj: usize) -> i32;
  pub fn ParaAttributes_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ParaAttributes_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ParaAttributes_GetHashCode(AObj: usize) -> i32;
  pub fn ParaAttributes_ToString(AObj: usize) -> *const c_char;
  pub fn ParaAttributes_GetAlignment(AObj: usize) -> TAlignment;
  pub fn ParaAttributes_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn ParaAttributes_GetFirstIndent(AObj: usize) -> i32;
  pub fn ParaAttributes_SetFirstIndent(AObj: usize, AValue: i32);
  pub fn ParaAttributes_GetLeftIndent(AObj: usize) -> i32;
  pub fn ParaAttributes_SetLeftIndent(AObj: usize, AValue: i32);
  pub fn ParaAttributes_GetNumbering(AObj: usize) -> TNumberingStyle;
  pub fn ParaAttributes_SetNumbering(AObj: usize, AValue: TNumberingStyle);
  pub fn ParaAttributes_GetRightIndent(AObj: usize) -> i32;
  pub fn ParaAttributes_SetRightIndent(AObj: usize, AValue: i32);
  pub fn ParaAttributes_GetTabCount(AObj: usize) -> i32;
  pub fn ParaAttributes_SetTabCount(AObj: usize, AValue: i32);
  pub fn ParaAttributes_GetTab(AObj: usize, Index: i8) -> i32;
  pub fn ParaAttributes_SetTab(AObj: usize, Index: i8, AValue: i32);
  pub fn ParaAttributes_StaticClassType() -> TClass;

  // ----------------- TTextAttributes ----------------------
  pub fn TextAttributes_Assign(AObj: usize, Source: usize);
  pub fn TextAttributes_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TextAttributes_ClassType(AObj: usize) -> TClass;
  pub fn TextAttributes_ClassName(AObj: usize) -> *const c_char;
  pub fn TextAttributes_InstanceSize(AObj: usize) -> i32;
  pub fn TextAttributes_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TextAttributes_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TextAttributes_GetHashCode(AObj: usize) -> i32;
  pub fn TextAttributes_ToString(AObj: usize) -> *const c_char;
  pub fn TextAttributes_GetCharset(AObj: usize) -> TFontCharset;
  pub fn TextAttributes_SetCharset(AObj: usize, AValue: TFontCharset);
  pub fn TextAttributes_GetColor(AObj: usize) -> TColor;
  pub fn TextAttributes_SetColor(AObj: usize, AValue: TColor);
  pub fn TextAttributes_GetName(AObj: usize) -> *const c_char;
  pub fn TextAttributes_SetName(AObj: usize, AValue: *const c_char);
  pub fn TextAttributes_GetPitch(AObj: usize) -> TFontPitch;
  pub fn TextAttributes_SetPitch(AObj: usize, AValue: TFontPitch);
  pub fn TextAttributes_GetSize(AObj: usize) -> i32;
  pub fn TextAttributes_SetSize(AObj: usize, AValue: i32);
  pub fn TextAttributes_GetStyle(AObj: usize) -> TFontStyles;
  pub fn TextAttributes_SetStyle(AObj: usize, AValue: TFontStyles);
  pub fn TextAttributes_GetHeight(AObj: usize) -> i32;
  pub fn TextAttributes_SetHeight(AObj: usize, AValue: i32);
  pub fn TextAttributes_StaticClassType() -> TClass;

  // ----------------- TIconOptions ----------------------
  pub fn IconOptions_Assign(AObj: usize, Source: usize);
  pub fn IconOptions_GetNamePath(AObj: usize) -> *const c_char;
  pub fn IconOptions_ClassType(AObj: usize) -> TClass;
  pub fn IconOptions_ClassName(AObj: usize) -> *const c_char;
  pub fn IconOptions_InstanceSize(AObj: usize) -> i32;
  pub fn IconOptions_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn IconOptions_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn IconOptions_GetHashCode(AObj: usize) -> i32;
  pub fn IconOptions_ToString(AObj: usize) -> *const c_char;
  pub fn IconOptions_GetArrangement(AObj: usize) -> TIconArrangement;
  pub fn IconOptions_SetArrangement(AObj: usize, AValue: TIconArrangement);
  pub fn IconOptions_GetAutoArrange(AObj: usize) -> bool;
  pub fn IconOptions_SetAutoArrange(AObj: usize, AValue: bool);
  pub fn IconOptions_StaticClassType() -> TClass;

  // ----------------- Exception ----------------------
  pub fn Exception_ToString(AObj: usize) -> *const c_char;
  pub fn Exception_ClassType(AObj: usize) -> TClass;
  pub fn Exception_ClassName(AObj: usize) -> *const c_char;
  pub fn Exception_InstanceSize(AObj: usize) -> i32;
  pub fn Exception_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Exception_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Exception_GetHashCode(AObj: usize) -> i32;
  pub fn Exception_GetMessage(AObj: usize) -> *const c_char;
  pub fn Exception_SetMessage(AObj: usize, AValue: *const c_char);
  pub fn Exception_StaticClassType() -> TClass;

  // ----------------- TScrollBar ----------------------
  pub fn ScrollBar_Create(AOwner: usize) -> usize;
  pub fn ScrollBar_Free(AObj: usize);
  pub fn ScrollBar_SetParams(AObj: usize, APosition: i32, AMin: i32, AMax: i32);
  pub fn ScrollBar_CanFocus(AObj: usize) -> bool;
  pub fn ScrollBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ScrollBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ScrollBar_DisableAlign(AObj: usize);
  pub fn ScrollBar_EnableAlign(AObj: usize);
  pub fn ScrollBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ScrollBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ScrollBar_Focused(AObj: usize) -> bool;
  pub fn ScrollBar_HandleAllocated(AObj: usize) -> bool;
  pub fn ScrollBar_InsertControl(AObj: usize, AControl: usize);
  pub fn ScrollBar_Invalidate(AObj: usize);
  pub fn ScrollBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ScrollBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn ScrollBar_Realign(AObj: usize);
  pub fn ScrollBar_Repaint(AObj: usize);
  pub fn ScrollBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ScrollBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ScrollBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ScrollBar_SetFocus(AObj: usize);
  pub fn ScrollBar_Update(AObj: usize);
  pub fn ScrollBar_BringToFront(AObj: usize);
  pub fn ScrollBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ScrollBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ScrollBar_Dragging(AObj: usize) -> bool;
  pub fn ScrollBar_HasParent(AObj: usize) -> bool;
  pub fn ScrollBar_Hide(AObj: usize);
  pub fn ScrollBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ScrollBar_Refresh(AObj: usize);
  pub fn ScrollBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ScrollBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ScrollBar_SendToBack(AObj: usize);
  pub fn ScrollBar_Show(AObj: usize);
  pub fn ScrollBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ScrollBar_GetTextLen(AObj: usize) -> i32;
  pub fn ScrollBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ScrollBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ScrollBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ScrollBar_Assign(AObj: usize, Source: usize);
  pub fn ScrollBar_ClassType(AObj: usize) -> TClass;
  pub fn ScrollBar_ClassName(AObj: usize) -> *const c_char;
  pub fn ScrollBar_InstanceSize(AObj: usize) -> i32;
  pub fn ScrollBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ScrollBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ScrollBar_GetHashCode(AObj: usize) -> i32;
  pub fn ScrollBar_ToString(AObj: usize) -> *const c_char;
  pub fn ScrollBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ScrollBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ScrollBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ScrollBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ScrollBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ScrollBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ScrollBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ScrollBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ScrollBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ScrollBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ScrollBar_GetAlign(AObj: usize) -> TAlign;
  pub fn ScrollBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ScrollBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ScrollBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ScrollBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ScrollBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ScrollBar_GetConstraints(AObj: usize) -> usize;
  pub fn ScrollBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ScrollBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ScrollBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ScrollBar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ScrollBar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ScrollBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ScrollBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ScrollBar_GetEnabled(AObj: usize) -> bool;
  pub fn ScrollBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetLargeChange(AObj: usize) -> TScrollBarInc;
  pub fn ScrollBar_SetLargeChange(AObj: usize, AValue: TScrollBarInc);
  pub fn ScrollBar_GetMax(AObj: usize) -> i32;
  pub fn ScrollBar_SetMax(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetMin(AObj: usize) -> i32;
  pub fn ScrollBar_SetMin(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetPageSize(AObj: usize) -> i32;
  pub fn ScrollBar_SetPageSize(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ScrollBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn ScrollBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn ScrollBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetPosition(AObj: usize) -> i32;
  pub fn ScrollBar_SetPosition(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetShowHint(AObj: usize) -> bool;
  pub fn ScrollBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetSmallChange(AObj: usize) -> TScrollBarInc;
  pub fn ScrollBar_SetSmallChange(AObj: usize, AValue: TScrollBarInc);
  pub fn ScrollBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ScrollBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ScrollBar_GetTabStop(AObj: usize) -> bool;
  pub fn ScrollBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetVisible(AObj: usize) -> bool;
  pub fn ScrollBar_SetVisible(AObj: usize, AValue: bool);
  pub fn ScrollBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ScrollBar_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ScrollBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn ScrollBar_GetDockSite(AObj: usize) -> bool;
  pub fn ScrollBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn ScrollBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ScrollBar_GetBrush(AObj: usize) -> usize;
  pub fn ScrollBar_GetControlCount(AObj: usize) -> i32;
  pub fn ScrollBar_GetHandle(AObj: usize) -> HWND;
  pub fn ScrollBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn ScrollBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ScrollBar_GetShowing(AObj: usize) -> bool;
  pub fn ScrollBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn ScrollBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ScrollBar_GetAction(AObj: usize) -> usize;
  pub fn ScrollBar_SetAction(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ScrollBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ScrollBar_GetClientHeight(AObj: usize) -> i32;
  pub fn ScrollBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ScrollBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ScrollBar_GetClientWidth(AObj: usize) -> i32;
  pub fn ScrollBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetControlState(AObj: usize) -> TControlState;
  pub fn ScrollBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ScrollBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ScrollBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ScrollBar_GetFloating(AObj: usize) -> bool;
  pub fn ScrollBar_GetParent(AObj: usize) -> usize;
  pub fn ScrollBar_SetParent(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetLeft(AObj: usize) -> i32;
  pub fn ScrollBar_SetLeft(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetTop(AObj: usize) -> i32;
  pub fn ScrollBar_SetTop(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetWidth(AObj: usize) -> i32;
  pub fn ScrollBar_SetWidth(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetHeight(AObj: usize) -> i32;
  pub fn ScrollBar_SetHeight(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetCursor(AObj: usize) -> TCursor;
  pub fn ScrollBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ScrollBar_GetHint(AObj: usize) -> *const c_char;
  pub fn ScrollBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ScrollBar_GetComponentCount(AObj: usize) -> i32;
  pub fn ScrollBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn ScrollBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ScrollBar_GetOwner(AObj: usize) -> usize;
  pub fn ScrollBar_GetName(AObj: usize) -> *const c_char;
  pub fn ScrollBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn ScrollBar_GetTag(AObj: usize) -> isize;
  pub fn ScrollBar_SetTag(AObj: usize, AValue: isize);
  pub fn ScrollBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ScrollBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ScrollBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ScrollBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ScrollBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetChildSizing(AObj: usize) -> usize;
  pub fn ScrollBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ScrollBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ScrollBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ScrollBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ScrollBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ScrollBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ScrollBar_StaticClassType() -> TClass;

  // ----------------- TMaskEdit ----------------------
  pub fn MaskEdit_Create(AOwner: usize) -> usize;
  pub fn MaskEdit_Free(AObj: usize);
  pub fn MaskEdit_ValidateEdit(AObj: usize);
  pub fn MaskEdit_Clear(AObj: usize);
  pub fn MaskEdit_GetTextLen(AObj: usize) -> i32;
  pub fn MaskEdit_ClearSelection(AObj: usize);
  pub fn MaskEdit_CopyToClipboard(AObj: usize);
  pub fn MaskEdit_CutToClipboard(AObj: usize);
  pub fn MaskEdit_PasteFromClipboard(AObj: usize);
  pub fn MaskEdit_Undo(AObj: usize);
  pub fn MaskEdit_SelectAll(AObj: usize);
  pub fn MaskEdit_CanFocus(AObj: usize) -> bool;
  pub fn MaskEdit_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn MaskEdit_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn MaskEdit_DisableAlign(AObj: usize);
  pub fn MaskEdit_EnableAlign(AObj: usize);
  pub fn MaskEdit_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn MaskEdit_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn MaskEdit_Focused(AObj: usize) -> bool;
  pub fn MaskEdit_HandleAllocated(AObj: usize) -> bool;
  pub fn MaskEdit_InsertControl(AObj: usize, AControl: usize);
  pub fn MaskEdit_Invalidate(AObj: usize);
  pub fn MaskEdit_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn MaskEdit_RemoveControl(AObj: usize, AControl: usize);
  pub fn MaskEdit_Realign(AObj: usize);
  pub fn MaskEdit_Repaint(AObj: usize);
  pub fn MaskEdit_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn MaskEdit_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn MaskEdit_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn MaskEdit_SetFocus(AObj: usize);
  pub fn MaskEdit_Update(AObj: usize);
  pub fn MaskEdit_BringToFront(AObj: usize);
  pub fn MaskEdit_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MaskEdit_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MaskEdit_Dragging(AObj: usize) -> bool;
  pub fn MaskEdit_HasParent(AObj: usize) -> bool;
  pub fn MaskEdit_Hide(AObj: usize);
  pub fn MaskEdit_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn MaskEdit_Refresh(AObj: usize);
  pub fn MaskEdit_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn MaskEdit_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn MaskEdit_SendToBack(AObj: usize);
  pub fn MaskEdit_Show(AObj: usize);
  pub fn MaskEdit_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn MaskEdit_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn MaskEdit_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn MaskEdit_GetNamePath(AObj: usize) -> *const c_char;
  pub fn MaskEdit_Assign(AObj: usize, Source: usize);
  pub fn MaskEdit_ClassType(AObj: usize) -> TClass;
  pub fn MaskEdit_ClassName(AObj: usize) -> *const c_char;
  pub fn MaskEdit_InstanceSize(AObj: usize) -> i32;
  pub fn MaskEdit_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn MaskEdit_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn MaskEdit_GetHashCode(AObj: usize) -> i32;
  pub fn MaskEdit_ToString(AObj: usize) -> *const c_char;
  pub fn MaskEdit_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MaskEdit_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn MaskEdit_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn MaskEdit_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn MaskEdit_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn MaskEdit_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn MaskEdit_AnchorClient(AObj: usize, ASpace: i32);
  pub fn MaskEdit_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn MaskEdit_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn MaskEdit_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn MaskEdit_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn MaskEdit_GetAlign(AObj: usize) -> TAlign;
  pub fn MaskEdit_SetAlign(AObj: usize, AValue: TAlign);
  pub fn MaskEdit_GetAlignment(AObj: usize) -> TAlignment;
  pub fn MaskEdit_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn MaskEdit_GetAnchors(AObj: usize) -> TAnchors;
  pub fn MaskEdit_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn MaskEdit_GetAutoSelect(AObj: usize) -> bool;
  pub fn MaskEdit_SetAutoSelect(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetAutoSize(AObj: usize) -> bool;
  pub fn MaskEdit_SetAutoSize(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn MaskEdit_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn MaskEdit_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn MaskEdit_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn MaskEdit_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn MaskEdit_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn MaskEdit_GetColor(AObj: usize) -> TColor;
  pub fn MaskEdit_SetColor(AObj: usize, AValue: TColor);
  pub fn MaskEdit_GetConstraints(AObj: usize) -> usize;
  pub fn MaskEdit_SetConstraints(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn MaskEdit_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetDragCursor(AObj: usize) -> TCursor;
  pub fn MaskEdit_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn MaskEdit_GetDragKind(AObj: usize) -> TDragKind;
  pub fn MaskEdit_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn MaskEdit_GetDragMode(AObj: usize) -> TDragMode;
  pub fn MaskEdit_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn MaskEdit_GetEnabled(AObj: usize) -> bool;
  pub fn MaskEdit_SetEnabled(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetFont(AObj: usize) -> usize;
  pub fn MaskEdit_SetFont(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetMaxLength(AObj: usize) -> i32;
  pub fn MaskEdit_SetMaxLength(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetParentColor(AObj: usize) -> bool;
  pub fn MaskEdit_SetParentColor(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn MaskEdit_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetParentFont(AObj: usize) -> bool;
  pub fn MaskEdit_SetParentFont(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetParentShowHint(AObj: usize) -> bool;
  pub fn MaskEdit_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetPasswordChar(AObj: usize) -> Char;
  pub fn MaskEdit_SetPasswordChar(AObj: usize, AValue: Char);
  pub fn MaskEdit_GetPopupMenu(AObj: usize) -> usize;
  pub fn MaskEdit_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetReadOnly(AObj: usize) -> bool;
  pub fn MaskEdit_SetReadOnly(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetShowHint(AObj: usize) -> bool;
  pub fn MaskEdit_SetShowHint(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn MaskEdit_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn MaskEdit_GetTabStop(AObj: usize) -> bool;
  pub fn MaskEdit_SetTabStop(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetText(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetText(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetTextHint(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetVisible(AObj: usize) -> bool;
  pub fn MaskEdit_SetVisible(AObj: usize, AValue: bool);
  pub fn MaskEdit_SetOnChange(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnClick(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnExit(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn MaskEdit_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn MaskEdit_GetIsMasked(AObj: usize) -> bool;
  pub fn MaskEdit_GetEditText(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetEditText(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetCanUndo(AObj: usize) -> bool;
  pub fn MaskEdit_GetModified(AObj: usize) -> bool;
  pub fn MaskEdit_SetModified(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetSelLength(AObj: usize) -> i32;
  pub fn MaskEdit_SetSelLength(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetSelStart(AObj: usize) -> i32;
  pub fn MaskEdit_SetSelStart(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetSelText(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetDockClientCount(AObj: usize) -> i32;
  pub fn MaskEdit_GetDockSite(AObj: usize) -> bool;
  pub fn MaskEdit_SetDockSite(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetMouseInClient(AObj: usize) -> bool;
  pub fn MaskEdit_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn MaskEdit_GetBrush(AObj: usize) -> usize;
  pub fn MaskEdit_GetControlCount(AObj: usize) -> i32;
  pub fn MaskEdit_GetHandle(AObj: usize) -> HWND;
  pub fn MaskEdit_GetParentWindow(AObj: usize) -> HWND;
  pub fn MaskEdit_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn MaskEdit_GetShowing(AObj: usize) -> bool;
  pub fn MaskEdit_GetUseDockManager(AObj: usize) -> bool;
  pub fn MaskEdit_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn MaskEdit_GetAction(AObj: usize) -> usize;
  pub fn MaskEdit_SetAction(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn MaskEdit_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn MaskEdit_GetClientHeight(AObj: usize) -> i32;
  pub fn MaskEdit_SetClientHeight(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn MaskEdit_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn MaskEdit_GetClientWidth(AObj: usize) -> i32;
  pub fn MaskEdit_SetClientWidth(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetControlState(AObj: usize) -> TControlState;
  pub fn MaskEdit_SetControlState(AObj: usize, AValue: TControlState);
  pub fn MaskEdit_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn MaskEdit_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn MaskEdit_GetFloating(AObj: usize) -> bool;
  pub fn MaskEdit_GetParent(AObj: usize) -> usize;
  pub fn MaskEdit_SetParent(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetLeft(AObj: usize) -> i32;
  pub fn MaskEdit_SetLeft(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetTop(AObj: usize) -> i32;
  pub fn MaskEdit_SetTop(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetWidth(AObj: usize) -> i32;
  pub fn MaskEdit_SetWidth(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetHeight(AObj: usize) -> i32;
  pub fn MaskEdit_SetHeight(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetCursor(AObj: usize) -> TCursor;
  pub fn MaskEdit_SetCursor(AObj: usize, AValue: TCursor);
  pub fn MaskEdit_GetHint(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetHint(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetComponentCount(AObj: usize) -> i32;
  pub fn MaskEdit_GetComponentIndex(AObj: usize) -> i32;
  pub fn MaskEdit_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn MaskEdit_GetOwner(AObj: usize) -> usize;
  pub fn MaskEdit_GetName(AObj: usize) -> *const c_char;
  pub fn MaskEdit_SetName(AObj: usize, AValue: *const c_char);
  pub fn MaskEdit_GetTag(AObj: usize) -> isize;
  pub fn MaskEdit_SetTag(AObj: usize, AValue: isize);
  pub fn MaskEdit_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn MaskEdit_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn MaskEdit_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn MaskEdit_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn MaskEdit_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetChildSizing(AObj: usize) -> usize;
  pub fn MaskEdit_SetChildSizing(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetBorderSpacing(AObj: usize) -> usize;
  pub fn MaskEdit_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn MaskEdit_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn MaskEdit_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn MaskEdit_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn MaskEdit_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn MaskEdit_StaticClassType() -> TClass;

  // ----------------- TShape ----------------------
  pub fn Shape_Create(AOwner: usize) -> usize;
  pub fn Shape_Free(AObj: usize);
  pub fn Shape_BringToFront(AObj: usize);
  pub fn Shape_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Shape_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Shape_Dragging(AObj: usize) -> bool;
  pub fn Shape_HasParent(AObj: usize) -> bool;
  pub fn Shape_Hide(AObj: usize);
  pub fn Shape_Invalidate(AObj: usize);
  pub fn Shape_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Shape_Refresh(AObj: usize);
  pub fn Shape_Repaint(AObj: usize);
  pub fn Shape_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Shape_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Shape_SendToBack(AObj: usize);
  pub fn Shape_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Shape_Show(AObj: usize);
  pub fn Shape_Update(AObj: usize);
  pub fn Shape_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Shape_GetTextLen(AObj: usize) -> i32;
  pub fn Shape_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Shape_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Shape_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Shape_Assign(AObj: usize, Source: usize);
  pub fn Shape_ClassType(AObj: usize) -> TClass;
  pub fn Shape_ClassName(AObj: usize) -> *const c_char;
  pub fn Shape_InstanceSize(AObj: usize) -> i32;
  pub fn Shape_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Shape_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Shape_GetHashCode(AObj: usize) -> i32;
  pub fn Shape_ToString(AObj: usize) -> *const c_char;
  pub fn Shape_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Shape_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Shape_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Shape_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Shape_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Shape_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Shape_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Shape_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Shape_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Shape_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Shape_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Shape_GetAlign(AObj: usize) -> TAlign;
  pub fn Shape_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Shape_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Shape_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Shape_GetBrush(AObj: usize) -> usize;
  pub fn Shape_SetBrush(AObj: usize, AValue: usize);
  pub fn Shape_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Shape_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Shape_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Shape_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Shape_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Shape_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Shape_GetEnabled(AObj: usize) -> bool;
  pub fn Shape_SetEnabled(AObj: usize, AValue: bool);
  pub fn Shape_GetConstraints(AObj: usize) -> usize;
  pub fn Shape_SetConstraints(AObj: usize, AValue: usize);
  pub fn Shape_GetParentShowHint(AObj: usize) -> bool;
  pub fn Shape_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Shape_GetPen(AObj: usize) -> usize;
  pub fn Shape_SetPen(AObj: usize, AValue: usize);
  pub fn Shape_GetShape(AObj: usize) -> TShapeType;
  pub fn Shape_SetShape(AObj: usize, AValue: TShapeType);
  pub fn Shape_GetShowHint(AObj: usize) -> bool;
  pub fn Shape_SetShowHint(AObj: usize, AValue: bool);
  pub fn Shape_GetVisible(AObj: usize) -> bool;
  pub fn Shape_SetVisible(AObj: usize, AValue: bool);
  pub fn Shape_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Shape_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Shape_GetAction(AObj: usize) -> usize;
  pub fn Shape_SetAction(AObj: usize, AValue: usize);
  pub fn Shape_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Shape_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Shape_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Shape_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Shape_GetClientHeight(AObj: usize) -> i32;
  pub fn Shape_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Shape_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Shape_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Shape_GetClientWidth(AObj: usize) -> i32;
  pub fn Shape_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Shape_GetControlState(AObj: usize) -> TControlState;
  pub fn Shape_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Shape_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Shape_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Shape_GetFloating(AObj: usize) -> bool;
  pub fn Shape_GetParent(AObj: usize) -> usize;
  pub fn Shape_SetParent(AObj: usize, AValue: usize);
  pub fn Shape_GetLeft(AObj: usize) -> i32;
  pub fn Shape_SetLeft(AObj: usize, AValue: i32);
  pub fn Shape_GetTop(AObj: usize) -> i32;
  pub fn Shape_SetTop(AObj: usize, AValue: i32);
  pub fn Shape_GetWidth(AObj: usize) -> i32;
  pub fn Shape_SetWidth(AObj: usize, AValue: i32);
  pub fn Shape_GetHeight(AObj: usize) -> i32;
  pub fn Shape_SetHeight(AObj: usize, AValue: i32);
  pub fn Shape_GetCursor(AObj: usize) -> TCursor;
  pub fn Shape_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Shape_GetHint(AObj: usize) -> *const c_char;
  pub fn Shape_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Shape_GetComponentCount(AObj: usize) -> i32;
  pub fn Shape_GetComponentIndex(AObj: usize) -> i32;
  pub fn Shape_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Shape_GetOwner(AObj: usize) -> usize;
  pub fn Shape_GetName(AObj: usize) -> *const c_char;
  pub fn Shape_SetName(AObj: usize, AValue: *const c_char);
  pub fn Shape_GetTag(AObj: usize) -> isize;
  pub fn Shape_SetTag(AObj: usize, AValue: isize);
  pub fn Shape_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Shape_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Shape_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Shape_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Shape_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Shape_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Shape_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Shape_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Shape_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Shape_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Shape_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Shape_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Shape_StaticClassType() -> TClass;

  // ----------------- TBevel ----------------------
  pub fn Bevel_Create(AOwner: usize) -> usize;
  pub fn Bevel_Free(AObj: usize);
  pub fn Bevel_BringToFront(AObj: usize);
  pub fn Bevel_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Bevel_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Bevel_Dragging(AObj: usize) -> bool;
  pub fn Bevel_HasParent(AObj: usize) -> bool;
  pub fn Bevel_Hide(AObj: usize);
  pub fn Bevel_Invalidate(AObj: usize);
  pub fn Bevel_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Bevel_Refresh(AObj: usize);
  pub fn Bevel_Repaint(AObj: usize);
  pub fn Bevel_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Bevel_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Bevel_SendToBack(AObj: usize);
  pub fn Bevel_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Bevel_Show(AObj: usize);
  pub fn Bevel_Update(AObj: usize);
  pub fn Bevel_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Bevel_GetTextLen(AObj: usize) -> i32;
  pub fn Bevel_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Bevel_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Bevel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Bevel_Assign(AObj: usize, Source: usize);
  pub fn Bevel_ClassType(AObj: usize) -> TClass;
  pub fn Bevel_ClassName(AObj: usize) -> *const c_char;
  pub fn Bevel_InstanceSize(AObj: usize) -> i32;
  pub fn Bevel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Bevel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Bevel_GetHashCode(AObj: usize) -> i32;
  pub fn Bevel_ToString(AObj: usize) -> *const c_char;
  pub fn Bevel_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Bevel_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Bevel_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Bevel_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Bevel_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Bevel_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Bevel_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Bevel_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Bevel_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Bevel_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Bevel_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Bevel_GetAlign(AObj: usize) -> TAlign;
  pub fn Bevel_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Bevel_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Bevel_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Bevel_GetConstraints(AObj: usize) -> usize;
  pub fn Bevel_SetConstraints(AObj: usize, AValue: usize);
  pub fn Bevel_GetParentShowHint(AObj: usize) -> bool;
  pub fn Bevel_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Bevel_GetShape(AObj: usize) -> TBevelShape;
  pub fn Bevel_SetShape(AObj: usize, AValue: TBevelShape);
  pub fn Bevel_GetShowHint(AObj: usize) -> bool;
  pub fn Bevel_SetShowHint(AObj: usize, AValue: bool);
  pub fn Bevel_GetStyle(AObj: usize) -> TBevelStyle;
  pub fn Bevel_SetStyle(AObj: usize, AValue: TBevelStyle);
  pub fn Bevel_GetVisible(AObj: usize) -> bool;
  pub fn Bevel_SetVisible(AObj: usize, AValue: bool);
  pub fn Bevel_GetEnabled(AObj: usize) -> bool;
  pub fn Bevel_SetEnabled(AObj: usize, AValue: bool);
  pub fn Bevel_GetAction(AObj: usize) -> usize;
  pub fn Bevel_SetAction(AObj: usize, AValue: usize);
  pub fn Bevel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Bevel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Bevel_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Bevel_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Bevel_GetClientHeight(AObj: usize) -> i32;
  pub fn Bevel_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Bevel_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Bevel_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Bevel_GetClientWidth(AObj: usize) -> i32;
  pub fn Bevel_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Bevel_GetControlState(AObj: usize) -> TControlState;
  pub fn Bevel_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Bevel_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Bevel_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Bevel_GetFloating(AObj: usize) -> bool;
  pub fn Bevel_GetParent(AObj: usize) -> usize;
  pub fn Bevel_SetParent(AObj: usize, AValue: usize);
  pub fn Bevel_GetLeft(AObj: usize) -> i32;
  pub fn Bevel_SetLeft(AObj: usize, AValue: i32);
  pub fn Bevel_GetTop(AObj: usize) -> i32;
  pub fn Bevel_SetTop(AObj: usize, AValue: i32);
  pub fn Bevel_GetWidth(AObj: usize) -> i32;
  pub fn Bevel_SetWidth(AObj: usize, AValue: i32);
  pub fn Bevel_GetHeight(AObj: usize) -> i32;
  pub fn Bevel_SetHeight(AObj: usize, AValue: i32);
  pub fn Bevel_GetCursor(AObj: usize) -> TCursor;
  pub fn Bevel_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Bevel_GetHint(AObj: usize) -> *const c_char;
  pub fn Bevel_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Bevel_GetComponentCount(AObj: usize) -> i32;
  pub fn Bevel_GetComponentIndex(AObj: usize) -> i32;
  pub fn Bevel_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Bevel_GetOwner(AObj: usize) -> usize;
  pub fn Bevel_GetName(AObj: usize) -> *const c_char;
  pub fn Bevel_SetName(AObj: usize, AValue: *const c_char);
  pub fn Bevel_GetTag(AObj: usize) -> isize;
  pub fn Bevel_SetTag(AObj: usize, AValue: isize);
  pub fn Bevel_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Bevel_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Bevel_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Bevel_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Bevel_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Bevel_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Bevel_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Bevel_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Bevel_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Bevel_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Bevel_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Bevel_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Bevel_StaticClassType() -> TClass;

  // ----------------- TScrollBox ----------------------
  pub fn ScrollBox_Create(AOwner: usize) -> usize;
  pub fn ScrollBox_Free(AObj: usize);
  pub fn ScrollBox_ScrollInView(AObj: usize, AControl: usize);
  pub fn ScrollBox_CanFocus(AObj: usize) -> bool;
  pub fn ScrollBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ScrollBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ScrollBox_DisableAlign(AObj: usize);
  pub fn ScrollBox_EnableAlign(AObj: usize);
  pub fn ScrollBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ScrollBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ScrollBox_Focused(AObj: usize) -> bool;
  pub fn ScrollBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ScrollBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ScrollBox_Invalidate(AObj: usize);
  pub fn ScrollBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ScrollBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ScrollBox_Realign(AObj: usize);
  pub fn ScrollBox_Repaint(AObj: usize);
  pub fn ScrollBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ScrollBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ScrollBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ScrollBox_SetFocus(AObj: usize);
  pub fn ScrollBox_Update(AObj: usize);
  pub fn ScrollBox_BringToFront(AObj: usize);
  pub fn ScrollBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ScrollBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ScrollBox_Dragging(AObj: usize) -> bool;
  pub fn ScrollBox_HasParent(AObj: usize) -> bool;
  pub fn ScrollBox_Hide(AObj: usize);
  pub fn ScrollBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ScrollBox_Refresh(AObj: usize);
  pub fn ScrollBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ScrollBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ScrollBox_SendToBack(AObj: usize);
  pub fn ScrollBox_Show(AObj: usize);
  pub fn ScrollBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ScrollBox_GetTextLen(AObj: usize) -> i32;
  pub fn ScrollBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ScrollBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ScrollBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ScrollBox_Assign(AObj: usize, Source: usize);
  pub fn ScrollBox_ClassType(AObj: usize) -> TClass;
  pub fn ScrollBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ScrollBox_InstanceSize(AObj: usize) -> i32;
  pub fn ScrollBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ScrollBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ScrollBox_GetHashCode(AObj: usize) -> i32;
  pub fn ScrollBox_ToString(AObj: usize) -> *const c_char;
  pub fn ScrollBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ScrollBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ScrollBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ScrollBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ScrollBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ScrollBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ScrollBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ScrollBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ScrollBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ScrollBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ScrollBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ScrollBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ScrollBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ScrollBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ScrollBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ScrollBox_GetAutoScroll(AObj: usize) -> bool;
  pub fn ScrollBox_SetAutoScroll(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetAutoSize(AObj: usize) -> bool;
  pub fn ScrollBox_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ScrollBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ScrollBox_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn ScrollBox_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn ScrollBox_GetConstraints(AObj: usize) -> usize;
  pub fn ScrollBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetDockSite(AObj: usize) -> bool;
  pub fn ScrollBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ScrollBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ScrollBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ScrollBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ScrollBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ScrollBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ScrollBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ScrollBox_GetEnabled(AObj: usize) -> bool;
  pub fn ScrollBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetColor(AObj: usize) -> TColor;
  pub fn ScrollBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ScrollBox_GetFont(AObj: usize) -> usize;
  pub fn ScrollBox_SetFont(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetParentBackground(AObj: usize) -> bool;
  pub fn ScrollBox_SetParentBackground(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetParentColor(AObj: usize) -> bool;
  pub fn ScrollBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ScrollBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetParentFont(AObj: usize) -> bool;
  pub fn ScrollBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ScrollBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ScrollBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetShowHint(AObj: usize) -> bool;
  pub fn ScrollBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ScrollBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ScrollBox_GetTabStop(AObj: usize) -> bool;
  pub fn ScrollBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetVisible(AObj: usize) -> bool;
  pub fn ScrollBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ScrollBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnResize(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn ScrollBox_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn ScrollBox_GetHorzScrollBar(AObj: usize) -> usize;
  pub fn ScrollBox_SetHorzScrollBar(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetVertScrollBar(AObj: usize) -> usize;
  pub fn ScrollBox_SetVertScrollBar(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ScrollBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ScrollBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ScrollBox_GetBrush(AObj: usize) -> usize;
  pub fn ScrollBox_GetControlCount(AObj: usize) -> i32;
  pub fn ScrollBox_GetHandle(AObj: usize) -> HWND;
  pub fn ScrollBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ScrollBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ScrollBox_GetShowing(AObj: usize) -> bool;
  pub fn ScrollBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ScrollBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ScrollBox_GetAction(AObj: usize) -> usize;
  pub fn ScrollBox_SetAction(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ScrollBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ScrollBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ScrollBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ScrollBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ScrollBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ScrollBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ScrollBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ScrollBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ScrollBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ScrollBox_GetFloating(AObj: usize) -> bool;
  pub fn ScrollBox_GetParent(AObj: usize) -> usize;
  pub fn ScrollBox_SetParent(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetLeft(AObj: usize) -> i32;
  pub fn ScrollBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetTop(AObj: usize) -> i32;
  pub fn ScrollBox_SetTop(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetWidth(AObj: usize) -> i32;
  pub fn ScrollBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetHeight(AObj: usize) -> i32;
  pub fn ScrollBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ScrollBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ScrollBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ScrollBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ScrollBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ScrollBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ScrollBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ScrollBox_GetOwner(AObj: usize) -> usize;
  pub fn ScrollBox_GetName(AObj: usize) -> *const c_char;
  pub fn ScrollBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ScrollBox_GetTag(AObj: usize) -> isize;
  pub fn ScrollBox_SetTag(AObj: usize, AValue: isize);
  pub fn ScrollBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ScrollBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ScrollBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ScrollBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ScrollBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ScrollBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ScrollBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ScrollBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ScrollBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ScrollBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ScrollBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ScrollBox_StaticClassType() -> TClass;

  // ----------------- TCheckListBox ----------------------
  pub fn CheckListBox_Create(AOwner: usize) -> usize;
  pub fn CheckListBox_Free(AObj: usize);
  pub fn CheckListBox_CheckAll(AObj: usize, AState: TCheckBoxState, AllowGrayed: bool, AllowDisabled: bool);
  pub fn CheckListBox_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn CheckListBox_Clear(AObj: usize);
  pub fn CheckListBox_ClearSelection(AObj: usize);
  pub fn CheckListBox_DeleteSelected(AObj: usize);
  pub fn CheckListBox_ItemAtPos(AObj: usize, Pos: *mut TPoint, Existing: bool) -> i32;
  pub fn CheckListBox_ItemRect(AObj: usize, Index: i32, Result: *mut TRect);
  pub fn CheckListBox_SelectAll(AObj: usize);
  pub fn CheckListBox_CanFocus(AObj: usize) -> bool;
  pub fn CheckListBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn CheckListBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn CheckListBox_DisableAlign(AObj: usize);
  pub fn CheckListBox_EnableAlign(AObj: usize);
  pub fn CheckListBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn CheckListBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn CheckListBox_Focused(AObj: usize) -> bool;
  pub fn CheckListBox_HandleAllocated(AObj: usize) -> bool;
  pub fn CheckListBox_InsertControl(AObj: usize, AControl: usize);
  pub fn CheckListBox_Invalidate(AObj: usize);
  pub fn CheckListBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn CheckListBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn CheckListBox_Realign(AObj: usize);
  pub fn CheckListBox_Repaint(AObj: usize);
  pub fn CheckListBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn CheckListBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn CheckListBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn CheckListBox_SetFocus(AObj: usize);
  pub fn CheckListBox_Update(AObj: usize);
  pub fn CheckListBox_BringToFront(AObj: usize);
  pub fn CheckListBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckListBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckListBox_Dragging(AObj: usize) -> bool;
  pub fn CheckListBox_HasParent(AObj: usize) -> bool;
  pub fn CheckListBox_Hide(AObj: usize);
  pub fn CheckListBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn CheckListBox_Refresh(AObj: usize);
  pub fn CheckListBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckListBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckListBox_SendToBack(AObj: usize);
  pub fn CheckListBox_Show(AObj: usize);
  pub fn CheckListBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn CheckListBox_GetTextLen(AObj: usize) -> i32;
  pub fn CheckListBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn CheckListBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn CheckListBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CheckListBox_Assign(AObj: usize, Source: usize);
  pub fn CheckListBox_ClassType(AObj: usize) -> TClass;
  pub fn CheckListBox_ClassName(AObj: usize) -> *const c_char;
  pub fn CheckListBox_InstanceSize(AObj: usize) -> i32;
  pub fn CheckListBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CheckListBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CheckListBox_GetHashCode(AObj: usize) -> i32;
  pub fn CheckListBox_ToString(AObj: usize) -> *const c_char;
  pub fn CheckListBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckListBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckListBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckListBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckListBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn CheckListBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn CheckListBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn CheckListBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckListBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn CheckListBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn CheckListBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn CheckListBox_SetOnClickCheck(AObj: usize, AEventId: usize);
  pub fn CheckListBox_GetAlign(AObj: usize) -> TAlign;
  pub fn CheckListBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn CheckListBox_GetAllowGrayed(AObj: usize) -> bool;
  pub fn CheckListBox_SetAllowGrayed(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn CheckListBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn CheckListBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn CheckListBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn CheckListBox_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn CheckListBox_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn CheckListBox_GetColor(AObj: usize) -> TColor;
  pub fn CheckListBox_SetColor(AObj: usize, AValue: TColor);
  pub fn CheckListBox_GetColumns(AObj: usize) -> i32;
  pub fn CheckListBox_SetColumns(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetConstraints(AObj: usize) -> usize;
  pub fn CheckListBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckListBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn CheckListBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn CheckListBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn CheckListBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn CheckListBox_GetEnabled(AObj: usize) -> bool;
  pub fn CheckListBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetFont(AObj: usize) -> usize;
  pub fn CheckListBox_SetFont(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetItemHeight(AObj: usize) -> i32;
  pub fn CheckListBox_SetItemHeight(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetItems(AObj: usize) -> usize;
  pub fn CheckListBox_SetItems(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetParentColor(AObj: usize) -> bool;
  pub fn CheckListBox_SetParentColor(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckListBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetParentFont(AObj: usize) -> bool;
  pub fn CheckListBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn CheckListBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn CheckListBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetShowHint(AObj: usize) -> bool;
  pub fn CheckListBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetSorted(AObj: usize) -> bool;
  pub fn CheckListBox_SetSorted(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetStyle(AObj: usize) -> TListBoxStyle;
  pub fn CheckListBox_SetStyle(AObj: usize, AValue: TListBoxStyle);
  pub fn CheckListBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn CheckListBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn CheckListBox_GetTabStop(AObj: usize) -> bool;
  pub fn CheckListBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetVisible(AObj: usize) -> bool;
  pub fn CheckListBox_SetVisible(AObj: usize, AValue: bool);
  pub fn CheckListBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMeasureItem(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn CheckListBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn CheckListBox_GetCanvas(AObj: usize) -> usize;
  pub fn CheckListBox_GetCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetTopIndex(AObj: usize) -> i32;
  pub fn CheckListBox_SetTopIndex(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetMultiSelect(AObj: usize) -> bool;
  pub fn CheckListBox_SetMultiSelect(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetSelCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetItemIndex(AObj: usize) -> i32;
  pub fn CheckListBox_SetItemIndex(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetDockSite(AObj: usize) -> bool;
  pub fn CheckListBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn CheckListBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetBrush(AObj: usize) -> usize;
  pub fn CheckListBox_GetControlCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetHandle(AObj: usize) -> HWND;
  pub fn CheckListBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn CheckListBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn CheckListBox_GetShowing(AObj: usize) -> bool;
  pub fn CheckListBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn CheckListBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn CheckListBox_GetAction(AObj: usize) -> usize;
  pub fn CheckListBox_SetAction(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn CheckListBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn CheckListBox_GetClientHeight(AObj: usize) -> i32;
  pub fn CheckListBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn CheckListBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn CheckListBox_GetClientWidth(AObj: usize) -> i32;
  pub fn CheckListBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetControlState(AObj: usize) -> TControlState;
  pub fn CheckListBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn CheckListBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn CheckListBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn CheckListBox_GetFloating(AObj: usize) -> bool;
  pub fn CheckListBox_GetParent(AObj: usize) -> usize;
  pub fn CheckListBox_SetParent(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetLeft(AObj: usize) -> i32;
  pub fn CheckListBox_SetLeft(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetTop(AObj: usize) -> i32;
  pub fn CheckListBox_SetTop(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetWidth(AObj: usize) -> i32;
  pub fn CheckListBox_SetWidth(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetHeight(AObj: usize) -> i32;
  pub fn CheckListBox_SetHeight(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetCursor(AObj: usize) -> TCursor;
  pub fn CheckListBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn CheckListBox_GetHint(AObj: usize) -> *const c_char;
  pub fn CheckListBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn CheckListBox_GetComponentCount(AObj: usize) -> i32;
  pub fn CheckListBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn CheckListBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn CheckListBox_GetOwner(AObj: usize) -> usize;
  pub fn CheckListBox_GetName(AObj: usize) -> *const c_char;
  pub fn CheckListBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn CheckListBox_GetTag(AObj: usize) -> isize;
  pub fn CheckListBox_SetTag(AObj: usize, AValue: isize);
  pub fn CheckListBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn CheckListBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn CheckListBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn CheckListBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn CheckListBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetChildSizing(AObj: usize) -> usize;
  pub fn CheckListBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn CheckListBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn CheckListBox_GetChecked(AObj: usize, Index: i32) -> bool;
  pub fn CheckListBox_SetChecked(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckListBox_GetItemEnabled(AObj: usize, Index: i32) -> bool;
  pub fn CheckListBox_SetItemEnabled(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckListBox_GetState(AObj: usize, Index: i32) -> TCheckBoxState;
  pub fn CheckListBox_SetState(AObj: usize, Index: i32, AValue: TCheckBoxState);
  pub fn CheckListBox_GetHeader(AObj: usize, Index: i32) -> bool;
  pub fn CheckListBox_SetHeader(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckListBox_GetSelected(AObj: usize, Index: i32) -> bool;
  pub fn CheckListBox_SetSelected(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckListBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn CheckListBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn CheckListBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn CheckListBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn CheckListBox_StaticClassType() -> TClass;

  // ----------------- TGauge ----------------------
  pub fn Gauge_Create(AOwner: usize) -> usize;
  pub fn Gauge_Free(AObj: usize);
  pub fn Gauge_AddProgress(AObj: usize, Value: i32);
  pub fn Gauge_BringToFront(AObj: usize);
  pub fn Gauge_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Gauge_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Gauge_Dragging(AObj: usize) -> bool;
  pub fn Gauge_HasParent(AObj: usize) -> bool;
  pub fn Gauge_Hide(AObj: usize);
  pub fn Gauge_Invalidate(AObj: usize);
  pub fn Gauge_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Gauge_Refresh(AObj: usize);
  pub fn Gauge_Repaint(AObj: usize);
  pub fn Gauge_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Gauge_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Gauge_SendToBack(AObj: usize);
  pub fn Gauge_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Gauge_Show(AObj: usize);
  pub fn Gauge_Update(AObj: usize);
  pub fn Gauge_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Gauge_GetTextLen(AObj: usize) -> i32;
  pub fn Gauge_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Gauge_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Gauge_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Gauge_Assign(AObj: usize, Source: usize);
  pub fn Gauge_ClassType(AObj: usize) -> TClass;
  pub fn Gauge_ClassName(AObj: usize) -> *const c_char;
  pub fn Gauge_InstanceSize(AObj: usize) -> i32;
  pub fn Gauge_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Gauge_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Gauge_GetHashCode(AObj: usize) -> i32;
  pub fn Gauge_ToString(AObj: usize) -> *const c_char;
  pub fn Gauge_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Gauge_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Gauge_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Gauge_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Gauge_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Gauge_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Gauge_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Gauge_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Gauge_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Gauge_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Gauge_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Gauge_GetPercentDone(AObj: usize) -> i32;
  pub fn Gauge_GetAlign(AObj: usize) -> TAlign;
  pub fn Gauge_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Gauge_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Gauge_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Gauge_GetBackColor(AObj: usize) -> TColor;
  pub fn Gauge_SetBackColor(AObj: usize, AValue: TColor);
  pub fn Gauge_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn Gauge_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn Gauge_GetColor(AObj: usize) -> TColor;
  pub fn Gauge_SetColor(AObj: usize, AValue: TColor);
  pub fn Gauge_GetConstraints(AObj: usize) -> usize;
  pub fn Gauge_SetConstraints(AObj: usize, AValue: usize);
  pub fn Gauge_GetEnabled(AObj: usize) -> bool;
  pub fn Gauge_SetEnabled(AObj: usize, AValue: bool);
  pub fn Gauge_GetForeColor(AObj: usize) -> TColor;
  pub fn Gauge_SetForeColor(AObj: usize, AValue: TColor);
  pub fn Gauge_GetFont(AObj: usize) -> usize;
  pub fn Gauge_SetFont(AObj: usize, AValue: usize);
  pub fn Gauge_GetMinValue(AObj: usize) -> i32;
  pub fn Gauge_SetMinValue(AObj: usize, AValue: i32);
  pub fn Gauge_GetMaxValue(AObj: usize) -> i32;
  pub fn Gauge_SetMaxValue(AObj: usize, AValue: i32);
  pub fn Gauge_GetParentColor(AObj: usize) -> bool;
  pub fn Gauge_SetParentColor(AObj: usize, AValue: bool);
  pub fn Gauge_GetParentFont(AObj: usize) -> bool;
  pub fn Gauge_SetParentFont(AObj: usize, AValue: bool);
  pub fn Gauge_GetParentShowHint(AObj: usize) -> bool;
  pub fn Gauge_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Gauge_GetPopupMenu(AObj: usize) -> usize;
  pub fn Gauge_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Gauge_GetProgress(AObj: usize) -> i32;
  pub fn Gauge_SetProgress(AObj: usize, AValue: i32);
  pub fn Gauge_GetShowHint(AObj: usize) -> bool;
  pub fn Gauge_SetShowHint(AObj: usize, AValue: bool);
  pub fn Gauge_GetShowText(AObj: usize) -> bool;
  pub fn Gauge_SetShowText(AObj: usize, AValue: bool);
  pub fn Gauge_GetVisible(AObj: usize) -> bool;
  pub fn Gauge_SetVisible(AObj: usize, AValue: bool);
  pub fn Gauge_GetAction(AObj: usize) -> usize;
  pub fn Gauge_SetAction(AObj: usize, AValue: usize);
  pub fn Gauge_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Gauge_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Gauge_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Gauge_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Gauge_GetClientHeight(AObj: usize) -> i32;
  pub fn Gauge_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Gauge_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Gauge_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Gauge_GetClientWidth(AObj: usize) -> i32;
  pub fn Gauge_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Gauge_GetControlState(AObj: usize) -> TControlState;
  pub fn Gauge_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Gauge_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Gauge_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Gauge_GetFloating(AObj: usize) -> bool;
  pub fn Gauge_GetParent(AObj: usize) -> usize;
  pub fn Gauge_SetParent(AObj: usize, AValue: usize);
  pub fn Gauge_GetLeft(AObj: usize) -> i32;
  pub fn Gauge_SetLeft(AObj: usize, AValue: i32);
  pub fn Gauge_GetTop(AObj: usize) -> i32;
  pub fn Gauge_SetTop(AObj: usize, AValue: i32);
  pub fn Gauge_GetWidth(AObj: usize) -> i32;
  pub fn Gauge_SetWidth(AObj: usize, AValue: i32);
  pub fn Gauge_GetHeight(AObj: usize) -> i32;
  pub fn Gauge_SetHeight(AObj: usize, AValue: i32);
  pub fn Gauge_GetCursor(AObj: usize) -> TCursor;
  pub fn Gauge_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Gauge_GetHint(AObj: usize) -> *const c_char;
  pub fn Gauge_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Gauge_GetComponentCount(AObj: usize) -> i32;
  pub fn Gauge_GetComponentIndex(AObj: usize) -> i32;
  pub fn Gauge_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Gauge_GetOwner(AObj: usize) -> usize;
  pub fn Gauge_GetName(AObj: usize) -> *const c_char;
  pub fn Gauge_SetName(AObj: usize, AValue: *const c_char);
  pub fn Gauge_GetTag(AObj: usize) -> isize;
  pub fn Gauge_SetTag(AObj: usize, AValue: isize);
  pub fn Gauge_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Gauge_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Gauge_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Gauge_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Gauge_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Gauge_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Gauge_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Gauge_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Gauge_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Gauge_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Gauge_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Gauge_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Gauge_StaticClassType() -> TClass;

  // ----------------- TImageButton ----------------------
  pub fn ImageButton_Create(AOwner: usize) -> usize;
  pub fn ImageButton_Free(AObj: usize);
  pub fn ImageButton_Click(AObj: usize);
  pub fn ImageButton_BringToFront(AObj: usize);
  pub fn ImageButton_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ImageButton_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ImageButton_Dragging(AObj: usize) -> bool;
  pub fn ImageButton_HasParent(AObj: usize) -> bool;
  pub fn ImageButton_Hide(AObj: usize);
  pub fn ImageButton_Invalidate(AObj: usize);
  pub fn ImageButton_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ImageButton_Refresh(AObj: usize);
  pub fn ImageButton_Repaint(AObj: usize);
  pub fn ImageButton_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ImageButton_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ImageButton_SendToBack(AObj: usize);
  pub fn ImageButton_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ImageButton_Show(AObj: usize);
  pub fn ImageButton_Update(AObj: usize);
  pub fn ImageButton_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ImageButton_GetTextLen(AObj: usize) -> i32;
  pub fn ImageButton_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ImageButton_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ImageButton_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ImageButton_Assign(AObj: usize, Source: usize);
  pub fn ImageButton_ClassType(AObj: usize) -> TClass;
  pub fn ImageButton_ClassName(AObj: usize) -> *const c_char;
  pub fn ImageButton_InstanceSize(AObj: usize) -> i32;
  pub fn ImageButton_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ImageButton_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ImageButton_GetHashCode(AObj: usize) -> i32;
  pub fn ImageButton_ToString(AObj: usize) -> *const c_char;
  pub fn ImageButton_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ImageButton_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ImageButton_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ImageButton_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ImageButton_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ImageButton_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ImageButton_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ImageButton_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ImageButton_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ImageButton_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ImageButton_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ImageButton_GetAction(AObj: usize) -> usize;
  pub fn ImageButton_SetAction(AObj: usize, AValue: usize);
  pub fn ImageButton_GetAlign(AObj: usize) -> TAlign;
  pub fn ImageButton_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ImageButton_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ImageButton_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ImageButton_GetAutoSize(AObj: usize) -> bool;
  pub fn ImageButton_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ImageButton_GetConstraints(AObj: usize) -> usize;
  pub fn ImageButton_SetConstraints(AObj: usize, AValue: usize);
  pub fn ImageButton_GetCaption(AObj: usize) -> *const c_char;
  pub fn ImageButton_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ImageButton_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ImageButton_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ImageButton_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ImageButton_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ImageButton_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ImageButton_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ImageButton_GetEnabled(AObj: usize) -> bool;
  pub fn ImageButton_SetEnabled(AObj: usize, AValue: bool);
  pub fn ImageButton_GetFont(AObj: usize) -> usize;
  pub fn ImageButton_SetFont(AObj: usize, AValue: usize);
  pub fn ImageButton_GetImageCount(AObj: usize) -> i32;
  pub fn ImageButton_SetImageCount(AObj: usize, AValue: i32);
  pub fn ImageButton_GetOrientation(AObj: usize) -> TImageOrientation;
  pub fn ImageButton_SetOrientation(AObj: usize, AValue: TImageOrientation);
  pub fn ImageButton_GetModalResult(AObj: usize) -> TModalResult;
  pub fn ImageButton_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn ImageButton_GetParentShowHint(AObj: usize) -> bool;
  pub fn ImageButton_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ImageButton_GetParentFont(AObj: usize) -> bool;
  pub fn ImageButton_SetParentFont(AObj: usize, AValue: bool);
  pub fn ImageButton_GetPicture(AObj: usize) -> usize;
  pub fn ImageButton_SetPicture(AObj: usize, AValue: usize);
  pub fn ImageButton_GetPopupMenu(AObj: usize) -> usize;
  pub fn ImageButton_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ImageButton_GetShowHint(AObj: usize) -> bool;
  pub fn ImageButton_SetShowHint(AObj: usize, AValue: bool);
  pub fn ImageButton_GetShowCaption(AObj: usize) -> bool;
  pub fn ImageButton_SetShowCaption(AObj: usize, AValue: bool);
  pub fn ImageButton_GetVisible(AObj: usize) -> bool;
  pub fn ImageButton_SetVisible(AObj: usize, AValue: bool);
  pub fn ImageButton_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ImageButton_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ImageButton_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ImageButton_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ImageButton_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ImageButton_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ImageButton_GetClientHeight(AObj: usize) -> i32;
  pub fn ImageButton_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ImageButton_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ImageButton_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ImageButton_GetClientWidth(AObj: usize) -> i32;
  pub fn ImageButton_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ImageButton_GetControlState(AObj: usize) -> TControlState;
  pub fn ImageButton_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ImageButton_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ImageButton_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ImageButton_GetFloating(AObj: usize) -> bool;
  pub fn ImageButton_GetParent(AObj: usize) -> usize;
  pub fn ImageButton_SetParent(AObj: usize, AValue: usize);
  pub fn ImageButton_GetLeft(AObj: usize) -> i32;
  pub fn ImageButton_SetLeft(AObj: usize, AValue: i32);
  pub fn ImageButton_GetTop(AObj: usize) -> i32;
  pub fn ImageButton_SetTop(AObj: usize, AValue: i32);
  pub fn ImageButton_GetWidth(AObj: usize) -> i32;
  pub fn ImageButton_SetWidth(AObj: usize, AValue: i32);
  pub fn ImageButton_GetHeight(AObj: usize) -> i32;
  pub fn ImageButton_SetHeight(AObj: usize, AValue: i32);
  pub fn ImageButton_GetCursor(AObj: usize) -> TCursor;
  pub fn ImageButton_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ImageButton_GetHint(AObj: usize) -> *const c_char;
  pub fn ImageButton_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ImageButton_GetComponentCount(AObj: usize) -> i32;
  pub fn ImageButton_GetComponentIndex(AObj: usize) -> i32;
  pub fn ImageButton_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ImageButton_GetOwner(AObj: usize) -> usize;
  pub fn ImageButton_GetName(AObj: usize) -> *const c_char;
  pub fn ImageButton_SetName(AObj: usize, AValue: *const c_char);
  pub fn ImageButton_GetTag(AObj: usize) -> isize;
  pub fn ImageButton_SetTag(AObj: usize, AValue: isize);
  pub fn ImageButton_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ImageButton_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ImageButton_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ImageButton_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ImageButton_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ImageButton_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ImageButton_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ImageButton_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ImageButton_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ImageButton_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ImageButton_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ImageButton_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ImageButton_StaticClassType() -> TClass;

  // ----------------- TFindDialog ----------------------
  pub fn FindDialog_Create(AOwner: usize) -> usize;
  pub fn FindDialog_Free(AObj: usize);
  pub fn FindDialog_CloseDialog(AObj: usize);
  pub fn FindDialog_Execute(AObj: usize) -> bool;
  pub fn FindDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn FindDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn FindDialog_HasParent(AObj: usize) -> bool;
  pub fn FindDialog_Assign(AObj: usize, Source: usize);
  pub fn FindDialog_ClassType(AObj: usize) -> TClass;
  pub fn FindDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn FindDialog_InstanceSize(AObj: usize) -> i32;
  pub fn FindDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn FindDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn FindDialog_GetHashCode(AObj: usize) -> i32;
  pub fn FindDialog_ToString(AObj: usize) -> *const c_char;
  pub fn FindDialog_GetLeft(AObj: usize) -> i32;
  pub fn FindDialog_SetLeft(AObj: usize, AValue: i32);
  pub fn FindDialog_GetPosition(AObj: usize, Result: *mut TPoint);
  pub fn FindDialog_SetPosition(AObj: usize, AValue: *mut TPoint);
  pub fn FindDialog_GetTop(AObj: usize) -> i32;
  pub fn FindDialog_SetTop(AObj: usize, AValue: i32);
  pub fn FindDialog_GetFindText(AObj: usize) -> *const c_char;
  pub fn FindDialog_SetFindText(AObj: usize, AValue: *const c_char);
  pub fn FindDialog_GetOptions(AObj: usize) -> TFindOptions;
  pub fn FindDialog_SetOptions(AObj: usize, AValue: TFindOptions);
  pub fn FindDialog_SetOnFind(AObj: usize, AEventId: usize);
  pub fn FindDialog_GetHandle(AObj: usize) -> HWND;
  pub fn FindDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn FindDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn FindDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn FindDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn FindDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn FindDialog_GetOwner(AObj: usize) -> usize;
  pub fn FindDialog_GetName(AObj: usize) -> *const c_char;
  pub fn FindDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn FindDialog_GetTag(AObj: usize) -> isize;
  pub fn FindDialog_SetTag(AObj: usize, AValue: isize);
  pub fn FindDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn FindDialog_StaticClassType() -> TClass;

  // ----------------- TReplaceDialog ----------------------
  pub fn ReplaceDialog_Create(AOwner: usize) -> usize;
  pub fn ReplaceDialog_Free(AObj: usize);
  pub fn ReplaceDialog_CloseDialog(AObj: usize);
  pub fn ReplaceDialog_Execute(AObj: usize) -> bool;
  pub fn ReplaceDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ReplaceDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_HasParent(AObj: usize) -> bool;
  pub fn ReplaceDialog_Assign(AObj: usize, Source: usize);
  pub fn ReplaceDialog_ClassType(AObj: usize) -> TClass;
  pub fn ReplaceDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_InstanceSize(AObj: usize) -> i32;
  pub fn ReplaceDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ReplaceDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ReplaceDialog_GetHashCode(AObj: usize) -> i32;
  pub fn ReplaceDialog_ToString(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_GetReplaceText(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_SetReplaceText(AObj: usize, AValue: *const c_char);
  pub fn ReplaceDialog_SetOnReplace(AObj: usize, AEventId: usize);
  pub fn ReplaceDialog_GetLeft(AObj: usize) -> i32;
  pub fn ReplaceDialog_SetLeft(AObj: usize, AValue: i32);
  pub fn ReplaceDialog_GetPosition(AObj: usize, Result: *mut TPoint);
  pub fn ReplaceDialog_SetPosition(AObj: usize, AValue: *mut TPoint);
  pub fn ReplaceDialog_GetTop(AObj: usize) -> i32;
  pub fn ReplaceDialog_SetTop(AObj: usize, AValue: i32);
  pub fn ReplaceDialog_GetFindText(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_SetFindText(AObj: usize, AValue: *const c_char);
  pub fn ReplaceDialog_GetOptions(AObj: usize) -> TFindOptions;
  pub fn ReplaceDialog_SetOptions(AObj: usize, AValue: TFindOptions);
  pub fn ReplaceDialog_SetOnFind(AObj: usize, AEventId: usize);
  pub fn ReplaceDialog_GetHandle(AObj: usize) -> HWND;
  pub fn ReplaceDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn ReplaceDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn ReplaceDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn ReplaceDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn ReplaceDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ReplaceDialog_GetOwner(AObj: usize) -> usize;
  pub fn ReplaceDialog_GetName(AObj: usize) -> *const c_char;
  pub fn ReplaceDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn ReplaceDialog_GetTag(AObj: usize) -> isize;
  pub fn ReplaceDialog_SetTag(AObj: usize, AValue: isize);
  pub fn ReplaceDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ReplaceDialog_StaticClassType() -> TClass;

  // ----------------- TPrinterSetupDialog ----------------------
  pub fn PrinterSetupDialog_Create(AOwner: usize) -> usize;
  pub fn PrinterSetupDialog_Free(AObj: usize);
  pub fn PrinterSetupDialog_Execute(AObj: usize) -> bool;
  pub fn PrinterSetupDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PrinterSetupDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PrinterSetupDialog_HasParent(AObj: usize) -> bool;
  pub fn PrinterSetupDialog_Assign(AObj: usize, Source: usize);
  pub fn PrinterSetupDialog_ClassType(AObj: usize) -> TClass;
  pub fn PrinterSetupDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn PrinterSetupDialog_InstanceSize(AObj: usize) -> i32;
  pub fn PrinterSetupDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PrinterSetupDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PrinterSetupDialog_GetHashCode(AObj: usize) -> i32;
  pub fn PrinterSetupDialog_ToString(AObj: usize) -> *const c_char;
  pub fn PrinterSetupDialog_GetHandle(AObj: usize) -> HWND;
  pub fn PrinterSetupDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn PrinterSetupDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn PrinterSetupDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn PrinterSetupDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn PrinterSetupDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PrinterSetupDialog_GetOwner(AObj: usize) -> usize;
  pub fn PrinterSetupDialog_GetName(AObj: usize) -> *const c_char;
  pub fn PrinterSetupDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn PrinterSetupDialog_GetTag(AObj: usize) -> isize;
  pub fn PrinterSetupDialog_SetTag(AObj: usize, AValue: isize);
  pub fn PrinterSetupDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PrinterSetupDialog_StaticClassType() -> TClass;

  // ----------------- TPageSetupDialog ----------------------
  pub fn PageSetupDialog_Create(AOwner: usize) -> usize;
  pub fn PageSetupDialog_Free(AObj: usize);
  pub fn PageSetupDialog_Execute(AObj: usize) -> bool;
  pub fn PageSetupDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn PageSetupDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn PageSetupDialog_HasParent(AObj: usize) -> bool;
  pub fn PageSetupDialog_Assign(AObj: usize, Source: usize);
  pub fn PageSetupDialog_ClassType(AObj: usize) -> TClass;
  pub fn PageSetupDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn PageSetupDialog_InstanceSize(AObj: usize) -> i32;
  pub fn PageSetupDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn PageSetupDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn PageSetupDialog_GetHashCode(AObj: usize) -> i32;
  pub fn PageSetupDialog_ToString(AObj: usize) -> *const c_char;
  pub fn PageSetupDialog_GetMarginLeft(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetMarginLeft(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetMarginTop(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetMarginTop(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetMarginRight(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetMarginRight(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetMarginBottom(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetMarginBottom(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetOptions(AObj: usize) -> TPageSetupDialogOptions;
  pub fn PageSetupDialog_SetOptions(AObj: usize, AValue: TPageSetupDialogOptions);
  pub fn PageSetupDialog_GetPageWidth(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetPageWidth(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetPageHeight(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetPageHeight(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetUnits(AObj: usize) -> TPageMeasureUnits;
  pub fn PageSetupDialog_GetHandle(AObj: usize) -> HWND;
  pub fn PageSetupDialog_SetOnClose(AObj: usize, AEventId: usize);
  pub fn PageSetupDialog_SetOnShow(AObj: usize, AEventId: usize);
  pub fn PageSetupDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn PageSetupDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn PageSetupDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn PageSetupDialog_GetOwner(AObj: usize) -> usize;
  pub fn PageSetupDialog_GetName(AObj: usize) -> *const c_char;
  pub fn PageSetupDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn PageSetupDialog_GetTag(AObj: usize) -> isize;
  pub fn PageSetupDialog_SetTag(AObj: usize, AValue: isize);
  pub fn PageSetupDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn PageSetupDialog_StaticClassType() -> TClass;

  // ----------------- TDragObject ----------------------
  pub fn DragObject_Create(AOwner: usize) -> usize;
  pub fn DragObject_Free(AObj: usize);
  pub fn DragObject_Assign(AObj: usize, Source: usize);
  pub fn DragObject_HideDragImage(AObj: usize);
  pub fn DragObject_ShowDragImage(AObj: usize);
  pub fn DragObject_ClassType(AObj: usize) -> TClass;
  pub fn DragObject_ClassName(AObj: usize) -> *const c_char;
  pub fn DragObject_InstanceSize(AObj: usize) -> i32;
  pub fn DragObject_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn DragObject_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn DragObject_GetHashCode(AObj: usize) -> i32;
  pub fn DragObject_ToString(AObj: usize) -> *const c_char;
  pub fn DragObject_GetAlwaysShowDragImages(AObj: usize) -> bool;
  pub fn DragObject_SetAlwaysShowDragImages(AObj: usize, AValue: bool);
  pub fn DragObject_GetDragPos(AObj: usize, Result: *mut TPoint);
  pub fn DragObject_SetDragPos(AObj: usize, AValue: *mut TPoint);
  pub fn DragObject_GetDragTarget(AObj: usize) -> usize;
  pub fn DragObject_SetDragTarget(AObj: usize, AValue: usize);
  pub fn DragObject_GetDragTargetPos(AObj: usize, Result: *mut TPoint);
  pub fn DragObject_SetDragTargetPos(AObj: usize, AValue: *mut TPoint);
  pub fn DragObject_GetDropped(AObj: usize) -> bool;
  pub fn DragObject_StaticClassType() -> TClass;

  // ----------------- TDragDockObject ----------------------
  pub fn DragDockObject_Create(AOwner: usize) -> usize;
  pub fn DragDockObject_Free(AObj: usize);
  pub fn DragDockObject_Assign(AObj: usize, Source: usize);
  pub fn DragDockObject_HideDragImage(AObj: usize);
  pub fn DragDockObject_ShowDragImage(AObj: usize);
  pub fn DragDockObject_ClassType(AObj: usize) -> TClass;
  pub fn DragDockObject_ClassName(AObj: usize) -> *const c_char;
  pub fn DragDockObject_InstanceSize(AObj: usize) -> i32;
  pub fn DragDockObject_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn DragDockObject_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn DragDockObject_GetHashCode(AObj: usize) -> i32;
  pub fn DragDockObject_ToString(AObj: usize) -> *const c_char;
  pub fn DragDockObject_GetDockRect(AObj: usize, Result: *mut TRect);
  pub fn DragDockObject_SetDockRect(AObj: usize, AValue: *mut TRect);
  pub fn DragDockObject_GetDropAlign(AObj: usize) -> TAlign;
  pub fn DragDockObject_GetDropOnControl(AObj: usize) -> usize;
  pub fn DragDockObject_GetEraseDockRect(AObj: usize, Result: *mut TRect);
  pub fn DragDockObject_SetEraseDockRect(AObj: usize, AValue: *mut TRect);
  pub fn DragDockObject_GetFloating(AObj: usize) -> bool;
  pub fn DragDockObject_SetFloating(AObj: usize, AValue: bool);
  pub fn DragDockObject_GetControl(AObj: usize) -> usize;
  pub fn DragDockObject_SetControl(AObj: usize, AValue: usize);
  pub fn DragDockObject_GetAlwaysShowDragImages(AObj: usize) -> bool;
  pub fn DragDockObject_SetAlwaysShowDragImages(AObj: usize, AValue: bool);
  pub fn DragDockObject_GetDragPos(AObj: usize, Result: *mut TPoint);
  pub fn DragDockObject_SetDragPos(AObj: usize, AValue: *mut TPoint);
  pub fn DragDockObject_GetDragTarget(AObj: usize) -> usize;
  pub fn DragDockObject_SetDragTarget(AObj: usize, AValue: usize);
  pub fn DragDockObject_GetDragTargetPos(AObj: usize, Result: *mut TPoint);
  pub fn DragDockObject_SetDragTargetPos(AObj: usize, AValue: *mut TPoint);
  pub fn DragDockObject_GetDropped(AObj: usize) -> bool;
  pub fn DragDockObject_StaticClassType() -> TClass;

  // ----------------- TStringGrid ----------------------
  pub fn StringGrid_Create(AOwner: usize) -> usize;
  pub fn StringGrid_Free(AObj: usize);
  pub fn StringGrid_DeleteColRow(AObj: usize, IsColumn: bool, index: i32);
  pub fn StringGrid_DeleteCol(AObj: usize, Index: i32);
  pub fn StringGrid_DeleteRow(AObj: usize, Index: i32);
  pub fn StringGrid_ExchangeColRow(AObj: usize, IsColumn: bool, index: i32, WithIndex: i32);
  pub fn StringGrid_InsertColRow(AObj: usize, IsColumn: bool, index: i32);
  pub fn StringGrid_MoveColRow(AObj: usize, IsColumn: bool, FromIndex: i32, ToIndex: i32);
  pub fn StringGrid_SortColRow(AObj: usize, IsColumn: bool, Index: i32, FromIndex: i32, ToIndex: i32);
  pub fn StringGrid_EditorByStyle(AObj: usize, Style: TColumnButtonStyle) -> usize;
  pub fn StringGrid_EditorKeyDown(AObj: usize, Sender: usize, Key: *mut u16, Shift: TShiftState);
  pub fn StringGrid_EditorKeyPress(AObj: usize, Sender: usize, Key: *mut Char);
  pub fn StringGrid_EditorKeyUp(AObj: usize, Sender: usize, key: *mut u16, shift: TShiftState);
  pub fn StringGrid_EditorTextChanged(AObj: usize, aCol: i32, aRow: i32, aText: *const c_char);
  pub fn StringGrid_EditingDone(AObj: usize);
  pub fn StringGrid_AutoAdjustColumns(AObj: usize);
  pub fn StringGrid_CellRect(AObj: usize, ACol: i32, ARow: i32, Result: *mut TRect);
  pub fn StringGrid_CellToGridZone(AObj: usize, aCol: i32, aRow: i32) -> TGridZone;
  pub fn StringGrid_CheckPosition(AObj: usize);
  pub fn StringGrid_ClearCols(AObj: usize) -> bool;
  pub fn StringGrid_ClearRows(AObj: usize) -> bool;
  pub fn StringGrid_Clear(AObj: usize);
  pub fn StringGrid_ClearSelections(AObj: usize);
  pub fn StringGrid_HasMultiSelection(AObj: usize) -> bool;
  pub fn StringGrid_InvalidateCell(AObj: usize, aCol: i32, aRow: i32);
  pub fn StringGrid_InvalidateCol(AObj: usize, ACol: i32);
  pub fn StringGrid_InvalidateRange(AObj: usize, aRange: *mut TRect);
  pub fn StringGrid_InvalidateRow(AObj: usize, ARow: i32);
  pub fn StringGrid_IsCellVisible(AObj: usize, aCol: i32, aRow: i32) -> bool;
  pub fn StringGrid_IsFixedCellVisible(AObj: usize, aCol: i32, aRow: i32) -> bool;
  pub fn StringGrid_MouseCoord(AObj: usize, X: i32, Y: i32, Result: *mut TGridCoord);
  pub fn StringGrid_MouseToCell(AObj: usize, Mouse: *mut TPoint, Result: *mut TPoint);
  pub fn StringGrid_MouseToLogcell(AObj: usize, Mouse: *mut TPoint, Result: *mut TPoint);
  pub fn StringGrid_MouseToGridZone(AObj: usize, X: i32, Y: i32) -> TGridZone;
  pub fn StringGrid_CanFocus(AObj: usize) -> bool;
  pub fn StringGrid_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn StringGrid_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn StringGrid_DisableAlign(AObj: usize);
  pub fn StringGrid_EnableAlign(AObj: usize);
  pub fn StringGrid_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn StringGrid_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn StringGrid_Focused(AObj: usize) -> bool;
  pub fn StringGrid_HandleAllocated(AObj: usize) -> bool;
  pub fn StringGrid_InsertControl(AObj: usize, AControl: usize);
  pub fn StringGrid_Invalidate(AObj: usize);
  pub fn StringGrid_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn StringGrid_RemoveControl(AObj: usize, AControl: usize);
  pub fn StringGrid_Realign(AObj: usize);
  pub fn StringGrid_Repaint(AObj: usize);
  pub fn StringGrid_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn StringGrid_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn StringGrid_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn StringGrid_SetFocus(AObj: usize);
  pub fn StringGrid_Update(AObj: usize);
  pub fn StringGrid_BringToFront(AObj: usize);
  pub fn StringGrid_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StringGrid_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StringGrid_Dragging(AObj: usize) -> bool;
  pub fn StringGrid_HasParent(AObj: usize) -> bool;
  pub fn StringGrid_Hide(AObj: usize);
  pub fn StringGrid_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn StringGrid_Refresh(AObj: usize);
  pub fn StringGrid_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn StringGrid_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn StringGrid_SendToBack(AObj: usize);
  pub fn StringGrid_Show(AObj: usize);
  pub fn StringGrid_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn StringGrid_GetTextLen(AObj: usize) -> i32;
  pub fn StringGrid_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn StringGrid_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn StringGrid_GetNamePath(AObj: usize) -> *const c_char;
  pub fn StringGrid_Assign(AObj: usize, Source: usize);
  pub fn StringGrid_ClassType(AObj: usize) -> TClass;
  pub fn StringGrid_ClassName(AObj: usize) -> *const c_char;
  pub fn StringGrid_InstanceSize(AObj: usize) -> i32;
  pub fn StringGrid_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn StringGrid_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn StringGrid_GetHashCode(AObj: usize) -> i32;
  pub fn StringGrid_ToString(AObj: usize) -> *const c_char;
  pub fn StringGrid_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StringGrid_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn StringGrid_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn StringGrid_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn StringGrid_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn StringGrid_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn StringGrid_AnchorClient(AObj: usize, ASpace: i32);
  pub fn StringGrid_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn StringGrid_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn StringGrid_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn StringGrid_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn StringGrid_GetSelectedColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetSelectedColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetSelectedColumn(AObj: usize) -> usize;
  pub fn StringGrid_GetStrictSort(AObj: usize) -> bool;
  pub fn StringGrid_SetStrictSort(AObj: usize, AValue: bool);
  pub fn StringGrid_GetFixedHotColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetFixedHotColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetFastEditing(AObj: usize) -> bool;
  pub fn StringGrid_SetFastEditing(AObj: usize, AValue: bool);
  pub fn StringGrid_GetFixedGridLineColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetFixedGridLineColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetFocusColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetFocusColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetFocusRectVisible(AObj: usize) -> bool;
  pub fn StringGrid_SetFocusRectVisible(AObj: usize, AValue: bool);
  pub fn StringGrid_GetGridLineColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetGridLineColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetGridLineStyle(AObj: usize) -> TPenStyle;
  pub fn StringGrid_SetGridLineStyle(AObj: usize, AValue: TPenStyle);
  pub fn StringGrid_GetEditor(AObj: usize) -> usize;
  pub fn StringGrid_SetEditor(AObj: usize, AValue: usize);
  pub fn StringGrid_GetEditorBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn StringGrid_SetEditorBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn StringGrid_GetEditorMode(AObj: usize) -> bool;
  pub fn StringGrid_SetEditorMode(AObj: usize, AValue: bool);
  pub fn StringGrid_GetSortOrder(AObj: usize) -> TSortOrder;
  pub fn StringGrid_SetSortOrder(AObj: usize, AValue: TSortOrder);
  pub fn StringGrid_GetSortColumn(AObj: usize) -> i32;
  pub fn StringGrid_SetOnAfterSelection(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnBeforeSelection(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnButtonClick(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnCheckboxToggled(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnColRowDeleted(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnColRowExchanged(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnColRowInserted(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnColRowMoved(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnCompareCells(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnEditingDone(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnGetCellHint(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnGetCheckboxState(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnSetCheckboxState(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnHeaderClick(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnHeaderSized(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnHeaderSizing(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnPickListSelect(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnSelection(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnSelectEditor(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnUserCheckboxBitmap(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnValidateEntry(AObj: usize, AEventId: usize);
  pub fn StringGrid_GetAlternateColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetAlternateColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetAutoAdvance(AObj: usize) -> TAutoAdvance;
  pub fn StringGrid_SetAutoAdvance(AObj: usize, AValue: TAutoAdvance);
  pub fn StringGrid_GetAutoEdit(AObj: usize) -> bool;
  pub fn StringGrid_SetAutoEdit(AObj: usize, AValue: bool);
  pub fn StringGrid_GetAutoFillColumns(AObj: usize) -> bool;
  pub fn StringGrid_SetAutoFillColumns(AObj: usize, AValue: bool);
  pub fn StringGrid_GetCellHintPriority(AObj: usize) -> TCellHintPriority;
  pub fn StringGrid_SetCellHintPriority(AObj: usize, AValue: TCellHintPriority);
  pub fn StringGrid_GetColumnClickSorts(AObj: usize) -> bool;
  pub fn StringGrid_SetColumnClickSorts(AObj: usize, AValue: bool);
  pub fn StringGrid_GetColumns(AObj: usize) -> usize;
  pub fn StringGrid_SetColumns(AObj: usize, AValue: usize);
  pub fn StringGrid_GetExtendedSelect(AObj: usize) -> bool;
  pub fn StringGrid_SetExtendedSelect(AObj: usize, AValue: bool);
  pub fn StringGrid_GetFlat(AObj: usize) -> bool;
  pub fn StringGrid_SetFlat(AObj: usize, AValue: bool);
  pub fn StringGrid_GetHeaderHotZones(AObj: usize) -> TGridZoneSet;
  pub fn StringGrid_SetHeaderHotZones(AObj: usize, AValue: TGridZoneSet);
  pub fn StringGrid_GetHeaderPushZones(AObj: usize) -> TGridZoneSet;
  pub fn StringGrid_SetHeaderPushZones(AObj: usize, AValue: TGridZoneSet);
  pub fn StringGrid_GetImageIndexSortAsc(AObj: usize) -> i32;
  pub fn StringGrid_SetImageIndexSortAsc(AObj: usize, AValue: i32);
  pub fn StringGrid_GetImageIndexSortDesc(AObj: usize) -> i32;
  pub fn StringGrid_SetImageIndexSortDesc(AObj: usize, AValue: i32);
  pub fn StringGrid_GetMouseWheelOption(AObj: usize) -> TMouseWheelOption;
  pub fn StringGrid_SetMouseWheelOption(AObj: usize, AValue: TMouseWheelOption);
  pub fn StringGrid_GetOptions2(AObj: usize) -> TGridOptions2;
  pub fn StringGrid_SetOptions2(AObj: usize, AValue: TGridOptions2);
  pub fn StringGrid_GetRangeSelectMode(AObj: usize) -> TRangeSelectMode;
  pub fn StringGrid_SetRangeSelectMode(AObj: usize, AValue: TRangeSelectMode);
  pub fn StringGrid_GetTabAdvance(AObj: usize) -> TAutoAdvance;
  pub fn StringGrid_SetTabAdvance(AObj: usize, AValue: TAutoAdvance);
  pub fn StringGrid_GetTitleFont(AObj: usize) -> usize;
  pub fn StringGrid_SetTitleFont(AObj: usize, AValue: usize);
  pub fn StringGrid_GetTitleImageList(AObj: usize) -> usize;
  pub fn StringGrid_SetTitleImageList(AObj: usize, AValue: usize);
  pub fn StringGrid_GetTitleStyle(AObj: usize) -> TTitleStyle;
  pub fn StringGrid_SetTitleStyle(AObj: usize, AValue: TTitleStyle);
  pub fn StringGrid_GetUseXORFeatures(AObj: usize) -> bool;
  pub fn StringGrid_SetUseXORFeatures(AObj: usize, AValue: bool);
  pub fn StringGrid_GetAlign(AObj: usize) -> TAlign;
  pub fn StringGrid_SetAlign(AObj: usize, AValue: TAlign);
  pub fn StringGrid_GetAnchors(AObj: usize) -> TAnchors;
  pub fn StringGrid_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn StringGrid_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn StringGrid_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn StringGrid_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn StringGrid_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn StringGrid_GetColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetColCount(AObj: usize) -> i32;
  pub fn StringGrid_SetColCount(AObj: usize, AValue: i32);
  pub fn StringGrid_GetConstraints(AObj: usize) -> usize;
  pub fn StringGrid_SetConstraints(AObj: usize, AValue: usize);
  pub fn StringGrid_GetDefaultColWidth(AObj: usize) -> i32;
  pub fn StringGrid_SetDefaultColWidth(AObj: usize, AValue: i32);
  pub fn StringGrid_GetDefaultRowHeight(AObj: usize) -> i32;
  pub fn StringGrid_SetDefaultRowHeight(AObj: usize, AValue: i32);
  pub fn StringGrid_GetDefaultDrawing(AObj: usize) -> bool;
  pub fn StringGrid_SetDefaultDrawing(AObj: usize, AValue: bool);
  pub fn StringGrid_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn StringGrid_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StringGrid_GetDragCursor(AObj: usize) -> TCursor;
  pub fn StringGrid_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn StringGrid_GetDragKind(AObj: usize) -> TDragKind;
  pub fn StringGrid_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn StringGrid_GetDragMode(AObj: usize) -> TDragMode;
  pub fn StringGrid_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn StringGrid_GetEnabled(AObj: usize) -> bool;
  pub fn StringGrid_SetEnabled(AObj: usize, AValue: bool);
  pub fn StringGrid_GetFixedColor(AObj: usize) -> TColor;
  pub fn StringGrid_SetFixedColor(AObj: usize, AValue: TColor);
  pub fn StringGrid_GetFixedCols(AObj: usize) -> i32;
  pub fn StringGrid_SetFixedCols(AObj: usize, AValue: i32);
  pub fn StringGrid_GetRowCount(AObj: usize) -> i32;
  pub fn StringGrid_SetRowCount(AObj: usize, AValue: i32);
  pub fn StringGrid_GetFixedRows(AObj: usize) -> i32;
  pub fn StringGrid_SetFixedRows(AObj: usize, AValue: i32);
  pub fn StringGrid_GetFont(AObj: usize) -> usize;
  pub fn StringGrid_SetFont(AObj: usize, AValue: usize);
  pub fn StringGrid_GetGridLineWidth(AObj: usize) -> i32;
  pub fn StringGrid_SetGridLineWidth(AObj: usize, AValue: i32);
  pub fn StringGrid_GetOptions(AObj: usize) -> TGridOptions;
  pub fn StringGrid_SetOptions(AObj: usize, AValue: TGridOptions);
  pub fn StringGrid_GetParentColor(AObj: usize) -> bool;
  pub fn StringGrid_SetParentColor(AObj: usize, AValue: bool);
  pub fn StringGrid_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn StringGrid_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn StringGrid_GetParentFont(AObj: usize) -> bool;
  pub fn StringGrid_SetParentFont(AObj: usize, AValue: bool);
  pub fn StringGrid_GetParentShowHint(AObj: usize) -> bool;
  pub fn StringGrid_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn StringGrid_GetPopupMenu(AObj: usize) -> usize;
  pub fn StringGrid_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn StringGrid_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn StringGrid_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn StringGrid_GetShowHint(AObj: usize) -> bool;
  pub fn StringGrid_SetShowHint(AObj: usize, AValue: bool);
  pub fn StringGrid_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn StringGrid_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn StringGrid_GetVisible(AObj: usize) -> bool;
  pub fn StringGrid_SetVisible(AObj: usize, AValue: bool);
  pub fn StringGrid_GetVisibleColCount(AObj: usize) -> i32;
  pub fn StringGrid_GetVisibleRowCount(AObj: usize) -> i32;
  pub fn StringGrid_SetOnClick(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnDrawCell(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnExit(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnGetEditMask(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnGetEditText(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnSelectCell(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnSetEditText(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn StringGrid_SetOnTopLeftChanged(AObj: usize, AEventId: usize);
  pub fn StringGrid_GetCanvas(AObj: usize) -> usize;
  pub fn StringGrid_GetCol(AObj: usize) -> i32;
  pub fn StringGrid_SetCol(AObj: usize, AValue: i32);
  pub fn StringGrid_GetGridHeight(AObj: usize) -> i32;
  pub fn StringGrid_GetGridWidth(AObj: usize) -> i32;
  pub fn StringGrid_GetLeftCol(AObj: usize) -> i32;
  pub fn StringGrid_SetLeftCol(AObj: usize, AValue: i32);
  pub fn StringGrid_GetSelection(AObj: usize, Result: *mut TGridRect);
  pub fn StringGrid_SetSelection(AObj: usize, AValue: *mut TGridRect);
  pub fn StringGrid_GetRow(AObj: usize) -> i32;
  pub fn StringGrid_SetRow(AObj: usize, AValue: i32);
  pub fn StringGrid_GetTopRow(AObj: usize) -> i32;
  pub fn StringGrid_SetTopRow(AObj: usize, AValue: i32);
  pub fn StringGrid_GetTabStop(AObj: usize) -> bool;
  pub fn StringGrid_SetTabStop(AObj: usize, AValue: bool);
  pub fn StringGrid_GetDockClientCount(AObj: usize) -> i32;
  pub fn StringGrid_GetDockSite(AObj: usize) -> bool;
  pub fn StringGrid_SetDockSite(AObj: usize, AValue: bool);
  pub fn StringGrid_GetMouseInClient(AObj: usize) -> bool;
  pub fn StringGrid_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn StringGrid_GetBrush(AObj: usize) -> usize;
  pub fn StringGrid_GetControlCount(AObj: usize) -> i32;
  pub fn StringGrid_GetHandle(AObj: usize) -> HWND;
  pub fn StringGrid_GetParentWindow(AObj: usize) -> HWND;
  pub fn StringGrid_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn StringGrid_GetShowing(AObj: usize) -> bool;
  pub fn StringGrid_GetUseDockManager(AObj: usize) -> bool;
  pub fn StringGrid_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn StringGrid_GetAction(AObj: usize) -> usize;
  pub fn StringGrid_SetAction(AObj: usize, AValue: usize);
  pub fn StringGrid_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn StringGrid_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn StringGrid_GetClientHeight(AObj: usize) -> i32;
  pub fn StringGrid_SetClientHeight(AObj: usize, AValue: i32);
  pub fn StringGrid_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn StringGrid_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn StringGrid_GetClientWidth(AObj: usize) -> i32;
  pub fn StringGrid_SetClientWidth(AObj: usize, AValue: i32);
  pub fn StringGrid_GetControlState(AObj: usize) -> TControlState;
  pub fn StringGrid_SetControlState(AObj: usize, AValue: TControlState);
  pub fn StringGrid_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn StringGrid_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn StringGrid_GetFloating(AObj: usize) -> bool;
  pub fn StringGrid_GetParent(AObj: usize) -> usize;
  pub fn StringGrid_SetParent(AObj: usize, AValue: usize);
  pub fn StringGrid_GetLeft(AObj: usize) -> i32;
  pub fn StringGrid_SetLeft(AObj: usize, AValue: i32);
  pub fn StringGrid_GetTop(AObj: usize) -> i32;
  pub fn StringGrid_SetTop(AObj: usize, AValue: i32);
  pub fn StringGrid_GetWidth(AObj: usize) -> i32;
  pub fn StringGrid_SetWidth(AObj: usize, AValue: i32);
  pub fn StringGrid_GetHeight(AObj: usize) -> i32;
  pub fn StringGrid_SetHeight(AObj: usize, AValue: i32);
  pub fn StringGrid_GetCursor(AObj: usize) -> TCursor;
  pub fn StringGrid_SetCursor(AObj: usize, AValue: TCursor);
  pub fn StringGrid_GetHint(AObj: usize) -> *const c_char;
  pub fn StringGrid_SetHint(AObj: usize, AValue: *const c_char);
  pub fn StringGrid_GetComponentCount(AObj: usize) -> i32;
  pub fn StringGrid_GetComponentIndex(AObj: usize) -> i32;
  pub fn StringGrid_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn StringGrid_GetOwner(AObj: usize) -> usize;
  pub fn StringGrid_GetName(AObj: usize) -> *const c_char;
  pub fn StringGrid_SetName(AObj: usize, AValue: *const c_char);
  pub fn StringGrid_GetTag(AObj: usize) -> isize;
  pub fn StringGrid_SetTag(AObj: usize, AValue: isize);
  pub fn StringGrid_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn StringGrid_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn StringGrid_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn StringGrid_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn StringGrid_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn StringGrid_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn StringGrid_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn StringGrid_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn StringGrid_GetChildSizing(AObj: usize) -> usize;
  pub fn StringGrid_SetChildSizing(AObj: usize, AValue: usize);
  pub fn StringGrid_GetBorderSpacing(AObj: usize) -> usize;
  pub fn StringGrid_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn StringGrid_GetIsCellSelected(AObj: usize, aCol: i32, aRow: i32) -> bool;
  pub fn StringGrid_GetCells(AObj: usize, ACol: i32, ARow: i32) -> *const c_char;
  pub fn StringGrid_SetCells(AObj: usize, ACol: i32, ARow: i32, AValue: *const c_char);
  pub fn StringGrid_GetCols(AObj: usize, Index: i32) -> usize;
  pub fn StringGrid_SetCols(AObj: usize, Index: i32, AValue: usize);
  pub fn StringGrid_GetObjects(AObj: usize, ACol: i32, ARow: i32) -> usize;
  pub fn StringGrid_SetObjects(AObj: usize, ACol: i32, ARow: i32, AValue: usize);
  pub fn StringGrid_GetRows(AObj: usize, Index: i32) -> usize;
  pub fn StringGrid_SetRows(AObj: usize, Index: i32, AValue: usize);
  pub fn StringGrid_GetColWidths(AObj: usize, Index: i32) -> i32;
  pub fn StringGrid_SetColWidths(AObj: usize, Index: i32, AValue: i32);
  pub fn StringGrid_GetRowHeights(AObj: usize, Index: i32) -> i32;
  pub fn StringGrid_SetRowHeights(AObj: usize, Index: i32, AValue: i32);
  pub fn StringGrid_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn StringGrid_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn StringGrid_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn StringGrid_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn StringGrid_StaticClassType() -> TClass;

  // ----------------- TDrawGrid ----------------------
  pub fn DrawGrid_Create(AOwner: usize) -> usize;
  pub fn DrawGrid_Free(AObj: usize);
  pub fn DrawGrid_CellRect(AObj: usize, ACol: i32, ARow: i32, Result: *mut TRect);
  pub fn DrawGrid_MouseToCell(AObj: usize, X: i32, Y: i32, ACol: *mut i32, ARow: *mut i32);
  pub fn DrawGrid_MouseCoord(AObj: usize, X: i32, Y: i32, Result: *mut TGridCoord);
  pub fn DrawGrid_CanFocus(AObj: usize) -> bool;
  pub fn DrawGrid_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn DrawGrid_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn DrawGrid_DisableAlign(AObj: usize);
  pub fn DrawGrid_EnableAlign(AObj: usize);
  pub fn DrawGrid_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn DrawGrid_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn DrawGrid_Focused(AObj: usize) -> bool;
  pub fn DrawGrid_HandleAllocated(AObj: usize) -> bool;
  pub fn DrawGrid_InsertControl(AObj: usize, AControl: usize);
  pub fn DrawGrid_Invalidate(AObj: usize);
  pub fn DrawGrid_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn DrawGrid_RemoveControl(AObj: usize, AControl: usize);
  pub fn DrawGrid_Realign(AObj: usize);
  pub fn DrawGrid_Repaint(AObj: usize);
  pub fn DrawGrid_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn DrawGrid_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn DrawGrid_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn DrawGrid_SetFocus(AObj: usize);
  pub fn DrawGrid_Update(AObj: usize);
  pub fn DrawGrid_BringToFront(AObj: usize);
  pub fn DrawGrid_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn DrawGrid_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn DrawGrid_Dragging(AObj: usize) -> bool;
  pub fn DrawGrid_HasParent(AObj: usize) -> bool;
  pub fn DrawGrid_Hide(AObj: usize);
  pub fn DrawGrid_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn DrawGrid_Refresh(AObj: usize);
  pub fn DrawGrid_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn DrawGrid_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn DrawGrid_SendToBack(AObj: usize);
  pub fn DrawGrid_Show(AObj: usize);
  pub fn DrawGrid_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn DrawGrid_GetTextLen(AObj: usize) -> i32;
  pub fn DrawGrid_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn DrawGrid_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn DrawGrid_GetNamePath(AObj: usize) -> *const c_char;
  pub fn DrawGrid_Assign(AObj: usize, Source: usize);
  pub fn DrawGrid_ClassType(AObj: usize) -> TClass;
  pub fn DrawGrid_ClassName(AObj: usize) -> *const c_char;
  pub fn DrawGrid_InstanceSize(AObj: usize) -> i32;
  pub fn DrawGrid_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn DrawGrid_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn DrawGrid_GetHashCode(AObj: usize) -> i32;
  pub fn DrawGrid_ToString(AObj: usize) -> *const c_char;
  pub fn DrawGrid_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn DrawGrid_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn DrawGrid_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn DrawGrid_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn DrawGrid_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn DrawGrid_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn DrawGrid_AnchorClient(AObj: usize, ASpace: i32);
  pub fn DrawGrid_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn DrawGrid_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn DrawGrid_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn DrawGrid_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn DrawGrid_SetOnColRowMoved(AObj: usize, AEventId: usize);
  pub fn DrawGrid_GetAlign(AObj: usize) -> TAlign;
  pub fn DrawGrid_SetAlign(AObj: usize, AValue: TAlign);
  pub fn DrawGrid_GetAnchors(AObj: usize) -> TAnchors;
  pub fn DrawGrid_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn DrawGrid_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn DrawGrid_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn DrawGrid_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn DrawGrid_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn DrawGrid_GetColor(AObj: usize) -> TColor;
  pub fn DrawGrid_SetColor(AObj: usize, AValue: TColor);
  pub fn DrawGrid_GetColCount(AObj: usize) -> i32;
  pub fn DrawGrid_SetColCount(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetConstraints(AObj: usize) -> usize;
  pub fn DrawGrid_SetConstraints(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetDefaultColWidth(AObj: usize) -> i32;
  pub fn DrawGrid_SetDefaultColWidth(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetDefaultRowHeight(AObj: usize) -> i32;
  pub fn DrawGrid_SetDefaultRowHeight(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetDefaultDrawing(AObj: usize) -> bool;
  pub fn DrawGrid_SetDefaultDrawing(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn DrawGrid_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetDragCursor(AObj: usize) -> TCursor;
  pub fn DrawGrid_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn DrawGrid_GetDragKind(AObj: usize) -> TDragKind;
  pub fn DrawGrid_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn DrawGrid_GetDragMode(AObj: usize) -> TDragMode;
  pub fn DrawGrid_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn DrawGrid_GetEnabled(AObj: usize) -> bool;
  pub fn DrawGrid_SetEnabled(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetFixedColor(AObj: usize) -> TColor;
  pub fn DrawGrid_SetFixedColor(AObj: usize, AValue: TColor);
  pub fn DrawGrid_GetFixedCols(AObj: usize) -> i32;
  pub fn DrawGrid_SetFixedCols(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetRowCount(AObj: usize) -> i32;
  pub fn DrawGrid_SetRowCount(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetFixedRows(AObj: usize) -> i32;
  pub fn DrawGrid_SetFixedRows(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetFont(AObj: usize) -> usize;
  pub fn DrawGrid_SetFont(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetGridLineWidth(AObj: usize) -> i32;
  pub fn DrawGrid_SetGridLineWidth(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetOptions(AObj: usize) -> TGridOptions;
  pub fn DrawGrid_SetOptions(AObj: usize, AValue: TGridOptions);
  pub fn DrawGrid_GetParentColor(AObj: usize) -> bool;
  pub fn DrawGrid_SetParentColor(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn DrawGrid_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetParentFont(AObj: usize) -> bool;
  pub fn DrawGrid_SetParentFont(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetParentShowHint(AObj: usize) -> bool;
  pub fn DrawGrid_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetPopupMenu(AObj: usize) -> usize;
  pub fn DrawGrid_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn DrawGrid_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn DrawGrid_GetShowHint(AObj: usize) -> bool;
  pub fn DrawGrid_SetShowHint(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn DrawGrid_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn DrawGrid_GetVisible(AObj: usize) -> bool;
  pub fn DrawGrid_SetVisible(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetVisibleColCount(AObj: usize) -> i32;
  pub fn DrawGrid_GetVisibleRowCount(AObj: usize) -> i32;
  pub fn DrawGrid_SetOnClick(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnDrawCell(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnExit(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnGetEditMask(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnGetEditText(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnSelectCell(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnSetEditText(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn DrawGrid_SetOnTopLeftChanged(AObj: usize, AEventId: usize);
  pub fn DrawGrid_GetCanvas(AObj: usize) -> usize;
  pub fn DrawGrid_GetCol(AObj: usize) -> i32;
  pub fn DrawGrid_SetCol(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetEditorMode(AObj: usize) -> bool;
  pub fn DrawGrid_SetEditorMode(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetGridHeight(AObj: usize) -> i32;
  pub fn DrawGrid_GetGridWidth(AObj: usize) -> i32;
  pub fn DrawGrid_GetLeftCol(AObj: usize) -> i32;
  pub fn DrawGrid_SetLeftCol(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetSelection(AObj: usize, Result: *mut TGridRect);
  pub fn DrawGrid_SetSelection(AObj: usize, AValue: *mut TGridRect);
  pub fn DrawGrid_GetRow(AObj: usize) -> i32;
  pub fn DrawGrid_SetRow(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetTopRow(AObj: usize) -> i32;
  pub fn DrawGrid_SetTopRow(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetTabStop(AObj: usize) -> bool;
  pub fn DrawGrid_SetTabStop(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetDockClientCount(AObj: usize) -> i32;
  pub fn DrawGrid_GetDockSite(AObj: usize) -> bool;
  pub fn DrawGrid_SetDockSite(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetMouseInClient(AObj: usize) -> bool;
  pub fn DrawGrid_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn DrawGrid_GetBrush(AObj: usize) -> usize;
  pub fn DrawGrid_GetControlCount(AObj: usize) -> i32;
  pub fn DrawGrid_GetHandle(AObj: usize) -> HWND;
  pub fn DrawGrid_GetParentWindow(AObj: usize) -> HWND;
  pub fn DrawGrid_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn DrawGrid_GetShowing(AObj: usize) -> bool;
  pub fn DrawGrid_GetUseDockManager(AObj: usize) -> bool;
  pub fn DrawGrid_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn DrawGrid_GetAction(AObj: usize) -> usize;
  pub fn DrawGrid_SetAction(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn DrawGrid_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn DrawGrid_GetClientHeight(AObj: usize) -> i32;
  pub fn DrawGrid_SetClientHeight(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn DrawGrid_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn DrawGrid_GetClientWidth(AObj: usize) -> i32;
  pub fn DrawGrid_SetClientWidth(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetControlState(AObj: usize) -> TControlState;
  pub fn DrawGrid_SetControlState(AObj: usize, AValue: TControlState);
  pub fn DrawGrid_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn DrawGrid_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn DrawGrid_GetFloating(AObj: usize) -> bool;
  pub fn DrawGrid_GetParent(AObj: usize) -> usize;
  pub fn DrawGrid_SetParent(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetLeft(AObj: usize) -> i32;
  pub fn DrawGrid_SetLeft(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetTop(AObj: usize) -> i32;
  pub fn DrawGrid_SetTop(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetWidth(AObj: usize) -> i32;
  pub fn DrawGrid_SetWidth(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetHeight(AObj: usize) -> i32;
  pub fn DrawGrid_SetHeight(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetCursor(AObj: usize) -> TCursor;
  pub fn DrawGrid_SetCursor(AObj: usize, AValue: TCursor);
  pub fn DrawGrid_GetHint(AObj: usize) -> *const c_char;
  pub fn DrawGrid_SetHint(AObj: usize, AValue: *const c_char);
  pub fn DrawGrid_GetComponentCount(AObj: usize) -> i32;
  pub fn DrawGrid_GetComponentIndex(AObj: usize) -> i32;
  pub fn DrawGrid_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn DrawGrid_GetOwner(AObj: usize) -> usize;
  pub fn DrawGrid_GetName(AObj: usize) -> *const c_char;
  pub fn DrawGrid_SetName(AObj: usize, AValue: *const c_char);
  pub fn DrawGrid_GetTag(AObj: usize) -> isize;
  pub fn DrawGrid_SetTag(AObj: usize, AValue: isize);
  pub fn DrawGrid_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn DrawGrid_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn DrawGrid_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn DrawGrid_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn DrawGrid_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetChildSizing(AObj: usize) -> usize;
  pub fn DrawGrid_SetChildSizing(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetBorderSpacing(AObj: usize) -> usize;
  pub fn DrawGrid_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn DrawGrid_GetColWidths(AObj: usize, Index: i32) -> i32;
  pub fn DrawGrid_SetColWidths(AObj: usize, Index: i32, AValue: i32);
  pub fn DrawGrid_GetRowHeights(AObj: usize, Index: i32) -> i32;
  pub fn DrawGrid_SetRowHeights(AObj: usize, Index: i32, AValue: i32);
  pub fn DrawGrid_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn DrawGrid_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn DrawGrid_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn DrawGrid_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn DrawGrid_StaticClassType() -> TClass;

  // ----------------- TValueListEditor ----------------------
  pub fn ValueListEditor_Create(AOwner: usize) -> usize;
  pub fn ValueListEditor_Free(AObj: usize);
  pub fn ValueListEditor_DeleteRow(AObj: usize, ARow: i32);
  pub fn ValueListEditor_Refresh(AObj: usize);
  pub fn ValueListEditor_CellRect(AObj: usize, ACol: i32, ARow: i32, Result: *mut TRect);
  pub fn ValueListEditor_MouseToCell(AObj: usize, X: i32, Y: i32, ACol: *mut i32, ARow: *mut i32);
  pub fn ValueListEditor_MouseCoord(AObj: usize, X: i32, Y: i32, Result: *mut TGridCoord);
  pub fn ValueListEditor_CanFocus(AObj: usize) -> bool;
  pub fn ValueListEditor_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ValueListEditor_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ValueListEditor_DisableAlign(AObj: usize);
  pub fn ValueListEditor_EnableAlign(AObj: usize);
  pub fn ValueListEditor_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ValueListEditor_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ValueListEditor_Focused(AObj: usize) -> bool;
  pub fn ValueListEditor_HandleAllocated(AObj: usize) -> bool;
  pub fn ValueListEditor_InsertControl(AObj: usize, AControl: usize);
  pub fn ValueListEditor_Invalidate(AObj: usize);
  pub fn ValueListEditor_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ValueListEditor_RemoveControl(AObj: usize, AControl: usize);
  pub fn ValueListEditor_Realign(AObj: usize);
  pub fn ValueListEditor_Repaint(AObj: usize);
  pub fn ValueListEditor_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ValueListEditor_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ValueListEditor_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ValueListEditor_SetFocus(AObj: usize);
  pub fn ValueListEditor_Update(AObj: usize);
  pub fn ValueListEditor_BringToFront(AObj: usize);
  pub fn ValueListEditor_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ValueListEditor_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ValueListEditor_Dragging(AObj: usize) -> bool;
  pub fn ValueListEditor_HasParent(AObj: usize) -> bool;
  pub fn ValueListEditor_Hide(AObj: usize);
  pub fn ValueListEditor_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ValueListEditor_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ValueListEditor_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ValueListEditor_SendToBack(AObj: usize);
  pub fn ValueListEditor_Show(AObj: usize);
  pub fn ValueListEditor_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ValueListEditor_GetTextLen(AObj: usize) -> i32;
  pub fn ValueListEditor_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ValueListEditor_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ValueListEditor_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ValueListEditor_Assign(AObj: usize, Source: usize);
  pub fn ValueListEditor_ClassType(AObj: usize) -> TClass;
  pub fn ValueListEditor_ClassName(AObj: usize) -> *const c_char;
  pub fn ValueListEditor_InstanceSize(AObj: usize) -> i32;
  pub fn ValueListEditor_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ValueListEditor_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ValueListEditor_GetHashCode(AObj: usize) -> i32;
  pub fn ValueListEditor_ToString(AObj: usize) -> *const c_char;
  pub fn ValueListEditor_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ValueListEditor_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ValueListEditor_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ValueListEditor_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ValueListEditor_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ValueListEditor_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ValueListEditor_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ValueListEditor_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ValueListEditor_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ValueListEditor_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ValueListEditor_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ValueListEditor_GetColCount(AObj: usize) -> i32;
  pub fn ValueListEditor_SetColCount(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetRowCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetVisibleColCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetVisibleRowCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetAlign(AObj: usize) -> TAlign;
  pub fn ValueListEditor_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ValueListEditor_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ValueListEditor_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ValueListEditor_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ValueListEditor_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ValueListEditor_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn ValueListEditor_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn ValueListEditor_GetColor(AObj: usize) -> TColor;
  pub fn ValueListEditor_SetColor(AObj: usize, AValue: TColor);
  pub fn ValueListEditor_GetConstraints(AObj: usize) -> usize;
  pub fn ValueListEditor_SetConstraints(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetDefaultColWidth(AObj: usize) -> i32;
  pub fn ValueListEditor_SetDefaultColWidth(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetDefaultDrawing(AObj: usize) -> bool;
  pub fn ValueListEditor_SetDefaultDrawing(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetDefaultRowHeight(AObj: usize) -> i32;
  pub fn ValueListEditor_SetDefaultRowHeight(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ValueListEditor_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ValueListEditor_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ValueListEditor_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ValueListEditor_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ValueListEditor_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ValueListEditor_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ValueListEditor_GetDropDownRows(AObj: usize) -> i32;
  pub fn ValueListEditor_SetDropDownRows(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetEnabled(AObj: usize) -> bool;
  pub fn ValueListEditor_SetEnabled(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetFixedColor(AObj: usize) -> TColor;
  pub fn ValueListEditor_SetFixedColor(AObj: usize, AValue: TColor);
  pub fn ValueListEditor_GetFixedCols(AObj: usize) -> i32;
  pub fn ValueListEditor_SetFixedCols(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetFont(AObj: usize) -> usize;
  pub fn ValueListEditor_SetFont(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetGridLineWidth(AObj: usize) -> i32;
  pub fn ValueListEditor_SetGridLineWidth(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetOptions(AObj: usize) -> TGridOptions;
  pub fn ValueListEditor_SetOptions(AObj: usize, AValue: TGridOptions);
  pub fn ValueListEditor_GetParentColor(AObj: usize) -> bool;
  pub fn ValueListEditor_SetParentColor(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ValueListEditor_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetParentFont(AObj: usize) -> bool;
  pub fn ValueListEditor_SetParentFont(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetParentShowHint(AObj: usize) -> bool;
  pub fn ValueListEditor_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetPopupMenu(AObj: usize) -> usize;
  pub fn ValueListEditor_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetScrollBars(AObj: usize) -> TScrollStyle;
  pub fn ValueListEditor_SetScrollBars(AObj: usize, AValue: TScrollStyle);
  pub fn ValueListEditor_GetShowHint(AObj: usize) -> bool;
  pub fn ValueListEditor_SetShowHint(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetStrings(AObj: usize) -> usize;
  pub fn ValueListEditor_SetStrings(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ValueListEditor_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ValueListEditor_GetVisible(AObj: usize) -> bool;
  pub fn ValueListEditor_SetVisible(AObj: usize, AValue: bool);
  pub fn ValueListEditor_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnDrawCell(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnGetEditMask(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnGetEditText(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnSelectCell(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnSetEditText(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_SetOnTopLeftChanged(AObj: usize, AEventId: usize);
  pub fn ValueListEditor_GetCanvas(AObj: usize) -> usize;
  pub fn ValueListEditor_GetCol(AObj: usize) -> i32;
  pub fn ValueListEditor_SetCol(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetEditorMode(AObj: usize) -> bool;
  pub fn ValueListEditor_SetEditorMode(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetGridHeight(AObj: usize) -> i32;
  pub fn ValueListEditor_GetGridWidth(AObj: usize) -> i32;
  pub fn ValueListEditor_GetLeftCol(AObj: usize) -> i32;
  pub fn ValueListEditor_SetLeftCol(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetSelection(AObj: usize, Result: *mut TGridRect);
  pub fn ValueListEditor_SetSelection(AObj: usize, AValue: *mut TGridRect);
  pub fn ValueListEditor_GetRow(AObj: usize) -> i32;
  pub fn ValueListEditor_SetRow(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetTopRow(AObj: usize) -> i32;
  pub fn ValueListEditor_SetTopRow(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetTabStop(AObj: usize) -> bool;
  pub fn ValueListEditor_SetTabStop(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetDockClientCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetDockSite(AObj: usize) -> bool;
  pub fn ValueListEditor_SetDockSite(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetMouseInClient(AObj: usize) -> bool;
  pub fn ValueListEditor_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetBrush(AObj: usize) -> usize;
  pub fn ValueListEditor_GetControlCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetHandle(AObj: usize) -> HWND;
  pub fn ValueListEditor_GetParentWindow(AObj: usize) -> HWND;
  pub fn ValueListEditor_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ValueListEditor_GetShowing(AObj: usize) -> bool;
  pub fn ValueListEditor_GetUseDockManager(AObj: usize) -> bool;
  pub fn ValueListEditor_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ValueListEditor_GetAction(AObj: usize) -> usize;
  pub fn ValueListEditor_SetAction(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ValueListEditor_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ValueListEditor_GetClientHeight(AObj: usize) -> i32;
  pub fn ValueListEditor_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ValueListEditor_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ValueListEditor_GetClientWidth(AObj: usize) -> i32;
  pub fn ValueListEditor_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetControlState(AObj: usize) -> TControlState;
  pub fn ValueListEditor_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ValueListEditor_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ValueListEditor_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ValueListEditor_GetFloating(AObj: usize) -> bool;
  pub fn ValueListEditor_GetParent(AObj: usize) -> usize;
  pub fn ValueListEditor_SetParent(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetLeft(AObj: usize) -> i32;
  pub fn ValueListEditor_SetLeft(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetTop(AObj: usize) -> i32;
  pub fn ValueListEditor_SetTop(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetWidth(AObj: usize) -> i32;
  pub fn ValueListEditor_SetWidth(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetHeight(AObj: usize) -> i32;
  pub fn ValueListEditor_SetHeight(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetCursor(AObj: usize) -> TCursor;
  pub fn ValueListEditor_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ValueListEditor_GetHint(AObj: usize) -> *const c_char;
  pub fn ValueListEditor_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ValueListEditor_GetComponentCount(AObj: usize) -> i32;
  pub fn ValueListEditor_GetComponentIndex(AObj: usize) -> i32;
  pub fn ValueListEditor_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ValueListEditor_GetOwner(AObj: usize) -> usize;
  pub fn ValueListEditor_GetName(AObj: usize) -> *const c_char;
  pub fn ValueListEditor_SetName(AObj: usize, AValue: *const c_char);
  pub fn ValueListEditor_GetTag(AObj: usize) -> isize;
  pub fn ValueListEditor_SetTag(AObj: usize, AValue: isize);
  pub fn ValueListEditor_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ValueListEditor_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ValueListEditor_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ValueListEditor_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ValueListEditor_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetChildSizing(AObj: usize) -> usize;
  pub fn ValueListEditor_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ValueListEditor_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ValueListEditor_GetCells(AObj: usize, ACol: i32, ARow: i32) -> *const c_char;
  pub fn ValueListEditor_SetCells(AObj: usize, ACol: i32, ARow: i32, AValue: *const c_char);
  pub fn ValueListEditor_GetValues(AObj: usize, Key: *const c_char) -> *const c_char;
  pub fn ValueListEditor_SetValues(AObj: usize, Key: *const c_char, AValue: *const c_char);
  pub fn ValueListEditor_GetColWidths(AObj: usize, Index: i32) -> i32;
  pub fn ValueListEditor_SetColWidths(AObj: usize, Index: i32, AValue: i32);
  pub fn ValueListEditor_GetRowHeights(AObj: usize, Index: i32) -> i32;
  pub fn ValueListEditor_SetRowHeights(AObj: usize, Index: i32, AValue: i32);
  pub fn ValueListEditor_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ValueListEditor_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ValueListEditor_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ValueListEditor_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ValueListEditor_StaticClassType() -> TClass;

  // ----------------- THeaderControl ----------------------
  pub fn HeaderControl_Create(AOwner: usize) -> usize;
  pub fn HeaderControl_Free(AObj: usize);
  pub fn HeaderControl_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn HeaderControl_CanFocus(AObj: usize) -> bool;
  pub fn HeaderControl_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn HeaderControl_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn HeaderControl_DisableAlign(AObj: usize);
  pub fn HeaderControl_EnableAlign(AObj: usize);
  pub fn HeaderControl_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn HeaderControl_Focused(AObj: usize) -> bool;
  pub fn HeaderControl_HandleAllocated(AObj: usize) -> bool;
  pub fn HeaderControl_InsertControl(AObj: usize, AControl: usize);
  pub fn HeaderControl_Invalidate(AObj: usize);
  pub fn HeaderControl_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn HeaderControl_RemoveControl(AObj: usize, AControl: usize);
  pub fn HeaderControl_Realign(AObj: usize);
  pub fn HeaderControl_Repaint(AObj: usize);
  pub fn HeaderControl_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn HeaderControl_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn HeaderControl_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn HeaderControl_SetFocus(AObj: usize);
  pub fn HeaderControl_Update(AObj: usize);
  pub fn HeaderControl_BringToFront(AObj: usize);
  pub fn HeaderControl_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn HeaderControl_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn HeaderControl_Dragging(AObj: usize) -> bool;
  pub fn HeaderControl_HasParent(AObj: usize) -> bool;
  pub fn HeaderControl_Hide(AObj: usize);
  pub fn HeaderControl_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn HeaderControl_Refresh(AObj: usize);
  pub fn HeaderControl_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn HeaderControl_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn HeaderControl_SendToBack(AObj: usize);
  pub fn HeaderControl_Show(AObj: usize);
  pub fn HeaderControl_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn HeaderControl_GetTextLen(AObj: usize) -> i32;
  pub fn HeaderControl_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn HeaderControl_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn HeaderControl_GetNamePath(AObj: usize) -> *const c_char;
  pub fn HeaderControl_Assign(AObj: usize, Source: usize);
  pub fn HeaderControl_ClassType(AObj: usize) -> TClass;
  pub fn HeaderControl_ClassName(AObj: usize) -> *const c_char;
  pub fn HeaderControl_InstanceSize(AObj: usize) -> i32;
  pub fn HeaderControl_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn HeaderControl_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn HeaderControl_GetHashCode(AObj: usize) -> i32;
  pub fn HeaderControl_ToString(AObj: usize) -> *const c_char;
  pub fn HeaderControl_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn HeaderControl_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn HeaderControl_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn HeaderControl_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn HeaderControl_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn HeaderControl_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn HeaderControl_AnchorClient(AObj: usize, ASpace: i32);
  pub fn HeaderControl_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn HeaderControl_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn HeaderControl_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn HeaderControl_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn HeaderControl_GetAlign(AObj: usize) -> TAlign;
  pub fn HeaderControl_SetAlign(AObj: usize, AValue: TAlign);
  pub fn HeaderControl_GetAnchors(AObj: usize) -> TAnchors;
  pub fn HeaderControl_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn HeaderControl_GetBorderWidth(AObj: usize) -> i32;
  pub fn HeaderControl_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn HeaderControl_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetDragCursor(AObj: usize) -> TCursor;
  pub fn HeaderControl_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn HeaderControl_GetDragKind(AObj: usize) -> TDragKind;
  pub fn HeaderControl_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn HeaderControl_GetDragMode(AObj: usize) -> TDragMode;
  pub fn HeaderControl_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn HeaderControl_GetEnabled(AObj: usize) -> bool;
  pub fn HeaderControl_SetEnabled(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetFont(AObj: usize) -> usize;
  pub fn HeaderControl_SetFont(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetImages(AObj: usize) -> usize;
  pub fn HeaderControl_SetImages(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetConstraints(AObj: usize) -> usize;
  pub fn HeaderControl_SetConstraints(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetSections(AObj: usize) -> usize;
  pub fn HeaderControl_SetSections(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetShowHint(AObj: usize) -> bool;
  pub fn HeaderControl_SetShowHint(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn HeaderControl_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetParentFont(AObj: usize) -> bool;
  pub fn HeaderControl_SetParentFont(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetParentShowHint(AObj: usize) -> bool;
  pub fn HeaderControl_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetPopupMenu(AObj: usize) -> usize;
  pub fn HeaderControl_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetVisible(AObj: usize) -> bool;
  pub fn HeaderControl_SetVisible(AObj: usize, AValue: bool);
  pub fn HeaderControl_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnResize(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnSectionClick(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnSectionResize(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnSectionTrack(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnSectionDrag(AObj: usize, AEventId: usize);
  pub fn HeaderControl_SetOnSectionEndDrag(AObj: usize, AEventId: usize);
  pub fn HeaderControl_GetCanvas(AObj: usize) -> usize;
  pub fn HeaderControl_GetDockClientCount(AObj: usize) -> i32;
  pub fn HeaderControl_GetDockSite(AObj: usize) -> bool;
  pub fn HeaderControl_SetDockSite(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetMouseInClient(AObj: usize) -> bool;
  pub fn HeaderControl_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn HeaderControl_GetBrush(AObj: usize) -> usize;
  pub fn HeaderControl_GetControlCount(AObj: usize) -> i32;
  pub fn HeaderControl_GetHandle(AObj: usize) -> HWND;
  pub fn HeaderControl_GetParentWindow(AObj: usize) -> HWND;
  pub fn HeaderControl_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn HeaderControl_GetShowing(AObj: usize) -> bool;
  pub fn HeaderControl_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn HeaderControl_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn HeaderControl_GetTabStop(AObj: usize) -> bool;
  pub fn HeaderControl_SetTabStop(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetUseDockManager(AObj: usize) -> bool;
  pub fn HeaderControl_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn HeaderControl_GetAction(AObj: usize) -> usize;
  pub fn HeaderControl_SetAction(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn HeaderControl_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn HeaderControl_GetClientHeight(AObj: usize) -> i32;
  pub fn HeaderControl_SetClientHeight(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn HeaderControl_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn HeaderControl_GetClientWidth(AObj: usize) -> i32;
  pub fn HeaderControl_SetClientWidth(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetControlState(AObj: usize) -> TControlState;
  pub fn HeaderControl_SetControlState(AObj: usize, AValue: TControlState);
  pub fn HeaderControl_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn HeaderControl_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn HeaderControl_GetFloating(AObj: usize) -> bool;
  pub fn HeaderControl_GetParent(AObj: usize) -> usize;
  pub fn HeaderControl_SetParent(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetLeft(AObj: usize) -> i32;
  pub fn HeaderControl_SetLeft(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetTop(AObj: usize) -> i32;
  pub fn HeaderControl_SetTop(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetWidth(AObj: usize) -> i32;
  pub fn HeaderControl_SetWidth(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetHeight(AObj: usize) -> i32;
  pub fn HeaderControl_SetHeight(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetCursor(AObj: usize) -> TCursor;
  pub fn HeaderControl_SetCursor(AObj: usize, AValue: TCursor);
  pub fn HeaderControl_GetHint(AObj: usize) -> *const c_char;
  pub fn HeaderControl_SetHint(AObj: usize, AValue: *const c_char);
  pub fn HeaderControl_GetComponentCount(AObj: usize) -> i32;
  pub fn HeaderControl_GetComponentIndex(AObj: usize) -> i32;
  pub fn HeaderControl_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn HeaderControl_GetOwner(AObj: usize) -> usize;
  pub fn HeaderControl_GetName(AObj: usize) -> *const c_char;
  pub fn HeaderControl_SetName(AObj: usize, AValue: *const c_char);
  pub fn HeaderControl_GetTag(AObj: usize) -> isize;
  pub fn HeaderControl_SetTag(AObj: usize, AValue: isize);
  pub fn HeaderControl_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn HeaderControl_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn HeaderControl_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn HeaderControl_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn HeaderControl_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetChildSizing(AObj: usize) -> usize;
  pub fn HeaderControl_SetChildSizing(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetBorderSpacing(AObj: usize) -> usize;
  pub fn HeaderControl_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn HeaderControl_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn HeaderControl_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn HeaderControl_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn HeaderControl_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn HeaderControl_StaticClassType() -> TClass;

  // ----------------- THeaderSection ----------------------
  pub fn HeaderSection_Create(AOwner: usize) -> usize;
  pub fn HeaderSection_Free(AObj: usize);
  pub fn HeaderSection_Assign(AObj: usize, Source: usize);
  pub fn HeaderSection_GetNamePath(AObj: usize) -> *const c_char;
  pub fn HeaderSection_ClassType(AObj: usize) -> TClass;
  pub fn HeaderSection_ClassName(AObj: usize) -> *const c_char;
  pub fn HeaderSection_InstanceSize(AObj: usize) -> i32;
  pub fn HeaderSection_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn HeaderSection_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn HeaderSection_GetHashCode(AObj: usize) -> i32;
  pub fn HeaderSection_ToString(AObj: usize) -> *const c_char;
  pub fn HeaderSection_GetLeft(AObj: usize) -> i32;
  pub fn HeaderSection_GetRight(AObj: usize) -> i32;
  pub fn HeaderSection_GetAlignment(AObj: usize) -> TAlignment;
  pub fn HeaderSection_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn HeaderSection_GetImageIndex(AObj: usize) -> i32;
  pub fn HeaderSection_SetImageIndex(AObj: usize, AValue: i32);
  pub fn HeaderSection_GetMaxWidth(AObj: usize) -> i32;
  pub fn HeaderSection_SetMaxWidth(AObj: usize, AValue: i32);
  pub fn HeaderSection_GetMinWidth(AObj: usize) -> i32;
  pub fn HeaderSection_SetMinWidth(AObj: usize, AValue: i32);
  pub fn HeaderSection_GetText(AObj: usize) -> *const c_char;
  pub fn HeaderSection_SetText(AObj: usize, AValue: *const c_char);
  pub fn HeaderSection_GetWidth(AObj: usize) -> i32;
  pub fn HeaderSection_SetWidth(AObj: usize, AValue: i32);
  pub fn HeaderSection_GetCollection(AObj: usize) -> usize;
  pub fn HeaderSection_SetCollection(AObj: usize, AValue: usize);
  pub fn HeaderSection_GetIndex(AObj: usize) -> i32;
  pub fn HeaderSection_SetIndex(AObj: usize, AValue: i32);
  pub fn HeaderSection_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn HeaderSection_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn HeaderSection_StaticClassType() -> TClass;

  // ----------------- THeaderSections ----------------------
  pub fn HeaderSections_Create(AOwner: usize) -> usize;
  pub fn HeaderSections_Free(AObj: usize);
  pub fn HeaderSections_Add(AObj: usize) -> usize;
  pub fn HeaderSections_AddItem(AObj: usize, Item: usize, Index: i32) -> usize;
  pub fn HeaderSections_Insert(AObj: usize, Index: i32) -> usize;
  pub fn HeaderSections_Owner(AObj: usize) -> usize;
  pub fn HeaderSections_Assign(AObj: usize, Source: usize);
  pub fn HeaderSections_BeginUpdate(AObj: usize);
  pub fn HeaderSections_Clear(AObj: usize);
  pub fn HeaderSections_Delete(AObj: usize, Index: i32);
  pub fn HeaderSections_EndUpdate(AObj: usize);
  pub fn HeaderSections_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn HeaderSections_GetNamePath(AObj: usize) -> *const c_char;
  pub fn HeaderSections_ClassType(AObj: usize) -> TClass;
  pub fn HeaderSections_ClassName(AObj: usize) -> *const c_char;
  pub fn HeaderSections_InstanceSize(AObj: usize) -> i32;
  pub fn HeaderSections_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn HeaderSections_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn HeaderSections_GetHashCode(AObj: usize) -> i32;
  pub fn HeaderSections_ToString(AObj: usize) -> *const c_char;
  pub fn HeaderSections_GetCount(AObj: usize) -> i32;
  pub fn HeaderSections_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn HeaderSections_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn HeaderSections_StaticClassType() -> TClass;

  // ----------------- TLabeledEdit ----------------------
  pub fn LabeledEdit_Create(AOwner: usize) -> usize;
  pub fn LabeledEdit_Free(AObj: usize);
  pub fn LabeledEdit_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn LabeledEdit_Clear(AObj: usize);
  pub fn LabeledEdit_ClearSelection(AObj: usize);
  pub fn LabeledEdit_CopyToClipboard(AObj: usize);
  pub fn LabeledEdit_CutToClipboard(AObj: usize);
  pub fn LabeledEdit_PasteFromClipboard(AObj: usize);
  pub fn LabeledEdit_Undo(AObj: usize);
  pub fn LabeledEdit_SelectAll(AObj: usize);
  pub fn LabeledEdit_CanFocus(AObj: usize) -> bool;
  pub fn LabeledEdit_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn LabeledEdit_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn LabeledEdit_DisableAlign(AObj: usize);
  pub fn LabeledEdit_EnableAlign(AObj: usize);
  pub fn LabeledEdit_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn LabeledEdit_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn LabeledEdit_Focused(AObj: usize) -> bool;
  pub fn LabeledEdit_HandleAllocated(AObj: usize) -> bool;
  pub fn LabeledEdit_InsertControl(AObj: usize, AControl: usize);
  pub fn LabeledEdit_Invalidate(AObj: usize);
  pub fn LabeledEdit_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn LabeledEdit_RemoveControl(AObj: usize, AControl: usize);
  pub fn LabeledEdit_Realign(AObj: usize);
  pub fn LabeledEdit_Repaint(AObj: usize);
  pub fn LabeledEdit_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn LabeledEdit_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn LabeledEdit_SetFocus(AObj: usize);
  pub fn LabeledEdit_Update(AObj: usize);
  pub fn LabeledEdit_BringToFront(AObj: usize);
  pub fn LabeledEdit_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn LabeledEdit_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn LabeledEdit_Dragging(AObj: usize) -> bool;
  pub fn LabeledEdit_HasParent(AObj: usize) -> bool;
  pub fn LabeledEdit_Hide(AObj: usize);
  pub fn LabeledEdit_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn LabeledEdit_Refresh(AObj: usize);
  pub fn LabeledEdit_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn LabeledEdit_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn LabeledEdit_SendToBack(AObj: usize);
  pub fn LabeledEdit_Show(AObj: usize);
  pub fn LabeledEdit_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn LabeledEdit_GetTextLen(AObj: usize) -> i32;
  pub fn LabeledEdit_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn LabeledEdit_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn LabeledEdit_GetNamePath(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_Assign(AObj: usize, Source: usize);
  pub fn LabeledEdit_ClassType(AObj: usize) -> TClass;
  pub fn LabeledEdit_ClassName(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_InstanceSize(AObj: usize) -> i32;
  pub fn LabeledEdit_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn LabeledEdit_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn LabeledEdit_GetHashCode(AObj: usize) -> i32;
  pub fn LabeledEdit_ToString(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn LabeledEdit_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn LabeledEdit_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn LabeledEdit_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn LabeledEdit_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn LabeledEdit_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn LabeledEdit_AnchorClient(AObj: usize, ASpace: i32);
  pub fn LabeledEdit_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn LabeledEdit_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn LabeledEdit_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn LabeledEdit_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn LabeledEdit_GetAlignment(AObj: usize) -> TAlignment;
  pub fn LabeledEdit_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn LabeledEdit_GetAnchors(AObj: usize) -> TAnchors;
  pub fn LabeledEdit_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn LabeledEdit_GetAutoSelect(AObj: usize) -> bool;
  pub fn LabeledEdit_SetAutoSelect(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetAutoSize(AObj: usize) -> bool;
  pub fn LabeledEdit_SetAutoSize(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn LabeledEdit_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn LabeledEdit_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn LabeledEdit_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn LabeledEdit_GetCharCase(AObj: usize) -> TEditCharCase;
  pub fn LabeledEdit_SetCharCase(AObj: usize, AValue: TEditCharCase);
  pub fn LabeledEdit_GetColor(AObj: usize) -> TColor;
  pub fn LabeledEdit_SetColor(AObj: usize, AValue: TColor);
  pub fn LabeledEdit_GetConstraints(AObj: usize) -> usize;
  pub fn LabeledEdit_SetConstraints(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn LabeledEdit_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetDragCursor(AObj: usize) -> TCursor;
  pub fn LabeledEdit_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn LabeledEdit_GetDragMode(AObj: usize) -> TDragMode;
  pub fn LabeledEdit_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn LabeledEdit_GetEditLabel(AObj: usize) -> usize;
  pub fn LabeledEdit_GetEnabled(AObj: usize) -> bool;
  pub fn LabeledEdit_SetEnabled(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetFont(AObj: usize) -> usize;
  pub fn LabeledEdit_SetFont(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetHideSelection(AObj: usize) -> bool;
  pub fn LabeledEdit_SetHideSelection(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetLabelPosition(AObj: usize) -> TLabelPosition;
  pub fn LabeledEdit_SetLabelPosition(AObj: usize, AValue: TLabelPosition);
  pub fn LabeledEdit_GetLabelSpacing(AObj: usize) -> i32;
  pub fn LabeledEdit_SetLabelSpacing(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetMaxLength(AObj: usize) -> i32;
  pub fn LabeledEdit_SetMaxLength(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetNumbersOnly(AObj: usize) -> bool;
  pub fn LabeledEdit_SetNumbersOnly(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetParentColor(AObj: usize) -> bool;
  pub fn LabeledEdit_SetParentColor(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn LabeledEdit_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetParentFont(AObj: usize) -> bool;
  pub fn LabeledEdit_SetParentFont(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetParentShowHint(AObj: usize) -> bool;
  pub fn LabeledEdit_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetPasswordChar(AObj: usize) -> Char;
  pub fn LabeledEdit_SetPasswordChar(AObj: usize, AValue: Char);
  pub fn LabeledEdit_GetPopupMenu(AObj: usize) -> usize;
  pub fn LabeledEdit_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetReadOnly(AObj: usize) -> bool;
  pub fn LabeledEdit_SetReadOnly(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetShowHint(AObj: usize) -> bool;
  pub fn LabeledEdit_SetShowHint(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn LabeledEdit_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn LabeledEdit_GetTabStop(AObj: usize) -> bool;
  pub fn LabeledEdit_SetTabStop(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetText(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_SetText(AObj: usize, AValue: *const c_char);
  pub fn LabeledEdit_GetTextHint(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_SetTextHint(AObj: usize, AValue: *const c_char);
  pub fn LabeledEdit_GetVisible(AObj: usize) -> bool;
  pub fn LabeledEdit_SetVisible(AObj: usize, AValue: bool);
  pub fn LabeledEdit_SetOnChange(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnClick(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnExit(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn LabeledEdit_GetCanUndo(AObj: usize) -> bool;
  pub fn LabeledEdit_GetModified(AObj: usize) -> bool;
  pub fn LabeledEdit_SetModified(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetSelLength(AObj: usize) -> i32;
  pub fn LabeledEdit_SetSelLength(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetSelStart(AObj: usize) -> i32;
  pub fn LabeledEdit_SetSelStart(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetSelText(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn LabeledEdit_GetDockClientCount(AObj: usize) -> i32;
  pub fn LabeledEdit_GetDockSite(AObj: usize) -> bool;
  pub fn LabeledEdit_SetDockSite(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetMouseInClient(AObj: usize) -> bool;
  pub fn LabeledEdit_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn LabeledEdit_GetBrush(AObj: usize) -> usize;
  pub fn LabeledEdit_GetControlCount(AObj: usize) -> i32;
  pub fn LabeledEdit_GetHandle(AObj: usize) -> HWND;
  pub fn LabeledEdit_GetParentWindow(AObj: usize) -> HWND;
  pub fn LabeledEdit_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn LabeledEdit_GetShowing(AObj: usize) -> bool;
  pub fn LabeledEdit_GetUseDockManager(AObj: usize) -> bool;
  pub fn LabeledEdit_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn LabeledEdit_GetAction(AObj: usize) -> usize;
  pub fn LabeledEdit_SetAction(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetAlign(AObj: usize) -> TAlign;
  pub fn LabeledEdit_SetAlign(AObj: usize, AValue: TAlign);
  pub fn LabeledEdit_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn LabeledEdit_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn LabeledEdit_GetClientHeight(AObj: usize) -> i32;
  pub fn LabeledEdit_SetClientHeight(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn LabeledEdit_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn LabeledEdit_GetClientWidth(AObj: usize) -> i32;
  pub fn LabeledEdit_SetClientWidth(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetControlState(AObj: usize) -> TControlState;
  pub fn LabeledEdit_SetControlState(AObj: usize, AValue: TControlState);
  pub fn LabeledEdit_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn LabeledEdit_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn LabeledEdit_GetFloating(AObj: usize) -> bool;
  pub fn LabeledEdit_GetParent(AObj: usize) -> usize;
  pub fn LabeledEdit_SetParent(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetLeft(AObj: usize) -> i32;
  pub fn LabeledEdit_SetLeft(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetTop(AObj: usize) -> i32;
  pub fn LabeledEdit_SetTop(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetWidth(AObj: usize) -> i32;
  pub fn LabeledEdit_SetWidth(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetHeight(AObj: usize) -> i32;
  pub fn LabeledEdit_SetHeight(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetCursor(AObj: usize) -> TCursor;
  pub fn LabeledEdit_SetCursor(AObj: usize, AValue: TCursor);
  pub fn LabeledEdit_GetHint(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_SetHint(AObj: usize, AValue: *const c_char);
  pub fn LabeledEdit_GetComponentCount(AObj: usize) -> i32;
  pub fn LabeledEdit_GetComponentIndex(AObj: usize) -> i32;
  pub fn LabeledEdit_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn LabeledEdit_GetOwner(AObj: usize) -> usize;
  pub fn LabeledEdit_GetName(AObj: usize) -> *const c_char;
  pub fn LabeledEdit_SetName(AObj: usize, AValue: *const c_char);
  pub fn LabeledEdit_GetTag(AObj: usize) -> isize;
  pub fn LabeledEdit_SetTag(AObj: usize, AValue: isize);
  pub fn LabeledEdit_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn LabeledEdit_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn LabeledEdit_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn LabeledEdit_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn LabeledEdit_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetChildSizing(AObj: usize) -> usize;
  pub fn LabeledEdit_SetChildSizing(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetBorderSpacing(AObj: usize) -> usize;
  pub fn LabeledEdit_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn LabeledEdit_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn LabeledEdit_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn LabeledEdit_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn LabeledEdit_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn LabeledEdit_StaticClassType() -> TClass;

  // ----------------- TBoundLabel ----------------------
  pub fn BoundLabel_Create(AOwner: usize) -> usize;
  pub fn BoundLabel_Free(AObj: usize);
  pub fn BoundLabel_BringToFront(AObj: usize);
  pub fn BoundLabel_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn BoundLabel_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn BoundLabel_Dragging(AObj: usize) -> bool;
  pub fn BoundLabel_HasParent(AObj: usize) -> bool;
  pub fn BoundLabel_Hide(AObj: usize);
  pub fn BoundLabel_Invalidate(AObj: usize);
  pub fn BoundLabel_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn BoundLabel_Refresh(AObj: usize);
  pub fn BoundLabel_Repaint(AObj: usize);
  pub fn BoundLabel_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn BoundLabel_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn BoundLabel_SendToBack(AObj: usize);
  pub fn BoundLabel_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn BoundLabel_Show(AObj: usize);
  pub fn BoundLabel_Update(AObj: usize);
  pub fn BoundLabel_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn BoundLabel_GetTextLen(AObj: usize) -> i32;
  pub fn BoundLabel_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn BoundLabel_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn BoundLabel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn BoundLabel_Assign(AObj: usize, Source: usize);
  pub fn BoundLabel_ClassType(AObj: usize) -> TClass;
  pub fn BoundLabel_ClassName(AObj: usize) -> *const c_char;
  pub fn BoundLabel_InstanceSize(AObj: usize) -> i32;
  pub fn BoundLabel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn BoundLabel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn BoundLabel_GetHashCode(AObj: usize) -> i32;
  pub fn BoundLabel_ToString(AObj: usize) -> *const c_char;
  pub fn BoundLabel_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn BoundLabel_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn BoundLabel_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn BoundLabel_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn BoundLabel_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn BoundLabel_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn BoundLabel_AnchorClient(AObj: usize, ASpace: i32);
  pub fn BoundLabel_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn BoundLabel_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn BoundLabel_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn BoundLabel_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn BoundLabel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn BoundLabel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn BoundLabel_GetCaption(AObj: usize) -> *const c_char;
  pub fn BoundLabel_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn BoundLabel_GetColor(AObj: usize) -> TColor;
  pub fn BoundLabel_SetColor(AObj: usize, AValue: TColor);
  pub fn BoundLabel_GetDragCursor(AObj: usize) -> TCursor;
  pub fn BoundLabel_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn BoundLabel_GetDragMode(AObj: usize) -> TDragMode;
  pub fn BoundLabel_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn BoundLabel_GetFont(AObj: usize) -> usize;
  pub fn BoundLabel_SetFont(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetHeight(AObj: usize) -> i32;
  pub fn BoundLabel_SetHeight(AObj: usize, AValue: i32);
  pub fn BoundLabel_GetLeft(AObj: usize) -> i32;
  pub fn BoundLabel_GetParentColor(AObj: usize) -> bool;
  pub fn BoundLabel_SetParentColor(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetParentFont(AObj: usize) -> bool;
  pub fn BoundLabel_SetParentFont(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetParentShowHint(AObj: usize) -> bool;
  pub fn BoundLabel_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetPopupMenu(AObj: usize) -> usize;
  pub fn BoundLabel_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetShowAccelChar(AObj: usize) -> bool;
  pub fn BoundLabel_SetShowAccelChar(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetShowHint(AObj: usize) -> bool;
  pub fn BoundLabel_SetShowHint(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetTop(AObj: usize) -> i32;
  pub fn BoundLabel_GetLayout(AObj: usize) -> TTextLayout;
  pub fn BoundLabel_SetLayout(AObj: usize, AValue: TTextLayout);
  pub fn BoundLabel_GetWordWrap(AObj: usize) -> bool;
  pub fn BoundLabel_SetWordWrap(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetWidth(AObj: usize) -> i32;
  pub fn BoundLabel_SetWidth(AObj: usize, AValue: i32);
  pub fn BoundLabel_SetOnClick(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn BoundLabel_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn BoundLabel_GetCanvas(AObj: usize) -> usize;
  pub fn BoundLabel_GetEnabled(AObj: usize) -> bool;
  pub fn BoundLabel_SetEnabled(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetAction(AObj: usize) -> usize;
  pub fn BoundLabel_SetAction(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetAlign(AObj: usize) -> TAlign;
  pub fn BoundLabel_SetAlign(AObj: usize, AValue: TAlign);
  pub fn BoundLabel_GetAnchors(AObj: usize) -> TAnchors;
  pub fn BoundLabel_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn BoundLabel_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn BoundLabel_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn BoundLabel_GetClientHeight(AObj: usize) -> i32;
  pub fn BoundLabel_SetClientHeight(AObj: usize, AValue: i32);
  pub fn BoundLabel_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn BoundLabel_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn BoundLabel_GetClientWidth(AObj: usize) -> i32;
  pub fn BoundLabel_SetClientWidth(AObj: usize, AValue: i32);
  pub fn BoundLabel_GetConstraints(AObj: usize) -> usize;
  pub fn BoundLabel_SetConstraints(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetControlState(AObj: usize) -> TControlState;
  pub fn BoundLabel_SetControlState(AObj: usize, AValue: TControlState);
  pub fn BoundLabel_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn BoundLabel_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn BoundLabel_GetFloating(AObj: usize) -> bool;
  pub fn BoundLabel_GetVisible(AObj: usize) -> bool;
  pub fn BoundLabel_SetVisible(AObj: usize, AValue: bool);
  pub fn BoundLabel_GetParent(AObj: usize) -> usize;
  pub fn BoundLabel_SetParent(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetCursor(AObj: usize) -> TCursor;
  pub fn BoundLabel_SetCursor(AObj: usize, AValue: TCursor);
  pub fn BoundLabel_GetHint(AObj: usize) -> *const c_char;
  pub fn BoundLabel_SetHint(AObj: usize, AValue: *const c_char);
  pub fn BoundLabel_GetComponentCount(AObj: usize) -> i32;
  pub fn BoundLabel_GetComponentIndex(AObj: usize) -> i32;
  pub fn BoundLabel_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn BoundLabel_GetOwner(AObj: usize) -> usize;
  pub fn BoundLabel_GetName(AObj: usize) -> *const c_char;
  pub fn BoundLabel_SetName(AObj: usize, AValue: *const c_char);
  pub fn BoundLabel_GetTag(AObj: usize) -> isize;
  pub fn BoundLabel_SetTag(AObj: usize, AValue: isize);
  pub fn BoundLabel_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn BoundLabel_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn BoundLabel_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn BoundLabel_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn BoundLabel_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetBorderSpacing(AObj: usize) -> usize;
  pub fn BoundLabel_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn BoundLabel_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn BoundLabel_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn BoundLabel_StaticClassType() -> TClass;

  // ----------------- TFlowPanel ----------------------
  pub fn FlowPanel_Create(AOwner: usize) -> usize;
  pub fn FlowPanel_Free(AObj: usize);
  pub fn FlowPanel_GetControlIndex(AObj: usize, AControl: usize) -> i32;
  pub fn FlowPanel_SetControlIndex(AObj: usize, AControl: usize, Index: i32);
  pub fn FlowPanel_CanFocus(AObj: usize) -> bool;
  pub fn FlowPanel_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn FlowPanel_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn FlowPanel_DisableAlign(AObj: usize);
  pub fn FlowPanel_EnableAlign(AObj: usize);
  pub fn FlowPanel_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn FlowPanel_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn FlowPanel_Focused(AObj: usize) -> bool;
  pub fn FlowPanel_HandleAllocated(AObj: usize) -> bool;
  pub fn FlowPanel_InsertControl(AObj: usize, AControl: usize);
  pub fn FlowPanel_Invalidate(AObj: usize);
  pub fn FlowPanel_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn FlowPanel_RemoveControl(AObj: usize, AControl: usize);
  pub fn FlowPanel_Realign(AObj: usize);
  pub fn FlowPanel_Repaint(AObj: usize);
  pub fn FlowPanel_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn FlowPanel_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn FlowPanel_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn FlowPanel_SetFocus(AObj: usize);
  pub fn FlowPanel_Update(AObj: usize);
  pub fn FlowPanel_BringToFront(AObj: usize);
  pub fn FlowPanel_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn FlowPanel_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn FlowPanel_Dragging(AObj: usize) -> bool;
  pub fn FlowPanel_HasParent(AObj: usize) -> bool;
  pub fn FlowPanel_Hide(AObj: usize);
  pub fn FlowPanel_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn FlowPanel_Refresh(AObj: usize);
  pub fn FlowPanel_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn FlowPanel_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn FlowPanel_SendToBack(AObj: usize);
  pub fn FlowPanel_Show(AObj: usize);
  pub fn FlowPanel_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn FlowPanel_GetTextLen(AObj: usize) -> i32;
  pub fn FlowPanel_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn FlowPanel_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn FlowPanel_GetNamePath(AObj: usize) -> *const c_char;
  pub fn FlowPanel_Assign(AObj: usize, Source: usize);
  pub fn FlowPanel_ClassType(AObj: usize) -> TClass;
  pub fn FlowPanel_ClassName(AObj: usize) -> *const c_char;
  pub fn FlowPanel_InstanceSize(AObj: usize) -> i32;
  pub fn FlowPanel_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn FlowPanel_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn FlowPanel_GetHashCode(AObj: usize) -> i32;
  pub fn FlowPanel_ToString(AObj: usize) -> *const c_char;
  pub fn FlowPanel_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn FlowPanel_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn FlowPanel_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn FlowPanel_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn FlowPanel_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn FlowPanel_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn FlowPanel_AnchorClient(AObj: usize, ASpace: i32);
  pub fn FlowPanel_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn FlowPanel_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn FlowPanel_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn FlowPanel_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn FlowPanel_GetAlign(AObj: usize) -> TAlign;
  pub fn FlowPanel_SetAlign(AObj: usize, AValue: TAlign);
  pub fn FlowPanel_GetAlignment(AObj: usize) -> TAlignment;
  pub fn FlowPanel_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn FlowPanel_GetAnchors(AObj: usize) -> TAnchors;
  pub fn FlowPanel_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn FlowPanel_GetAutoSize(AObj: usize) -> bool;
  pub fn FlowPanel_SetAutoSize(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetAutoWrap(AObj: usize) -> bool;
  pub fn FlowPanel_SetAutoWrap(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn FlowPanel_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn FlowPanel_GetBorderWidth(AObj: usize) -> i32;
  pub fn FlowPanel_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn FlowPanel_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn FlowPanel_GetCaption(AObj: usize) -> *const c_char;
  pub fn FlowPanel_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn FlowPanel_GetColor(AObj: usize) -> TColor;
  pub fn FlowPanel_SetColor(AObj: usize, AValue: TColor);
  pub fn FlowPanel_GetConstraints(AObj: usize) -> usize;
  pub fn FlowPanel_SetConstraints(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetUseDockManager(AObj: usize) -> bool;
  pub fn FlowPanel_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetDockSite(AObj: usize) -> bool;
  pub fn FlowPanel_SetDockSite(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn FlowPanel_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetDragCursor(AObj: usize) -> TCursor;
  pub fn FlowPanel_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn FlowPanel_GetDragKind(AObj: usize) -> TDragKind;
  pub fn FlowPanel_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn FlowPanel_GetDragMode(AObj: usize) -> TDragMode;
  pub fn FlowPanel_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn FlowPanel_GetEnabled(AObj: usize) -> bool;
  pub fn FlowPanel_SetEnabled(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetFlowStyle(AObj: usize) -> TFlowStyle;
  pub fn FlowPanel_SetFlowStyle(AObj: usize, AValue: TFlowStyle);
  pub fn FlowPanel_GetFullRepaint(AObj: usize) -> bool;
  pub fn FlowPanel_SetFullRepaint(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetFont(AObj: usize) -> usize;
  pub fn FlowPanel_SetFont(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetParentBackground(AObj: usize) -> bool;
  pub fn FlowPanel_SetParentBackground(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetParentColor(AObj: usize) -> bool;
  pub fn FlowPanel_SetParentColor(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn FlowPanel_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetParentFont(AObj: usize) -> bool;
  pub fn FlowPanel_SetParentFont(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetParentShowHint(AObj: usize) -> bool;
  pub fn FlowPanel_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetPopupMenu(AObj: usize) -> usize;
  pub fn FlowPanel_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetShowHint(AObj: usize) -> bool;
  pub fn FlowPanel_SetShowHint(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn FlowPanel_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn FlowPanel_GetTabStop(AObj: usize) -> bool;
  pub fn FlowPanel_SetTabStop(AObj: usize, AValue: bool);
  pub fn FlowPanel_GetVisible(AObj: usize) -> bool;
  pub fn FlowPanel_SetVisible(AObj: usize, AValue: bool);
  pub fn FlowPanel_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnClick(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnExit(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnResize(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn FlowPanel_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn FlowPanel_GetDockClientCount(AObj: usize) -> i32;
  pub fn FlowPanel_GetMouseInClient(AObj: usize) -> bool;
  pub fn FlowPanel_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn FlowPanel_GetBrush(AObj: usize) -> usize;
  pub fn FlowPanel_GetControlCount(AObj: usize) -> i32;
  pub fn FlowPanel_GetHandle(AObj: usize) -> HWND;
  pub fn FlowPanel_GetParentWindow(AObj: usize) -> HWND;
  pub fn FlowPanel_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn FlowPanel_GetShowing(AObj: usize) -> bool;
  pub fn FlowPanel_GetAction(AObj: usize) -> usize;
  pub fn FlowPanel_SetAction(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn FlowPanel_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn FlowPanel_GetClientHeight(AObj: usize) -> i32;
  pub fn FlowPanel_SetClientHeight(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn FlowPanel_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn FlowPanel_GetClientWidth(AObj: usize) -> i32;
  pub fn FlowPanel_SetClientWidth(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetControlState(AObj: usize) -> TControlState;
  pub fn FlowPanel_SetControlState(AObj: usize, AValue: TControlState);
  pub fn FlowPanel_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn FlowPanel_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn FlowPanel_GetFloating(AObj: usize) -> bool;
  pub fn FlowPanel_GetParent(AObj: usize) -> usize;
  pub fn FlowPanel_SetParent(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetLeft(AObj: usize) -> i32;
  pub fn FlowPanel_SetLeft(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetTop(AObj: usize) -> i32;
  pub fn FlowPanel_SetTop(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetWidth(AObj: usize) -> i32;
  pub fn FlowPanel_SetWidth(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetHeight(AObj: usize) -> i32;
  pub fn FlowPanel_SetHeight(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetCursor(AObj: usize) -> TCursor;
  pub fn FlowPanel_SetCursor(AObj: usize, AValue: TCursor);
  pub fn FlowPanel_GetHint(AObj: usize) -> *const c_char;
  pub fn FlowPanel_SetHint(AObj: usize, AValue: *const c_char);
  pub fn FlowPanel_GetComponentCount(AObj: usize) -> i32;
  pub fn FlowPanel_GetComponentIndex(AObj: usize) -> i32;
  pub fn FlowPanel_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn FlowPanel_GetOwner(AObj: usize) -> usize;
  pub fn FlowPanel_GetName(AObj: usize) -> *const c_char;
  pub fn FlowPanel_SetName(AObj: usize, AValue: *const c_char);
  pub fn FlowPanel_GetTag(AObj: usize) -> isize;
  pub fn FlowPanel_SetTag(AObj: usize, AValue: isize);
  pub fn FlowPanel_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn FlowPanel_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn FlowPanel_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn FlowPanel_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn FlowPanel_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetChildSizing(AObj: usize) -> usize;
  pub fn FlowPanel_SetChildSizing(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetBorderSpacing(AObj: usize) -> usize;
  pub fn FlowPanel_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn FlowPanel_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn FlowPanel_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn FlowPanel_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn FlowPanel_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn FlowPanel_StaticClassType() -> TClass;

  // ----------------- TCoolBar ----------------------
  pub fn CoolBar_Create(AOwner: usize) -> usize;
  pub fn CoolBar_Free(AObj: usize);
  pub fn CoolBar_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn CoolBar_CanFocus(AObj: usize) -> bool;
  pub fn CoolBar_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn CoolBar_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn CoolBar_DisableAlign(AObj: usize);
  pub fn CoolBar_EnableAlign(AObj: usize);
  pub fn CoolBar_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn CoolBar_Focused(AObj: usize) -> bool;
  pub fn CoolBar_HandleAllocated(AObj: usize) -> bool;
  pub fn CoolBar_Invalidate(AObj: usize);
  pub fn CoolBar_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn CoolBar_RemoveControl(AObj: usize, AControl: usize);
  pub fn CoolBar_Realign(AObj: usize);
  pub fn CoolBar_Repaint(AObj: usize);
  pub fn CoolBar_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn CoolBar_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn CoolBar_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn CoolBar_SetFocus(AObj: usize);
  pub fn CoolBar_Update(AObj: usize);
  pub fn CoolBar_BringToFront(AObj: usize);
  pub fn CoolBar_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CoolBar_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CoolBar_Dragging(AObj: usize) -> bool;
  pub fn CoolBar_HasParent(AObj: usize) -> bool;
  pub fn CoolBar_Hide(AObj: usize);
  pub fn CoolBar_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn CoolBar_Refresh(AObj: usize);
  pub fn CoolBar_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CoolBar_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CoolBar_SendToBack(AObj: usize);
  pub fn CoolBar_Show(AObj: usize);
  pub fn CoolBar_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn CoolBar_GetTextLen(AObj: usize) -> i32;
  pub fn CoolBar_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn CoolBar_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn CoolBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CoolBar_Assign(AObj: usize, Source: usize);
  pub fn CoolBar_ClassType(AObj: usize) -> TClass;
  pub fn CoolBar_ClassName(AObj: usize) -> *const c_char;
  pub fn CoolBar_InstanceSize(AObj: usize) -> i32;
  pub fn CoolBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CoolBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CoolBar_GetHashCode(AObj: usize) -> i32;
  pub fn CoolBar_ToString(AObj: usize) -> *const c_char;
  pub fn CoolBar_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CoolBar_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CoolBar_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn CoolBar_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn CoolBar_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn CoolBar_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn CoolBar_AnchorClient(AObj: usize, ASpace: i32);
  pub fn CoolBar_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CoolBar_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn CoolBar_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn CoolBar_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn CoolBar_GetAlign(AObj: usize) -> TAlign;
  pub fn CoolBar_SetAlign(AObj: usize, AValue: TAlign);
  pub fn CoolBar_GetAnchors(AObj: usize) -> TAnchors;
  pub fn CoolBar_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn CoolBar_GetAutoSize(AObj: usize) -> bool;
  pub fn CoolBar_SetAutoSize(AObj: usize, AValue: bool);
  pub fn CoolBar_GetBandBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn CoolBar_SetBandBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn CoolBar_GetBandMaximize(AObj: usize) -> TCoolBandMaximize;
  pub fn CoolBar_SetBandMaximize(AObj: usize, AValue: TCoolBandMaximize);
  pub fn CoolBar_GetBands(AObj: usize) -> usize;
  pub fn CoolBar_SetBands(AObj: usize, AValue: usize);
  pub fn CoolBar_GetBorderWidth(AObj: usize) -> i32;
  pub fn CoolBar_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn CoolBar_GetColor(AObj: usize) -> TColor;
  pub fn CoolBar_SetColor(AObj: usize, AValue: TColor);
  pub fn CoolBar_GetConstraints(AObj: usize) -> usize;
  pub fn CoolBar_SetConstraints(AObj: usize, AValue: usize);
  pub fn CoolBar_GetDockSite(AObj: usize) -> bool;
  pub fn CoolBar_SetDockSite(AObj: usize, AValue: bool);
  pub fn CoolBar_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn CoolBar_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CoolBar_GetDragCursor(AObj: usize) -> TCursor;
  pub fn CoolBar_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn CoolBar_GetDragKind(AObj: usize) -> TDragKind;
  pub fn CoolBar_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn CoolBar_GetDragMode(AObj: usize) -> TDragMode;
  pub fn CoolBar_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn CoolBar_GetEdgeBorders(AObj: usize) -> TEdgeBorders;
  pub fn CoolBar_SetEdgeBorders(AObj: usize, AValue: TEdgeBorders);
  pub fn CoolBar_GetEdgeInner(AObj: usize) -> TEdgeStyle;
  pub fn CoolBar_SetEdgeInner(AObj: usize, AValue: TEdgeStyle);
  pub fn CoolBar_GetEdgeOuter(AObj: usize) -> TEdgeStyle;
  pub fn CoolBar_SetEdgeOuter(AObj: usize, AValue: TEdgeStyle);
  pub fn CoolBar_GetEnabled(AObj: usize) -> bool;
  pub fn CoolBar_SetEnabled(AObj: usize, AValue: bool);
  pub fn CoolBar_GetFixedSize(AObj: usize) -> bool;
  pub fn CoolBar_SetFixedSize(AObj: usize, AValue: bool);
  pub fn CoolBar_GetFixedOrder(AObj: usize) -> bool;
  pub fn CoolBar_SetFixedOrder(AObj: usize, AValue: bool);
  pub fn CoolBar_GetFont(AObj: usize) -> usize;
  pub fn CoolBar_SetFont(AObj: usize, AValue: usize);
  pub fn CoolBar_GetImages(AObj: usize) -> usize;
  pub fn CoolBar_SetImages(AObj: usize, AValue: usize);
  pub fn CoolBar_GetParentColor(AObj: usize) -> bool;
  pub fn CoolBar_SetParentColor(AObj: usize, AValue: bool);
  pub fn CoolBar_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn CoolBar_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CoolBar_GetParentFont(AObj: usize) -> bool;
  pub fn CoolBar_SetParentFont(AObj: usize, AValue: bool);
  pub fn CoolBar_GetParentShowHint(AObj: usize) -> bool;
  pub fn CoolBar_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn CoolBar_GetBitmap(AObj: usize) -> usize;
  pub fn CoolBar_SetBitmap(AObj: usize, AValue: usize);
  pub fn CoolBar_GetPopupMenu(AObj: usize) -> usize;
  pub fn CoolBar_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn CoolBar_GetShowHint(AObj: usize) -> bool;
  pub fn CoolBar_SetShowHint(AObj: usize, AValue: bool);
  pub fn CoolBar_GetShowText(AObj: usize) -> bool;
  pub fn CoolBar_SetShowText(AObj: usize, AValue: bool);
  pub fn CoolBar_GetVertical(AObj: usize) -> bool;
  pub fn CoolBar_SetVertical(AObj: usize, AValue: bool);
  pub fn CoolBar_GetVisible(AObj: usize) -> bool;
  pub fn CoolBar_SetVisible(AObj: usize, AValue: bool);
  pub fn CoolBar_SetOnChange(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnClick(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnResize(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn CoolBar_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn CoolBar_GetDockClientCount(AObj: usize) -> i32;
  pub fn CoolBar_GetMouseInClient(AObj: usize) -> bool;
  pub fn CoolBar_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn CoolBar_GetBrush(AObj: usize) -> usize;
  pub fn CoolBar_GetControlCount(AObj: usize) -> i32;
  pub fn CoolBar_GetHandle(AObj: usize) -> HWND;
  pub fn CoolBar_GetParentWindow(AObj: usize) -> HWND;
  pub fn CoolBar_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn CoolBar_GetShowing(AObj: usize) -> bool;
  pub fn CoolBar_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn CoolBar_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn CoolBar_GetTabStop(AObj: usize) -> bool;
  pub fn CoolBar_SetTabStop(AObj: usize, AValue: bool);
  pub fn CoolBar_GetUseDockManager(AObj: usize) -> bool;
  pub fn CoolBar_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn CoolBar_GetAction(AObj: usize) -> usize;
  pub fn CoolBar_SetAction(AObj: usize, AValue: usize);
  pub fn CoolBar_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn CoolBar_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn CoolBar_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn CoolBar_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn CoolBar_GetClientHeight(AObj: usize) -> i32;
  pub fn CoolBar_SetClientHeight(AObj: usize, AValue: i32);
  pub fn CoolBar_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn CoolBar_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn CoolBar_GetClientWidth(AObj: usize) -> i32;
  pub fn CoolBar_SetClientWidth(AObj: usize, AValue: i32);
  pub fn CoolBar_GetControlState(AObj: usize) -> TControlState;
  pub fn CoolBar_SetControlState(AObj: usize, AValue: TControlState);
  pub fn CoolBar_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn CoolBar_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn CoolBar_GetFloating(AObj: usize) -> bool;
  pub fn CoolBar_GetParent(AObj: usize) -> usize;
  pub fn CoolBar_SetParent(AObj: usize, AValue: usize);
  pub fn CoolBar_GetLeft(AObj: usize) -> i32;
  pub fn CoolBar_SetLeft(AObj: usize, AValue: i32);
  pub fn CoolBar_GetTop(AObj: usize) -> i32;
  pub fn CoolBar_SetTop(AObj: usize, AValue: i32);
  pub fn CoolBar_GetWidth(AObj: usize) -> i32;
  pub fn CoolBar_SetWidth(AObj: usize, AValue: i32);
  pub fn CoolBar_GetHeight(AObj: usize) -> i32;
  pub fn CoolBar_SetHeight(AObj: usize, AValue: i32);
  pub fn CoolBar_GetCursor(AObj: usize) -> TCursor;
  pub fn CoolBar_SetCursor(AObj: usize, AValue: TCursor);
  pub fn CoolBar_GetHint(AObj: usize) -> *const c_char;
  pub fn CoolBar_SetHint(AObj: usize, AValue: *const c_char);
  pub fn CoolBar_GetComponentCount(AObj: usize) -> i32;
  pub fn CoolBar_GetComponentIndex(AObj: usize) -> i32;
  pub fn CoolBar_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn CoolBar_GetOwner(AObj: usize) -> usize;
  pub fn CoolBar_GetName(AObj: usize) -> *const c_char;
  pub fn CoolBar_SetName(AObj: usize, AValue: *const c_char);
  pub fn CoolBar_GetTag(AObj: usize) -> isize;
  pub fn CoolBar_SetTag(AObj: usize, AValue: isize);
  pub fn CoolBar_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn CoolBar_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn CoolBar_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn CoolBar_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn CoolBar_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn CoolBar_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn CoolBar_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn CoolBar_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn CoolBar_GetChildSizing(AObj: usize) -> usize;
  pub fn CoolBar_SetChildSizing(AObj: usize, AValue: usize);
  pub fn CoolBar_GetBorderSpacing(AObj: usize) -> usize;
  pub fn CoolBar_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn CoolBar_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn CoolBar_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn CoolBar_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn CoolBar_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn CoolBar_StaticClassType() -> TClass;

  // ----------------- TCoolBands ----------------------
  pub fn CoolBands_Create(AOwner: usize) -> usize;
  pub fn CoolBands_Free(AObj: usize);
  pub fn CoolBands_Add(AObj: usize) -> usize;
  pub fn CoolBands_FindBand(AObj: usize, AControl: usize) -> usize;
  pub fn CoolBands_Owner(AObj: usize) -> usize;
  pub fn CoolBands_Assign(AObj: usize, Source: usize);
  pub fn CoolBands_BeginUpdate(AObj: usize);
  pub fn CoolBands_Clear(AObj: usize);
  pub fn CoolBands_Delete(AObj: usize, Index: i32);
  pub fn CoolBands_EndUpdate(AObj: usize);
  pub fn CoolBands_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn CoolBands_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CoolBands_Insert(AObj: usize, Index: i32) -> usize;
  pub fn CoolBands_ClassType(AObj: usize) -> TClass;
  pub fn CoolBands_ClassName(AObj: usize) -> *const c_char;
  pub fn CoolBands_InstanceSize(AObj: usize) -> i32;
  pub fn CoolBands_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CoolBands_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CoolBands_GetHashCode(AObj: usize) -> i32;
  pub fn CoolBands_ToString(AObj: usize) -> *const c_char;
  pub fn CoolBands_GetCount(AObj: usize) -> i32;
  pub fn CoolBands_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn CoolBands_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn CoolBands_StaticClassType() -> TClass;

  // ----------------- TCoolBand ----------------------
  pub fn CoolBand_Create(AOwner: usize) -> usize;
  pub fn CoolBand_Free(AObj: usize);
  pub fn CoolBand_Assign(AObj: usize, Source: usize);
  pub fn CoolBand_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CoolBand_ClassType(AObj: usize) -> TClass;
  pub fn CoolBand_ClassName(AObj: usize) -> *const c_char;
  pub fn CoolBand_InstanceSize(AObj: usize) -> i32;
  pub fn CoolBand_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CoolBand_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CoolBand_GetHashCode(AObj: usize) -> i32;
  pub fn CoolBand_ToString(AObj: usize) -> *const c_char;
  pub fn CoolBand_GetHeight(AObj: usize) -> i32;
  pub fn CoolBand_GetBitmap(AObj: usize) -> usize;
  pub fn CoolBand_SetBitmap(AObj: usize, AValue: usize);
  pub fn CoolBand_GetBorderStyle(AObj: usize) -> TBorderStyle;
  pub fn CoolBand_SetBorderStyle(AObj: usize, AValue: TBorderStyle);
  pub fn CoolBand_GetBreak(AObj: usize) -> bool;
  pub fn CoolBand_SetBreak(AObj: usize, AValue: bool);
  pub fn CoolBand_GetColor(AObj: usize) -> TColor;
  pub fn CoolBand_SetColor(AObj: usize, AValue: TColor);
  pub fn CoolBand_GetControl(AObj: usize) -> usize;
  pub fn CoolBand_SetControl(AObj: usize, AValue: usize);
  pub fn CoolBand_GetFixedBackground(AObj: usize) -> bool;
  pub fn CoolBand_SetFixedBackground(AObj: usize, AValue: bool);
  pub fn CoolBand_GetFixedSize(AObj: usize) -> bool;
  pub fn CoolBand_SetFixedSize(AObj: usize, AValue: bool);
  pub fn CoolBand_GetHorizontalOnly(AObj: usize) -> bool;
  pub fn CoolBand_SetHorizontalOnly(AObj: usize, AValue: bool);
  pub fn CoolBand_GetImageIndex(AObj: usize) -> i32;
  pub fn CoolBand_SetImageIndex(AObj: usize, AValue: i32);
  pub fn CoolBand_GetMinHeight(AObj: usize) -> i32;
  pub fn CoolBand_SetMinHeight(AObj: usize, AValue: i32);
  pub fn CoolBand_GetMinWidth(AObj: usize) -> i32;
  pub fn CoolBand_SetMinWidth(AObj: usize, AValue: i32);
  pub fn CoolBand_GetParentColor(AObj: usize) -> bool;
  pub fn CoolBand_SetParentColor(AObj: usize, AValue: bool);
  pub fn CoolBand_GetParentBitmap(AObj: usize) -> bool;
  pub fn CoolBand_SetParentBitmap(AObj: usize, AValue: bool);
  pub fn CoolBand_GetText(AObj: usize) -> *const c_char;
  pub fn CoolBand_SetText(AObj: usize, AValue: *const c_char);
  pub fn CoolBand_GetVisible(AObj: usize) -> bool;
  pub fn CoolBand_SetVisible(AObj: usize, AValue: bool);
  pub fn CoolBand_GetWidth(AObj: usize) -> i32;
  pub fn CoolBand_SetWidth(AObj: usize, AValue: i32);
  pub fn CoolBand_GetCollection(AObj: usize) -> usize;
  pub fn CoolBand_SetCollection(AObj: usize, AValue: usize);
  pub fn CoolBand_GetIndex(AObj: usize) -> i32;
  pub fn CoolBand_SetIndex(AObj: usize, AValue: i32);
  pub fn CoolBand_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn CoolBand_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn CoolBand_StaticClassType() -> TClass;

  // ----------------- TCollection ----------------------
  pub fn Collection_Create(AOwner: usize) -> usize;
  pub fn Collection_Free(AObj: usize);
  pub fn Collection_Owner(AObj: usize) -> usize;
  pub fn Collection_Add(AObj: usize) -> usize;
  pub fn Collection_Assign(AObj: usize, Source: usize);
  pub fn Collection_BeginUpdate(AObj: usize);
  pub fn Collection_Clear(AObj: usize);
  pub fn Collection_Delete(AObj: usize, Index: i32);
  pub fn Collection_EndUpdate(AObj: usize);
  pub fn Collection_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn Collection_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Collection_Insert(AObj: usize, Index: i32) -> usize;
  pub fn Collection_ClassType(AObj: usize) -> TClass;
  pub fn Collection_ClassName(AObj: usize) -> *const c_char;
  pub fn Collection_InstanceSize(AObj: usize) -> i32;
  pub fn Collection_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Collection_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Collection_GetHashCode(AObj: usize) -> i32;
  pub fn Collection_ToString(AObj: usize) -> *const c_char;
  pub fn Collection_GetCount(AObj: usize) -> i32;
  pub fn Collection_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn Collection_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn Collection_StaticClassType() -> TClass;

  // ----------------- TPrinter ----------------------
  pub fn Printer_Create() -> usize;
  pub fn Printer_Free(AObj: usize);
  pub fn Printer_Abort(AObj: usize);
  pub fn Printer_BeginDoc(AObj: usize);
  pub fn Printer_EndDoc(AObj: usize);
  pub fn Printer_NewPage(AObj: usize);
  pub fn Printer_Refresh(AObj: usize);
  pub fn Printer_ClassType(AObj: usize) -> TClass;
  pub fn Printer_ClassName(AObj: usize) -> *const c_char;
  pub fn Printer_InstanceSize(AObj: usize) -> i32;
  pub fn Printer_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Printer_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Printer_GetHashCode(AObj: usize) -> i32;
  pub fn Printer_ToString(AObj: usize) -> *const c_char;
  pub fn Printer_GetAborted(AObj: usize) -> bool;
  pub fn Printer_GetCanvas(AObj: usize) -> usize;
  pub fn Printer_GetCopies(AObj: usize) -> i32;
  pub fn Printer_SetCopies(AObj: usize, AValue: i32);
  pub fn Printer_GetFonts(AObj: usize) -> usize;
  pub fn Printer_GetOrientation(AObj: usize) -> TPrinterOrientation;
  pub fn Printer_SetOrientation(AObj: usize, AValue: TPrinterOrientation);
  pub fn Printer_GetPageHeight(AObj: usize) -> i32;
  pub fn Printer_GetPageWidth(AObj: usize) -> i32;
  pub fn Printer_GetPageNumber(AObj: usize) -> i32;
  pub fn Printer_GetPrinterIndex(AObj: usize) -> i32;
  pub fn Printer_SetPrinterIndex(AObj: usize, AValue: i32);
  pub fn Printer_GetPrinting(AObj: usize) -> bool;
  pub fn Printer_GetPrinters(AObj: usize) -> usize;
  pub fn Printer_GetTitle(AObj: usize) -> *const c_char;
  pub fn Printer_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn Printer_StaticClassType() -> TClass;
  pub fn Printer_SetPrinter(Obj: usize, aName: *const c_char);

  // ----------------- TTaskDialog ----------------------
  pub fn TaskDialog_Create(AOwner: usize) -> usize;
  pub fn TaskDialog_Free(AObj: usize);
  pub fn TaskDialog_Execute(AObj: usize) -> bool;
  pub fn TaskDialog_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn TaskDialog_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TaskDialog_HasParent(AObj: usize) -> bool;
  pub fn TaskDialog_Assign(AObj: usize, Source: usize);
  pub fn TaskDialog_ClassType(AObj: usize) -> TClass;
  pub fn TaskDialog_ClassName(AObj: usize) -> *const c_char;
  pub fn TaskDialog_InstanceSize(AObj: usize) -> i32;
  pub fn TaskDialog_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TaskDialog_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TaskDialog_GetHashCode(AObj: usize) -> i32;
  pub fn TaskDialog_ToString(AObj: usize) -> *const c_char;
  pub fn TaskDialog_GetButtons(AObj: usize) -> usize;
  pub fn TaskDialog_SetButtons(AObj: usize, AValue: usize);
  pub fn TaskDialog_GetCaption(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetCommonButtons(AObj: usize) -> TTaskDialogCommonButtons;
  pub fn TaskDialog_SetCommonButtons(AObj: usize, AValue: TTaskDialogCommonButtons);
  pub fn TaskDialog_GetDefaultButton(AObj: usize) -> TTaskDialogCommonButton;
  pub fn TaskDialog_SetDefaultButton(AObj: usize, AValue: TTaskDialogCommonButton);
  pub fn TaskDialog_GetExpandButtonCaption(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetExpandButtonCaption(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetExpandedText(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetExpandedText(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetFlags(AObj: usize) -> TTaskDialogFlags;
  pub fn TaskDialog_SetFlags(AObj: usize, AValue: TTaskDialogFlags);
  pub fn TaskDialog_GetFooterIcon(AObj: usize) -> TTaskDialogIcon;
  pub fn TaskDialog_SetFooterIcon(AObj: usize, AValue: TTaskDialogIcon);
  pub fn TaskDialog_GetFooterText(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetFooterText(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetMainIcon(AObj: usize) -> TTaskDialogIcon;
  pub fn TaskDialog_SetMainIcon(AObj: usize, AValue: TTaskDialogIcon);
  pub fn TaskDialog_GetRadioButtons(AObj: usize) -> usize;
  pub fn TaskDialog_SetRadioButtons(AObj: usize, AValue: usize);
  pub fn TaskDialog_GetText(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetText(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetTitle(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetTitle(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetVerificationText(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetVerificationText(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_SetOnButtonClicked(AObj: usize, AEventId: usize);
  pub fn TaskDialog_GetButton(AObj: usize) -> usize;
  pub fn TaskDialog_SetButton(AObj: usize, AValue: usize);
  pub fn TaskDialog_GetModalResult(AObj: usize) -> TModalResult;
  pub fn TaskDialog_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn TaskDialog_GetRadioButton(AObj: usize) -> usize;
  pub fn TaskDialog_GetComponentCount(AObj: usize) -> i32;
  pub fn TaskDialog_GetComponentIndex(AObj: usize) -> i32;
  pub fn TaskDialog_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn TaskDialog_GetOwner(AObj: usize) -> usize;
  pub fn TaskDialog_GetName(AObj: usize) -> *const c_char;
  pub fn TaskDialog_SetName(AObj: usize, AValue: *const c_char);
  pub fn TaskDialog_GetTag(AObj: usize) -> isize;
  pub fn TaskDialog_SetTag(AObj: usize, AValue: isize);
  pub fn TaskDialog_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn TaskDialog_StaticClassType() -> TClass;

  // ----------------- TTaskDialogButtons ----------------------
  pub fn TaskDialogButtons_Add(AObj: usize) -> usize;
  pub fn TaskDialogButtons_FindButton(AObj: usize, AModalResult: TModalResult) -> usize;
  pub fn TaskDialogButtons_Owner(AObj: usize) -> usize;
  pub fn TaskDialogButtons_Assign(AObj: usize, Source: usize);
  pub fn TaskDialogButtons_BeginUpdate(AObj: usize);
  pub fn TaskDialogButtons_Clear(AObj: usize);
  pub fn TaskDialogButtons_Delete(AObj: usize, Index: i32);
  pub fn TaskDialogButtons_EndUpdate(AObj: usize);
  pub fn TaskDialogButtons_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn TaskDialogButtons_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtons_Insert(AObj: usize, Index: i32) -> usize;
  pub fn TaskDialogButtons_ClassType(AObj: usize) -> TClass;
  pub fn TaskDialogButtons_ClassName(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtons_InstanceSize(AObj: usize) -> i32;
  pub fn TaskDialogButtons_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TaskDialogButtons_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TaskDialogButtons_GetHashCode(AObj: usize) -> i32;
  pub fn TaskDialogButtons_ToString(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtons_GetDefaultButton(AObj: usize) -> usize;
  pub fn TaskDialogButtons_SetDefaultButton(AObj: usize, AValue: usize);
  pub fn TaskDialogButtons_GetCount(AObj: usize) -> i32;
  pub fn TaskDialogButtons_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn TaskDialogButtons_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn TaskDialogButtons_StaticClassType() -> TClass;

  // ----------------- TTaskDialogButtonItem ----------------------
  pub fn TaskDialogButtonItem_Create(AOwner: usize) -> usize;
  pub fn TaskDialogButtonItem_Free(AObj: usize);
  pub fn TaskDialogButtonItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtonItem_Assign(AObj: usize, Source: usize);
  pub fn TaskDialogButtonItem_ClassType(AObj: usize) -> TClass;
  pub fn TaskDialogButtonItem_ClassName(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtonItem_InstanceSize(AObj: usize) -> i32;
  pub fn TaskDialogButtonItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TaskDialogButtonItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TaskDialogButtonItem_GetHashCode(AObj: usize) -> i32;
  pub fn TaskDialogButtonItem_ToString(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtonItem_GetModalResult(AObj: usize) -> TModalResult;
  pub fn TaskDialogButtonItem_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn TaskDialogButtonItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtonItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogButtonItem_GetDefault(AObj: usize) -> bool;
  pub fn TaskDialogButtonItem_SetDefault(AObj: usize, AValue: bool);
  pub fn TaskDialogButtonItem_GetCollection(AObj: usize) -> usize;
  pub fn TaskDialogButtonItem_SetCollection(AObj: usize, AValue: usize);
  pub fn TaskDialogButtonItem_GetIndex(AObj: usize) -> i32;
  pub fn TaskDialogButtonItem_SetIndex(AObj: usize, AValue: i32);
  pub fn TaskDialogButtonItem_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn TaskDialogButtonItem_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogButtonItem_StaticClassType() -> TClass;

  // ----------------- TTaskDialogRadioButtonItem ----------------------
  pub fn TaskDialogRadioButtonItem_Create(AOwner: usize) -> usize;
  pub fn TaskDialogRadioButtonItem_Free(AObj: usize);
  pub fn TaskDialogRadioButtonItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TaskDialogRadioButtonItem_Assign(AObj: usize, Source: usize);
  pub fn TaskDialogRadioButtonItem_ClassType(AObj: usize) -> TClass;
  pub fn TaskDialogRadioButtonItem_ClassName(AObj: usize) -> *const c_char;
  pub fn TaskDialogRadioButtonItem_InstanceSize(AObj: usize) -> i32;
  pub fn TaskDialogRadioButtonItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TaskDialogRadioButtonItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TaskDialogRadioButtonItem_GetHashCode(AObj: usize) -> i32;
  pub fn TaskDialogRadioButtonItem_ToString(AObj: usize) -> *const c_char;
  pub fn TaskDialogRadioButtonItem_GetModalResult(AObj: usize) -> TModalResult;
  pub fn TaskDialogRadioButtonItem_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn TaskDialogRadioButtonItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn TaskDialogRadioButtonItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogRadioButtonItem_GetDefault(AObj: usize) -> bool;
  pub fn TaskDialogRadioButtonItem_SetDefault(AObj: usize, AValue: bool);
  pub fn TaskDialogRadioButtonItem_GetCollection(AObj: usize) -> usize;
  pub fn TaskDialogRadioButtonItem_SetCollection(AObj: usize, AValue: usize);
  pub fn TaskDialogRadioButtonItem_GetIndex(AObj: usize) -> i32;
  pub fn TaskDialogRadioButtonItem_SetIndex(AObj: usize, AValue: i32);
  pub fn TaskDialogRadioButtonItem_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn TaskDialogRadioButtonItem_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogRadioButtonItem_StaticClassType() -> TClass;

  // ----------------- TTaskDialogBaseButtonItem ----------------------
  pub fn TaskDialogBaseButtonItem_Create(AOwner: usize) -> usize;
  pub fn TaskDialogBaseButtonItem_Free(AObj: usize);
  pub fn TaskDialogBaseButtonItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn TaskDialogBaseButtonItem_Assign(AObj: usize, Source: usize);
  pub fn TaskDialogBaseButtonItem_ClassType(AObj: usize) -> TClass;
  pub fn TaskDialogBaseButtonItem_ClassName(AObj: usize) -> *const c_char;
  pub fn TaskDialogBaseButtonItem_InstanceSize(AObj: usize) -> i32;
  pub fn TaskDialogBaseButtonItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn TaskDialogBaseButtonItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn TaskDialogBaseButtonItem_GetHashCode(AObj: usize) -> i32;
  pub fn TaskDialogBaseButtonItem_ToString(AObj: usize) -> *const c_char;
  pub fn TaskDialogBaseButtonItem_GetModalResult(AObj: usize) -> TModalResult;
  pub fn TaskDialogBaseButtonItem_SetModalResult(AObj: usize, AValue: TModalResult);
  pub fn TaskDialogBaseButtonItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn TaskDialogBaseButtonItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogBaseButtonItem_GetDefault(AObj: usize) -> bool;
  pub fn TaskDialogBaseButtonItem_SetDefault(AObj: usize, AValue: bool);
  pub fn TaskDialogBaseButtonItem_GetCollection(AObj: usize) -> usize;
  pub fn TaskDialogBaseButtonItem_SetCollection(AObj: usize, AValue: usize);
  pub fn TaskDialogBaseButtonItem_GetIndex(AObj: usize) -> i32;
  pub fn TaskDialogBaseButtonItem_SetIndex(AObj: usize, AValue: i32);
  pub fn TaskDialogBaseButtonItem_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn TaskDialogBaseButtonItem_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn TaskDialogBaseButtonItem_StaticClassType() -> TClass;

  // ----------------- TComboBoxEx ----------------------
  pub fn ComboBoxEx_Create(AOwner: usize) -> usize;
  pub fn ComboBoxEx_Free(AObj: usize);
  pub fn ComboBoxEx_Focused(AObj: usize) -> bool;
  pub fn ComboBoxEx_AddItem(AObj: usize, Item: *const c_char, AObject: usize);
  pub fn ComboBoxEx_Clear(AObj: usize);
  pub fn ComboBoxEx_ClearSelection(AObj: usize);
  pub fn ComboBoxEx_DeleteSelected(AObj: usize);
  pub fn ComboBoxEx_SelectAll(AObj: usize);
  pub fn ComboBoxEx_CanFocus(AObj: usize) -> bool;
  pub fn ComboBoxEx_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ComboBoxEx_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ComboBoxEx_DisableAlign(AObj: usize);
  pub fn ComboBoxEx_EnableAlign(AObj: usize);
  pub fn ComboBoxEx_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ComboBoxEx_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ComboBoxEx_HandleAllocated(AObj: usize) -> bool;
  pub fn ComboBoxEx_InsertControl(AObj: usize, AControl: usize);
  pub fn ComboBoxEx_Invalidate(AObj: usize);
  pub fn ComboBoxEx_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ComboBoxEx_RemoveControl(AObj: usize, AControl: usize);
  pub fn ComboBoxEx_Realign(AObj: usize);
  pub fn ComboBoxEx_Repaint(AObj: usize);
  pub fn ComboBoxEx_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ComboBoxEx_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ComboBoxEx_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ComboBoxEx_SetFocus(AObj: usize);
  pub fn ComboBoxEx_Update(AObj: usize);
  pub fn ComboBoxEx_BringToFront(AObj: usize);
  pub fn ComboBoxEx_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ComboBoxEx_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ComboBoxEx_Dragging(AObj: usize) -> bool;
  pub fn ComboBoxEx_HasParent(AObj: usize) -> bool;
  pub fn ComboBoxEx_Hide(AObj: usize);
  pub fn ComboBoxEx_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ComboBoxEx_Refresh(AObj: usize);
  pub fn ComboBoxEx_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ComboBoxEx_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ComboBoxEx_SendToBack(AObj: usize);
  pub fn ComboBoxEx_Show(AObj: usize);
  pub fn ComboBoxEx_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ComboBoxEx_GetTextLen(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ComboBoxEx_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ComboBoxEx_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_Assign(AObj: usize, Source: usize);
  pub fn ComboBoxEx_ClassType(AObj: usize) -> TClass;
  pub fn ComboBoxEx_ClassName(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_InstanceSize(AObj: usize) -> i32;
  pub fn ComboBoxEx_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ComboBoxEx_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ComboBoxEx_GetHashCode(AObj: usize) -> i32;
  pub fn ComboBoxEx_ToString(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ComboBoxEx_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ComboBoxEx_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ComboBoxEx_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ComboBoxEx_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ComboBoxEx_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ComboBoxEx_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ComboBoxEx_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ComboBoxEx_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ComboBoxEx_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ComboBoxEx_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ComboBoxEx_GetAlign(AObj: usize) -> TAlign;
  pub fn ComboBoxEx_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ComboBoxEx_GetAutoCompleteOptions(AObj: usize) -> TAutoCompleteOptions;
  pub fn ComboBoxEx_SetAutoCompleteOptions(AObj: usize, AValue: TAutoCompleteOptions);
  pub fn ComboBoxEx_GetItemsEx(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetItemsEx(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetStyle(AObj: usize) -> TComboBoxExStyle;
  pub fn ComboBoxEx_SetStyle(AObj: usize, AValue: TComboBoxExStyle);
  pub fn ComboBoxEx_GetStyleEx(AObj: usize) -> TComboBoxExStyles;
  pub fn ComboBoxEx_SetStyleEx(AObj: usize, AValue: TComboBoxExStyles);
  pub fn ComboBoxEx_GetAction(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetAction(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ComboBoxEx_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ComboBoxEx_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ComboBoxEx_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ComboBoxEx_GetColor(AObj: usize) -> TColor;
  pub fn ComboBoxEx_SetColor(AObj: usize, AValue: TColor);
  pub fn ComboBoxEx_GetConstraints(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetConstraints(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ComboBoxEx_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ComboBoxEx_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ComboBoxEx_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ComboBoxEx_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ComboBoxEx_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ComboBoxEx_GetEnabled(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetEnabled(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetFont(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetFont(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetItemHeight(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetItemHeight(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetMaxLength(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetMaxLength(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetParentColor(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetParentColor(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetParentFont(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetParentFont(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetParentShowHint(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetPopupMenu(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetShowHint(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetShowHint(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ComboBoxEx_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ComboBoxEx_GetTabStop(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetTabStop(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetText(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_SetText(AObj: usize, AValue: *const c_char);
  pub fn ComboBoxEx_GetVisible(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetVisible(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnDropDown(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnSelect(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn ComboBoxEx_GetImages(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetImages(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetDropDownCount(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetDropDownCount(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetSelText(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_SetSelText(AObj: usize, AValue: *const c_char);
  pub fn ComboBoxEx_GetCanvas(AObj: usize) -> usize;
  pub fn ComboBoxEx_GetDroppedDown(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetDroppedDown(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetItems(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetItems(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetSelLength(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetSelLength(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetSelStart(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetSelStart(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetItemIndex(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetItemIndex(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetDockClientCount(AObj: usize) -> i32;
  pub fn ComboBoxEx_GetDockSite(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetDockSite(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetMouseInClient(AObj: usize) -> bool;
  pub fn ComboBoxEx_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ComboBoxEx_GetBrush(AObj: usize) -> usize;
  pub fn ComboBoxEx_GetControlCount(AObj: usize) -> i32;
  pub fn ComboBoxEx_GetHandle(AObj: usize) -> HWND;
  pub fn ComboBoxEx_GetParentWindow(AObj: usize) -> HWND;
  pub fn ComboBoxEx_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ComboBoxEx_GetShowing(AObj: usize) -> bool;
  pub fn ComboBoxEx_GetUseDockManager(AObj: usize) -> bool;
  pub fn ComboBoxEx_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ComboBoxEx_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ComboBoxEx_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ComboBoxEx_GetClientHeight(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ComboBoxEx_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ComboBoxEx_GetClientWidth(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetControlState(AObj: usize) -> TControlState;
  pub fn ComboBoxEx_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ComboBoxEx_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ComboBoxEx_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ComboBoxEx_GetFloating(AObj: usize) -> bool;
  pub fn ComboBoxEx_GetParent(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetParent(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetLeft(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetLeft(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetTop(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetTop(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetWidth(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetWidth(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetHeight(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetHeight(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetCursor(AObj: usize) -> TCursor;
  pub fn ComboBoxEx_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ComboBoxEx_GetHint(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ComboBoxEx_GetComponentCount(AObj: usize) -> i32;
  pub fn ComboBoxEx_GetComponentIndex(AObj: usize) -> i32;
  pub fn ComboBoxEx_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ComboBoxEx_GetOwner(AObj: usize) -> usize;
  pub fn ComboBoxEx_GetName(AObj: usize) -> *const c_char;
  pub fn ComboBoxEx_SetName(AObj: usize, AValue: *const c_char);
  pub fn ComboBoxEx_GetTag(AObj: usize) -> isize;
  pub fn ComboBoxEx_SetTag(AObj: usize, AValue: isize);
  pub fn ComboBoxEx_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetChildSizing(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ComboBoxEx_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ComboBoxEx_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ComboBoxEx_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ComboBoxEx_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ComboBoxEx_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ComboBoxEx_StaticClassType() -> TClass;

  // ----------------- TComboExItems ----------------------
  pub fn ComboExItems_Add(AObj: usize) -> usize;
  pub fn ComboExItems_AddItem(AObj: usize, Caption: *const c_char, ImageIndex: i32, SelectedImageIndex: i32, OverlayImageIndex: i32, Indent: i32, Data: usize) -> usize;
  pub fn ComboExItems_Insert(AObj: usize, Index: i32) -> usize;
  pub fn ComboExItems_Owner(AObj: usize) -> usize;
  pub fn ComboExItems_Assign(AObj: usize, Source: usize);
  pub fn ComboExItems_BeginUpdate(AObj: usize);
  pub fn ComboExItems_Clear(AObj: usize);
  pub fn ComboExItems_Delete(AObj: usize, Index: i32);
  pub fn ComboExItems_EndUpdate(AObj: usize);
  pub fn ComboExItems_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn ComboExItems_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ComboExItems_ClassType(AObj: usize) -> TClass;
  pub fn ComboExItems_ClassName(AObj: usize) -> *const c_char;
  pub fn ComboExItems_InstanceSize(AObj: usize) -> i32;
  pub fn ComboExItems_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ComboExItems_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ComboExItems_GetHashCode(AObj: usize) -> i32;
  pub fn ComboExItems_ToString(AObj: usize) -> *const c_char;
  pub fn ComboExItems_GetCount(AObj: usize) -> i32;
  pub fn ComboExItems_GetComboItems(AObj: usize, Index: i32) -> usize;
  pub fn ComboExItems_StaticClassType() -> TClass;

  // ----------------- TComboExItem ----------------------
  pub fn ComboExItem_Assign(AObj: usize, Source: usize);
  pub fn ComboExItem_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ComboExItem_ClassType(AObj: usize) -> TClass;
  pub fn ComboExItem_ClassName(AObj: usize) -> *const c_char;
  pub fn ComboExItem_InstanceSize(AObj: usize) -> i32;
  pub fn ComboExItem_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ComboExItem_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ComboExItem_GetHashCode(AObj: usize) -> i32;
  pub fn ComboExItem_ToString(AObj: usize) -> *const c_char;
  pub fn ComboExItem_GetIndent(AObj: usize) -> i32;
  pub fn ComboExItem_SetIndent(AObj: usize, AValue: i32);
  pub fn ComboExItem_GetOverlayImageIndex(AObj: usize) -> i32;
  pub fn ComboExItem_SetOverlayImageIndex(AObj: usize, AValue: i32);
  pub fn ComboExItem_GetData(AObj: usize) -> usize;
  pub fn ComboExItem_SetData(AObj: usize, AValue: usize);
  pub fn ComboExItem_GetCaption(AObj: usize) -> *const c_char;
  pub fn ComboExItem_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ComboExItem_GetImageIndex(AObj: usize) -> i32;
  pub fn ComboExItem_SetImageIndex(AObj: usize, AValue: i32);
  pub fn ComboExItem_GetCollection(AObj: usize) -> usize;
  pub fn ComboExItem_SetCollection(AObj: usize, AValue: usize);
  pub fn ComboExItem_GetIndex(AObj: usize) -> i32;
  pub fn ComboExItem_SetIndex(AObj: usize, AValue: i32);
  pub fn ComboExItem_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn ComboExItem_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn ComboExItem_StaticClassType() -> TClass;

  // ----------------- TFrame ----------------------
  pub fn Frame_Create(AOwner: usize) -> usize;
  pub fn Frame_Free(AObj: usize);
  pub fn Frame_ScrollInView(AObj: usize, AControl: usize);
  pub fn Frame_CanFocus(AObj: usize) -> bool;
  pub fn Frame_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn Frame_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn Frame_DisableAlign(AObj: usize);
  pub fn Frame_EnableAlign(AObj: usize);
  pub fn Frame_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn Frame_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn Frame_Focused(AObj: usize) -> bool;
  pub fn Frame_HandleAllocated(AObj: usize) -> bool;
  pub fn Frame_InsertControl(AObj: usize, AControl: usize);
  pub fn Frame_Invalidate(AObj: usize);
  pub fn Frame_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn Frame_RemoveControl(AObj: usize, AControl: usize);
  pub fn Frame_Realign(AObj: usize);
  pub fn Frame_Repaint(AObj: usize);
  pub fn Frame_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn Frame_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn Frame_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn Frame_SetFocus(AObj: usize);
  pub fn Frame_Update(AObj: usize);
  pub fn Frame_BringToFront(AObj: usize);
  pub fn Frame_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Frame_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Frame_Dragging(AObj: usize) -> bool;
  pub fn Frame_HasParent(AObj: usize) -> bool;
  pub fn Frame_Hide(AObj: usize);
  pub fn Frame_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn Frame_Refresh(AObj: usize);
  pub fn Frame_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn Frame_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn Frame_SendToBack(AObj: usize);
  pub fn Frame_Show(AObj: usize);
  pub fn Frame_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn Frame_GetTextLen(AObj: usize) -> i32;
  pub fn Frame_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn Frame_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn Frame_GetNamePath(AObj: usize) -> *const c_char;
  pub fn Frame_Assign(AObj: usize, Source: usize);
  pub fn Frame_ClassType(AObj: usize) -> TClass;
  pub fn Frame_ClassName(AObj: usize) -> *const c_char;
  pub fn Frame_InstanceSize(AObj: usize) -> i32;
  pub fn Frame_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn Frame_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn Frame_GetHashCode(AObj: usize) -> i32;
  pub fn Frame_ToString(AObj: usize) -> *const c_char;
  pub fn Frame_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Frame_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn Frame_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn Frame_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn Frame_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn Frame_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn Frame_AnchorClient(AObj: usize, ASpace: i32);
  pub fn Frame_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn Frame_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn Frame_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn Frame_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn Frame_GetDesignTimePPI(AObj: usize) -> i32;
  pub fn Frame_SetDesignTimePPI(AObj: usize, AValue: i32);
  pub fn Frame_GetAlign(AObj: usize) -> TAlign;
  pub fn Frame_SetAlign(AObj: usize, AValue: TAlign);
  pub fn Frame_GetAnchors(AObj: usize) -> TAnchors;
  pub fn Frame_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn Frame_GetAutoScroll(AObj: usize) -> bool;
  pub fn Frame_SetAutoScroll(AObj: usize, AValue: bool);
  pub fn Frame_GetAutoSize(AObj: usize) -> bool;
  pub fn Frame_SetAutoSize(AObj: usize, AValue: bool);
  pub fn Frame_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn Frame_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn Frame_GetConstraints(AObj: usize) -> usize;
  pub fn Frame_SetConstraints(AObj: usize, AValue: usize);
  pub fn Frame_GetDockSite(AObj: usize) -> bool;
  pub fn Frame_SetDockSite(AObj: usize, AValue: bool);
  pub fn Frame_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn Frame_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Frame_GetDragCursor(AObj: usize) -> TCursor;
  pub fn Frame_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn Frame_GetDragKind(AObj: usize) -> TDragKind;
  pub fn Frame_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn Frame_GetDragMode(AObj: usize) -> TDragMode;
  pub fn Frame_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn Frame_GetEnabled(AObj: usize) -> bool;
  pub fn Frame_SetEnabled(AObj: usize, AValue: bool);
  pub fn Frame_GetColor(AObj: usize) -> TColor;
  pub fn Frame_SetColor(AObj: usize, AValue: TColor);
  pub fn Frame_GetFont(AObj: usize) -> usize;
  pub fn Frame_SetFont(AObj: usize, AValue: usize);
  pub fn Frame_GetParentColor(AObj: usize) -> bool;
  pub fn Frame_SetParentColor(AObj: usize, AValue: bool);
  pub fn Frame_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn Frame_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn Frame_GetParentFont(AObj: usize) -> bool;
  pub fn Frame_SetParentFont(AObj: usize, AValue: bool);
  pub fn Frame_GetParentShowHint(AObj: usize) -> bool;
  pub fn Frame_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn Frame_GetPopupMenu(AObj: usize) -> usize;
  pub fn Frame_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn Frame_GetShowHint(AObj: usize) -> bool;
  pub fn Frame_SetShowHint(AObj: usize, AValue: bool);
  pub fn Frame_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn Frame_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn Frame_GetTabStop(AObj: usize) -> bool;
  pub fn Frame_SetTabStop(AObj: usize, AValue: bool);
  pub fn Frame_GetVisible(AObj: usize) -> bool;
  pub fn Frame_SetVisible(AObj: usize, AValue: bool);
  pub fn Frame_SetOnAlignPosition(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnClick(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnContextPopup(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnDockDrop(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnEndDock(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnExit(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnGetSiteInfo(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnResize(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnStartDock(AObj: usize, AEventId: usize);
  pub fn Frame_SetOnUnDock(AObj: usize, AEventId: usize);
  pub fn Frame_GetHorzScrollBar(AObj: usize) -> usize;
  pub fn Frame_SetHorzScrollBar(AObj: usize, AValue: usize);
  pub fn Frame_GetVertScrollBar(AObj: usize) -> usize;
  pub fn Frame_SetVertScrollBar(AObj: usize, AValue: usize);
  pub fn Frame_GetDockClientCount(AObj: usize) -> i32;
  pub fn Frame_GetMouseInClient(AObj: usize) -> bool;
  pub fn Frame_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn Frame_GetBrush(AObj: usize) -> usize;
  pub fn Frame_GetControlCount(AObj: usize) -> i32;
  pub fn Frame_GetHandle(AObj: usize) -> HWND;
  pub fn Frame_GetParentWindow(AObj: usize) -> HWND;
  pub fn Frame_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn Frame_GetShowing(AObj: usize) -> bool;
  pub fn Frame_GetUseDockManager(AObj: usize) -> bool;
  pub fn Frame_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn Frame_GetAction(AObj: usize) -> usize;
  pub fn Frame_SetAction(AObj: usize, AValue: usize);
  pub fn Frame_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn Frame_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn Frame_GetClientHeight(AObj: usize) -> i32;
  pub fn Frame_SetClientHeight(AObj: usize, AValue: i32);
  pub fn Frame_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn Frame_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn Frame_GetClientWidth(AObj: usize) -> i32;
  pub fn Frame_SetClientWidth(AObj: usize, AValue: i32);
  pub fn Frame_GetControlState(AObj: usize) -> TControlState;
  pub fn Frame_SetControlState(AObj: usize, AValue: TControlState);
  pub fn Frame_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn Frame_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn Frame_GetFloating(AObj: usize) -> bool;
  pub fn Frame_GetParent(AObj: usize) -> usize;
  pub fn Frame_SetParent(AObj: usize, AValue: usize);
  pub fn Frame_GetLeft(AObj: usize) -> i32;
  pub fn Frame_SetLeft(AObj: usize, AValue: i32);
  pub fn Frame_GetTop(AObj: usize) -> i32;
  pub fn Frame_SetTop(AObj: usize, AValue: i32);
  pub fn Frame_GetWidth(AObj: usize) -> i32;
  pub fn Frame_SetWidth(AObj: usize, AValue: i32);
  pub fn Frame_GetHeight(AObj: usize) -> i32;
  pub fn Frame_SetHeight(AObj: usize, AValue: i32);
  pub fn Frame_GetCursor(AObj: usize) -> TCursor;
  pub fn Frame_SetCursor(AObj: usize, AValue: TCursor);
  pub fn Frame_GetHint(AObj: usize) -> *const c_char;
  pub fn Frame_SetHint(AObj: usize, AValue: *const c_char);
  pub fn Frame_GetComponentCount(AObj: usize) -> i32;
  pub fn Frame_GetComponentIndex(AObj: usize) -> i32;
  pub fn Frame_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn Frame_GetOwner(AObj: usize) -> usize;
  pub fn Frame_GetName(AObj: usize) -> *const c_char;
  pub fn Frame_SetName(AObj: usize, AValue: *const c_char);
  pub fn Frame_GetTag(AObj: usize) -> isize;
  pub fn Frame_SetTag(AObj: usize, AValue: isize);
  pub fn Frame_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn Frame_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn Frame_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn Frame_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn Frame_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn Frame_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn Frame_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn Frame_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn Frame_GetChildSizing(AObj: usize) -> usize;
  pub fn Frame_SetChildSizing(AObj: usize, AValue: usize);
  pub fn Frame_GetBorderSpacing(AObj: usize) -> usize;
  pub fn Frame_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn Frame_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn Frame_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn Frame_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn Frame_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn Frame_StaticClassType() -> TClass;

  // ----------------- TControlScrollBar ----------------------
  pub fn ControlScrollBar_Assign(AObj: usize, Source: usize);
  pub fn ControlScrollBar_IsScrollBarVisible(AObj: usize) -> bool;
  pub fn ControlScrollBar_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ControlScrollBar_ClassType(AObj: usize) -> TClass;
  pub fn ControlScrollBar_ClassName(AObj: usize) -> *const c_char;
  pub fn ControlScrollBar_InstanceSize(AObj: usize) -> i32;
  pub fn ControlScrollBar_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ControlScrollBar_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ControlScrollBar_GetHashCode(AObj: usize) -> i32;
  pub fn ControlScrollBar_ToString(AObj: usize) -> *const c_char;
  pub fn ControlScrollBar_GetScrollPos(AObj: usize) -> i32;
  pub fn ControlScrollBar_GetIncrement(AObj: usize) -> TScrollBarInc;
  pub fn ControlScrollBar_SetIncrement(AObj: usize, AValue: TScrollBarInc);
  pub fn ControlScrollBar_GetPosition(AObj: usize) -> i32;
  pub fn ControlScrollBar_SetPosition(AObj: usize, AValue: i32);
  pub fn ControlScrollBar_GetRange(AObj: usize) -> i32;
  pub fn ControlScrollBar_SetRange(AObj: usize, AValue: i32);
  pub fn ControlScrollBar_GetSmooth(AObj: usize) -> bool;
  pub fn ControlScrollBar_SetSmooth(AObj: usize, AValue: bool);
  pub fn ControlScrollBar_GetTracking(AObj: usize) -> bool;
  pub fn ControlScrollBar_SetTracking(AObj: usize, AValue: bool);
  pub fn ControlScrollBar_GetVisible(AObj: usize) -> bool;
  pub fn ControlScrollBar_SetVisible(AObj: usize, AValue: bool);
  pub fn ControlScrollBar_StaticClassType() -> TClass;

  // ----------------- TSizeConstraints ----------------------
  pub fn SizeConstraints_Assign(AObj: usize, Source: usize);
  pub fn SizeConstraints_GetNamePath(AObj: usize) -> *const c_char;
  pub fn SizeConstraints_ClassType(AObj: usize) -> TClass;
  pub fn SizeConstraints_ClassName(AObj: usize) -> *const c_char;
  pub fn SizeConstraints_InstanceSize(AObj: usize) -> i32;
  pub fn SizeConstraints_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn SizeConstraints_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn SizeConstraints_GetHashCode(AObj: usize) -> i32;
  pub fn SizeConstraints_ToString(AObj: usize) -> *const c_char;
  pub fn SizeConstraints_SetOnChange(AObj: usize, AEventId: usize);
  pub fn SizeConstraints_GetMaxHeight(AObj: usize) -> TConstraintSize;
  pub fn SizeConstraints_SetMaxHeight(AObj: usize, AValue: TConstraintSize);
  pub fn SizeConstraints_GetMaxWidth(AObj: usize) -> TConstraintSize;
  pub fn SizeConstraints_SetMaxWidth(AObj: usize, AValue: TConstraintSize);
  pub fn SizeConstraints_GetMinHeight(AObj: usize) -> TConstraintSize;
  pub fn SizeConstraints_SetMinHeight(AObj: usize, AValue: TConstraintSize);
  pub fn SizeConstraints_GetMinWidth(AObj: usize) -> TConstraintSize;
  pub fn SizeConstraints_SetMinWidth(AObj: usize, AValue: TConstraintSize);
  pub fn SizeConstraints_StaticClassType() -> TClass;

  // ----------------- TXButton ----------------------
  pub fn XButton_Create(AOwner: usize) -> usize;
  pub fn XButton_Free(AObj: usize);
  pub fn XButton_BringToFront(AObj: usize);
  pub fn XButton_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn XButton_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn XButton_Dragging(AObj: usize) -> bool;
  pub fn XButton_HasParent(AObj: usize) -> bool;
  pub fn XButton_Hide(AObj: usize);
  pub fn XButton_Invalidate(AObj: usize);
  pub fn XButton_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn XButton_Refresh(AObj: usize);
  pub fn XButton_Repaint(AObj: usize);
  pub fn XButton_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn XButton_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn XButton_SendToBack(AObj: usize);
  pub fn XButton_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn XButton_Show(AObj: usize);
  pub fn XButton_Update(AObj: usize);
  pub fn XButton_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn XButton_GetTextLen(AObj: usize) -> i32;
  pub fn XButton_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn XButton_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn XButton_GetNamePath(AObj: usize) -> *const c_char;
  pub fn XButton_Assign(AObj: usize, Source: usize);
  pub fn XButton_ClassType(AObj: usize) -> TClass;
  pub fn XButton_ClassName(AObj: usize) -> *const c_char;
  pub fn XButton_InstanceSize(AObj: usize) -> i32;
  pub fn XButton_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn XButton_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn XButton_GetHashCode(AObj: usize) -> i32;
  pub fn XButton_ToString(AObj: usize) -> *const c_char;
  pub fn XButton_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn XButton_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn XButton_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn XButton_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn XButton_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn XButton_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn XButton_AnchorClient(AObj: usize, ASpace: i32);
  pub fn XButton_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn XButton_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn XButton_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn XButton_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn XButton_GetCaption(AObj: usize) -> *const c_char;
  pub fn XButton_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn XButton_GetShowCaption(AObj: usize) -> bool;
  pub fn XButton_SetShowCaption(AObj: usize, AValue: bool);
  pub fn XButton_GetBackColor(AObj: usize) -> TColor;
  pub fn XButton_SetBackColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetHoverColor(AObj: usize) -> TColor;
  pub fn XButton_SetHoverColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetDownColor(AObj: usize) -> TColor;
  pub fn XButton_SetDownColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetBorderWidth(AObj: usize) -> i32;
  pub fn XButton_SetBorderWidth(AObj: usize, AValue: i32);
  pub fn XButton_GetBorderColor(AObj: usize) -> TColor;
  pub fn XButton_SetBorderColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetPicture(AObj: usize) -> usize;
  pub fn XButton_SetPicture(AObj: usize, AValue: usize);
  pub fn XButton_GetDrawMode(AObj: usize) -> TDrawImageMode;
  pub fn XButton_SetDrawMode(AObj: usize, AValue: TDrawImageMode);
  pub fn XButton_GetNormalFontColor(AObj: usize) -> TColor;
  pub fn XButton_SetNormalFontColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetDownFontColor(AObj: usize) -> TColor;
  pub fn XButton_SetDownFontColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetHoverFontColor(AObj: usize) -> TColor;
  pub fn XButton_SetHoverFontColor(AObj: usize, AValue: TColor);
  pub fn XButton_GetAction(AObj: usize) -> usize;
  pub fn XButton_SetAction(AObj: usize, AValue: usize);
  pub fn XButton_GetAlign(AObj: usize) -> TAlign;
  pub fn XButton_SetAlign(AObj: usize, AValue: TAlign);
  pub fn XButton_GetAnchors(AObj: usize) -> TAnchors;
  pub fn XButton_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn XButton_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn XButton_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn XButton_GetConstraints(AObj: usize) -> usize;
  pub fn XButton_SetConstraints(AObj: usize, AValue: usize);
  pub fn XButton_GetEnabled(AObj: usize) -> bool;
  pub fn XButton_SetEnabled(AObj: usize, AValue: bool);
  pub fn XButton_GetFont(AObj: usize) -> usize;
  pub fn XButton_SetFont(AObj: usize, AValue: usize);
  pub fn XButton_GetParentFont(AObj: usize) -> bool;
  pub fn XButton_SetParentFont(AObj: usize, AValue: bool);
  pub fn XButton_GetParentShowHint(AObj: usize) -> bool;
  pub fn XButton_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn XButton_GetPopupMenu(AObj: usize) -> usize;
  pub fn XButton_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn XButton_GetShowHint(AObj: usize) -> bool;
  pub fn XButton_SetShowHint(AObj: usize, AValue: bool);
  pub fn XButton_GetVisible(AObj: usize) -> bool;
  pub fn XButton_SetVisible(AObj: usize, AValue: bool);
  pub fn XButton_SetOnClick(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn XButton_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn XButton_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn XButton_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn XButton_GetClientHeight(AObj: usize) -> i32;
  pub fn XButton_SetClientHeight(AObj: usize, AValue: i32);
  pub fn XButton_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn XButton_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn XButton_GetClientWidth(AObj: usize) -> i32;
  pub fn XButton_SetClientWidth(AObj: usize, AValue: i32);
  pub fn XButton_GetControlState(AObj: usize) -> TControlState;
  pub fn XButton_SetControlState(AObj: usize, AValue: TControlState);
  pub fn XButton_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn XButton_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn XButton_GetFloating(AObj: usize) -> bool;
  pub fn XButton_GetParent(AObj: usize) -> usize;
  pub fn XButton_SetParent(AObj: usize, AValue: usize);
  pub fn XButton_GetLeft(AObj: usize) -> i32;
  pub fn XButton_SetLeft(AObj: usize, AValue: i32);
  pub fn XButton_GetTop(AObj: usize) -> i32;
  pub fn XButton_SetTop(AObj: usize, AValue: i32);
  pub fn XButton_GetWidth(AObj: usize) -> i32;
  pub fn XButton_SetWidth(AObj: usize, AValue: i32);
  pub fn XButton_GetHeight(AObj: usize) -> i32;
  pub fn XButton_SetHeight(AObj: usize, AValue: i32);
  pub fn XButton_GetCursor(AObj: usize) -> TCursor;
  pub fn XButton_SetCursor(AObj: usize, AValue: TCursor);
  pub fn XButton_GetHint(AObj: usize) -> *const c_char;
  pub fn XButton_SetHint(AObj: usize, AValue: *const c_char);
  pub fn XButton_GetComponentCount(AObj: usize) -> i32;
  pub fn XButton_GetComponentIndex(AObj: usize) -> i32;
  pub fn XButton_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn XButton_GetOwner(AObj: usize) -> usize;
  pub fn XButton_GetName(AObj: usize) -> *const c_char;
  pub fn XButton_SetName(AObj: usize, AValue: *const c_char);
  pub fn XButton_GetTag(AObj: usize) -> isize;
  pub fn XButton_SetTag(AObj: usize, AValue: isize);
  pub fn XButton_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn XButton_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn XButton_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn XButton_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn XButton_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn XButton_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn XButton_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn XButton_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn XButton_GetBorderSpacing(AObj: usize) -> usize;
  pub fn XButton_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn XButton_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn XButton_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn XButton_StaticClassType() -> TClass;

  // ----------------- TAnchorSide ----------------------
  pub fn AnchorSide_Assign(AObj: usize, Source: usize);
  pub fn AnchorSide_GetNamePath(AObj: usize) -> *const c_char;
  pub fn AnchorSide_ClassType(AObj: usize) -> TClass;
  pub fn AnchorSide_ClassName(AObj: usize) -> *const c_char;
  pub fn AnchorSide_InstanceSize(AObj: usize) -> i32;
  pub fn AnchorSide_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn AnchorSide_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn AnchorSide_GetHashCode(AObj: usize) -> i32;
  pub fn AnchorSide_ToString(AObj: usize) -> *const c_char;
  pub fn AnchorSide_GetOwner(AObj: usize) -> usize;
  pub fn AnchorSide_GetControl(AObj: usize) -> usize;
  pub fn AnchorSide_SetControl(AObj: usize, AValue: usize);
  pub fn AnchorSide_GetSide(AObj: usize) -> TAnchorSideReference;
  pub fn AnchorSide_SetSide(AObj: usize, AValue: TAnchorSideReference);
  pub fn AnchorSide_StaticClassType() -> TClass;

  // ----------------- TControlBorderSpacing ----------------------
  pub fn ControlBorderSpacing_Assign(AObj: usize, Source: usize);
  pub fn ControlBorderSpacing_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ControlBorderSpacing_ClassType(AObj: usize) -> TClass;
  pub fn ControlBorderSpacing_ClassName(AObj: usize) -> *const c_char;
  pub fn ControlBorderSpacing_InstanceSize(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ControlBorderSpacing_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ControlBorderSpacing_GetHashCode(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_ToString(AObj: usize) -> *const c_char;
  pub fn ControlBorderSpacing_GetControl(AObj: usize) -> usize;
  pub fn ControlBorderSpacing_GetAroundLeft(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetAroundTop(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetAroundRight(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetAroundBottom(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlLeft(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlTop(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlWidth(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlHeight(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlRight(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_GetControlBottom(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ControlBorderSpacing_GetLeft(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetLeft(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetTop(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetTop(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetRight(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetRight(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetBottom(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetBottom(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetAround(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetAround(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetInnerBorder(AObj: usize) -> i32;
  pub fn ControlBorderSpacing_SetInnerBorder(AObj: usize, AValue: i32);
  pub fn ControlBorderSpacing_GetCellAlignHorizontal(AObj: usize) -> TControlCellAlign;
  pub fn ControlBorderSpacing_SetCellAlignHorizontal(AObj: usize, AValue: TControlCellAlign);
  pub fn ControlBorderSpacing_GetCellAlignVertical(AObj: usize) -> TControlCellAlign;
  pub fn ControlBorderSpacing_SetCellAlignVertical(AObj: usize, AValue: TControlCellAlign);
  pub fn ControlBorderSpacing_GetSpace(AObj: usize, Kind: TAnchorKind) -> i32;
  pub fn ControlBorderSpacing_SetSpace(AObj: usize, Kind: TAnchorKind, AValue: i32);
  pub fn ControlBorderSpacing_StaticClassType() -> TClass;

  // ----------------- TControlChildSizing ----------------------
  pub fn ControlChildSizing_Assign(AObj: usize, Source: usize);
  pub fn ControlChildSizing_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ControlChildSizing_ClassType(AObj: usize) -> TClass;
  pub fn ControlChildSizing_ClassName(AObj: usize) -> *const c_char;
  pub fn ControlChildSizing_InstanceSize(AObj: usize) -> i32;
  pub fn ControlChildSizing_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ControlChildSizing_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ControlChildSizing_GetHashCode(AObj: usize) -> i32;
  pub fn ControlChildSizing_ToString(AObj: usize) -> *const c_char;
  pub fn ControlChildSizing_GetControl(AObj: usize) -> usize;
  pub fn ControlChildSizing_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ControlChildSizing_GetLeftRightSpacing(AObj: usize) -> i32;
  pub fn ControlChildSizing_SetLeftRightSpacing(AObj: usize, AValue: i32);
  pub fn ControlChildSizing_GetTopBottomSpacing(AObj: usize) -> i32;
  pub fn ControlChildSizing_SetTopBottomSpacing(AObj: usize, AValue: i32);
  pub fn ControlChildSizing_GetHorizontalSpacing(AObj: usize) -> i32;
  pub fn ControlChildSizing_SetHorizontalSpacing(AObj: usize, AValue: i32);
  pub fn ControlChildSizing_GetVerticalSpacing(AObj: usize) -> i32;
  pub fn ControlChildSizing_SetVerticalSpacing(AObj: usize, AValue: i32);
  pub fn ControlChildSizing_GetEnlargeHorizontal(AObj: usize) -> TChildControlResizeStyle;
  pub fn ControlChildSizing_SetEnlargeHorizontal(AObj: usize, AValue: TChildControlResizeStyle);
  pub fn ControlChildSizing_GetEnlargeVertical(AObj: usize) -> TChildControlResizeStyle;
  pub fn ControlChildSizing_SetEnlargeVertical(AObj: usize, AValue: TChildControlResizeStyle);
  pub fn ControlChildSizing_GetShrinkHorizontal(AObj: usize) -> TChildControlResizeStyle;
  pub fn ControlChildSizing_SetShrinkHorizontal(AObj: usize, AValue: TChildControlResizeStyle);
  pub fn ControlChildSizing_GetShrinkVertical(AObj: usize) -> TChildControlResizeStyle;
  pub fn ControlChildSizing_SetShrinkVertical(AObj: usize, AValue: TChildControlResizeStyle);
  pub fn ControlChildSizing_GetLayout(AObj: usize) -> TControlChildrenLayout;
  pub fn ControlChildSizing_SetLayout(AObj: usize, AValue: TControlChildrenLayout);
  pub fn ControlChildSizing_GetControlsPerLine(AObj: usize) -> i32;
  pub fn ControlChildSizing_SetControlsPerLine(AObj: usize, AValue: i32);
  pub fn ControlChildSizing_StaticClassType() -> TClass;

  // ----------------- TCheckGroup ----------------------
  pub fn CheckGroup_Create(AOwner: usize) -> usize;
  pub fn CheckGroup_Free(AObj: usize);
  pub fn CheckGroup_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn CheckGroup_Rows(AObj: usize) -> i32;
  pub fn CheckGroup_CanFocus(AObj: usize) -> bool;
  pub fn CheckGroup_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn CheckGroup_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn CheckGroup_DisableAlign(AObj: usize);
  pub fn CheckGroup_EnableAlign(AObj: usize);
  pub fn CheckGroup_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn CheckGroup_Focused(AObj: usize) -> bool;
  pub fn CheckGroup_HandleAllocated(AObj: usize) -> bool;
  pub fn CheckGroup_InsertControl(AObj: usize, AControl: usize);
  pub fn CheckGroup_Invalidate(AObj: usize);
  pub fn CheckGroup_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn CheckGroup_RemoveControl(AObj: usize, AControl: usize);
  pub fn CheckGroup_Realign(AObj: usize);
  pub fn CheckGroup_Repaint(AObj: usize);
  pub fn CheckGroup_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn CheckGroup_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn CheckGroup_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn CheckGroup_SetFocus(AObj: usize);
  pub fn CheckGroup_Update(AObj: usize);
  pub fn CheckGroup_BringToFront(AObj: usize);
  pub fn CheckGroup_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckGroup_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckGroup_Dragging(AObj: usize) -> bool;
  pub fn CheckGroup_HasParent(AObj: usize) -> bool;
  pub fn CheckGroup_Hide(AObj: usize);
  pub fn CheckGroup_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn CheckGroup_Refresh(AObj: usize);
  pub fn CheckGroup_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn CheckGroup_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn CheckGroup_SendToBack(AObj: usize);
  pub fn CheckGroup_Show(AObj: usize);
  pub fn CheckGroup_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn CheckGroup_GetTextLen(AObj: usize) -> i32;
  pub fn CheckGroup_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn CheckGroup_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn CheckGroup_GetNamePath(AObj: usize) -> *const c_char;
  pub fn CheckGroup_Assign(AObj: usize, Source: usize);
  pub fn CheckGroup_ClassType(AObj: usize) -> TClass;
  pub fn CheckGroup_ClassName(AObj: usize) -> *const c_char;
  pub fn CheckGroup_InstanceSize(AObj: usize) -> i32;
  pub fn CheckGroup_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn CheckGroup_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn CheckGroup_GetHashCode(AObj: usize) -> i32;
  pub fn CheckGroup_ToString(AObj: usize) -> *const c_char;
  pub fn CheckGroup_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckGroup_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn CheckGroup_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckGroup_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn CheckGroup_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn CheckGroup_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn CheckGroup_AnchorClient(AObj: usize, ASpace: i32);
  pub fn CheckGroup_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn CheckGroup_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn CheckGroup_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn CheckGroup_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn CheckGroup_GetAlign(AObj: usize) -> TAlign;
  pub fn CheckGroup_SetAlign(AObj: usize, AValue: TAlign);
  pub fn CheckGroup_GetAnchors(AObj: usize) -> TAnchors;
  pub fn CheckGroup_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn CheckGroup_GetAutoFill(AObj: usize) -> bool;
  pub fn CheckGroup_SetAutoFill(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetAutoSize(AObj: usize) -> bool;
  pub fn CheckGroup_SetAutoSize(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn CheckGroup_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn CheckGroup_GetCaption(AObj: usize) -> *const c_char;
  pub fn CheckGroup_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn CheckGroup_GetClientHeight(AObj: usize) -> i32;
  pub fn CheckGroup_SetClientHeight(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetClientWidth(AObj: usize) -> i32;
  pub fn CheckGroup_SetClientWidth(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetColor(AObj: usize) -> TColor;
  pub fn CheckGroup_SetColor(AObj: usize, AValue: TColor);
  pub fn CheckGroup_GetColumnLayout(AObj: usize) -> TColumnLayout;
  pub fn CheckGroup_SetColumnLayout(AObj: usize, AValue: TColumnLayout);
  pub fn CheckGroup_GetColumns(AObj: usize) -> i32;
  pub fn CheckGroup_SetColumns(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetConstraints(AObj: usize) -> usize;
  pub fn CheckGroup_SetConstraints(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckGroup_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetDragCursor(AObj: usize) -> TCursor;
  pub fn CheckGroup_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn CheckGroup_GetDragMode(AObj: usize) -> TDragMode;
  pub fn CheckGroup_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn CheckGroup_GetEnabled(AObj: usize) -> bool;
  pub fn CheckGroup_SetEnabled(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetFont(AObj: usize) -> usize;
  pub fn CheckGroup_SetFont(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetItems(AObj: usize) -> usize;
  pub fn CheckGroup_SetItems(AObj: usize, AValue: usize);
  pub fn CheckGroup_SetOnClick(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnDblClick(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnExit(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnItemClick(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnKeyDown(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnKeyPress(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnKeyUp(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn CheckGroup_SetOnResize(AObj: usize, AEventId: usize);
  pub fn CheckGroup_GetParentFont(AObj: usize) -> bool;
  pub fn CheckGroup_SetParentFont(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetParentColor(AObj: usize) -> bool;
  pub fn CheckGroup_SetParentColor(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn CheckGroup_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetParentShowHint(AObj: usize) -> bool;
  pub fn CheckGroup_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetPopupMenu(AObj: usize) -> usize;
  pub fn CheckGroup_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetShowHint(AObj: usize) -> bool;
  pub fn CheckGroup_SetShowHint(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn CheckGroup_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn CheckGroup_GetTabStop(AObj: usize) -> bool;
  pub fn CheckGroup_SetTabStop(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetVisible(AObj: usize) -> bool;
  pub fn CheckGroup_SetVisible(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetDockClientCount(AObj: usize) -> i32;
  pub fn CheckGroup_GetDockSite(AObj: usize) -> bool;
  pub fn CheckGroup_SetDockSite(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetMouseInClient(AObj: usize) -> bool;
  pub fn CheckGroup_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn CheckGroup_GetBrush(AObj: usize) -> usize;
  pub fn CheckGroup_GetControlCount(AObj: usize) -> i32;
  pub fn CheckGroup_GetHandle(AObj: usize) -> HWND;
  pub fn CheckGroup_GetParentWindow(AObj: usize) -> HWND;
  pub fn CheckGroup_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn CheckGroup_GetShowing(AObj: usize) -> bool;
  pub fn CheckGroup_GetUseDockManager(AObj: usize) -> bool;
  pub fn CheckGroup_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn CheckGroup_GetAction(AObj: usize) -> usize;
  pub fn CheckGroup_SetAction(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn CheckGroup_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn CheckGroup_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn CheckGroup_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn CheckGroup_GetControlState(AObj: usize) -> TControlState;
  pub fn CheckGroup_SetControlState(AObj: usize, AValue: TControlState);
  pub fn CheckGroup_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn CheckGroup_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn CheckGroup_GetFloating(AObj: usize) -> bool;
  pub fn CheckGroup_GetParent(AObj: usize) -> usize;
  pub fn CheckGroup_SetParent(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetLeft(AObj: usize) -> i32;
  pub fn CheckGroup_SetLeft(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetTop(AObj: usize) -> i32;
  pub fn CheckGroup_SetTop(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetWidth(AObj: usize) -> i32;
  pub fn CheckGroup_SetWidth(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetHeight(AObj: usize) -> i32;
  pub fn CheckGroup_SetHeight(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetCursor(AObj: usize) -> TCursor;
  pub fn CheckGroup_SetCursor(AObj: usize, AValue: TCursor);
  pub fn CheckGroup_GetHint(AObj: usize) -> *const c_char;
  pub fn CheckGroup_SetHint(AObj: usize, AValue: *const c_char);
  pub fn CheckGroup_GetComponentCount(AObj: usize) -> i32;
  pub fn CheckGroup_GetComponentIndex(AObj: usize) -> i32;
  pub fn CheckGroup_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn CheckGroup_GetOwner(AObj: usize) -> usize;
  pub fn CheckGroup_GetName(AObj: usize) -> *const c_char;
  pub fn CheckGroup_SetName(AObj: usize, AValue: *const c_char);
  pub fn CheckGroup_GetTag(AObj: usize) -> isize;
  pub fn CheckGroup_SetTag(AObj: usize, AValue: isize);
  pub fn CheckGroup_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn CheckGroup_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn CheckGroup_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn CheckGroup_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn CheckGroup_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetChildSizing(AObj: usize) -> usize;
  pub fn CheckGroup_SetChildSizing(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetBorderSpacing(AObj: usize) -> usize;
  pub fn CheckGroup_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn CheckGroup_GetChecked(AObj: usize, Index: i32) -> bool;
  pub fn CheckGroup_SetChecked(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckGroup_GetCheckEnabled(AObj: usize, Index: i32) -> bool;
  pub fn CheckGroup_SetCheckEnabled(AObj: usize, Index: i32, AValue: bool);
  pub fn CheckGroup_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn CheckGroup_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn CheckGroup_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn CheckGroup_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn CheckGroup_StaticClassType() -> TClass;

  // ----------------- TToggleBox ----------------------
  pub fn ToggleBox_Create(AOwner: usize) -> usize;
  pub fn ToggleBox_Free(AObj: usize);
  pub fn ToggleBox_CanFocus(AObj: usize) -> bool;
  pub fn ToggleBox_ContainsControl(AObj: usize, Control: usize) -> bool;
  pub fn ToggleBox_ControlAtPos(AObj: usize, Pos: *mut TPoint, AllowDisabled: bool, AllowWinControls: bool) -> usize;
  pub fn ToggleBox_DisableAlign(AObj: usize);
  pub fn ToggleBox_EnableAlign(AObj: usize);
  pub fn ToggleBox_FindChildControl(AObj: usize, ControlName: *const c_char) -> usize;
  pub fn ToggleBox_FlipChildren(AObj: usize, AllLevels: bool);
  pub fn ToggleBox_Focused(AObj: usize) -> bool;
  pub fn ToggleBox_HandleAllocated(AObj: usize) -> bool;
  pub fn ToggleBox_InsertControl(AObj: usize, AControl: usize);
  pub fn ToggleBox_Invalidate(AObj: usize);
  pub fn ToggleBox_PaintTo(AObj: usize, DC: HDC, X: i32, Y: i32);
  pub fn ToggleBox_RemoveControl(AObj: usize, AControl: usize);
  pub fn ToggleBox_Realign(AObj: usize);
  pub fn ToggleBox_Repaint(AObj: usize);
  pub fn ToggleBox_ScaleBy(AObj: usize, M: i32, D: i32);
  pub fn ToggleBox_ScrollBy(AObj: usize, DeltaX: i32, DeltaY: i32);
  pub fn ToggleBox_SetBounds(AObj: usize, ALeft: i32, ATop: i32, AWidth: i32, AHeight: i32);
  pub fn ToggleBox_SetFocus(AObj: usize);
  pub fn ToggleBox_Update(AObj: usize);
  pub fn ToggleBox_BringToFront(AObj: usize);
  pub fn ToggleBox_ClientToScreen(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToggleBox_ClientToParent(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToggleBox_Dragging(AObj: usize) -> bool;
  pub fn ToggleBox_HasParent(AObj: usize) -> bool;
  pub fn ToggleBox_Hide(AObj: usize);
  pub fn ToggleBox_Perform(AObj: usize, Msg: u32, WParam: usize, LParam: isize) -> isize;
  pub fn ToggleBox_Refresh(AObj: usize);
  pub fn ToggleBox_ScreenToClient(AObj: usize, Point: *mut TPoint, Result: *mut TPoint);
  pub fn ToggleBox_ParentToClient(AObj: usize, Point: *mut TPoint, AParent: usize, Result: *mut TPoint);
  pub fn ToggleBox_SendToBack(AObj: usize);
  pub fn ToggleBox_Show(AObj: usize);
  pub fn ToggleBox_GetTextBuf(AObj: usize, Buffer: *const c_char, BufSize: i32) -> i32;
  pub fn ToggleBox_GetTextLen(AObj: usize) -> i32;
  pub fn ToggleBox_SetTextBuf(AObj: usize, Buffer: *const c_char);
  pub fn ToggleBox_FindComponent(AObj: usize, AName: *const c_char) -> usize;
  pub fn ToggleBox_GetNamePath(AObj: usize) -> *const c_char;
  pub fn ToggleBox_Assign(AObj: usize, Source: usize);
  pub fn ToggleBox_ClassType(AObj: usize) -> TClass;
  pub fn ToggleBox_ClassName(AObj: usize) -> *const c_char;
  pub fn ToggleBox_InstanceSize(AObj: usize) -> i32;
  pub fn ToggleBox_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn ToggleBox_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn ToggleBox_GetHashCode(AObj: usize) -> i32;
  pub fn ToggleBox_ToString(AObj: usize) -> *const c_char;
  pub fn ToggleBox_AnchorToNeighbour(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToggleBox_AnchorParallel(AObj: usize, ASide: TAnchorKind, ASpace: i32, ASibling: usize);
  pub fn ToggleBox_AnchorHorizontalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToggleBox_AnchorVerticalCenterTo(AObj: usize, ASibling: usize);
  pub fn ToggleBox_AnchorSame(AObj: usize, ASide: TAnchorKind, ASibling: usize);
  pub fn ToggleBox_AnchorAsAlign(AObj: usize, ATheAlign: TAlign, ASpace: i32);
  pub fn ToggleBox_AnchorClient(AObj: usize, ASpace: i32);
  pub fn ToggleBox_ScaleDesignToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleFormToDesign(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_Scale96ToForm(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleFormTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_Scale96ToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleFontTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleScreenToFont(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleFontToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_Scale96ToScreen(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_ScaleScreenTo96(AObj: usize, ASize: i32) -> i32;
  pub fn ToggleBox_AutoAdjustLayout(AObj: usize, AMode: TLayoutAdjustmentPolicy, AFromPPI: i32, AToPPI: i32, AOldFormWidth: i32, ANewFormWidth: i32);
  pub fn ToggleBox_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn ToggleBox_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn ToggleBox_GetAllowGrayed(AObj: usize) -> bool;
  pub fn ToggleBox_SetAllowGrayed(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetAlign(AObj: usize) -> TAlign;
  pub fn ToggleBox_SetAlign(AObj: usize, AValue: TAlign);
  pub fn ToggleBox_GetAnchors(AObj: usize) -> TAnchors;
  pub fn ToggleBox_SetAnchors(AObj: usize, AValue: TAnchors);
  pub fn ToggleBox_GetAutoSize(AObj: usize) -> bool;
  pub fn ToggleBox_SetAutoSize(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetCaption(AObj: usize) -> *const c_char;
  pub fn ToggleBox_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn ToggleBox_GetChecked(AObj: usize) -> bool;
  pub fn ToggleBox_SetChecked(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetColor(AObj: usize) -> TColor;
  pub fn ToggleBox_SetColor(AObj: usize, AValue: TColor);
  pub fn ToggleBox_GetConstraints(AObj: usize) -> usize;
  pub fn ToggleBox_SetConstraints(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetDoubleBuffered(AObj: usize) -> bool;
  pub fn ToggleBox_SetDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetDragCursor(AObj: usize) -> TCursor;
  pub fn ToggleBox_SetDragCursor(AObj: usize, AValue: TCursor);
  pub fn ToggleBox_GetDragKind(AObj: usize) -> TDragKind;
  pub fn ToggleBox_SetDragKind(AObj: usize, AValue: TDragKind);
  pub fn ToggleBox_GetDragMode(AObj: usize) -> TDragMode;
  pub fn ToggleBox_SetDragMode(AObj: usize, AValue: TDragMode);
  pub fn ToggleBox_GetEnabled(AObj: usize) -> bool;
  pub fn ToggleBox_SetEnabled(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetFont(AObj: usize) -> usize;
  pub fn ToggleBox_SetFont(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetHint(AObj: usize) -> *const c_char;
  pub fn ToggleBox_SetHint(AObj: usize, AValue: *const c_char);
  pub fn ToggleBox_SetOnChange(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnClick(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnDragDrop(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnDragOver(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnEndDrag(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnEnter(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnExit(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseDown(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseEnter(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseLeave(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseMove(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseUp(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseWheel(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseWheelDown(AObj: usize, AEventId: usize);
  pub fn ToggleBox_SetOnMouseWheelUp(AObj: usize, AEventId: usize);
  pub fn ToggleBox_GetParentDoubleBuffered(AObj: usize) -> bool;
  pub fn ToggleBox_SetParentDoubleBuffered(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetParentFont(AObj: usize) -> bool;
  pub fn ToggleBox_SetParentFont(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetParentShowHint(AObj: usize) -> bool;
  pub fn ToggleBox_SetParentShowHint(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetPopupMenu(AObj: usize) -> usize;
  pub fn ToggleBox_SetPopupMenu(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetShowHint(AObj: usize) -> bool;
  pub fn ToggleBox_SetShowHint(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetState(AObj: usize) -> TCheckBoxState;
  pub fn ToggleBox_SetState(AObj: usize, AValue: TCheckBoxState);
  pub fn ToggleBox_GetTabOrder(AObj: usize) -> TTabOrder;
  pub fn ToggleBox_SetTabOrder(AObj: usize, AValue: TTabOrder);
  pub fn ToggleBox_GetTabStop(AObj: usize) -> bool;
  pub fn ToggleBox_SetTabStop(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetVisible(AObj: usize) -> bool;
  pub fn ToggleBox_SetVisible(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetDockClientCount(AObj: usize) -> i32;
  pub fn ToggleBox_GetDockSite(AObj: usize) -> bool;
  pub fn ToggleBox_SetDockSite(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetMouseInClient(AObj: usize) -> bool;
  pub fn ToggleBox_GetVisibleDockClientCount(AObj: usize) -> i32;
  pub fn ToggleBox_GetBrush(AObj: usize) -> usize;
  pub fn ToggleBox_GetControlCount(AObj: usize) -> i32;
  pub fn ToggleBox_GetHandle(AObj: usize) -> HWND;
  pub fn ToggleBox_GetParentWindow(AObj: usize) -> HWND;
  pub fn ToggleBox_SetParentWindow(AObj: usize, AValue: HWND);
  pub fn ToggleBox_GetShowing(AObj: usize) -> bool;
  pub fn ToggleBox_GetUseDockManager(AObj: usize) -> bool;
  pub fn ToggleBox_SetUseDockManager(AObj: usize, AValue: bool);
  pub fn ToggleBox_GetAction(AObj: usize) -> usize;
  pub fn ToggleBox_SetAction(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetBiDiMode(AObj: usize) -> TBiDiMode;
  pub fn ToggleBox_SetBiDiMode(AObj: usize, AValue: TBiDiMode);
  pub fn ToggleBox_GetBoundsRect(AObj: usize, Result: *mut TRect);
  pub fn ToggleBox_SetBoundsRect(AObj: usize, AValue: *mut TRect);
  pub fn ToggleBox_GetClientHeight(AObj: usize) -> i32;
  pub fn ToggleBox_SetClientHeight(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetClientOrigin(AObj: usize, Result: *mut TPoint);
  pub fn ToggleBox_GetClientRect(AObj: usize, Result: *mut TRect);
  pub fn ToggleBox_GetClientWidth(AObj: usize) -> i32;
  pub fn ToggleBox_SetClientWidth(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetControlState(AObj: usize) -> TControlState;
  pub fn ToggleBox_SetControlState(AObj: usize, AValue: TControlState);
  pub fn ToggleBox_GetControlStyle(AObj: usize) -> TControlStyle;
  pub fn ToggleBox_SetControlStyle(AObj: usize, AValue: TControlStyle);
  pub fn ToggleBox_GetFloating(AObj: usize) -> bool;
  pub fn ToggleBox_GetParent(AObj: usize) -> usize;
  pub fn ToggleBox_SetParent(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetLeft(AObj: usize) -> i32;
  pub fn ToggleBox_SetLeft(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetTop(AObj: usize) -> i32;
  pub fn ToggleBox_SetTop(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetWidth(AObj: usize) -> i32;
  pub fn ToggleBox_SetWidth(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetHeight(AObj: usize) -> i32;
  pub fn ToggleBox_SetHeight(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetCursor(AObj: usize) -> TCursor;
  pub fn ToggleBox_SetCursor(AObj: usize, AValue: TCursor);
  pub fn ToggleBox_GetComponentCount(AObj: usize) -> i32;
  pub fn ToggleBox_GetComponentIndex(AObj: usize) -> i32;
  pub fn ToggleBox_SetComponentIndex(AObj: usize, AValue: i32);
  pub fn ToggleBox_GetOwner(AObj: usize) -> usize;
  pub fn ToggleBox_GetName(AObj: usize) -> *const c_char;
  pub fn ToggleBox_SetName(AObj: usize, AValue: *const c_char);
  pub fn ToggleBox_GetTag(AObj: usize) -> isize;
  pub fn ToggleBox_SetTag(AObj: usize, AValue: isize);
  pub fn ToggleBox_GetAnchorSideLeft(AObj: usize) -> usize;
  pub fn ToggleBox_SetAnchorSideLeft(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetAnchorSideTop(AObj: usize) -> usize;
  pub fn ToggleBox_SetAnchorSideTop(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetAnchorSideRight(AObj: usize) -> usize;
  pub fn ToggleBox_SetAnchorSideRight(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetAnchorSideBottom(AObj: usize) -> usize;
  pub fn ToggleBox_SetAnchorSideBottom(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetChildSizing(AObj: usize) -> usize;
  pub fn ToggleBox_SetChildSizing(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetBorderSpacing(AObj: usize) -> usize;
  pub fn ToggleBox_SetBorderSpacing(AObj: usize, AValue: usize);
  pub fn ToggleBox_GetDockClients(AObj: usize, Index: i32) -> usize;
  pub fn ToggleBox_GetControls(AObj: usize, Index: i32) -> usize;
  pub fn ToggleBox_GetComponents(AObj: usize, AIndex: i32) -> usize;
  pub fn ToggleBox_GetAnchorSide(AObj: usize, AKind: TAnchorKind) -> usize;
  pub fn ToggleBox_StaticClassType() -> TClass;

  // ----------------- TGridColumnTitle ----------------------
  pub fn GridColumnTitle_Assign(AObj: usize, Source: usize);
  pub fn GridColumnTitle_FillTitleDefaultFont(AObj: usize);
  pub fn GridColumnTitle_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn GridColumnTitle_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn GridColumnTitle_IsDefault(AObj: usize) -> bool;
  pub fn GridColumnTitle_GetNamePath(AObj: usize) -> *const c_char;
  pub fn GridColumnTitle_ClassType(AObj: usize) -> TClass;
  pub fn GridColumnTitle_ClassName(AObj: usize) -> *const c_char;
  pub fn GridColumnTitle_InstanceSize(AObj: usize) -> i32;
  pub fn GridColumnTitle_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn GridColumnTitle_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn GridColumnTitle_GetHashCode(AObj: usize) -> i32;
  pub fn GridColumnTitle_ToString(AObj: usize) -> *const c_char;
  pub fn GridColumnTitle_GetColumn(AObj: usize) -> usize;
  pub fn GridColumnTitle_GetAlignment(AObj: usize) -> TAlignment;
  pub fn GridColumnTitle_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn GridColumnTitle_GetCaption(AObj: usize) -> *const c_char;
  pub fn GridColumnTitle_SetCaption(AObj: usize, AValue: *const c_char);
  pub fn GridColumnTitle_GetColor(AObj: usize) -> TColor;
  pub fn GridColumnTitle_SetColor(AObj: usize, AValue: TColor);
  pub fn GridColumnTitle_GetFont(AObj: usize) -> usize;
  pub fn GridColumnTitle_SetFont(AObj: usize, AValue: usize);
  pub fn GridColumnTitle_GetImageIndex(AObj: usize) -> i32;
  pub fn GridColumnTitle_SetImageIndex(AObj: usize, AValue: i32);
  pub fn GridColumnTitle_GetImageLayout(AObj: usize) -> TButtonLayout;
  pub fn GridColumnTitle_SetImageLayout(AObj: usize, AValue: TButtonLayout);
  pub fn GridColumnTitle_GetLayout(AObj: usize) -> TTextLayout;
  pub fn GridColumnTitle_SetLayout(AObj: usize, AValue: TTextLayout);
  pub fn GridColumnTitle_GetMultiLine(AObj: usize) -> bool;
  pub fn GridColumnTitle_SetMultiLine(AObj: usize, AValue: bool);
  pub fn GridColumnTitle_GetPrefixOption(AObj: usize) -> TPrefixOption;
  pub fn GridColumnTitle_SetPrefixOption(AObj: usize, AValue: TPrefixOption);
  pub fn GridColumnTitle_StaticClassType() -> TClass;

  // ----------------- TGridColumn ----------------------
  pub fn GridColumn_Assign(AObj: usize, Source: usize);
  pub fn GridColumn_FixDesignFontsPPI(AObj: usize, ADesignTimePPI: i32);
  pub fn GridColumn_ScaleFontsPPI(AObj: usize, AToPPI: i32, AProportion: *mut f64);
  pub fn GridColumn_IsDefault(AObj: usize) -> bool;
  pub fn GridColumn_GetNamePath(AObj: usize) -> *const c_char;
  pub fn GridColumn_ClassType(AObj: usize) -> TClass;
  pub fn GridColumn_ClassName(AObj: usize) -> *const c_char;
  pub fn GridColumn_InstanceSize(AObj: usize) -> i32;
  pub fn GridColumn_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn GridColumn_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn GridColumn_GetHashCode(AObj: usize) -> i32;
  pub fn GridColumn_ToString(AObj: usize) -> *const c_char;
  pub fn GridColumn_GetGrid(AObj: usize) -> usize;
  pub fn GridColumn_GetDefaultWidth(AObj: usize) -> i32;
  pub fn GridColumn_GetStoredWidth(AObj: usize) -> i32;
  pub fn GridColumn_GetWidthChanged(AObj: usize) -> bool;
  pub fn GridColumn_GetAlignment(AObj: usize) -> TAlignment;
  pub fn GridColumn_SetAlignment(AObj: usize, AValue: TAlignment);
  pub fn GridColumn_GetButtonStyle(AObj: usize) -> TColumnButtonStyle;
  pub fn GridColumn_SetButtonStyle(AObj: usize, AValue: TColumnButtonStyle);
  pub fn GridColumn_GetColor(AObj: usize) -> TColor;
  pub fn GridColumn_SetColor(AObj: usize, AValue: TColor);
  pub fn GridColumn_GetDropDownRows(AObj: usize) -> i32;
  pub fn GridColumn_SetDropDownRows(AObj: usize, AValue: i32);
  pub fn GridColumn_GetExpanded(AObj: usize) -> bool;
  pub fn GridColumn_SetExpanded(AObj: usize, AValue: bool);
  pub fn GridColumn_GetFont(AObj: usize) -> usize;
  pub fn GridColumn_SetFont(AObj: usize, AValue: usize);
  pub fn GridColumn_GetLayout(AObj: usize) -> TTextLayout;
  pub fn GridColumn_SetLayout(AObj: usize, AValue: TTextLayout);
  pub fn GridColumn_GetMinSize(AObj: usize) -> i32;
  pub fn GridColumn_SetMinSize(AObj: usize, AValue: i32);
  pub fn GridColumn_GetMaxSize(AObj: usize) -> i32;
  pub fn GridColumn_SetMaxSize(AObj: usize, AValue: i32);
  pub fn GridColumn_GetPickList(AObj: usize) -> usize;
  pub fn GridColumn_SetPickList(AObj: usize, AValue: usize);
  pub fn GridColumn_GetReadOnly(AObj: usize) -> bool;
  pub fn GridColumn_SetReadOnly(AObj: usize, AValue: bool);
  pub fn GridColumn_GetSizePriority(AObj: usize) -> i32;
  pub fn GridColumn_SetSizePriority(AObj: usize, AValue: i32);
  pub fn GridColumn_GetTag(AObj: usize) -> isize;
  pub fn GridColumn_SetTag(AObj: usize, AValue: isize);
  pub fn GridColumn_GetTitle(AObj: usize) -> usize;
  pub fn GridColumn_SetTitle(AObj: usize, AValue: usize);
  pub fn GridColumn_GetWidth(AObj: usize) -> i32;
  pub fn GridColumn_SetWidth(AObj: usize, AValue: i32);
  pub fn GridColumn_GetVisible(AObj: usize) -> bool;
  pub fn GridColumn_SetVisible(AObj: usize, AValue: bool);
  pub fn GridColumn_GetValueChecked(AObj: usize) -> *const c_char;
  pub fn GridColumn_SetValueChecked(AObj: usize, AValue: *const c_char);
  pub fn GridColumn_GetValueUnchecked(AObj: usize) -> *const c_char;
  pub fn GridColumn_SetValueUnchecked(AObj: usize, AValue: *const c_char);
  pub fn GridColumn_GetCollection(AObj: usize) -> usize;
  pub fn GridColumn_SetCollection(AObj: usize, AValue: usize);
  pub fn GridColumn_GetIndex(AObj: usize) -> i32;
  pub fn GridColumn_SetIndex(AObj: usize, AValue: i32);
  pub fn GridColumn_GetDisplayName(AObj: usize) -> *const c_char;
  pub fn GridColumn_SetDisplayName(AObj: usize, AValue: *const c_char);
  pub fn GridColumn_StaticClassType() -> TClass;

  // ----------------- TGridColumns ----------------------
  pub fn GridColumns_Add(AObj: usize) -> usize;
  pub fn GridColumns_Clear(AObj: usize);
  pub fn GridColumns_RealIndex(AObj: usize, Index: i32) -> i32;
  pub fn GridColumns_IndexOf(AObj: usize, Column: usize) -> i32;
  pub fn GridColumns_IsDefault(AObj: usize) -> bool;
  pub fn GridColumns_HasIndex(AObj: usize, Index: i32) -> bool;
  pub fn GridColumns_Owner(AObj: usize) -> usize;
  pub fn GridColumns_Assign(AObj: usize, Source: usize);
  pub fn GridColumns_BeginUpdate(AObj: usize);
  pub fn GridColumns_Delete(AObj: usize, Index: i32);
  pub fn GridColumns_EndUpdate(AObj: usize);
  pub fn GridColumns_FindItemID(AObj: usize, ID: i32) -> usize;
  pub fn GridColumns_GetNamePath(AObj: usize) -> *const c_char;
  pub fn GridColumns_Insert(AObj: usize, Index: i32) -> usize;
  pub fn GridColumns_ClassType(AObj: usize) -> TClass;
  pub fn GridColumns_ClassName(AObj: usize) -> *const c_char;
  pub fn GridColumns_InstanceSize(AObj: usize) -> i32;
  pub fn GridColumns_InheritsFrom(AObj: usize, AClass: TClass) -> bool;
  pub fn GridColumns_Equals(AObj: usize, Obj: usize) -> bool;
  pub fn GridColumns_GetHashCode(AObj: usize) -> i32;
  pub fn GridColumns_ToString(AObj: usize) -> *const c_char;
  pub fn GridColumns_GetGrid(AObj: usize) -> usize;
  pub fn GridColumns_GetVisibleCount(AObj: usize) -> i32;
  pub fn GridColumns_GetEnabled(AObj: usize) -> bool;
  pub fn GridColumns_GetCount(AObj: usize) -> i32;
  pub fn GridColumns_GetItems(AObj: usize, Index: i32) -> usize;
  pub fn GridColumns_SetItems(AObj: usize, Index: i32, AValue: usize);
  pub fn GridColumns_StaticClassType() -> TClass;

}



// 根据索引获取参数
#[inline]
unsafe fn getParamOf(index: usize, ptr: usize) -> usize {
    return *((ptr + index * size_of::<usize>()) as *const usize);
}

// 回调函数

extern "system" fn doEventCallback(f: usize, args: usize, arg_count: i32) -> usize {
    macro_rules! tt {
        ($x:expr) => {
            usize
        };
    }
    macro_rules! sys_call {
        () => {
            transmute::<usize, fn()>(f)()
        };
        ($sid: expr, $($arg:expr),*) => {
            transmute::<usize, fn(usize, $( tt!($arg)),*)>(f)($sid, $(getParamOf($arg, args)),* )
        };
    }
    unsafe {
        let sid = getSelfId(f);
        //println!("sid={}, fid={}", sid, f);
        match arg_count {
            00 => sys_call!(),
            01 => sys_call!(sid, 0),
            02 => sys_call!(sid, 0, 1),
            03 => sys_call!(sid, 0, 1, 2),
            04 => sys_call!(sid, 0, 1, 2, 3),
            05 => sys_call!(sid, 0, 1, 2, 3, 4),
            06 => sys_call!(sid, 0, 1, 2, 3, 4, 5),
            07 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6),
            08 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6, 7),
            09 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6, 7, 8),
            10 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
            11 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
            12 => sys_call!(sid, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
            _ => println!("none"),
        }
    }
    return 0;
}

// 消息回调
extern "system" fn doMessageCallback(f: usize, msg: usize) -> usize {
    let sid = getSelfId(f);
    unsafe { transmute::<usize, fn(usize, usize)>(f)(sid, msg) };
    return 0;
}

// 线程同步回调(未实现)
extern "system" fn doThreadSyncCallback() -> usize {
    return 0;
}

pub fn initLibLCLCallback() {
    unsafe {
        // 基本事件回调
        SetEventCallback(doEventCallback as usize);
        SetMessageCallback(doMessageCallback as usize);
        SetThreadSyncCallback(doThreadSyncCallback as usize);
    }
}


lazy_static! {
    static ref EVENT_HASH: Mutex<HashMap<usize, usize>> = {
        let map: HashMap<usize, usize> = HashMap::new();
        Mutex::new(map)
    };
}

pub fn insertMap(key: usize, val: usize) -> usize {
    EVENT_HASH.lock().unwrap().insert(key, val);  
    key
}

fn getSelfId(eid: usize) -> usize {
    match EVENT_HASH.lock().unwrap().get(&eid) {
        Some(&number) => number,
        _ => 0,
    }
}
